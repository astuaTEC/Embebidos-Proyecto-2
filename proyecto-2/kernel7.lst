
kernel7.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea001c79 	b	f24c <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8074:	e24ddd77 	sub	sp, sp, #7616	; 0x1dc0
    8078:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000009 	bl	80ac <CKernel::CKernel()>
    8084:	e28d0004 	add	r0, sp, #4
    8088:	eb000040 	bl	8190 <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000003 	beq	80a4 <main+0x34>
    8094:	e28d0004 	add	r0, sp, #4
    8098:	eb00009b 	bl	830c <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000000 	beq	80a8 <main+0x38>
    80a4:	eb001c5a 	bl	f214 <halt>
    80a8:	eb001c5e 	bl	f228 <reboot>

000080ac <CKernel::CKernel()>:
    80ac:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    80b0:	e1a04000 	mov	r4, r0
    80b4:	e24dd00c 	sub	sp, sp, #12
    80b8:	e3a01000 	mov	r1, #0
    80bc:	e284600c 	add	r6, r4, #12
    80c0:	eb0000f3 	bl	8494 <CActLED::CActLED(bool)>
    80c4:	e1a00006 	mov	r0, r6
    80c8:	e3a05000 	mov	r5, #0
    80cc:	eb0006af 	bl	9b90 <CKernelOptions::CKernelOptions()>
    80d0:	e2840e89 	add	r0, r4, #2192	; 0x890
    80d4:	e2800004 	add	r0, r0, #4
    80d8:	eb00016b 	bl	868c <CDeviceNameService::CDeviceNameService()>
    80dc:	e1a00006 	mov	r0, r6
    80e0:	eb0005ff 	bl	98e4 <CKernelOptions::GetWidth() const>
    80e4:	e1a07000 	mov	r7, r0
    80e8:	e1a00006 	mov	r0, r6
    80ec:	eb0005fe 	bl	98ec <CKernelOptions::GetHeight() const>
    80f0:	e58d5000 	str	r5, [sp]
    80f4:	e1a02000 	mov	r2, r0
    80f8:	e2840e89 	add	r0, r4, #2192	; 0x890
    80fc:	e1a01007 	mov	r1, r7
    8100:	e1a03005 	mov	r3, r5
    8104:	e280000c 	add	r0, r0, #12
    8108:	e2847c1a 	add	r7, r4, #6656	; 0x1a00
    810c:	eb000c7f 	bl	b310 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    8110:	e2840e92 	add	r0, r4, #2336	; 0x920
    8114:	e1a03005 	mov	r3, r5
    8118:	e1a02005 	mov	r2, r5
    811c:	e1a01005 	mov	r1, r5
    8120:	e280000c 	add	r0, r0, #12
    8124:	eb0012ae 	bl	cbe4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8128:	e1a00007 	mov	r0, r7
    812c:	e2877018 	add	r7, r7, #24
    8130:	e2800014 	add	r0, r0, #20
    8134:	eb0024a8 	bl	113dc <CExceptionHandler::CExceptionHandler()>
    8138:	e1a00007 	mov	r0, r7
    813c:	eb0026ee 	bl	11cfc <CInterruptSystem::CInterruptSystem()>
    8140:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8144:	e1a01007 	mov	r1, r7
    8148:	e2800038 	add	r0, r0, #56	; 0x38
    814c:	eb001c7c 	bl	f344 <CTimer::CTimer(CInterruptSystem*)>
    8150:	e1a00006 	mov	r0, r6
    8154:	eb0005e9 	bl	9900 <CKernelOptions::GetLogLevel() const>
    8158:	e1a01000 	mov	r1, r0
    815c:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    8160:	e1a02005 	mov	r2, r5
    8164:	e3a03001 	mov	r3, #1
    8168:	e2800038 	add	r0, r0, #56	; 0x38
    816c:	eb00079a 	bl	9fdc <CLogger::CLogger(unsigned int, CTimer*, bool)>
    8170:	e1a00004 	mov	r0, r4
    8174:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8178:	e3a020c8 	mov	r2, #200	; 0xc8
    817c:	e3a01005 	mov	r1, #5
    8180:	eb000116 	bl	85e0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8184:	e1a00004 	mov	r0, r4
    8188:	e28dd00c 	add	sp, sp, #12
    818c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008190 <CKernel::Initialize()>:
    8190:	e92d4070 	push	{r4, r5, r6, lr}
    8194:	e2805e89 	add	r5, r0, #2192	; 0x890
    8198:	e285500c 	add	r5, r5, #12
    819c:	e24dd008 	sub	sp, sp, #8
    81a0:	e1a04000 	mov	r4, r0
    81a4:	e1a00005 	mov	r0, r5
    81a8:	eb000ff0 	bl	c170 <CScreenDevice::Initialize()>
    81ac:	e3500000 	cmp	r0, #0
    81b0:	1a000002 	bne	81c0 <CKernel::Initialize()+0x30>
    81b4:	e3a00000 	mov	r0, #0
    81b8:	e28dd008 	add	sp, sp, #8
    81bc:	e8bd8070 	pop	{r4, r5, r6, pc}
    81c0:	e3a06000 	mov	r6, #0
    81c4:	e3a01cc2 	mov	r1, #49664	; 0xc200
    81c8:	e3401001 	movt	r1, #1
    81cc:	e2840e92 	add	r0, r4, #2336	; 0x920
    81d0:	e58d6000 	str	r6, [sp]
    81d4:	e3a03001 	mov	r3, #1
    81d8:	e3a02008 	mov	r2, #8
    81dc:	e280000c 	add	r0, r0, #12
    81e0:	eb0012ed 	bl	cd9c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
    81e4:	e1500006 	cmp	r0, r6
    81e8:	0afffff1 	beq	81b4 <CKernel::Initialize()+0x24>
    81ec:	e284000c 	add	r0, r4, #12
    81f0:	eb0005bf 	bl	98f4 <CKernelOptions::GetLogDevice() const>
    81f4:	e1a01000 	mov	r1, r0
    81f8:	e2840e89 	add	r0, r4, #2192	; 0x890
    81fc:	e1a02006 	mov	r2, r6
    8200:	e2800004 	add	r0, r0, #4
    8204:	eb0001ba 	bl	88f4 <CDeviceNameService::GetDevice(char const*, bool)>
    8208:	e1a01000 	mov	r1, r0
    820c:	e2840d73 	add	r0, r4, #7360	; 0x1cc0
    8210:	e1510006 	cmp	r1, r6
    8214:	e2800038 	add	r0, r0, #56	; 0x38
    8218:	01a01005 	moveq	r1, r5
    821c:	eb000991 	bl	a868 <CLogger::Initialize(CDevice*)>
    8220:	e1500006 	cmp	r0, r6
    8224:	0affffe2 	beq	81b4 <CKernel::Initialize()+0x24>
    8228:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    822c:	e2800018 	add	r0, r0, #24
    8230:	eb0026cc 	bl	11d68 <CInterruptSystem::Initialize()>
    8234:	e1500006 	cmp	r0, r6
    8238:	0affffdd 	beq	81b4 <CKernel::Initialize()+0x24>
    823c:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8240:	e2800038 	add	r0, r0, #56	; 0x38
    8244:	e28dd008 	add	sp, sp, #8
    8248:	e8bd4070 	pop	{r4, r5, r6, lr}
    824c:	ea001ef5 	b	fe28 <CTimer::Initialize()>

00008250 <clearBuffer(void*, unsigned int)>:
    8250:	e3510000 	cmp	r1, #0
    8254:	012fff1e 	bxeq	lr
    8258:	e0801001 	add	r1, r0, r1
    825c:	e3a03000 	mov	r3, #0
    8260:	e4c03001 	strb	r3, [r0], #1
    8264:	e1500001 	cmp	r0, r1
    8268:	1afffffc 	bne	8260 <clearBuffer(void*, unsigned int)+0x10>
    826c:	e12fff1e 	bx	lr

00008270 <my_strlen(char const*)>:
    8270:	e1a03000 	mov	r3, r0
    8274:	e1d000d0 	ldrsb	r0, [r0]
    8278:	e3500000 	cmp	r0, #0
    827c:	012fff1e 	bxeq	lr
    8280:	e2631001 	rsb	r1, r3, #1
    8284:	e0830001 	add	r0, r3, r1
    8288:	e1f320d1 	ldrsb	r2, [r3, #1]!
    828c:	e3520000 	cmp	r2, #0
    8290:	1afffffb 	bne	8284 <my_strlen(char const*)+0x14>
    8294:	e12fff1e 	bx	lr

00008298 <CKernel::~CKernel()>:
    8298:	e92d4010 	push	{r4, lr}
    829c:	e1a04000 	mov	r4, r0
    82a0:	e2800d73 	add	r0, r0, #7360	; 0x1cc0
    82a4:	e2800038 	add	r0, r0, #56	; 0x38
    82a8:	eb000763 	bl	a03c <CLogger::~CLogger()>
    82ac:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    82b0:	e2800038 	add	r0, r0, #56	; 0x38
    82b4:	eb001c44 	bl	f3cc <CTimer::~CTimer()>
    82b8:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    82bc:	e2800018 	add	r0, r0, #24
    82c0:	eb002698 	bl	11d28 <CInterruptSystem::~CInterruptSystem()>
    82c4:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    82c8:	e2800014 	add	r0, r0, #20
    82cc:	eb002468 	bl	11474 <CExceptionHandler::~CExceptionHandler()>
    82d0:	e2840e92 	add	r0, r4, #2336	; 0x920
    82d4:	e280000c 	add	r0, r0, #12
    82d8:	eb0015bd 	bl	d9d4 <CSerialDevice::~CSerialDevice()>
    82dc:	e2840e89 	add	r0, r4, #2192	; 0x890
    82e0:	e280000c 	add	r0, r0, #12
    82e4:	eb000b97 	bl	b148 <CScreenDevice::~CScreenDevice()>
    82e8:	e2840e89 	add	r0, r4, #2192	; 0x890
    82ec:	e2800004 	add	r0, r0, #4
    82f0:	eb0000f6 	bl	86d0 <CDeviceNameService::~CDeviceNameService()>
    82f4:	e284000c 	add	r0, r4, #12
    82f8:	eb000574 	bl	98d0 <CKernelOptions::~CKernelOptions()>
    82fc:	e1a00004 	mov	r0, r4
    8300:	eb000099 	bl	856c <CActLED::~CActLED()>
    8304:	e1a00004 	mov	r0, r4
    8308:	e8bd8010 	pop	{r4, pc}

0000830c <CKernel::Run()>:
    830c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8310:	e3043954 	movw	r3, #18772	; 0x4954
    8314:	e3403001 	movt	r3, #1
    8318:	e1a04000 	mov	r4, r0
    831c:	e30419a4 	movw	r1, #18852	; 0x49a4
    8320:	e2800d73 	add	r0, r0, #7360	; 0x1cc0
    8324:	e3401001 	movt	r1, #1
    8328:	e3a02003 	mov	r2, #3
    832c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    8330:	e2800038 	add	r0, r0, #56	; 0x38
    8334:	eb00093f 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8338:	e59f2148 	ldr	r2, [pc, #328]	; 8488 <CKernel::Run()+0x17c>
    833c:	e3a03000 	mov	r3, #0
    8340:	e1a01003 	mov	r1, r3
    8344:	e3a0305b 	mov	r3, #91	; 0x5b
    8348:	ea000000 	b	8350 <CKernel::Run()+0x44>
    834c:	e1f230d1 	ldrsb	r3, [r2, #1]!
    8350:	e3530000 	cmp	r3, #0
    8354:	e2811001 	add	r1, r1, #1
    8358:	1afffffb 	bne	834c <CKernel::Run()+0x40>
    835c:	e59f2128 	ldr	r2, [pc, #296]	; 848c <CKernel::Run()+0x180>
    8360:	e3a0705b 	mov	r7, #91	; 0x5b
    8364:	e58d1004 	str	r1, [sp, #4]
    8368:	ea000000 	b	8370 <CKernel::Run()+0x64>
    836c:	e1f270d1 	ldrsb	r7, [r2, #1]!
    8370:	e3570000 	cmp	r7, #0
    8374:	e2833001 	add	r3, r3, #1
    8378:	1afffffb 	bne	836c <CKernel::Run()+0x60>
    837c:	e58d3000 	str	r3, [sp]
    8380:	e3a0306f 	mov	r3, #111	; 0x6f
    8384:	e59f2104 	ldr	r2, [pc, #260]	; 8490 <CKernel::Run()+0x184>
    8388:	ea000000 	b	8390 <CKernel::Run()+0x84>
    838c:	e1f230d1 	ldrsb	r3, [r2, #1]!
    8390:	e3530000 	cmp	r3, #0
    8394:	e2877001 	add	r7, r7, #1
    8398:	1afffffb 	bne	838c <CKernel::Run()+0x80>
    839c:	e2846e92 	add	r6, r4, #2336	; 0x920
    83a0:	e304a984 	movw	sl, #18820	; 0x4984
    83a4:	e340a001 	movt	sl, #1
    83a8:	e2844e89 	add	r4, r4, #2192	; 0x890
    83ac:	e304999c 	movw	r9, #18844	; 0x499c
    83b0:	e30489a0 	movw	r8, #18848	; 0x49a0
    83b4:	e3409001 	movt	r9, #1
    83b8:	e286600c 	add	r6, r6, #12
    83bc:	e3408001 	movt	r8, #1
    83c0:	e284400c 	add	r4, r4, #12
    83c4:	e3a05001 	mov	r5, #1
    83c8:	e28d2008 	add	r2, sp, #8
    83cc:	e3a0b000 	mov	fp, #0
    83d0:	e4c2b001 	strb	fp, [r2], #1
    83d4:	e28d3048 	add	r3, sp, #72	; 0x48
    83d8:	e1520003 	cmp	r2, r3
    83dc:	1afffffb 	bne	83d0 <CKernel::Run()+0xc4>
    83e0:	e3a0203f 	mov	r2, #63	; 0x3f
    83e4:	e28d1008 	add	r1, sp, #8
    83e8:	e1a00006 	mov	r0, r6
    83ec:	eb001198 	bl	ca54 <CSerialDevice::Read(void*, unsigned int)>
    83f0:	e3500000 	cmp	r0, #0
    83f4:	0a000015 	beq	8450 <CKernel::Run()+0x144>
    83f8:	e2803048 	add	r3, r0, #72	; 0x48
    83fc:	e3550000 	cmp	r5, #0
    8400:	e08d0003 	add	r0, sp, r3
    8404:	e540b040 	strb	fp, [r0, #-64]	; 0xffffffc0
    8408:	0a000013 	beq	845c <CKernel::Run()+0x150>
    840c:	e1a02007 	mov	r2, r7
    8410:	e1a0100a 	mov	r1, sl
    8414:	e1a00004 	mov	r0, r4
    8418:	e3a05000 	mov	r5, #0
    841c:	eb001127 	bl	c8c0 <CScreenDevice::Write(void const*, unsigned int)>
    8420:	e3a02040 	mov	r2, #64	; 0x40
    8424:	e28d1008 	add	r1, sp, #8
    8428:	e1a00004 	mov	r0, r4
    842c:	eb001123 	bl	c8c0 <CScreenDevice::Write(void const*, unsigned int)>
    8430:	e3a02002 	mov	r2, #2
    8434:	e1a01009 	mov	r1, r9
    8438:	e1a00004 	mov	r0, r4
    843c:	eb00111f 	bl	c8c0 <CScreenDevice::Write(void const*, unsigned int)>
    8440:	e3a02001 	mov	r2, #1
    8444:	e1a01008 	mov	r1, r8
    8448:	e1a00004 	mov	r0, r4
    844c:	eb00111b 	bl	c8c0 <CScreenDevice::Write(void const*, unsigned int)>
    8450:	e3a00f7d 	mov	r0, #500	; 0x1f4
    8454:	eb001ed6 	bl	ffb4 <CTimer::SimpleMsDelay(unsigned int)>
    8458:	eaffffda 	b	83c8 <CKernel::Run()+0xbc>
    845c:	e59d2004 	ldr	r2, [sp, #4]
    8460:	e3041978 	movw	r1, #18808	; 0x4978
    8464:	e3401001 	movt	r1, #1
    8468:	e1a00004 	mov	r0, r4
    846c:	eb001113 	bl	c8c0 <CScreenDevice::Write(void const*, unsigned int)>
    8470:	e59d2000 	ldr	r2, [sp]
    8474:	e3041980 	movw	r1, #18816	; 0x4980
    8478:	e3401001 	movt	r1, #1
    847c:	e1a00004 	mov	r0, r4
    8480:	eb00110e 	bl	c8c0 <CScreenDevice::Write(void const*, unsigned int)>
    8484:	eaffffe0 	b	840c <CKernel::Run()+0x100>
    8488:	00014979 	.word	0x00014979
    848c:	00014981 	.word	0x00014981
    8490:	00014985 	.word	0x00014985

00008494 <CActLED::CActLED(bool)>:
    8494:	e3073178 	movw	r3, #29048	; 0x7178
    8498:	e3403001 	movt	r3, #1
    849c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    84a0:	e1a06001 	mov	r6, r1
    84a4:	e5830000 	str	r0, [r3]
    84a8:	e3a03000 	mov	r3, #0
    84ac:	e5803000 	str	r3, [r0]
    84b0:	e1a05000 	mov	r5, r0
    84b4:	e5803004 	str	r3, [r0, #4]
    84b8:	eb000b17 	bl	b11c <CMachineInfo::Get()>
    84bc:	eb000a2c 	bl	ad74 <CMachineInfo::GetActLEDInfo() const>
    84c0:	e2107080 	ands	r7, r0, #128	; 0x80
    84c4:	e1a04000 	mov	r4, r0
    84c8:	0a000015 	beq	8524 <CActLED::CActLED(bool)+0x90>
    84cc:	e3a00014 	mov	r0, #20
    84d0:	eb00223f 	bl	10dd4 <operator new(unsigned int)>
    84d4:	e1a02006 	mov	r2, r6
    84d8:	e204103f 	and	r1, r4, #63	; 0x3f
    84dc:	e1a07000 	mov	r7, r0
    84e0:	eb00219a 	bl	10b50 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    84e4:	e5956000 	ldr	r6, [r5]
    84e8:	e2144040 	ands	r4, r4, #64	; 0x40
    84ec:	e5857004 	str	r7, [r5, #4]
    84f0:	03a03001 	moveq	r3, #1
    84f4:	13a03000 	movne	r3, #0
    84f8:	e3560000 	cmp	r6, #0
    84fc:	e5c53008 	strb	r3, [r5, #8]
    8500:	1a000013 	bne	8554 <CActLED::CActLED(bool)+0xc0>
    8504:	e3570000 	cmp	r7, #0
    8508:	0a000015 	beq	8564 <CActLED::CActLED(bool)+0xd0>
    850c:	e2541000 	subs	r1, r4, #0
    8510:	e1a00007 	mov	r0, r7
    8514:	13a01001 	movne	r1, #1
    8518:	eb00213e 	bl	10a18 <CVirtualGPIOPin::Write(unsigned int)>
    851c:	e1a00005 	mov	r0, r5
    8520:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8524:	e3a00028 	mov	r0, #40	; 0x28
    8528:	eb002229 	bl	10dd4 <operator new(unsigned int)>
    852c:	e1a03007 	mov	r3, r7
    8530:	e204103f 	and	r1, r4, #63	; 0x3f
    8534:	e3a02001 	mov	r2, #1
    8538:	e1a06000 	mov	r6, r0
    853c:	eb000473 	bl	9710 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8540:	e5856000 	str	r6, [r5]
    8544:	e2144040 	ands	r4, r4, #64	; 0x40
    8548:	03a03001 	moveq	r3, #1
    854c:	13a03000 	movne	r3, #0
    8550:	e5c53008 	strb	r3, [r5, #8]
    8554:	e2541000 	subs	r1, r4, #0
    8558:	e1a00006 	mov	r0, r6
    855c:	13a01001 	movne	r1, #1
    8560:	eb0001f6 	bl	8d40 <CGPIOPin::Write(unsigned int)>
    8564:	e1a00005 	mov	r0, r5
    8568:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000856c <CActLED::~CActLED()>:
    856c:	e3073178 	movw	r3, #29048	; 0x7178
    8570:	e3a02000 	mov	r2, #0
    8574:	e3403001 	movt	r3, #1
    8578:	e5832000 	str	r2, [r3]
    857c:	e12fff1e 	bx	lr

00008580 <CActLED::On()>:
    8580:	e1a03000 	mov	r3, r0
    8584:	e5900000 	ldr	r0, [r0]
    8588:	e3500000 	cmp	r0, #0
    858c:	0a000001 	beq	8598 <CActLED::On()+0x18>
    8590:	e5d31008 	ldrb	r1, [r3, #8]
    8594:	ea0001e9 	b	8d40 <CGPIOPin::Write(unsigned int)>
    8598:	e5930004 	ldr	r0, [r3, #4]
    859c:	e3500000 	cmp	r0, #0
    85a0:	012fff1e 	bxeq	lr
    85a4:	e5d31008 	ldrb	r1, [r3, #8]
    85a8:	ea00211a 	b	10a18 <CVirtualGPIOPin::Write(unsigned int)>

000085ac <CActLED::Off()>:
    85ac:	e1a03000 	mov	r3, r0
    85b0:	e5900000 	ldr	r0, [r0]
    85b4:	e3500000 	cmp	r0, #0
    85b8:	0a000002 	beq	85c8 <CActLED::Off()+0x1c>
    85bc:	e5d31008 	ldrb	r1, [r3, #8]
    85c0:	e2211001 	eor	r1, r1, #1
    85c4:	ea0001dd 	b	8d40 <CGPIOPin::Write(unsigned int)>
    85c8:	e5930004 	ldr	r0, [r3, #4]
    85cc:	e3500000 	cmp	r0, #0
    85d0:	012fff1e 	bxeq	lr
    85d4:	e5d31008 	ldrb	r1, [r3, #8]
    85d8:	e2211001 	eor	r1, r1, #1
    85dc:	ea00210d 	b	10a18 <CVirtualGPIOPin::Write(unsigned int)>

000085e0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    85e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    85e4:	e2516000 	subs	r6, r1, #0
    85e8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    85ec:	e1a04000 	mov	r4, r0
    85f0:	e1a07002 	mov	r7, r2
    85f4:	e1a08003 	mov	r8, r3
    85f8:	e3a05001 	mov	r5, #1
    85fc:	ea00000e 	b	863c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x5c>
    8600:	e5d41008 	ldrb	r1, [r4, #8]
    8604:	eb0001cd 	bl	8d40 <CGPIOPin::Write(unsigned int)>
    8608:	e1a00007 	mov	r0, r7
    860c:	eb001e68 	bl	ffb4 <CTimer::SimpleMsDelay(unsigned int)>
    8610:	e5940000 	ldr	r0, [r4]
    8614:	e3500000 	cmp	r0, #0
    8618:	0a000010 	beq	8660 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x80>
    861c:	e5d41008 	ldrb	r1, [r4, #8]
    8620:	e2211001 	eor	r1, r1, #1
    8624:	eb0001c5 	bl	8d40 <CGPIOPin::Write(unsigned int)>
    8628:	e1a00008 	mov	r0, r8
    862c:	e2855001 	add	r5, r5, #1
    8630:	eb001e5f 	bl	ffb4 <CTimer::SimpleMsDelay(unsigned int)>
    8634:	e1560005 	cmp	r6, r5
    8638:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    863c:	e5940000 	ldr	r0, [r4]
    8640:	e3500000 	cmp	r0, #0
    8644:	1affffed 	bne	8600 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    8648:	e5940004 	ldr	r0, [r4, #4]
    864c:	e3500000 	cmp	r0, #0
    8650:	0affffec 	beq	8608 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    8654:	e5d41008 	ldrb	r1, [r4, #8]
    8658:	eb0020ee 	bl	10a18 <CVirtualGPIOPin::Write(unsigned int)>
    865c:	eaffffe9 	b	8608 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    8660:	e5940004 	ldr	r0, [r4, #4]
    8664:	e3500000 	cmp	r0, #0
    8668:	0affffee 	beq	8628 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>
    866c:	e5d41008 	ldrb	r1, [r4, #8]
    8670:	e2211001 	eor	r1, r1, #1
    8674:	eb0020e7 	bl	10a18 <CVirtualGPIOPin::Write(unsigned int)>
    8678:	eaffffea 	b	8628 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>

0000867c <CActLED::Get()>:
    867c:	e3073178 	movw	r3, #29048	; 0x7178
    8680:	e3403001 	movt	r3, #1
    8684:	e5930000 	ldr	r0, [r3]
    8688:	e12fff1e 	bx	lr

0000868c <CDeviceNameService::CDeviceNameService()>:
    868c:	e307217c 	movw	r2, #29052	; 0x717c
    8690:	e3a01000 	mov	r1, #0
    8694:	e3402001 	movt	r2, #1
    8698:	e5801000 	str	r1, [r0]
    869c:	e592c000 	ldr	ip, [r2]
    86a0:	e5801004 	str	r1, [r0, #4]
    86a4:	e15c0001 	cmp	ip, r1
    86a8:	1a000001 	bne	86b4 <CDeviceNameService::CDeviceNameService()+0x28>
    86ac:	e5820000 	str	r0, [r2]
    86b0:	e12fff1e 	bx	lr
    86b4:	e30419ac 	movw	r1, #18860	; 0x49ac
    86b8:	e30409c4 	movw	r0, #18884	; 0x49c4
    86bc:	e3401001 	movt	r1, #1
    86c0:	e3a0201f 	mov	r2, #31
    86c4:	e3400001 	movt	r0, #1
    86c8:	e92d4010 	push	{r4, lr}
    86cc:	eb00273a 	bl	123bc <assertion_failed>

000086d0 <CDeviceNameService::~CDeviceNameService()>:
    86d0:	e92d4070 	push	{r4, r5, r6, lr}
    86d4:	e1a05000 	mov	r5, r0
    86d8:	e5904000 	ldr	r4, [r0]
    86dc:	e3540000 	cmp	r4, #0
    86e0:	0a00000b 	beq	8714 <CDeviceNameService::~CDeviceNameService()+0x44>
    86e4:	e1a03004 	mov	r3, r4
    86e8:	e5944000 	ldr	r4, [r4]
    86ec:	e5930004 	ldr	r0, [r3, #4]
    86f0:	e3500000 	cmp	r0, #0
    86f4:	0a000000 	beq	86fc <CDeviceNameService::~CDeviceNameService()+0x2c>
    86f8:	eb0021c7 	bl	10e1c <operator delete[](void*)>
    86fc:	e5950000 	ldr	r0, [r5]
    8700:	e3a01010 	mov	r1, #16
    8704:	eb0021ca 	bl	10e34 <operator delete(void*, unsigned int)>
    8708:	e5854000 	str	r4, [r5]
    870c:	e3540000 	cmp	r4, #0
    8710:	1afffff3 	bne	86e4 <CDeviceNameService::~CDeviceNameService()+0x14>
    8714:	e307317c 	movw	r3, #29052	; 0x717c
    8718:	e3a02000 	mov	r2, #0
    871c:	e3403001 	movt	r3, #1
    8720:	e1a00005 	mov	r0, r5
    8724:	e5832000 	str	r2, [r3]
    8728:	e8bd8070 	pop	{r4, r5, r6, pc}

0000872c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    872c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8730:	e1a05000 	mov	r5, r0
    8734:	e5900004 	ldr	r0, [r0, #4]
    8738:	e1a06001 	mov	r6, r1
    873c:	e1a07002 	mov	r7, r2
    8740:	e1a08003 	mov	r8, r3
    8744:	e3500000 	cmp	r0, #0
    8748:	1a000016 	bne	87a8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x7c>
    874c:	e3a00010 	mov	r0, #16
    8750:	eb00219f 	bl	10dd4 <operator new(unsigned int)>
    8754:	e3560000 	cmp	r6, #0
    8758:	e1a04000 	mov	r4, r0
    875c:	0a000013 	beq	87b0 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x84>
    8760:	e1a00006 	mov	r0, r6
    8764:	eb001e82 	bl	10174 <strlen>
    8768:	e2800001 	add	r0, r0, #1
    876c:	eb00219e 	bl	10dec <operator new[](unsigned int)>
    8770:	e5840004 	str	r0, [r4, #4]
    8774:	e1a01006 	mov	r1, r6
    8778:	eb001f22 	bl	10408 <strcpy>
    877c:	e3570000 	cmp	r7, #0
    8780:	0a000010 	beq	87c8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    8784:	e1c520d0 	ldrd	r2, [r5]
    8788:	e5847008 	str	r7, [r4, #8]
    878c:	e5854000 	str	r4, [r5]
    8790:	e3530000 	cmp	r3, #0
    8794:	e5842000 	str	r2, [r4]
    8798:	e5c4800c 	strb	r8, [r4, #12]
    879c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    87a0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    87a4:	ea002537 	b	11c88 <LeaveCritical>
    87a8:	eb00250b 	bl	11bdc <EnterCritical>
    87ac:	eaffffe6 	b	874c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    87b0:	e30419ac 	movw	r1, #18860	; 0x49ac
    87b4:	e30409d0 	movw	r0, #18896	; 0x49d0
    87b8:	e3401001 	movt	r1, #1
    87bc:	e3a0203b 	mov	r2, #59	; 0x3b
    87c0:	e3400001 	movt	r0, #1
    87c4:	eb0026fc 	bl	123bc <assertion_failed>
    87c8:	e30419ac 	movw	r1, #18860	; 0x49ac
    87cc:	e30409dc 	movw	r0, #18908	; 0x49dc
    87d0:	e3401001 	movt	r1, #1
    87d4:	e3a02040 	mov	r2, #64	; 0x40
    87d8:	e3400001 	movt	r0, #1
    87dc:	eb0026f6 	bl	123bc <assertion_failed>

000087e0 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    87e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87e4:	e2515000 	subs	r5, r1, #0
    87e8:	0a00003b 	beq	88dc <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
    87ec:	e1a08000 	mov	r8, r0
    87f0:	e1a07002 	mov	r7, r2
    87f4:	e5900004 	ldr	r0, [r0, #4]
    87f8:	e3500000 	cmp	r0, #0
    87fc:	1a000019 	bne	8868 <CDeviceNameService::RemoveDevice(char const*, bool)+0x88>
    8800:	e5984000 	ldr	r4, [r8]
    8804:	e3540000 	cmp	r4, #0
    8808:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    880c:	e3a06000 	mov	r6, #0
    8810:	ea00000b 	b	8844 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
    8814:	e1a00005 	mov	r0, r5
    8818:	eb001e5f 	bl	1019c <strcmp>
    881c:	e3500000 	cmp	r0, #0
    8820:	1a000002 	bne	8830 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
    8824:	e5d4300c 	ldrb	r3, [r4, #12]
    8828:	e1530007 	cmp	r3, r7
    882c:	0a000016 	beq	888c <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
    8830:	e5943000 	ldr	r3, [r4]
    8834:	e1a06004 	mov	r6, r4
    8838:	e3530000 	cmp	r3, #0
    883c:	0a00000d 	beq	8878 <CDeviceNameService::RemoveDevice(char const*, bool)+0x98>
    8840:	e1a04003 	mov	r4, r3
    8844:	e5941004 	ldr	r1, [r4, #4]
    8848:	e3510000 	cmp	r1, #0
    884c:	1afffff0 	bne	8814 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
    8850:	e30419ac 	movw	r1, #18860	; 0x49ac
    8854:	e30409ec 	movw	r0, #18924	; 0x49ec
    8858:	e3401001 	movt	r1, #1
    885c:	e3a0205e 	mov	r2, #94	; 0x5e
    8860:	e3400001 	movt	r0, #1
    8864:	eb0026d4 	bl	123bc <assertion_failed>
    8868:	eb0024db 	bl	11bdc <EnterCritical>
    886c:	e5984000 	ldr	r4, [r8]
    8870:	e3540000 	cmp	r4, #0
    8874:	1affffe4 	bne	880c <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    8878:	e5983004 	ldr	r3, [r8, #4]
    887c:	e3530000 	cmp	r3, #0
    8880:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8884:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8888:	ea0024fe 	b	11c88 <LeaveCritical>
    888c:	e3560000 	cmp	r6, #0
    8890:	15943000 	ldrne	r3, [r4]
    8894:	15863000 	strne	r3, [r6]
    8898:	0a00000c 	beq	88d0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
    889c:	e5983004 	ldr	r3, [r8, #4]
    88a0:	e3530000 	cmp	r3, #0
    88a4:	1a000007 	bne	88c8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
    88a8:	e5940004 	ldr	r0, [r4, #4]
    88ac:	e3500000 	cmp	r0, #0
    88b0:	0a000000 	beq	88b8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd8>
    88b4:	eb002158 	bl	10e1c <operator delete[](void*)>
    88b8:	e1a00004 	mov	r0, r4
    88bc:	e3a01010 	mov	r1, #16
    88c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    88c4:	ea00215a 	b	10e34 <operator delete(void*, unsigned int)>
    88c8:	eb0024ee 	bl	11c88 <LeaveCritical>
    88cc:	eafffff5 	b	88a8 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc8>
    88d0:	e5943000 	ldr	r3, [r4]
    88d4:	e5883000 	str	r3, [r8]
    88d8:	eaffffef 	b	889c <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
    88dc:	e30419ac 	movw	r1, #18860	; 0x49ac
    88e0:	e30409d0 	movw	r0, #18896	; 0x49d0
    88e4:	e3401001 	movt	r1, #1
    88e8:	e3a02056 	mov	r2, #86	; 0x56
    88ec:	e3400001 	movt	r0, #1
    88f0:	eb0026b1 	bl	123bc <assertion_failed>

000088f4 <CDeviceNameService::GetDevice(char const*, bool)>:
    88f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    88f8:	e2515000 	subs	r5, r1, #0
    88fc:	0a000025 	beq	8998 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    8900:	e1a07000 	mov	r7, r0
    8904:	e1a06002 	mov	r6, r2
    8908:	e5900004 	ldr	r0, [r0, #4]
    890c:	e3500000 	cmp	r0, #0
    8910:	1a000016 	bne	8970 <CDeviceNameService::GetDevice(char const*, bool)+0x7c>
    8914:	e5974000 	ldr	r4, [r7]
    8918:	e3540000 	cmp	r4, #0
    891c:	1a00000a 	bne	894c <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    8920:	ea000019 	b	898c <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    8924:	e1a00005 	mov	r0, r5
    8928:	eb001e1b 	bl	1019c <strcmp>
    892c:	e3500000 	cmp	r0, #0
    8930:	1a000002 	bne	8940 <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
    8934:	e5d4300c 	ldrb	r3, [r4, #12]
    8938:	e1530006 	cmp	r3, r6
    893c:	0a00001b 	beq	89b0 <CDeviceNameService::GetDevice(char const*, bool)+0xbc>
    8940:	e5944000 	ldr	r4, [r4]
    8944:	e3540000 	cmp	r4, #0
    8948:	0a00000c 	beq	8980 <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
    894c:	e5941004 	ldr	r1, [r4, #4]
    8950:	e3510000 	cmp	r1, #0
    8954:	1afffff2 	bne	8924 <CDeviceNameService::GetDevice(char const*, bool)+0x30>
    8958:	e30419ac 	movw	r1, #18860	; 0x49ac
    895c:	e30409ec 	movw	r0, #18924	; 0x49ec
    8960:	e3401001 	movt	r1, #1
    8964:	e3a02092 	mov	r2, #146	; 0x92
    8968:	e3400001 	movt	r0, #1
    896c:	eb002692 	bl	123bc <assertion_failed>
    8970:	eb002499 	bl	11bdc <EnterCritical>
    8974:	e5974000 	ldr	r4, [r7]
    8978:	e3540000 	cmp	r4, #0
    897c:	1afffff2 	bne	894c <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    8980:	e5973004 	ldr	r3, [r7, #4]
    8984:	e3530000 	cmp	r3, #0
    8988:	1a000014 	bne	89e0 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    898c:	e3a04000 	mov	r4, #0
    8990:	e1a00004 	mov	r0, r4
    8994:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8998:	e30419ac 	movw	r1, #18860	; 0x49ac
    899c:	e30409d0 	movw	r0, #18896	; 0x49d0
    89a0:	e3401001 	movt	r1, #1
    89a4:	e3a0208b 	mov	r2, #139	; 0x8b
    89a8:	e3400001 	movt	r0, #1
    89ac:	eb002682 	bl	123bc <assertion_failed>
    89b0:	e5973004 	ldr	r3, [r7, #4]
    89b4:	e5944008 	ldr	r4, [r4, #8]
    89b8:	e3530000 	cmp	r3, #0
    89bc:	1a00000a 	bne	89ec <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    89c0:	e3540000 	cmp	r4, #0
    89c4:	1afffff1 	bne	8990 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    89c8:	e30419ac 	movw	r1, #18860	; 0x49ac
    89cc:	e3040a00 	movw	r0, #18944	; 0x4a00
    89d0:	e3401001 	movt	r1, #1
    89d4:	e3a0209a 	mov	r2, #154	; 0x9a
    89d8:	e3400001 	movt	r0, #1
    89dc:	eb002676 	bl	123bc <assertion_failed>
    89e0:	e3a04000 	mov	r4, #0
    89e4:	eb0024a7 	bl	11c88 <LeaveCritical>
    89e8:	eaffffe8 	b	8990 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    89ec:	eb0024a5 	bl	11c88 <LeaveCritical>
    89f0:	eafffff2 	b	89c0 <CDeviceNameService::GetDevice(char const*, bool)+0xcc>

000089f4 <CDeviceNameService::Get()>:
    89f4:	e307317c 	movw	r3, #29052	; 0x717c
    89f8:	e3403001 	movt	r3, #1
    89fc:	e5930000 	ldr	r0, [r3]
    8a00:	e3500000 	cmp	r0, #0
    8a04:	112fff1e 	bxne	lr
    8a08:	e30419ac 	movw	r1, #18860	; 0x49ac
    8a0c:	e3040a10 	movw	r0, #18960	; 0x4a10
    8a10:	e3401001 	movt	r1, #1
    8a14:	e3a020cc 	mov	r2, #204	; 0xcc
    8a18:	e3400001 	movt	r0, #1
    8a1c:	e92d4010 	push	{r4, lr}
    8a20:	eb002665 	bl	123bc <assertion_failed>

00008a24 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    8a24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8a28:	e24dd010 	sub	sp, sp, #16
    8a2c:	e1a04000 	mov	r4, r0
    8a30:	e1a0000d 	mov	r0, sp
    8a34:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
    8a38:	e1a06001 	mov	r6, r1
    8a3c:	e1a07002 	mov	r7, r2
    8a40:	e1a05003 	mov	r5, r3
    8a44:	eb001446 	bl	db64 <CString::CString()>
    8a48:	e3041a1c 	movw	r1, #18972	; 0x4a1c
    8a4c:	e1a03007 	mov	r3, r7
    8a50:	e3401001 	movt	r1, #1
    8a54:	e1a02006 	mov	r2, r6
    8a58:	e1a0000d 	mov	r0, sp
    8a5c:	eb0019dc 	bl	f1d4 <CString::Format(char const*, ...)>
    8a60:	e1a0000d 	mov	r0, sp
    8a64:	eb001475 	bl	dc40 <CString::operator char const*() const>
    8a68:	e1a01000 	mov	r1, r0
    8a6c:	e1a03008 	mov	r3, r8
    8a70:	e1a02005 	mov	r2, r5
    8a74:	e1a00004 	mov	r0, r4
    8a78:	ebffff2b 	bl	872c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8a7c:	e1a0000d 	mov	r0, sp
    8a80:	eb001404 	bl	da98 <CString::~CString()>
    8a84:	e28dd010 	add	sp, sp, #16
    8a88:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008a8c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    8a8c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8a90:	e24dd014 	sub	sp, sp, #20
    8a94:	e1a04000 	mov	r4, r0
    8a98:	e1a0000d 	mov	r0, sp
    8a9c:	e1a06001 	mov	r6, r1
    8aa0:	e1a07002 	mov	r7, r2
    8aa4:	e1a05003 	mov	r5, r3
    8aa8:	eb00142d 	bl	db64 <CString::CString()>
    8aac:	e3041a1c 	movw	r1, #18972	; 0x4a1c
    8ab0:	e1a03007 	mov	r3, r7
    8ab4:	e3401001 	movt	r1, #1
    8ab8:	e1a02006 	mov	r2, r6
    8abc:	e1a0000d 	mov	r0, sp
    8ac0:	eb0019c3 	bl	f1d4 <CString::Format(char const*, ...)>
    8ac4:	e1a0000d 	mov	r0, sp
    8ac8:	eb00145c 	bl	dc40 <CString::operator char const*() const>
    8acc:	e1a01000 	mov	r1, r0
    8ad0:	e1a02005 	mov	r2, r5
    8ad4:	e1a00004 	mov	r0, r4
    8ad8:	ebffff40 	bl	87e0 <CDeviceNameService::RemoveDevice(char const*, bool)>
    8adc:	e1a0000d 	mov	r0, sp
    8ae0:	eb0013ec 	bl	da98 <CString::~CString()>
    8ae4:	e28dd014 	add	sp, sp, #20
    8ae8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008aec <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    8aec:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8af0:	e24dd014 	sub	sp, sp, #20
    8af4:	e1a04000 	mov	r4, r0
    8af8:	e1a0000d 	mov	r0, sp
    8afc:	e1a06001 	mov	r6, r1
    8b00:	e1a07002 	mov	r7, r2
    8b04:	e1a05003 	mov	r5, r3
    8b08:	eb001415 	bl	db64 <CString::CString()>
    8b0c:	e3041a1c 	movw	r1, #18972	; 0x4a1c
    8b10:	e1a03007 	mov	r3, r7
    8b14:	e3401001 	movt	r1, #1
    8b18:	e1a02006 	mov	r2, r6
    8b1c:	e1a0000d 	mov	r0, sp
    8b20:	eb0019ab 	bl	f1d4 <CString::Format(char const*, ...)>
    8b24:	e1a0000d 	mov	r0, sp
    8b28:	eb001444 	bl	dc40 <CString::operator char const*() const>
    8b2c:	e1a01000 	mov	r1, r0
    8b30:	e1a02005 	mov	r2, r5
    8b34:	e1a00004 	mov	r0, r4
    8b38:	ebffff6d 	bl	88f4 <CDeviceNameService::GetDevice(char const*, bool)>
    8b3c:	e1a04000 	mov	r4, r0
    8b40:	e1a0000d 	mov	r0, sp
    8b44:	eb0013d3 	bl	da98 <CString::~CString()>
    8b48:	e1a00004 	mov	r0, r4
    8b4c:	e28dd014 	add	sp, sp, #20
    8b50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008b54 <CDeviceNameService::ListDevices(CDevice*)>:
    8b54:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8b58:	e2517000 	subs	r7, r1, #0
    8b5c:	e24dd018 	sub	sp, sp, #24
    8b60:	0a00003a 	beq	8c50 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
    8b64:	e5904000 	ldr	r4, [r0]
    8b68:	e3540000 	cmp	r4, #0
    8b6c:	0a000035 	beq	8c48 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    8b70:	e3049a34 	movw	r9, #18996	; 0x4a34
    8b74:	e3a05000 	mov	r5, #0
    8b78:	e3409001 	movt	r9, #1
    8b7c:	ea00001b 	b	8bf0 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
    8b80:	e5d4200c 	ldrb	r2, [r4, #12]
    8b84:	e2855001 	add	r5, r5, #1
    8b88:	e1a01009 	mov	r1, r9
    8b8c:	e28d0008 	add	r0, sp, #8
    8b90:	e3520000 	cmp	r2, #0
    8b94:	13a02062 	movne	r2, #98	; 0x62
    8b98:	03a02063 	moveq	r2, #99	; 0x63
    8b9c:	e215a003 	ands	sl, r5, #3
    8ba0:	03a0c00a 	moveq	ip, #10
    8ba4:	13a0c020 	movne	ip, #32
    8ba8:	e58dc000 	str	ip, [sp]
    8bac:	eb001988 	bl	f1d4 <CString::Format(char const*, ...)>
    8bb0:	e5973000 	ldr	r3, [r7]
    8bb4:	e28d0008 	add	r0, sp, #8
    8bb8:	e593800c 	ldr	r8, [r3, #12]
    8bbc:	eb00141f 	bl	dc40 <CString::operator char const*() const>
    8bc0:	e1a06000 	mov	r6, r0
    8bc4:	e28d0008 	add	r0, sp, #8
    8bc8:	eb001459 	bl	dd34 <CString::GetLength() const>
    8bcc:	e1a02000 	mov	r2, r0
    8bd0:	e1a01006 	mov	r1, r6
    8bd4:	e1a00007 	mov	r0, r7
    8bd8:	e12fff38 	blx	r8
    8bdc:	e5944000 	ldr	r4, [r4]
    8be0:	e28d0008 	add	r0, sp, #8
    8be4:	eb0013ab 	bl	da98 <CString::~CString()>
    8be8:	e3540000 	cmp	r4, #0
    8bec:	0a00000a 	beq	8c1c <CDeviceNameService::ListDevices(CDevice*)+0xc8>
    8bf0:	e28d0008 	add	r0, sp, #8
    8bf4:	eb0013da 	bl	db64 <CString::CString()>
    8bf8:	e5943004 	ldr	r3, [r4, #4]
    8bfc:	e3530000 	cmp	r3, #0
    8c00:	1affffde 	bne	8b80 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    8c04:	e30419ac 	movw	r1, #18860	; 0x49ac
    8c08:	e30409ec 	movw	r0, #18924	; 0x49ec
    8c0c:	e3401001 	movt	r1, #1
    8c10:	e3a020b9 	mov	r2, #185	; 0xb9
    8c14:	e3400001 	movt	r0, #1
    8c18:	eb0025e7 	bl	123bc <assertion_failed>
    8c1c:	e35a0000 	cmp	sl, #0
    8c20:	0a000008 	beq	8c48 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    8c24:	e5973000 	ldr	r3, [r7]
    8c28:	e30419a0 	movw	r1, #18848	; 0x49a0
    8c2c:	e3401001 	movt	r1, #1
    8c30:	e3a02001 	mov	r2, #1
    8c34:	e593300c 	ldr	r3, [r3, #12]
    8c38:	e1a00007 	mov	r0, r7
    8c3c:	e28dd018 	add	sp, sp, #24
    8c40:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8c44:	e12fff13 	bx	r3
    8c48:	e28dd018 	add	sp, sp, #24
    8c4c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8c50:	e30419ac 	movw	r1, #18860	; 0x49ac
    8c54:	e3040a24 	movw	r0, #18980	; 0x4a24
    8c58:	e3401001 	movt	r1, #1
    8c5c:	e3a020b0 	mov	r2, #176	; 0xb0
    8c60:	e3400001 	movt	r0, #1
    8c64:	eb0025d4 	bl	123bc <assertion_failed>

00008c68 <CGPIOPin::~CGPIOPin()>:
    8c68:	e12fff1e 	bx	lr

00008c6c <CGPIOPin::~CGPIOPin()>:
    8c6c:	e92d4010 	push	{r4, lr}
    8c70:	e3a01028 	mov	r1, #40	; 0x28
    8c74:	e1a04000 	mov	r4, r0
    8c78:	eb00206d 	bl	10e34 <operator delete(void*, unsigned int)>
    8c7c:	e1a00004 	mov	r0, r4
    8c80:	e8bd8010 	pop	{r4, pc}

00008c84 <CGPIOPin::CGPIOPin()>:
    8c84:	e59f202c 	ldr	r2, [pc, #44]	; 8cb8 <CGPIOPin::CGPIOPin()+0x34>
    8c88:	e3a0c036 	mov	ip, #54	; 0x36
    8c8c:	e580c004 	str	ip, [r0, #4]
    8c90:	e3a01000 	mov	r1, #0
    8c94:	e5802000 	str	r2, [r0]
    8c98:	e3a0c00a 	mov	ip, #10
    8c9c:	e5801018 	str	r1, [r0, #24]
    8ca0:	e3a02006 	mov	r2, #6
    8ca4:	e5c0c010 	strb	ip, [r0, #16]
    8ca8:	e580101c 	str	r1, [r0, #28]
    8cac:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    8cb0:	e5c02026 	strb	r2, [r0, #38]	; 0x26
    8cb4:	e12fff1e 	bx	lr
    8cb8:	00014a48 	.word	0x00014a48

00008cbc <CGPIOPin::AssignPin(unsigned int)>:
    8cbc:	e5903004 	ldr	r3, [r0, #4]
    8cc0:	e92d4070 	push	{r4, r5, r6, lr}
    8cc4:	e3530036 	cmp	r3, #54	; 0x36
    8cc8:	1a000017 	bne	8d2c <CGPIOPin::AssignPin(unsigned int)+0x70>
    8ccc:	e5801004 	str	r1, [r0, #4]
    8cd0:	e3510035 	cmp	r1, #53	; 0x35
    8cd4:	e1a05000 	mov	r5, r0
    8cd8:	e1a04001 	mov	r4, r1
    8cdc:	8a000007 	bhi	8d00 <CGPIOPin::AssignPin(unsigned int)+0x44>
    8ce0:	e1a032a4 	lsr	r3, r4, #5
    8ce4:	e3a01001 	mov	r1, #1
    8ce8:	e204401f 	and	r4, r4, #31
    8cec:	e1a03103 	lsl	r3, r3, #2
    8cf0:	e1a04411 	lsl	r4, r1, r4
    8cf4:	e5853008 	str	r3, [r5, #8]
    8cf8:	e585400c 	str	r4, [r5, #12]
    8cfc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8d00:	eb000905 	bl	b11c <CMachineInfo::Get()>
    8d04:	e6ef1074 	uxtb	r1, r4
    8d08:	eb00086e 	bl	aec8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8d0c:	e5850004 	str	r0, [r5, #4]
    8d10:	e3500035 	cmp	r0, #53	; 0x35
    8d14:	e1a04000 	mov	r4, r0
    8d18:	9afffff0 	bls	8ce0 <CGPIOPin::AssignPin(unsigned int)+0x24>
    8d1c:	e59f1018 	ldr	r1, [pc, #24]	; 8d3c <CGPIOPin::AssignPin(unsigned int)+0x80>
    8d20:	e3a02047 	mov	r2, #71	; 0x47
    8d24:	e2810020 	add	r0, r1, #32
    8d28:	eb0025a3 	bl	123bc <assertion_failed>
    8d2c:	e59f1008 	ldr	r1, [pc, #8]	; 8d3c <CGPIOPin::AssignPin(unsigned int)+0x80>
    8d30:	e3a02040 	mov	r2, #64	; 0x40
    8d34:	e281000c 	add	r0, r1, #12
    8d38:	eb00259f 	bl	123bc <assertion_failed>
    8d3c:	00014a50 	.word	0x00014a50

00008d40 <CGPIOPin::Write(unsigned int)>:
    8d40:	e5903004 	ldr	r3, [r0, #4]
    8d44:	e92d4010 	push	{r4, lr}
    8d48:	e3530035 	cmp	r3, #53	; 0x35
    8d4c:	8a00000f 	bhi	8d90 <CGPIOPin::Write(unsigned int)+0x50>
    8d50:	e5d03010 	ldrb	r3, [r0, #16]
    8d54:	e3530003 	cmp	r3, #3
    8d58:	8a000010 	bhi	8da0 <CGPIOPin::Write(unsigned int)+0x60>
    8d5c:	e3510001 	cmp	r1, #1
    8d60:	8a000012 	bhi	8db0 <CGPIOPin::Write(unsigned int)+0x70>
    8d64:	e590c00c 	ldr	ip, [r0, #12]
    8d68:	e3a02028 	mov	r2, #40	; 0x28
    8d6c:	e3432f20 	movt	r2, #16160	; 0x3f20
    8d70:	e3a0301c 	mov	r3, #28
    8d74:	e3433f20 	movt	r3, #16160	; 0x3f20
    8d78:	e3510000 	cmp	r1, #0
    8d7c:	e5801014 	str	r1, [r0, #20]
    8d80:	01a03002 	moveq	r3, r2
    8d84:	e5900008 	ldr	r0, [r0, #8]
    8d88:	e783c000 	str	ip, [r3, r0]
    8d8c:	e8bd8010 	pop	{r4, pc}
    8d90:	e59f1028 	ldr	r1, [pc, #40]	; 8dc0 <CGPIOPin::Write(unsigned int)+0x80>
    8d94:	e3a02091 	mov	r2, #145	; 0x91
    8d98:	e2810020 	add	r0, r1, #32
    8d9c:	eb002586 	bl	123bc <assertion_failed>
    8da0:	e59f1018 	ldr	r1, [pc, #24]	; 8dc0 <CGPIOPin::Write(unsigned int)+0x80>
    8da4:	e3a02094 	mov	r2, #148	; 0x94
    8da8:	e2810034 	add	r0, r1, #52	; 0x34
    8dac:	eb002582 	bl	123bc <assertion_failed>
    8db0:	e59f1008 	ldr	r1, [pc, #8]	; 8dc0 <CGPIOPin::Write(unsigned int)+0x80>
    8db4:	e3a02098 	mov	r2, #152	; 0x98
    8db8:	e2810058 	add	r0, r1, #88	; 0x58
    8dbc:	eb00257e 	bl	123bc <assertion_failed>
    8dc0:	00014a50 	.word	0x00014a50

00008dc4 <CGPIOPin::Read() const>:
    8dc4:	e5903004 	ldr	r3, [r0, #4]
    8dc8:	e92d4010 	push	{r4, lr}
    8dcc:	e3530035 	cmp	r3, #53	; 0x35
    8dd0:	8a00000d 	bhi	8e0c <CGPIOPin::Read() const+0x48>
    8dd4:	e5d03010 	ldrb	r3, [r0, #16]
    8dd8:	e2432002 	sub	r2, r3, #2
    8ddc:	e3530000 	cmp	r3, #0
    8de0:	13520001 	cmpne	r2, #1
    8de4:	8a00000c 	bhi	8e1c <CGPIOPin::Read() const+0x58>
    8de8:	e5901008 	ldr	r1, [r0, #8]
    8dec:	e3a03034 	mov	r3, #52	; 0x34
    8df0:	e3433f20 	movt	r3, #16160	; 0x3f20
    8df4:	e590200c 	ldr	r2, [r0, #12]
    8df8:	e7913003 	ldr	r3, [r1, r3]
    8dfc:	e1130002 	tst	r3, r2
    8e00:	13a00001 	movne	r0, #1
    8e04:	03a00000 	moveq	r0, #0
    8e08:	e8bd8010 	pop	{r4, pc}
    8e0c:	e59f1018 	ldr	r1, [pc, #24]	; 8e2c <CGPIOPin::Read() const+0x68>
    8e10:	e3a020a4 	mov	r2, #164	; 0xa4
    8e14:	e2810020 	add	r0, r1, #32
    8e18:	eb002567 	bl	123bc <assertion_failed>
    8e1c:	e59f1008 	ldr	r1, [pc, #8]	; 8e2c <CGPIOPin::Read() const+0x68>
    8e20:	e3a020a6 	mov	r2, #166	; 0xa6
    8e24:	e2810078 	add	r0, r1, #120	; 0x78
    8e28:	eb002563 	bl	123bc <assertion_failed>
    8e2c:	00014a50 	.word	0x00014a50

00008e30 <CGPIOPin::Invert()>:
    8e30:	e5d03010 	ldrb	r3, [r0, #16]
    8e34:	e92d4010 	push	{r4, lr}
    8e38:	e3530001 	cmp	r3, #1
    8e3c:	1a000011 	bne	8e88 <CGPIOPin::Invert()+0x58>
    8e40:	e5903004 	ldr	r3, [r0, #4]
    8e44:	e5902014 	ldr	r2, [r0, #20]
    8e48:	e3530035 	cmp	r3, #53	; 0x35
    8e4c:	e2221001 	eor	r1, r2, #1
    8e50:	8a000010 	bhi	8e98 <CGPIOPin::Invert()+0x68>
    8e54:	e3510001 	cmp	r1, #1
    8e58:	8a000012 	bhi	8ea8 <CGPIOPin::Invert()+0x78>
    8e5c:	e5801014 	str	r1, [r0, #20]
    8e60:	e3a01028 	mov	r1, #40	; 0x28
    8e64:	e3431f20 	movt	r1, #16160	; 0x3f20
    8e68:	e3a0301c 	mov	r3, #28
    8e6c:	e590c00c 	ldr	ip, [r0, #12]
    8e70:	e3520001 	cmp	r2, #1
    8e74:	e3433f20 	movt	r3, #16160	; 0x3f20
    8e78:	01a03001 	moveq	r3, r1
    8e7c:	e5900008 	ldr	r0, [r0, #8]
    8e80:	e783c000 	str	ip, [r3, r0]
    8e84:	e8bd8010 	pop	{r4, pc}
    8e88:	e59f1028 	ldr	r1, [pc, #40]	; 8eb8 <CGPIOPin::Invert()+0x88>
    8e8c:	e3a020b5 	mov	r2, #181	; 0xb5
    8e90:	e28100d4 	add	r0, r1, #212	; 0xd4
    8e94:	eb002548 	bl	123bc <assertion_failed>
    8e98:	e59f1018 	ldr	r1, [pc, #24]	; 8eb8 <CGPIOPin::Invert()+0x88>
    8e9c:	e3a02091 	mov	r2, #145	; 0x91
    8ea0:	e2810020 	add	r0, r1, #32
    8ea4:	eb002544 	bl	123bc <assertion_failed>
    8ea8:	e59f1008 	ldr	r1, [pc, #8]	; 8eb8 <CGPIOPin::Invert()+0x88>
    8eac:	e3a02098 	mov	r2, #152	; 0x98
    8eb0:	e2810058 	add	r0, r1, #88	; 0x58
    8eb4:	eb002540 	bl	123bc <assertion_failed>
    8eb8:	00014a50 	.word	0x00014a50

00008ebc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
    8ebc:	e1a0c000 	mov	ip, r0
    8ec0:	e5d00010 	ldrb	r0, [r0, #16]
    8ec4:	e92d4010 	push	{r4, lr}
    8ec8:	e240e002 	sub	lr, r0, #2
    8ecc:	e3500000 	cmp	r0, #0
    8ed0:	135e0001 	cmpne	lr, #1
    8ed4:	8a000027 	bhi	8f78 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
    8ed8:	e5dc0025 	ldrb	r0, [ip, #37]	; 0x25
    8edc:	e3500006 	cmp	r0, #6
    8ee0:	1a000010 	bne	8f28 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
    8ee4:	e5dc0026 	ldrb	r0, [ip, #38]	; 0x26
    8ee8:	e3500006 	cmp	r0, #6
    8eec:	1a000011 	bne	8f38 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
    8ef0:	e3510000 	cmp	r1, #0
    8ef4:	0a000013 	beq	8f48 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
    8ef8:	e59c001c 	ldr	r0, [ip, #28]
    8efc:	e3500000 	cmp	r0, #0
    8f00:	1a000014 	bne	8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
    8f04:	e59c0018 	ldr	r0, [ip, #24]
    8f08:	e58c101c 	str	r1, [ip, #28]
    8f0c:	e58c2020 	str	r2, [ip, #32]
    8f10:	e3500000 	cmp	r0, #0
    8f14:	e5cc3024 	strb	r3, [ip, #36]	; 0x24
    8f18:	0a000012 	beq	8f68 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
    8f1c:	e8bd4010 	pop	{r4, lr}
    8f20:	e1a0100c 	mov	r1, ip
    8f24:	ea002af5 	b	13b00 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8f28:	e59f1058 	ldr	r1, [pc, #88]	; 8f88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f2c:	e3a020c0 	mov	r2, #192	; 0xc0
    8f30:	e28100f0 	add	r0, r1, #240	; 0xf0
    8f34:	eb002520 	bl	123bc <assertion_failed>
    8f38:	e59f1048 	ldr	r1, [pc, #72]	; 8f88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f3c:	e3a020c1 	mov	r2, #193	; 0xc1
    8f40:	e2810f45 	add	r0, r1, #276	; 0x114
    8f44:	eb00251c 	bl	123bc <assertion_failed>
    8f48:	e59f1038 	ldr	r1, [pc, #56]	; 8f88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f4c:	e3a020c3 	mov	r2, #195	; 0xc3
    8f50:	e2810f4f 	add	r0, r1, #316	; 0x13c
    8f54:	eb002518 	bl	123bc <assertion_failed>
    8f58:	e59f1028 	ldr	r1, [pc, #40]	; 8f88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f5c:	e3a020c4 	mov	r2, #196	; 0xc4
    8f60:	e2810f53 	add	r0, r1, #332	; 0x14c
    8f64:	eb002514 	bl	123bc <assertion_failed>
    8f68:	e59f1018 	ldr	r1, [pc, #24]	; 8f88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f6c:	e3a020cb 	mov	r2, #203	; 0xcb
    8f70:	e2810f57 	add	r0, r1, #348	; 0x15c
    8f74:	eb002510 	bl	123bc <assertion_failed>
    8f78:	e59f1008 	ldr	r1, [pc, #8]	; 8f88 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f7c:	e3a020bc 	mov	r2, #188	; 0xbc
    8f80:	e2810078 	add	r0, r1, #120	; 0x78
    8f84:	eb00250c 	bl	123bc <assertion_failed>
    8f88:	00014a50 	.word	0x00014a50

00008f8c <CGPIOPin::DisconnectInterrupt()>:
    8f8c:	e5d03010 	ldrb	r3, [r0, #16]
    8f90:	e92d4010 	push	{r4, lr}
    8f94:	e2432002 	sub	r2, r3, #2
    8f98:	e3530000 	cmp	r3, #0
    8f9c:	13520001 	cmpne	r2, #1
    8fa0:	8a000020 	bhi	9028 <CGPIOPin::DisconnectInterrupt()+0x9c>
    8fa4:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    8fa8:	e1a01000 	mov	r1, r0
    8fac:	e3530006 	cmp	r3, #6
    8fb0:	1a00000c 	bne	8fe8 <CGPIOPin::DisconnectInterrupt()+0x5c>
    8fb4:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    8fb8:	e3530006 	cmp	r3, #6
    8fbc:	1a00000d 	bne	8ff8 <CGPIOPin::DisconnectInterrupt()+0x6c>
    8fc0:	e590301c 	ldr	r3, [r0, #28]
    8fc4:	e3530000 	cmp	r3, #0
    8fc8:	0a00000e 	beq	9008 <CGPIOPin::DisconnectInterrupt()+0x7c>
    8fcc:	e5900018 	ldr	r0, [r0, #24]
    8fd0:	e3a03000 	mov	r3, #0
    8fd4:	e581301c 	str	r3, [r1, #28]
    8fd8:	e1500003 	cmp	r0, r3
    8fdc:	0a00000d 	beq	9018 <CGPIOPin::DisconnectInterrupt()+0x8c>
    8fe0:	e8bd4010 	pop	{r4, lr}
    8fe4:	ea002aec 	b	13b9c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8fe8:	e59f1048 	ldr	r1, [pc, #72]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xac>
    8fec:	e3a020d5 	mov	r2, #213	; 0xd5
    8ff0:	e28100f0 	add	r0, r1, #240	; 0xf0
    8ff4:	eb0024f0 	bl	123bc <assertion_failed>
    8ff8:	e59f1038 	ldr	r1, [pc, #56]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xac>
    8ffc:	e3a020d6 	mov	r2, #214	; 0xd6
    9000:	e2810f45 	add	r0, r1, #276	; 0x114
    9004:	eb0024ec 	bl	123bc <assertion_failed>
    9008:	e59f1028 	ldr	r1, [pc, #40]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xac>
    900c:	e3a020d8 	mov	r2, #216	; 0xd8
    9010:	e2810f5b 	add	r0, r1, #364	; 0x16c
    9014:	eb0024e8 	bl	123bc <assertion_failed>
    9018:	e59f1018 	ldr	r1, [pc, #24]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xac>
    901c:	e3a020db 	mov	r2, #219	; 0xdb
    9020:	e2810f57 	add	r0, r1, #348	; 0x15c
    9024:	eb0024e4 	bl	123bc <assertion_failed>
    9028:	e59f1008 	ldr	r1, [pc, #8]	; 9038 <CGPIOPin::DisconnectInterrupt()+0xac>
    902c:	e3a020d1 	mov	r2, #209	; 0xd1
    9030:	e2810078 	add	r0, r1, #120	; 0x78
    9034:	eb0024e0 	bl	123bc <assertion_failed>
    9038:	00014a50 	.word	0x00014a50

0000903c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    903c:	e5d03010 	ldrb	r3, [r0, #16]
    9040:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9044:	e2432002 	sub	r2, r3, #2
    9048:	e3530000 	cmp	r3, #0
    904c:	13520001 	cmpne	r2, #1
    9050:	8a000032 	bhi	9120 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
    9054:	e590301c 	ldr	r3, [r0, #28]
    9058:	e1a04000 	mov	r4, r0
    905c:	e3530000 	cmp	r3, #0
    9060:	0a00001e 	beq	90e0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
    9064:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9068:	e3530006 	cmp	r3, #6
    906c:	1a00001f 	bne	90f0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
    9070:	e3510005 	cmp	r1, #5
    9074:	8a000021 	bhi	9100 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
    9078:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    907c:	e1530001 	cmp	r3, r1
    9080:	0a000022 	beq	9110 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
    9084:	e5903008 	ldr	r3, [r0, #8]
    9088:	e3077180 	movw	r7, #29056	; 0x7180
    908c:	e3407001 	movt	r7, #1
    9090:	e3a0604c 	mov	r6, #76	; 0x4c
    9094:	e5c01025 	strb	r1, [r0, #37]	; 0x25
    9098:	e3a0500c 	mov	r5, #12
    909c:	e5970000 	ldr	r0, [r7]
    90a0:	e3436f20 	movt	r6, #16160	; 0x3f20
    90a4:	e0836006 	add	r6, r3, r6
    90a8:	e3500000 	cmp	r0, #0
    90ac:	e0050195 	mul	r5, r5, r1
    90b0:	1a000008 	bne	90d8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
    90b4:	e7963005 	ldr	r3, [r6, r5]
    90b8:	e594200c 	ldr	r2, [r4, #12]
    90bc:	e1833002 	orr	r3, r3, r2
    90c0:	e7863005 	str	r3, [r6, r5]
    90c4:	e5973000 	ldr	r3, [r7]
    90c8:	e3530000 	cmp	r3, #0
    90cc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    90d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    90d4:	ea0022eb 	b	11c88 <LeaveCritical>
    90d8:	eb0022bf 	bl	11bdc <EnterCritical>
    90dc:	eafffff4 	b	90b4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    90e0:	e59f1048 	ldr	r1, [pc, #72]	; 9130 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    90e4:	e3a020e4 	mov	r2, #228	; 0xe4
    90e8:	e2810f5b 	add	r0, r1, #364	; 0x16c
    90ec:	eb0024b2 	bl	123bc <assertion_failed>
    90f0:	e59f1038 	ldr	r1, [pc, #56]	; 9130 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    90f4:	e3a020e6 	mov	r2, #230	; 0xe6
    90f8:	e28100f0 	add	r0, r1, #240	; 0xf0
    90fc:	eb0024ae 	bl	123bc <assertion_failed>
    9100:	e59f1028 	ldr	r1, [pc, #40]	; 9130 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9104:	e3a020e7 	mov	r2, #231	; 0xe7
    9108:	e2810f5f 	add	r0, r1, #380	; 0x17c
    910c:	eb0024aa 	bl	123bc <assertion_failed>
    9110:	e59f1018 	ldr	r1, [pc, #24]	; 9130 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9114:	e3a020e8 	mov	r2, #232	; 0xe8
    9118:	e2810e1a 	add	r0, r1, #416	; 0x1a0
    911c:	eb0024a6 	bl	123bc <assertion_failed>
    9120:	e59f1008 	ldr	r1, [pc, #8]	; 9130 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    9124:	e3a020e1 	mov	r2, #225	; 0xe1
    9128:	e2810078 	add	r0, r1, #120	; 0x78
    912c:	eb0024a2 	bl	123bc <assertion_failed>
    9130:	00014a50 	.word	0x00014a50

00009134 <CGPIOPin::DisableInterrupt()>:
    9134:	e5d03010 	ldrb	r3, [r0, #16]
    9138:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    913c:	e2432002 	sub	r2, r3, #2
    9140:	e3530000 	cmp	r3, #0
    9144:	13520001 	cmpne	r2, #1
    9148:	8a000020 	bhi	91d0 <CGPIOPin::DisableInterrupt()+0x9c>
    914c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9150:	e1a04000 	mov	r4, r0
    9154:	e3530005 	cmp	r3, #5
    9158:	8a000018 	bhi	91c0 <CGPIOPin::DisableInterrupt()+0x8c>
    915c:	e5902008 	ldr	r2, [r0, #8]
    9160:	e3077180 	movw	r7, #29056	; 0x7180
    9164:	e3407001 	movt	r7, #1
    9168:	e3a0604c 	mov	r6, #76	; 0x4c
    916c:	e3436f20 	movt	r6, #16160	; 0x3f20
    9170:	e3a0500c 	mov	r5, #12
    9174:	e5970000 	ldr	r0, [r7]
    9178:	e0826006 	add	r6, r2, r6
    917c:	e3500000 	cmp	r0, #0
    9180:	e0050395 	mul	r5, r5, r3
    9184:	1a000009 	bne	91b0 <CGPIOPin::DisableInterrupt()+0x7c>
    9188:	e7963005 	ldr	r3, [r6, r5]
    918c:	e594200c 	ldr	r2, [r4, #12]
    9190:	e1c33002 	bic	r3, r3, r2
    9194:	e7863005 	str	r3, [r6, r5]
    9198:	e5973000 	ldr	r3, [r7]
    919c:	e3530000 	cmp	r3, #0
    91a0:	1a000004 	bne	91b8 <CGPIOPin::DisableInterrupt()+0x84>
    91a4:	e3a03006 	mov	r3, #6
    91a8:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    91ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    91b0:	eb002289 	bl	11bdc <EnterCritical>
    91b4:	eafffff3 	b	9188 <CGPIOPin::DisableInterrupt()+0x54>
    91b8:	eb0022b2 	bl	11c88 <LeaveCritical>
    91bc:	eafffff8 	b	91a4 <CGPIOPin::DisableInterrupt()+0x70>
    91c0:	e59f1018 	ldr	r1, [pc, #24]	; 91e0 <CGPIOPin::DisableInterrupt()+0xac>
    91c4:	e3a020fb 	mov	r2, #251	; 0xfb
    91c8:	e2810f6f 	add	r0, r1, #444	; 0x1bc
    91cc:	eb00247a 	bl	123bc <assertion_failed>
    91d0:	e59f1008 	ldr	r1, [pc, #8]	; 91e0 <CGPIOPin::DisableInterrupt()+0xac>
    91d4:	e3a020f7 	mov	r2, #247	; 0xf7
    91d8:	e2810078 	add	r0, r1, #120	; 0x78
    91dc:	eb002476 	bl	123bc <assertion_failed>
    91e0:	00014a50 	.word	0x00014a50

000091e4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    91e4:	e5d03010 	ldrb	r3, [r0, #16]
    91e8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91ec:	e2432002 	sub	r2, r3, #2
    91f0:	e3530000 	cmp	r3, #0
    91f4:	13520001 	cmpne	r2, #1
    91f8:	8a000032 	bhi	92c8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
    91fc:	e590301c 	ldr	r3, [r0, #28]
    9200:	e1a04000 	mov	r4, r0
    9204:	e3530000 	cmp	r3, #0
    9208:	0a00001e 	beq	9288 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
    920c:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    9210:	e3530006 	cmp	r3, #6
    9214:	1a00001f 	bne	9298 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
    9218:	e3510005 	cmp	r1, #5
    921c:	8a000021 	bhi	92a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
    9220:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9224:	e1530001 	cmp	r3, r1
    9228:	0a000022 	beq	92b8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
    922c:	e5903008 	ldr	r3, [r0, #8]
    9230:	e3077180 	movw	r7, #29056	; 0x7180
    9234:	e3407001 	movt	r7, #1
    9238:	e3a0604c 	mov	r6, #76	; 0x4c
    923c:	e5c01026 	strb	r1, [r0, #38]	; 0x26
    9240:	e3a0500c 	mov	r5, #12
    9244:	e5970000 	ldr	r0, [r7]
    9248:	e3436f20 	movt	r6, #16160	; 0x3f20
    924c:	e0836006 	add	r6, r3, r6
    9250:	e3500000 	cmp	r0, #0
    9254:	e0050195 	mul	r5, r5, r1
    9258:	1a000008 	bne	9280 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
    925c:	e7963005 	ldr	r3, [r6, r5]
    9260:	e594200c 	ldr	r2, [r4, #12]
    9264:	e1833002 	orr	r3, r3, r2
    9268:	e7863005 	str	r3, [r6, r5]
    926c:	e5973000 	ldr	r3, [r7]
    9270:	e3530000 	cmp	r3, #0
    9274:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9278:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    927c:	ea002281 	b	11c88 <LeaveCritical>
    9280:	eb002255 	bl	11bdc <EnterCritical>
    9284:	eafffff4 	b	925c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    9288:	e59f1048 	ldr	r1, [pc, #72]	; 92d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    928c:	e300210d 	movw	r2, #269	; 0x10d
    9290:	e2810f5b 	add	r0, r1, #364	; 0x16c
    9294:	eb002448 	bl	123bc <assertion_failed>
    9298:	e59f1038 	ldr	r1, [pc, #56]	; 92d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    929c:	e300210f 	movw	r2, #271	; 0x10f
    92a0:	e2810f45 	add	r0, r1, #276	; 0x114
    92a4:	eb002444 	bl	123bc <assertion_failed>
    92a8:	e59f1028 	ldr	r1, [pc, #40]	; 92d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    92ac:	e3a02e11 	mov	r2, #272	; 0x110
    92b0:	e2810f5f 	add	r0, r1, #380	; 0x17c
    92b4:	eb002440 	bl	123bc <assertion_failed>
    92b8:	e59f1018 	ldr	r1, [pc, #24]	; 92d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    92bc:	e3002111 	movw	r2, #273	; 0x111
    92c0:	e2810e1e 	add	r0, r1, #480	; 0x1e0
    92c4:	eb00243c 	bl	123bc <assertion_failed>
    92c8:	e59f1008 	ldr	r1, [pc, #8]	; 92d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    92cc:	e300210a 	movw	r2, #266	; 0x10a
    92d0:	e2810078 	add	r0, r1, #120	; 0x78
    92d4:	eb002438 	bl	123bc <assertion_failed>
    92d8:	00014a50 	.word	0x00014a50

000092dc <CGPIOPin::DisableInterrupt2()>:
    92dc:	e5d03010 	ldrb	r3, [r0, #16]
    92e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    92e4:	e2432002 	sub	r2, r3, #2
    92e8:	e3530000 	cmp	r3, #0
    92ec:	13520001 	cmpne	r2, #1
    92f0:	8a000020 	bhi	9378 <CGPIOPin::DisableInterrupt2()+0x9c>
    92f4:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    92f8:	e1a04000 	mov	r4, r0
    92fc:	e3530005 	cmp	r3, #5
    9300:	8a000018 	bhi	9368 <CGPIOPin::DisableInterrupt2()+0x8c>
    9304:	e5902008 	ldr	r2, [r0, #8]
    9308:	e3077180 	movw	r7, #29056	; 0x7180
    930c:	e3407001 	movt	r7, #1
    9310:	e3a0604c 	mov	r6, #76	; 0x4c
    9314:	e3436f20 	movt	r6, #16160	; 0x3f20
    9318:	e3a0500c 	mov	r5, #12
    931c:	e5970000 	ldr	r0, [r7]
    9320:	e0826006 	add	r6, r2, r6
    9324:	e3500000 	cmp	r0, #0
    9328:	e0050395 	mul	r5, r5, r3
    932c:	1a000009 	bne	9358 <CGPIOPin::DisableInterrupt2()+0x7c>
    9330:	e7963005 	ldr	r3, [r6, r5]
    9334:	e594200c 	ldr	r2, [r4, #12]
    9338:	e1c33002 	bic	r3, r3, r2
    933c:	e7863005 	str	r3, [r6, r5]
    9340:	e5973000 	ldr	r3, [r7]
    9344:	e3530000 	cmp	r3, #0
    9348:	1a000004 	bne	9360 <CGPIOPin::DisableInterrupt2()+0x84>
    934c:	e3a03006 	mov	r3, #6
    9350:	e5c43026 	strb	r3, [r4, #38]	; 0x26
    9354:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9358:	eb00221f 	bl	11bdc <EnterCritical>
    935c:	eafffff3 	b	9330 <CGPIOPin::DisableInterrupt2()+0x54>
    9360:	eb002248 	bl	11c88 <LeaveCritical>
    9364:	eafffff8 	b	934c <CGPIOPin::DisableInterrupt2()+0x70>
    9368:	e59f1018 	ldr	r1, [pc, #24]	; 9388 <CGPIOPin::DisableInterrupt2()+0xac>
    936c:	e3a02f49 	mov	r2, #292	; 0x124
    9370:	e2810f7f 	add	r0, r1, #508	; 0x1fc
    9374:	eb002410 	bl	123bc <assertion_failed>
    9378:	e59f1008 	ldr	r1, [pc, #8]	; 9388 <CGPIOPin::DisableInterrupt2()+0xac>
    937c:	e3a02e12 	mov	r2, #288	; 0x120
    9380:	e2810078 	add	r0, r1, #120	; 0x78
    9384:	eb00240c 	bl	123bc <assertion_failed>
    9388:	00014a50 	.word	0x00014a50

0000938c <CGPIOPin::AcknowledgeInterrupt()>:
    938c:	e590301c 	ldr	r3, [r0, #28]
    9390:	e92d4010 	push	{r4, lr}
    9394:	e3530000 	cmp	r3, #0
    9398:	0a000008 	beq	93c0 <CGPIOPin::AcknowledgeInterrupt()+0x34>
    939c:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
    93a0:	e3530000 	cmp	r3, #0
    93a4:	1a000009 	bne	93d0 <CGPIOPin::AcknowledgeInterrupt()+0x44>
    93a8:	e590100c 	ldr	r1, [r0, #12]
    93ac:	e3a03040 	mov	r3, #64	; 0x40
    93b0:	e5902008 	ldr	r2, [r0, #8]
    93b4:	e3433f20 	movt	r3, #16160	; 0x3f20
    93b8:	e7821003 	str	r1, [r2, r3]
    93bc:	e8bd8010 	pop	{r4, pc}
    93c0:	e59f1018 	ldr	r1, [pc, #24]	; 93e0 <CGPIOPin::AcknowledgeInterrupt()+0x54>
    93c4:	e3002133 	movw	r2, #307	; 0x133
    93c8:	e2810f5b 	add	r0, r1, #364	; 0x16c
    93cc:	eb0023fa 	bl	123bc <assertion_failed>
    93d0:	e59f1008 	ldr	r1, [pc, #8]	; 93e0 <CGPIOPin::AcknowledgeInterrupt()+0x54>
    93d4:	e3a02f4d 	mov	r2, #308	; 0x134
    93d8:	e2810e22 	add	r0, r1, #544	; 0x220
    93dc:	eb0023f6 	bl	123bc <assertion_failed>
    93e0:	00014a50 	.word	0x00014a50

000093e4 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
    93e4:	e1d12000 	bics	r2, r1, r0
    93e8:	13a03000 	movne	r3, #0
    93ec:	13433f20 	movtne	r3, #16160	; 0x3f20
    93f0:	15832028 	strne	r2, [r3, #40]	; 0x28
    93f4:	e0100001 	ands	r0, r0, r1
    93f8:	13a03000 	movne	r3, #0
    93fc:	13433f20 	movtne	r3, #16160	; 0x3f20
    9400:	1583001c 	strne	r0, [r3, #28]
    9404:	e12fff1e 	bx	lr

00009408 <CGPIOPin::ReadAll()>:
    9408:	e3a03000 	mov	r3, #0
    940c:	e3433f20 	movt	r3, #16160	; 0x3f20
    9410:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    9414:	e12fff1e 	bx	lr

00009418 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
    9418:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    941c:	e3074180 	movw	r4, #29056	; 0x7180
    9420:	e3404001 	movt	r4, #1
    9424:	e1a05000 	mov	r5, r0
    9428:	e1a06001 	mov	r6, r1
    942c:	e5943000 	ldr	r3, [r4]
    9430:	e3530000 	cmp	r3, #0
    9434:	1a000015 	bne	9490 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
    9438:	e5959008 	ldr	r9, [r5, #8]
    943c:	e3560002 	cmp	r6, #2
    9440:	e3a07098 	mov	r7, #152	; 0x98
    9444:	e3437f20 	movt	r7, #16160	; 0x3f20
    9448:	8a000013 	bhi	949c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x84>
    944c:	e3a08000 	mov	r8, #0
    9450:	e3a00005 	mov	r0, #5
    9454:	e3438f20 	movt	r8, #16160	; 0x3f20
    9458:	e5886094 	str	r6, [r8, #148]	; 0x94
    945c:	eb001ae3 	bl	fff0 <CTimer::SimpleusDelay(unsigned int)>
    9460:	e595300c 	ldr	r3, [r5, #12]
    9464:	e3a00005 	mov	r0, #5
    9468:	e7893007 	str	r3, [r9, r7]
    946c:	eb001adf 	bl	fff0 <CTimer::SimpleusDelay(unsigned int)>
    9470:	e3a03000 	mov	r3, #0
    9474:	e5883094 	str	r3, [r8, #148]	; 0x94
    9478:	e7893007 	str	r3, [r9, r7]
    947c:	e5943000 	ldr	r3, [r4]
    9480:	e3530000 	cmp	r3, #0
    9484:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9488:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    948c:	ea0021fd 	b	11c88 <LeaveCritical>
    9490:	e1a00003 	mov	r0, r3
    9494:	eb0021d0 	bl	11bdc <EnterCritical>
    9498:	eaffffe6 	b	9438 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
    949c:	e59f1008 	ldr	r1, [pc, #8]	; 94ac <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
    94a0:	e3002165 	movw	r2, #357	; 0x165
    94a4:	e2810f8b 	add	r0, r1, #556	; 0x22c
    94a8:	eb0023c3 	bl	123bc <assertion_failed>
    94ac:	00014a50 	.word	0x00014a50

000094b0 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    94b0:	e5902004 	ldr	r2, [r0, #4]
    94b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    94b8:	e3520035 	cmp	r2, #53	; 0x35
    94bc:	8a000022 	bhi	954c <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
    94c0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    94c4:	e3a04003 	mov	r4, #3
    94c8:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    94cc:	e1a06001 	mov	r6, r1
    94d0:	e0830293 	umull	r0, r3, r3, r2
    94d4:	e3a0100a 	mov	r1, #10
    94d8:	e3560005 	cmp	r6, #5
    94dc:	e1a03433 	lsr	r3, r3, r4
    94e0:	e283053f 	add	r0, r3, #264241152	; 0xfc00000
    94e4:	e2800702 	add	r0, r0, #524288	; 0x80000
    94e8:	e0632391 	mls	r3, r1, r3, r2
    94ec:	e1a07100 	lsl	r7, r0, #2
    94f0:	e0040394 	mul	r4, r4, r3
    94f4:	8a000018 	bhi	955c <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
    94f8:	e3075180 	movw	r5, #29056	; 0x7180
    94fc:	e3405001 	movt	r5, #1
    9500:	e5950000 	ldr	r0, [r5]
    9504:	e3500000 	cmp	r0, #0
    9508:	1a00000d 	bne	9544 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    950c:	e5973000 	ldr	r3, [r7]
    9510:	e3042a40 	movw	r2, #19008	; 0x4a40
    9514:	e3402001 	movt	r2, #1
    9518:	e3a01007 	mov	r1, #7
    951c:	e0822106 	add	r2, r2, r6, lsl #2
    9520:	e1c33411 	bic	r3, r3, r1, lsl r4
    9524:	e5922258 	ldr	r2, [r2, #600]	; 0x258
    9528:	e1834412 	orr	r4, r3, r2, lsl r4
    952c:	e5874000 	str	r4, [r7]
    9530:	e5953000 	ldr	r3, [r5]
    9534:	e3530000 	cmp	r3, #0
    9538:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    953c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9540:	ea0021d0 	b	11c88 <LeaveCritical>
    9544:	eb0021a4 	bl	11bdc <EnterCritical>
    9548:	eaffffef 	b	950c <CGPIOPin::SetAlternateFunction(unsigned int)+0x5c>
    954c:	e59f1018 	ldr	r1, [pc, #24]	; 956c <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    9550:	e3002181 	movw	r2, #385	; 0x181
    9554:	e2810020 	add	r0, r1, #32
    9558:	eb002397 	bl	123bc <assertion_failed>
    955c:	e59f1008 	ldr	r1, [pc, #8]	; 956c <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    9560:	e3002185 	movw	r2, #389	; 0x185
    9564:	e2810f8e 	add	r0, r1, #568	; 0x238
    9568:	eb002393 	bl	123bc <assertion_failed>
    956c:	00014a50 	.word	0x00014a50

00009570 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    9570:	e3510009 	cmp	r1, #9
    9574:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9578:	8a000058 	bhi	96e0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
    957c:	e5c01010 	strb	r1, [r0, #16]
    9580:	e1a03001 	mov	r3, r1
    9584:	e2411004 	sub	r1, r1, #4
    9588:	e1a06002 	mov	r6, r2
    958c:	e6ef2071 	uxtb	r2, r1
    9590:	e1a04000 	mov	r4, r0
    9594:	e3520005 	cmp	r2, #5
    9598:	9a00002e 	bls	9658 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>
    959c:	e3530001 	cmp	r3, #1
    95a0:	13a02000 	movne	r2, #0
    95a4:	02062001 	andeq	r2, r6, #1
    95a8:	e3520000 	cmp	r2, #0
    95ac:	1a00004f 	bne	96f0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
    95b0:	e5943004 	ldr	r3, [r4, #4]
    95b4:	e3530035 	cmp	r3, #53	; 0x35
    95b8:	8a00004f 	bhi	96fc <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
    95bc:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    95c0:	e3078180 	movw	r8, #29056	; 0x7180
    95c4:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    95c8:	e0852395 	umull	r2, r5, r5, r3
    95cc:	e3408001 	movt	r8, #1
    95d0:	e3a0200a 	mov	r2, #10
    95d4:	e1a051a5 	lsr	r5, r5, #3
    95d8:	e5980000 	ldr	r0, [r8]
    95dc:	e285753f 	add	r7, r5, #264241152	; 0xfc00000
    95e0:	e0633592 	mls	r3, r2, r5, r3
    95e4:	e2877702 	add	r7, r7, #524288	; 0x80000
    95e8:	e3500000 	cmp	r0, #0
    95ec:	e3a05003 	mov	r5, #3
    95f0:	e1a07107 	lsl	r7, r7, #2
    95f4:	e0050395 	mul	r5, r5, r3
    95f8:	1a00001f 	bne	967c <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
    95fc:	e5d42010 	ldrb	r2, [r4, #16]
    9600:	e3a01007 	mov	r1, #7
    9604:	e5973000 	ldr	r3, [r7]
    9608:	e2422001 	sub	r2, r2, #1
    960c:	e16f2f12 	clz	r2, r2
    9610:	e1c33511 	bic	r3, r3, r1, lsl r5
    9614:	e1a022a2 	lsr	r2, r2, #5
    9618:	e1835512 	orr	r5, r3, r2, lsl r5
    961c:	e5875000 	str	r5, [r7]
    9620:	e5983000 	ldr	r3, [r8]
    9624:	e3530000 	cmp	r3, #0
    9628:	1a00000f 	bne	966c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
    962c:	e3560000 	cmp	r6, #0
    9630:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9634:	e5d43010 	ldrb	r3, [r4, #16]
    9638:	e3530003 	cmp	r3, #3
    963c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9640:	ea000003 	b	9654 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
    9644:	000096b4 	.word	0x000096b4
    9648:	000096a4 	.word	0x000096a4
    964c:	00009694 	.word	0x00009694
    9650:	00009684 	.word	0x00009684
    9654:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9658:	e3560000 	cmp	r6, #0
    965c:	1a000018 	bne	96c4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x154>
    9660:	e1a00004 	mov	r0, r4
    9664:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9668:	eaffff90 	b	94b0 <CGPIOPin::SetAlternateFunction(unsigned int)>
    966c:	eb002185 	bl	11c88 <LeaveCritical>
    9670:	e3560000 	cmp	r6, #0
    9674:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9678:	eaffffed 	b	9634 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
    967c:	eb002156 	bl	11bdc <EnterCritical>
    9680:	eaffffdd 	b	95fc <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
    9684:	e1a00004 	mov	r0, r4
    9688:	e3a01001 	mov	r1, #1
    968c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9690:	eaffff60 	b	9418 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9694:	e1a00004 	mov	r0, r4
    9698:	e3a01002 	mov	r1, #2
    969c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    96a0:	eaffff5c 	b	9418 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    96a4:	e1a00004 	mov	r0, r4
    96a8:	e3a01000 	mov	r1, #0
    96ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    96b0:	eafffda2 	b	8d40 <CGPIOPin::Write(unsigned int)>
    96b4:	e1a00004 	mov	r0, r4
    96b8:	e3a01000 	mov	r1, #0
    96bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    96c0:	eaffff54 	b	9418 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    96c4:	e3a01000 	mov	r1, #0
    96c8:	ebffff52 	bl	9418 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    96cc:	e5d43010 	ldrb	r3, [r4, #16]
    96d0:	e1a00004 	mov	r0, r4
    96d4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    96d8:	e2431004 	sub	r1, r3, #4
    96dc:	eaffff73 	b	94b0 <CGPIOPin::SetAlternateFunction(unsigned int)>
    96e0:	e59f1024 	ldr	r1, [pc, #36]	; 970c <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
    96e4:	e3a0204f 	mov	r2, #79	; 0x4f
    96e8:	e2810e26 	add	r0, r1, #608	; 0x260
    96ec:	eb002332 	bl	123bc <assertion_failed>
    96f0:	e3a01000 	mov	r1, #0
    96f4:	ebffff47 	bl	9418 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    96f8:	eaffffac 	b	95b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x40>
    96fc:	e59f1008 	ldr	r1, [pc, #8]	; 970c <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
    9700:	e3a02068 	mov	r2, #104	; 0x68
    9704:	e2810020 	add	r0, r1, #32
    9708:	eb00232b 	bl	123bc <assertion_failed>
    970c:	00014a50 	.word	0x00014a50

00009710 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    9710:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9714:	e3510035 	cmp	r1, #53	; 0x35
    9718:	e5803018 	str	r3, [r0, #24]
    971c:	e3a03000 	mov	r3, #0
    9720:	e59f7088 	ldr	r7, [pc, #136]	; 97b0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xa0>
    9724:	e1a05001 	mov	r5, r1
    9728:	e580301c 	str	r3, [r0, #28]
    972c:	e3a03006 	mov	r3, #6
    9730:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    9734:	e1a04000 	mov	r4, r0
    9738:	e5c03026 	strb	r3, [r0, #38]	; 0x26
    973c:	e3a0300a 	mov	r3, #10
    9740:	e5807000 	str	r7, [r0]
    9744:	e1a06002 	mov	r6, r2
    9748:	e5801004 	str	r1, [r0, #4]
    974c:	e5c03010 	strb	r3, [r0, #16]
    9750:	8a00000b 	bhi	9784 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
    9754:	e3a02001 	mov	r2, #1
    9758:	e1a00004 	mov	r0, r4
    975c:	e1a032a5 	lsr	r3, r5, #5
    9760:	e205501f 	and	r5, r5, #31
    9764:	e1a01006 	mov	r1, r6
    9768:	e1a03103 	lsl	r3, r3, #2
    976c:	e1a05512 	lsl	r5, r2, r5
    9770:	e5843008 	str	r3, [r4, #8]
    9774:	e584500c 	str	r5, [r4, #12]
    9778:	ebffff7c 	bl	9570 <CGPIOPin::SetMode(TGPIOMode, bool)>
    977c:	e1a00004 	mov	r0, r4
    9780:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9784:	eb000664 	bl	b11c <CMachineInfo::Get()>
    9788:	e6ef1075 	uxtb	r1, r5
    978c:	eb0005cd 	bl	aec8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9790:	e5840004 	str	r0, [r4, #4]
    9794:	e3500035 	cmp	r0, #53	; 0x35
    9798:	e1a05000 	mov	r5, r0
    979c:	9affffec 	bls	9754 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    97a0:	e3a02047 	mov	r2, #71	; 0x47
    97a4:	e2871008 	add	r1, r7, #8
    97a8:	e2870028 	add	r0, r7, #40	; 0x28
    97ac:	eb002302 	bl	123bc <assertion_failed>
    97b0:	00014a48 	.word	0x00014a48

000097b4 <CGPIOPin::InterruptHandler()>:
    97b4:	e5d03010 	ldrb	r3, [r0, #16]
    97b8:	e92d4010 	push	{r4, lr}
    97bc:	e2432002 	sub	r2, r3, #2
    97c0:	e3530000 	cmp	r3, #0
    97c4:	13520001 	cmpne	r2, #1
    97c8:	8a000013 	bhi	981c <CGPIOPin::InterruptHandler()+0x68>
    97cc:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    97d0:	e3530005 	cmp	r3, #5
    97d4:	8a000005 	bhi	97f0 <CGPIOPin::InterruptHandler()+0x3c>
    97d8:	e590301c 	ldr	r3, [r0, #28]
    97dc:	e3530000 	cmp	r3, #0
    97e0:	0a000009 	beq	980c <CGPIOPin::InterruptHandler()+0x58>
    97e4:	e8bd4010 	pop	{r4, lr}
    97e8:	e5900020 	ldr	r0, [r0, #32]
    97ec:	e12fff13 	bx	r3
    97f0:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    97f4:	e3530005 	cmp	r3, #5
    97f8:	9afffff6 	bls	97d8 <CGPIOPin::InterruptHandler()+0x24>
    97fc:	e59f1028 	ldr	r1, [pc, #40]	; 982c <CGPIOPin::InterruptHandler()+0x78>
    9800:	e3002195 	movw	r2, #405	; 0x195
    9804:	e2810f9e 	add	r0, r1, #632	; 0x278
    9808:	eb0022eb 	bl	123bc <assertion_failed>
    980c:	e59f1018 	ldr	r1, [pc, #24]	; 982c <CGPIOPin::InterruptHandler()+0x78>
    9810:	e3a02f66 	mov	r2, #408	; 0x198
    9814:	e2810f5b 	add	r0, r1, #364	; 0x16c
    9818:	eb0022e7 	bl	123bc <assertion_failed>
    981c:	e59f1008 	ldr	r1, [pc, #8]	; 982c <CGPIOPin::InterruptHandler()+0x78>
    9820:	e3002192 	movw	r2, #402	; 0x192
    9824:	e2810078 	add	r0, r1, #120	; 0x78
    9828:	eb0022e3 	bl	123bc <assertion_failed>
    982c:	00014a50 	.word	0x00014a50

00009830 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9830:	e3500035 	cmp	r0, #53	; 0x35
    9834:	e92d4070 	push	{r4, r5, r6, lr}
    9838:	8a00001a 	bhi	98a8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    983c:	e3076180 	movw	r6, #29056	; 0x7180
    9840:	e3a04013 	mov	r4, #19
    9844:	e3406001 	movt	r6, #1
    9848:	e200501f 	and	r5, r0, #31
    984c:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9850:	e3a02001 	mov	r2, #1
    9854:	e08442a0 	add	r4, r4, r0, lsr #5
    9858:	e5960000 	ldr	r0, [r6]
    985c:	e1a04104 	lsl	r4, r4, #2
    9860:	e1a05512 	lsl	r5, r2, r5
    9864:	e3500000 	cmp	r0, #0
    9868:	1a00000c 	bne	98a0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    986c:	e1e02005 	mvn	r2, r5
    9870:	e3a0108b 	mov	r1, #139	; 0x8b
    9874:	e3431f20 	movt	r1, #16160	; 0x3f20
    9878:	e5943000 	ldr	r3, [r4]
    987c:	e0033002 	and	r3, r3, r2
    9880:	e484300c 	str	r3, [r4], #12
    9884:	e1540001 	cmp	r4, r1
    9888:	9afffffa 	bls	9878 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
    988c:	e5963000 	ldr	r3, [r6]
    9890:	e3530000 	cmp	r3, #0
    9894:	08bd8070 	popeq	{r4, r5, r6, pc}
    9898:	e8bd4070 	pop	{r4, r5, r6, lr}
    989c:	ea0020f9 	b	11c88 <LeaveCritical>
    98a0:	eb0020cd 	bl	11bdc <EnterCritical>
    98a4:	eafffff0 	b	986c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
    98a8:	e59f1008 	ldr	r1, [pc, #8]	; 98b8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    98ac:	e300219e 	movw	r2, #414	; 0x19e
    98b0:	e2810fb1 	add	r0, r1, #708	; 0x2c4
    98b4:	eb0022c0 	bl	123bc <assertion_failed>
    98b8:	00014a50 	.word	0x00014a50

000098bc <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    98bc:	e3073180 	movw	r3, #29056	; 0x7180
    98c0:	e3a02001 	mov	r2, #1
    98c4:	e3403001 	movt	r3, #1
    98c8:	e5832000 	str	r2, [r3]
    98cc:	e12fff1e 	bx	lr

000098d0 <CKernelOptions::~CKernelOptions()>:
    98d0:	e3073184 	movw	r3, #29060	; 0x7184
    98d4:	e3a02000 	mov	r2, #0
    98d8:	e3403001 	movt	r3, #1
    98dc:	e5832000 	str	r2, [r3]
    98e0:	e12fff1e 	bx	lr

000098e4 <CKernelOptions::GetWidth() const>:
    98e4:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    98e8:	e12fff1e 	bx	lr

000098ec <CKernelOptions::GetHeight() const>:
    98ec:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    98f0:	e12fff1e 	bx	lr

000098f4 <CKernelOptions::GetLogDevice() const>:
    98f4:	e2800e81 	add	r0, r0, #2064	; 0x810
    98f8:	e2800008 	add	r0, r0, #8
    98fc:	e12fff1e 	bx	lr

00009900 <CKernelOptions::GetLogLevel() const>:
    9900:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    9904:	e12fff1e 	bx	lr

00009908 <CKernelOptions::GetKeyMap() const>:
    9908:	e2800e83 	add	r0, r0, #2096	; 0x830
    990c:	e12fff1e 	bx	lr

00009910 <CKernelOptions::GetUSBPowerDelay() const>:
    9910:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    9914:	e12fff1e 	bx	lr

00009918 <CKernelOptions::GetUSBFullSpeed() const>:
    9918:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    991c:	e12fff1e 	bx	lr

00009920 <CKernelOptions::GetUSBBoost() const>:
    9920:	e5d00839 	ldrb	r0, [r0, #2105]	; 0x839
    9924:	e12fff1e 	bx	lr

00009928 <CKernelOptions::GetUSBIgnore() const>:
    9928:	e2800e83 	add	r0, r0, #2096	; 0x830
    992c:	e280000a 	add	r0, r0, #10
    9930:	e12fff1e 	bx	lr

00009934 <CKernelOptions::GetSoundDevice() const>:
    9934:	e2800d21 	add	r0, r0, #2112	; 0x840
    9938:	e280000e 	add	r0, r0, #14
    993c:	e12fff1e 	bx	lr

00009940 <CKernelOptions::GetSoundOption() const>:
    9940:	e5900864 	ldr	r0, [r0, #2148]	; 0x864
    9944:	e12fff1e 	bx	lr

00009948 <CKernelOptions::GetCPUSpeed() const>:
    9948:	e5d00868 	ldrb	r0, [r0, #2152]	; 0x868
    994c:	e12fff1e 	bx	lr

00009950 <CKernelOptions::GetSoCMaxTemp() const>:
    9950:	e590086c 	ldr	r0, [r0, #2156]	; 0x86c
    9954:	e12fff1e 	bx	lr

00009958 <CKernelOptions::GetGPIOFanPin() const>:
    9958:	e5900870 	ldr	r0, [r0, #2160]	; 0x870
    995c:	e12fff1e 	bx	lr

00009960 <CKernelOptions::GetTouchScreen() const>:
    9960:	e1a03000 	mov	r3, r0
    9964:	e5d00874 	ldrb	r0, [r0, #2164]	; 0x874
    9968:	e3500000 	cmp	r0, #0
    996c:	12830e87 	addne	r0, r3, #2160	; 0x870
    9970:	12800008 	addne	r0, r0, #8
    9974:	e12fff1e 	bx	lr

00009978 <CKernelOptions::Get()>:
    9978:	e3073184 	movw	r3, #29060	; 0x7184
    997c:	e3403001 	movt	r3, #1
    9980:	e5930000 	ldr	r0, [r3]
    9984:	e12fff1e 	bx	lr

00009988 <CKernelOptions::GetToken()>:
    9988:	e1a01000 	mov	r1, r0
    998c:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
    9990:	e1d030d0 	ldrsb	r3, [r0]
    9994:	e3530000 	cmp	r3, #0
    9998:	1a000005 	bne	99b4 <CKernelOptions::GetToken()+0x2c>
    999c:	ea000017 	b	9a00 <CKernelOptions::GetToken()+0x78>
    99a0:	e2800001 	add	r0, r0, #1
    99a4:	e581080c 	str	r0, [r1, #2060]	; 0x80c
    99a8:	e1d030d0 	ldrsb	r3, [r0]
    99ac:	e3530000 	cmp	r3, #0
    99b0:	0a000012 	beq	9a00 <CKernelOptions::GetToken()+0x78>
    99b4:	e3530020 	cmp	r3, #32
    99b8:	0afffff8 	beq	99a0 <CKernelOptions::GetToken()+0x18>
    99bc:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
    99c0:	e1d320d0 	ldrsb	r2, [r3]
    99c4:	e3520000 	cmp	r2, #0
    99c8:	1a000005 	bne	99e4 <CKernelOptions::GetToken()+0x5c>
    99cc:	e12fff1e 	bx	lr
    99d0:	e2833001 	add	r3, r3, #1
    99d4:	e581380c 	str	r3, [r1, #2060]	; 0x80c
    99d8:	e1d320d0 	ldrsb	r2, [r3]
    99dc:	e3520000 	cmp	r2, #0
    99e0:	012fff1e 	bxeq	lr
    99e4:	e3520020 	cmp	r2, #32
    99e8:	1afffff8 	bne	99d0 <CKernelOptions::GetToken()+0x48>
    99ec:	e283c001 	add	ip, r3, #1
    99f0:	e3a02000 	mov	r2, #0
    99f4:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
    99f8:	e5c32000 	strb	r2, [r3]
    99fc:	e12fff1e 	bx	lr
    9a00:	e3a00000 	mov	r0, #0
    9a04:	e12fff1e 	bx	lr

00009a08 <CKernelOptions::GetOptionValue(char*)>:
    9a08:	e1d030d0 	ldrsb	r3, [r0]
    9a0c:	e3530000 	cmp	r3, #0
    9a10:	1a000003 	bne	9a24 <CKernelOptions::GetOptionValue(char*)+0x1c>
    9a14:	ea000007 	b	9a38 <CKernelOptions::GetOptionValue(char*)+0x30>
    9a18:	e1f030d1 	ldrsb	r3, [r0, #1]!
    9a1c:	e3530000 	cmp	r3, #0
    9a20:	0a000004 	beq	9a38 <CKernelOptions::GetOptionValue(char*)+0x30>
    9a24:	e353003d 	cmp	r3, #61	; 0x3d
    9a28:	1afffffa 	bne	9a18 <CKernelOptions::GetOptionValue(char*)+0x10>
    9a2c:	e3a03000 	mov	r3, #0
    9a30:	e4c03001 	strb	r3, [r0], #1
    9a34:	e12fff1e 	bx	lr
    9a38:	e1a00003 	mov	r0, r3
    9a3c:	e12fff1e 	bx	lr

00009a40 <CKernelOptions::GetDecimal(char*)>:
    9a40:	e3500000 	cmp	r0, #0
    9a44:	0a00001a 	beq	9ab4 <CKernelOptions::GetDecimal(char*)+0x74>
    9a48:	e1d030d0 	ldrsb	r3, [r0]
    9a4c:	e3530000 	cmp	r3, #0
    9a50:	0a000017 	beq	9ab4 <CKernelOptions::GetDecimal(char*)+0x74>
    9a54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9a58:	e280c001 	add	ip, r0, #1
    9a5c:	e3a01000 	mov	r1, #0
    9a60:	e3a0e00a 	mov	lr, #10
    9a64:	ea00000a 	b	9a94 <CKernelOptions::GetDecimal(char*)+0x54>
    9a68:	e242202f 	sub	r2, r2, #47	; 0x2f
    9a6c:	e16f2f12 	clz	r2, r2
    9a70:	e1a022a2 	lsr	r2, r2, #5
    9a74:	e1500001 	cmp	r0, r1
    9a78:	33822001 	orrcc	r2, r2, #1
    9a7c:	e1a01000 	mov	r1, r0
    9a80:	e3520000 	cmp	r2, #0
    9a84:	1a000008 	bne	9aac <CKernelOptions::GetDecimal(char*)+0x6c>
    9a88:	e0dc30d1 	ldrsb	r3, [ip], #1
    9a8c:	e3530000 	cmp	r3, #0
    9a90:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    9a94:	e022319e 	mla	r2, lr, r1, r3
    9a98:	e2433030 	sub	r3, r3, #48	; 0x30
    9a9c:	e6ef3073 	uxtb	r3, r3
    9aa0:	e2420030 	sub	r0, r2, #48	; 0x30
    9aa4:	e3530009 	cmp	r3, #9
    9aa8:	9affffee 	bls	9a68 <CKernelOptions::GetDecimal(char*)+0x28>
    9aac:	e3e00000 	mvn	r0, #0
    9ab0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9ab4:	e3e00000 	mvn	r0, #0
    9ab8:	e12fff1e 	bx	lr

00009abc <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
    9abc:	e3520000 	cmp	r2, #0
    9ac0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9ac4:	e24dd008 	sub	sp, sp, #8
    9ac8:	028d7004 	addeq	r7, sp, #4
    9acc:	0a000023 	beq	9b60 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa4>
    9ad0:	e3048de8 	movw	r8, #19944	; 0x4de8
    9ad4:	e1a06001 	mov	r6, r1
    9ad8:	e3408001 	movt	r8, #1
    9adc:	e2425001 	sub	r5, r2, #1
    9ae0:	e28d7004 	add	r7, sp, #4
    9ae4:	e3a0400a 	mov	r4, #10
    9ae8:	e1a02007 	mov	r2, r7
    9aec:	e1a01008 	mov	r1, r8
    9af0:	eb001a92 	bl	10540 <strtok_r>
    9af4:	e250c000 	subs	ip, r0, #0
    9af8:	0a000021 	beq	9b84 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9afc:	e1dc00d0 	ldrsb	r0, [ip]
    9b00:	e3500000 	cmp	r0, #0
    9b04:	0a00001f 	beq	9b88 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xcc>
    9b08:	e28cc001 	add	ip, ip, #1
    9b0c:	e3a01000 	mov	r1, #0
    9b10:	e0230194 	mla	r3, r4, r1, r0
    9b14:	e2400030 	sub	r0, r0, #48	; 0x30
    9b18:	e6ef0070 	uxtb	r0, r0
    9b1c:	e2432030 	sub	r2, r3, #48	; 0x30
    9b20:	e3500009 	cmp	r0, #9
    9b24:	8a000016 	bhi	9b84 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9b28:	e243302f 	sub	r3, r3, #47	; 0x2f
    9b2c:	e16f3f13 	clz	r3, r3
    9b30:	e1a032a3 	lsr	r3, r3, #5
    9b34:	e1520001 	cmp	r2, r1
    9b38:	33833001 	orrcc	r3, r3, #1
    9b3c:	e1a01002 	mov	r1, r2
    9b40:	e3530000 	cmp	r3, #0
    9b44:	1a00000e 	bne	9b84 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9b48:	e0dc00d1 	ldrsb	r0, [ip], #1
    9b4c:	e3500000 	cmp	r0, #0
    9b50:	1affffee 	bne	9b10 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x54>
    9b54:	e2555001 	subs	r5, r5, #1
    9b58:	e4862004 	str	r2, [r6], #4
    9b5c:	2affffe1 	bcs	9ae8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x2c>
    9b60:	e3041de8 	movw	r1, #19944	; 0x4de8
    9b64:	e1a02007 	mov	r2, r7
    9b68:	e3401001 	movt	r1, #1
    9b6c:	e3a00000 	mov	r0, #0
    9b70:	eb001a72 	bl	10540 <strtok_r>
    9b74:	e16f0f10 	clz	r0, r0
    9b78:	e1a002a0 	lsr	r0, r0, #5
    9b7c:	e28dd008 	add	sp, sp, #8
    9b80:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9b84:	e3a00000 	mov	r0, #0
    9b88:	e28dd008 	add	sp, sp, #8
    9b8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009b90 <CKernelOptions::CKernelOptions()>:
    9b90:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b94:	e3002838 	movw	r2, #2104	; 0x838
    9b98:	e1a04000 	mov	r4, r0
    9b9c:	e2806e81 	add	r6, r0, #2064	; 0x810
    9ba0:	e3a03004 	mov	r3, #4
    9ba4:	e3a05000 	mov	r5, #0
    9ba8:	e580382c 	str	r3, [r0, #2092]	; 0x82c
    9bac:	e2866008 	add	r6, r6, #8
    9bb0:	e5805810 	str	r5, [r0, #2064]	; 0x810
    9bb4:	e3a0303c 	mov	r3, #60	; 0x3c
    9bb8:	e5805814 	str	r5, [r0, #2068]	; 0x814
    9bbc:	e3041d28 	movw	r1, #19752	; 0x4d28
    9bc0:	e5805834 	str	r5, [r0, #2100]	; 0x834
    9bc4:	e24dd01c 	sub	sp, sp, #28
    9bc8:	e18050b2 	strh	r5, [r0, r2]
    9bcc:	e2848e83 	add	r8, r4, #2096	; 0x830
    9bd0:	e580386c 	str	r3, [r0, #2156]	; 0x86c
    9bd4:	e5805864 	str	r5, [r0, #2148]	; 0x864
    9bd8:	e5c05868 	strb	r5, [r0, #2152]	; 0x868
    9bdc:	e5805870 	str	r5, [r0, #2160]	; 0x870
    9be0:	e1a00006 	mov	r0, r6
    9be4:	e3401001 	movt	r1, #1
    9be8:	e5c45874 	strb	r5, [r4, #2164]	; 0x874
    9bec:	eb001a05 	bl	10408 <strcpy>
    9bf0:	e3041d30 	movw	r1, #19760	; 0x4d30
    9bf4:	e1a00008 	mov	r0, r8
    9bf8:	e3401001 	movt	r1, #1
    9bfc:	eb001a01 	bl	10408 <strcpy>
    9c00:	e5c4583a 	strb	r5, [r4, #2106]	; 0x83a
    9c04:	e3073184 	movw	r3, #29060	; 0x7184
    9c08:	e3403001 	movt	r3, #1
    9c0c:	e1a01005 	mov	r1, r5
    9c10:	e5c4584e 	strb	r5, [r4, #2126]	; 0x84e
    9c14:	e28d0010 	add	r0, sp, #16
    9c18:	e5834000 	str	r4, [r3]
    9c1c:	eb002339 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9c20:	e58d5000 	str	r5, [sp]
    9c24:	e3a01001 	mov	r1, #1
    9c28:	e3401005 	movt	r1, #5
    9c2c:	e300380c 	movw	r3, #2060	; 0x80c
    9c30:	e1a02004 	mov	r2, r4
    9c34:	e28d0010 	add	r0, sp, #16
    9c38:	eb002378 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9c3c:	e1500005 	cmp	r0, r5
    9c40:	0a00002a 	beq	9cf0 <CKernelOptions::CKernelOptions()+0x160>
    9c44:	e5943008 	ldr	r3, [r4, #8]
    9c48:	e3530b02 	cmp	r3, #2048	; 0x800
    9c4c:	2a000027 	bcs	9cf0 <CKernelOptions::CKernelOptions()+0x160>
    9c50:	e0843003 	add	r3, r4, r3
    9c54:	e3047d3c 	movw	r7, #19772	; 0x4d3c
    9c58:	e3407001 	movt	r7, #1
    9c5c:	e3049d44 	movw	r9, #19780	; 0x4d44
    9c60:	e5c3500c 	strb	r5, [r3, #12]
    9c64:	e3045d34 	movw	r5, #19764	; 0x4d34
    9c68:	e3405001 	movt	r5, #1
    9c6c:	e284300c 	add	r3, r4, #12
    9c70:	e3409001 	movt	r9, #1
    9c74:	e584380c 	str	r3, [r4, #2060]	; 0x80c
    9c78:	e1a00004 	mov	r0, r4
    9c7c:	ebffff41 	bl	9988 <CKernelOptions::GetToken()>
    9c80:	e250b000 	subs	fp, r0, #0
    9c84:	0a000019 	beq	9cf0 <CKernelOptions::CKernelOptions()+0x160>
    9c88:	e1db30d0 	ldrsb	r3, [fp]
    9c8c:	e3530000 	cmp	r3, #0
    9c90:	0a00001b 	beq	9d04 <CKernelOptions::CKernelOptions()+0x174>
    9c94:	e1a0100b 	mov	r1, fp
    9c98:	ea000002 	b	9ca8 <CKernelOptions::CKernelOptions()+0x118>
    9c9c:	e1f130d1 	ldrsb	r3, [r1, #1]!
    9ca0:	e3530000 	cmp	r3, #0
    9ca4:	0a000016 	beq	9d04 <CKernelOptions::CKernelOptions()+0x174>
    9ca8:	e353003d 	cmp	r3, #61	; 0x3d
    9cac:	1afffffa 	bne	9c9c <CKernelOptions::CKernelOptions()+0x10c>
    9cb0:	e1a0a001 	mov	sl, r1
    9cb4:	e3a03000 	mov	r3, #0
    9cb8:	e4ca3001 	strb	r3, [sl], #1
    9cbc:	e1a01005 	mov	r1, r5
    9cc0:	e1a0000b 	mov	r0, fp
    9cc4:	eb001934 	bl	1019c <strcmp>
    9cc8:	e3500000 	cmp	r0, #0
    9ccc:	1a00000e 	bne	9d0c <CKernelOptions::CKernelOptions()+0x17c>
    9cd0:	e1a0000a 	mov	r0, sl
    9cd4:	ebffff59 	bl	9a40 <CKernelOptions::GetDecimal(char*)>
    9cd8:	e3700001 	cmn	r0, #1
    9cdc:	15840810 	strne	r0, [r4, #2064]	; 0x810
    9ce0:	e1a00004 	mov	r0, r4
    9ce4:	ebffff27 	bl	9988 <CKernelOptions::GetToken()>
    9ce8:	e250b000 	subs	fp, r0, #0
    9cec:	1affffe5 	bne	9c88 <CKernelOptions::CKernelOptions()+0xf8>
    9cf0:	e28d0010 	add	r0, sp, #16
    9cf4:	eb00230a 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
    9cf8:	e1a00004 	mov	r0, r4
    9cfc:	e28dd01c 	add	sp, sp, #28
    9d00:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d04:	e1a0a003 	mov	sl, r3
    9d08:	eaffffeb 	b	9cbc <CKernelOptions::CKernelOptions()+0x12c>
    9d0c:	e1a01007 	mov	r1, r7
    9d10:	e1a0000b 	mov	r0, fp
    9d14:	eb001920 	bl	1019c <strcmp>
    9d18:	e3500000 	cmp	r0, #0
    9d1c:	1a000004 	bne	9d34 <CKernelOptions::CKernelOptions()+0x1a4>
    9d20:	e1a0000a 	mov	r0, sl
    9d24:	ebffff45 	bl	9a40 <CKernelOptions::GetDecimal(char*)>
    9d28:	e3700001 	cmn	r0, #1
    9d2c:	15840814 	strne	r0, [r4, #2068]	; 0x814
    9d30:	eaffffd0 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9d34:	e1a01009 	mov	r1, r9
    9d38:	e1a0000b 	mov	r0, fp
    9d3c:	eb001916 	bl	1019c <strcmp>
    9d40:	e2503000 	subs	r3, r0, #0
    9d44:	e58d300c 	str	r3, [sp, #12]
    9d48:	0a00000a 	beq	9d78 <CKernelOptions::CKernelOptions()+0x1e8>
    9d4c:	e3041d4c 	movw	r1, #19788	; 0x4d4c
    9d50:	e1a0000b 	mov	r0, fp
    9d54:	e3401001 	movt	r1, #1
    9d58:	eb00190f 	bl	1019c <strcmp>
    9d5c:	e3500000 	cmp	r0, #0
    9d60:	1a00000b 	bne	9d94 <CKernelOptions::CKernelOptions()+0x204>
    9d64:	e1a0000a 	mov	r0, sl
    9d68:	ebffff34 	bl	9a40 <CKernelOptions::GetDecimal(char*)>
    9d6c:	e3500004 	cmp	r0, #4
    9d70:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    9d74:	eaffffbf 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9d78:	e1a0100a 	mov	r1, sl
    9d7c:	e3a02013 	mov	r2, #19
    9d80:	e1a00006 	mov	r0, r6
    9d84:	eb0019aa 	bl	10434 <strncpy>
    9d88:	e59d300c 	ldr	r3, [sp, #12]
    9d8c:	e5c4382b 	strb	r3, [r4, #2091]	; 0x82b
    9d90:	eaffffb8 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9d94:	e3041d58 	movw	r1, #19800	; 0x4d58
    9d98:	e1a0000b 	mov	r0, fp
    9d9c:	e3401001 	movt	r1, #1
    9da0:	eb0018fd 	bl	1019c <strcmp>
    9da4:	e2503000 	subs	r3, r0, #0
    9da8:	e58d300c 	str	r3, [sp, #12]
    9dac:	0a00000c 	beq	9de4 <CKernelOptions::CKernelOptions()+0x254>
    9db0:	e3041d60 	movw	r1, #19808	; 0x4d60
    9db4:	e1a0000b 	mov	r0, fp
    9db8:	e3401001 	movt	r1, #1
    9dbc:	eb0018f6 	bl	1019c <strcmp>
    9dc0:	e3500000 	cmp	r0, #0
    9dc4:	1a00000d 	bne	9e00 <CKernelOptions::CKernelOptions()+0x270>
    9dc8:	e1a0000a 	mov	r0, sl
    9dcc:	ebffff1b 	bl	9a40 <CKernelOptions::GetDecimal(char*)>
    9dd0:	e24010c8 	sub	r1, r0, #200	; 0xc8
    9dd4:	e3012e78 	movw	r2, #7800	; 0x1e78
    9dd8:	e1510002 	cmp	r1, r2
    9ddc:	95840834 	strls	r0, [r4, #2100]	; 0x834
    9de0:	eaffffa4 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9de4:	e1a0100a 	mov	r1, sl
    9de8:	e3a02002 	mov	r2, #2
    9dec:	e1a00008 	mov	r0, r8
    9df0:	eb00198f 	bl	10434 <strncpy>
    9df4:	e59d300c 	ldr	r3, [sp, #12]
    9df8:	e5c43832 	strb	r3, [r4, #2098]	; 0x832
    9dfc:	eaffff9d 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9e00:	e3041d70 	movw	r1, #19824	; 0x4d70
    9e04:	e1a0000b 	mov	r0, fp
    9e08:	e3401001 	movt	r1, #1
    9e0c:	eb0018e2 	bl	1019c <strcmp>
    9e10:	e3500000 	cmp	r0, #0
    9e14:	1a000007 	bne	9e38 <CKernelOptions::CKernelOptions()+0x2a8>
    9e18:	e3041d7c 	movw	r1, #19836	; 0x4d7c
    9e1c:	e1a0000a 	mov	r0, sl
    9e20:	e3401001 	movt	r1, #1
    9e24:	eb0018dc 	bl	1019c <strcmp>
    9e28:	e3500000 	cmp	r0, #0
    9e2c:	03a03001 	moveq	r3, #1
    9e30:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
    9e34:	eaffff8f 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9e38:	e3041d84 	movw	r1, #19844	; 0x4d84
    9e3c:	e1a0000b 	mov	r0, fp
    9e40:	e3401001 	movt	r1, #1
    9e44:	eb0018d4 	bl	1019c <strcmp>
    9e48:	e3500000 	cmp	r0, #0
    9e4c:	1a000007 	bne	9e70 <CKernelOptions::CKernelOptions()+0x2e0>
    9e50:	e3041d90 	movw	r1, #19856	; 0x4d90
    9e54:	e1a0000a 	mov	r0, sl
    9e58:	e3401001 	movt	r1, #1
    9e5c:	eb0018ce 	bl	1019c <strcmp>
    9e60:	e3500000 	cmp	r0, #0
    9e64:	03a03001 	moveq	r3, #1
    9e68:	05c43839 	strbeq	r3, [r4, #2105]	; 0x839
    9e6c:	eaffff81 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9e70:	e3041d98 	movw	r1, #19864	; 0x4d98
    9e74:	e1a0000b 	mov	r0, fp
    9e78:	e3401001 	movt	r1, #1
    9e7c:	eb0018c6 	bl	1019c <strcmp>
    9e80:	e2503000 	subs	r3, r0, #0
    9e84:	e58d300c 	str	r3, [sp, #12]
    9e88:	1a000007 	bne	9eac <CKernelOptions::CKernelOptions()+0x31c>
    9e8c:	e2840e83 	add	r0, r4, #2096	; 0x830
    9e90:	e1a0100a 	mov	r1, sl
    9e94:	e280000a 	add	r0, r0, #10
    9e98:	e3a02013 	mov	r2, #19
    9e9c:	eb001964 	bl	10434 <strncpy>
    9ea0:	e59d300c 	ldr	r3, [sp, #12]
    9ea4:	e5c4384d 	strb	r3, [r4, #2125]	; 0x84d
    9ea8:	eaffff72 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9eac:	e3041da4 	movw	r1, #19876	; 0x4da4
    9eb0:	e1a0000b 	mov	r0, fp
    9eb4:	e3401001 	movt	r1, #1
    9eb8:	eb0018b7 	bl	1019c <strcmp>
    9ebc:	e3500000 	cmp	r0, #0
    9ec0:	1a000007 	bne	9ee4 <CKernelOptions::CKernelOptions()+0x354>
    9ec4:	e2840d21 	add	r0, r4, #2112	; 0x840
    9ec8:	e1a0100a 	mov	r1, sl
    9ecc:	e280000e 	add	r0, r0, #14
    9ed0:	e3a02013 	mov	r2, #19
    9ed4:	eb001956 	bl	10434 <strncpy>
    9ed8:	e3a03000 	mov	r3, #0
    9edc:	e5c43861 	strb	r3, [r4, #2145]	; 0x861
    9ee0:	eaffff64 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9ee4:	e3041db0 	movw	r1, #19888	; 0x4db0
    9ee8:	e1a0000b 	mov	r0, fp
    9eec:	e3401001 	movt	r1, #1
    9ef0:	eb0018a9 	bl	1019c <strcmp>
    9ef4:	e3500000 	cmp	r0, #0
    9ef8:	1a000004 	bne	9f10 <CKernelOptions::CKernelOptions()+0x380>
    9efc:	e1a0000a 	mov	r0, sl
    9f00:	ebfffece 	bl	9a40 <CKernelOptions::GetDecimal(char*)>
    9f04:	e3500002 	cmp	r0, #2
    9f08:	95840864 	strls	r0, [r4, #2148]	; 0x864
    9f0c:	eaffff59 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9f10:	e3041dbc 	movw	r1, #19900	; 0x4dbc
    9f14:	e1a0000b 	mov	r0, fp
    9f18:	e3401001 	movt	r1, #1
    9f1c:	eb00189e 	bl	1019c <strcmp>
    9f20:	e3500000 	cmp	r0, #0
    9f24:	1a000007 	bne	9f48 <CKernelOptions::CKernelOptions()+0x3b8>
    9f28:	e3041d90 	movw	r1, #19856	; 0x4d90
    9f2c:	e1a0000a 	mov	r0, sl
    9f30:	e3401001 	movt	r1, #1
    9f34:	eb001898 	bl	1019c <strcmp>
    9f38:	e3500000 	cmp	r0, #0
    9f3c:	03a03001 	moveq	r3, #1
    9f40:	05c43868 	strbeq	r3, [r4, #2152]	; 0x868
    9f44:	eaffff4b 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9f48:	e3041dc4 	movw	r1, #19908	; 0x4dc4
    9f4c:	e1a0000b 	mov	r0, fp
    9f50:	e3401001 	movt	r1, #1
    9f54:	eb001890 	bl	1019c <strcmp>
    9f58:	e3500000 	cmp	r0, #0
    9f5c:	1a000005 	bne	9f78 <CKernelOptions::CKernelOptions()+0x3e8>
    9f60:	e1a0000a 	mov	r0, sl
    9f64:	ebfffeb5 	bl	9a40 <CKernelOptions::GetDecimal(char*)>
    9f68:	e2402028 	sub	r2, r0, #40	; 0x28
    9f6c:	e3520026 	cmp	r2, #38	; 0x26
    9f70:	9584086c 	strls	r0, [r4, #2156]	; 0x86c
    9f74:	eaffff3f 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9f78:	e3041dd0 	movw	r1, #19920	; 0x4dd0
    9f7c:	e1a0000b 	mov	r0, fp
    9f80:	e3401001 	movt	r1, #1
    9f84:	eb001884 	bl	1019c <strcmp>
    9f88:	e3500000 	cmp	r0, #0
    9f8c:	1a000005 	bne	9fa8 <CKernelOptions::CKernelOptions()+0x418>
    9f90:	e1a0000a 	mov	r0, sl
    9f94:	ebfffea9 	bl	9a40 <CKernelOptions::GetDecimal(char*)>
    9f98:	e2402002 	sub	r2, r0, #2
    9f9c:	e3520019 	cmp	r2, #25
    9fa0:	95840870 	strls	r0, [r4, #2160]	; 0x870
    9fa4:	eaffff33 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9fa8:	e3041ddc 	movw	r1, #19932	; 0x4ddc
    9fac:	e1a0000b 	mov	r0, fp
    9fb0:	e3401001 	movt	r1, #1
    9fb4:	eb001878 	bl	1019c <strcmp>
    9fb8:	e3500000 	cmp	r0, #0
    9fbc:	1affff2d 	bne	9c78 <CKernelOptions::CKernelOptions()+0xe8>
    9fc0:	e2841e87 	add	r1, r4, #2160	; 0x870
    9fc4:	e1a0000a 	mov	r0, sl
    9fc8:	e2811008 	add	r1, r1, #8
    9fcc:	e3a02004 	mov	r2, #4
    9fd0:	ebfffeb9 	bl	9abc <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    9fd4:	e5c40874 	strb	r0, [r4, #2164]	; 0x874
    9fd8:	eaffff26 	b	9c78 <CKernelOptions::CKernelOptions()+0xe8>

00009fdc <CLogger::CLogger(unsigned int, CTimer*, bool)>:
    9fdc:	e92d4010 	push	{r4, lr}
    9fe0:	e1a04000 	mov	r4, r0
    9fe4:	e5c03008 	strb	r3, [r0, #8]
    9fe8:	e3a0c000 	mov	ip, #0
    9fec:	e580c00c 	str	ip, [r0, #12]
    9ff0:	e3a03001 	mov	r3, #1
    9ff4:	e8800006 	stm	r0, {r1, r2}
    9ff8:	e584301c 	str	r3, [r4, #28]
    9ffc:	e3a00901 	mov	r0, #16384	; 0x4000
    a000:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    a004:	e584c010 	str	ip, [r4, #16]
    a008:	e584c014 	str	ip, [r4, #20]
    a00c:	e584c018 	str	ip, [r4, #24]
    a010:	e584c0e8 	str	ip, [r4, #232]	; 0xe8
    a014:	e584c0ec 	str	ip, [r4, #236]	; 0xec
    a018:	e584c0f4 	str	ip, [r4, #244]	; 0xf4
    a01c:	e584c0f8 	str	ip, [r4, #248]	; 0xf8
    a020:	eb001b71 	bl	10dec <operator new[](unsigned int)>
    a024:	e5840010 	str	r0, [r4, #16]
    a028:	e3073188 	movw	r3, #29064	; 0x7188
    a02c:	e3403001 	movt	r3, #1
    a030:	e1a00004 	mov	r0, r4
    a034:	e5834000 	str	r4, [r3]
    a038:	e8bd8010 	pop	{r4, pc}

0000a03c <CLogger::~CLogger()>:
    a03c:	e59030ec 	ldr	r3, [r0, #236]	; 0xec
    a040:	e3072188 	movw	r2, #29064	; 0x7188
    a044:	e3402001 	movt	r2, #1
    a048:	e92d4070 	push	{r4, r5, r6, lr}
    a04c:	e3a05000 	mov	r5, #0
    a050:	e590c0e8 	ldr	ip, [r0, #232]	; 0xe8
    a054:	e1a04000 	mov	r4, r0
    a058:	e5825000 	str	r5, [r2]
    a05c:	ea00000a 	b	a08c <CLogger::~CLogger()+0x50>
    a060:	e7940102 	ldr	r0, [r4, r2, lsl #2]
    a064:	e3500000 	cmp	r0, #0
    a068:	0a000002 	beq	a078 <CLogger::~CLogger()+0x3c>
    a06c:	eb001b70 	bl	10e34 <operator delete(void*, unsigned int)>
    a070:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    a074:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
    a078:	e2833001 	add	r3, r3, #1
    a07c:	e58430ec 	str	r3, [r4, #236]	; 0xec
    a080:	e3530032 	cmp	r3, #50	; 0x32
    a084:	058450ec 	streq	r5, [r4, #236]	; 0xec
    a088:	03a03000 	moveq	r3, #0
    a08c:	e153000c 	cmp	r3, ip
    a090:	e2832008 	add	r2, r3, #8
    a094:	e3a01f42 	mov	r1, #264	; 0x108
    a098:	1afffff0 	bne	a060 <CLogger::~CLogger()+0x24>
    a09c:	e5940010 	ldr	r0, [r4, #16]
    a0a0:	e3500000 	cmp	r0, #0
    a0a4:	0a000000 	beq	a0ac <CLogger::~CLogger()+0x70>
    a0a8:	eb001b5b 	bl	10e1c <operator delete[](void*)>
    a0ac:	e1a00004 	mov	r0, r4
    a0b0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a0b4 <CLogger::SetNewTarget(CDevice*)>:
    a0b4:	e580100c 	str	r1, [r0, #12]
    a0b8:	e12fff1e 	bx	lr

0000a0bc <CLogger::Get()>:
    a0bc:	e92d4070 	push	{r4, r5, r6, lr}
    a0c0:	e3075188 	movw	r5, #29064	; 0x7188
    a0c4:	e3405001 	movt	r5, #1
    a0c8:	e5954000 	ldr	r4, [r5]
    a0cc:	e3540000 	cmp	r4, #0
    a0d0:	0a000001 	beq	a0dc <CLogger::Get()+0x20>
    a0d4:	e1a00004 	mov	r0, r4
    a0d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0dc:	e3a000fc 	mov	r0, #252	; 0xfc
    a0e0:	eb001b3b 	bl	10dd4 <operator new(unsigned int)>
    a0e4:	e1a04000 	mov	r4, r0
    a0e8:	e3a03000 	mov	r3, #0
    a0ec:	e5803000 	str	r3, [r0]
    a0f0:	e3a02001 	mov	r2, #1
    a0f4:	e5803004 	str	r3, [r0, #4]
    a0f8:	e3a00901 	mov	r0, #16384	; 0x4000
    a0fc:	e5c42008 	strb	r2, [r4, #8]
    a100:	e584300c 	str	r3, [r4, #12]
    a104:	e5843010 	str	r3, [r4, #16]
    a108:	e5843014 	str	r3, [r4, #20]
    a10c:	e5843018 	str	r3, [r4, #24]
    a110:	e584201c 	str	r2, [r4, #28]
    a114:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    a118:	e58430ec 	str	r3, [r4, #236]	; 0xec
    a11c:	e1c42ff0 	strd	r2, [r4, #240]	; 0xf0
    a120:	e58430f8 	str	r3, [r4, #248]	; 0xf8
    a124:	eb001b30 	bl	10dec <operator new[](unsigned int)>
    a128:	e5840010 	str	r0, [r4, #16]
    a12c:	e1a00004 	mov	r0, r4
    a130:	e5854000 	str	r4, [r5]
    a134:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a138 <CLogger::Write(char const*)>:
    a138:	e92d4070 	push	{r4, r5, r6, lr}
    a13c:	e1a04000 	mov	r4, r0
    a140:	e1a00001 	mov	r0, r1
    a144:	e1a05001 	mov	r5, r1
    a148:	eb001809 	bl	10174 <strlen>
    a14c:	e1a06000 	mov	r6, r0
    a150:	e594000c 	ldr	r0, [r4, #12]
    a154:	e3500000 	cmp	r0, #0
    a158:	0a000004 	beq	a170 <CLogger::Write(char const*)+0x38>
    a15c:	e5903000 	ldr	r3, [r0]
    a160:	e1a02006 	mov	r2, r6
    a164:	e1a01005 	mov	r1, r5
    a168:	e593300c 	ldr	r3, [r3, #12]
    a16c:	e12fff33 	blx	r3
    a170:	e594001c 	ldr	r0, [r4, #28]
    a174:	e3500000 	cmp	r0, #0
    a178:	1a000023 	bne	a20c <CLogger::Write(char const*)+0xd4>
    a17c:	e3560000 	cmp	r6, #0
    a180:	e246c001 	sub	ip, r6, #1
    a184:	08bd8070 	popeq	{r4, r5, r6, pc}
    a188:	e1a02005 	mov	r2, r5
    a18c:	ea000003 	b	a1a0 <CLogger::Write(char const*)+0x68>
    a190:	e2623001 	rsb	r3, r2, #1
    a194:	e0853003 	add	r3, r5, r3
    a198:	e173000c 	cmn	r3, ip
    a19c:	0a000015 	beq	a1f8 <CLogger::Write(char const*)+0xc0>
    a1a0:	e0d230d1 	ldrsb	r3, [r2], #1
    a1a4:	e353000d 	cmp	r3, #13
    a1a8:	0afffff8 	beq	a190 <CLogger::Write(char const*)+0x58>
    a1ac:	e1c401d0 	ldrd	r0, [r4, #16]
    a1b0:	e7c03001 	strb	r3, [r0, r1]
    a1b4:	e5943014 	ldr	r3, [r4, #20]
    a1b8:	e5940018 	ldr	r0, [r4, #24]
    a1bc:	e2833001 	add	r3, r3, #1
    a1c0:	e7ed3053 	ubfx	r3, r3, #0, #14
    a1c4:	e1530000 	cmp	r3, r0
    a1c8:	e5843014 	str	r3, [r4, #20]
    a1cc:	1affffef 	bne	a190 <CLogger::Write(char const*)+0x58>
    a1d0:	e5d40008 	ldrb	r0, [r4, #8]
    a1d4:	e2831001 	add	r1, r3, #1
    a1d8:	e7ed1051 	ubfx	r1, r1, #0, #14
    a1dc:	e3500000 	cmp	r0, #0
    a1e0:	0a00000e 	beq	a220 <CLogger::Write(char const*)+0xe8>
    a1e4:	e5841018 	str	r1, [r4, #24]
    a1e8:	e2623001 	rsb	r3, r2, #1
    a1ec:	e0853003 	add	r3, r5, r3
    a1f0:	e173000c 	cmn	r3, ip
    a1f4:	1affffe9 	bne	a1a0 <CLogger::Write(char const*)+0x68>
    a1f8:	e594301c 	ldr	r3, [r4, #28]
    a1fc:	e3530000 	cmp	r3, #0
    a200:	08bd8070 	popeq	{r4, r5, r6, pc}
    a204:	e8bd4070 	pop	{r4, r5, r6, lr}
    a208:	ea001e9e 	b	11c88 <LeaveCritical>
    a20c:	eb001e72 	bl	11bdc <EnterCritical>
    a210:	e3560000 	cmp	r6, #0
    a214:	e246c001 	sub	ip, r6, #1
    a218:	1affffda 	bne	a188 <CLogger::Write(char const*)+0x50>
    a21c:	eafffff5 	b	a1f8 <CLogger::Write(char const*)+0xc0>
    a220:	e2433001 	sub	r3, r3, #1
    a224:	e7ed3053 	ubfx	r3, r3, #0, #14
    a228:	e5843014 	str	r3, [r4, #20]
    a22c:	eafffff1 	b	a1f8 <CLogger::Write(char const*)+0xc0>

0000a230 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    a230:	e92d4070 	push	{r4, r5, r6, lr}
    a234:	e1a04000 	mov	r4, r0
    a238:	e5900000 	ldr	r0, [r0]
    a23c:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    a240:	e1520000 	cmp	r2, r0
    a244:	8a000012 	bhi	a294 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
    a248:	e3520000 	cmp	r2, #0
    a24c:	e1a05003 	mov	r5, r3
    a250:	e3a03000 	mov	r3, #0
    a254:	e5cd3000 	strb	r3, [sp]
    a258:	0a00000f 	beq	a29c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    a25c:	e1a0000d 	mov	r0, sp
    a260:	eb001881 	bl	1046c <strcat>
    a264:	e59f1098 	ldr	r1, [pc, #152]	; a304 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a268:	e1a0000d 	mov	r0, sp
    a26c:	eb00187e 	bl	1046c <strcat>
    a270:	e1a01005 	mov	r1, r5
    a274:	e1a0000d 	mov	r0, sp
    a278:	eb00187b 	bl	1046c <strcat>
    a27c:	e59f1084 	ldr	r1, [pc, #132]	; a308 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    a280:	e1a0000d 	mov	r0, sp
    a284:	eb001878 	bl	1046c <strcat>
    a288:	e1a0100d 	mov	r1, sp
    a28c:	e1a00004 	mov	r0, r4
    a290:	ebffffa8 	bl	a138 <CLogger::Write(char const*)>
    a294:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    a298:	e8bd8070 	pop	{r4, r5, r6, pc}
    a29c:	e1a06001 	mov	r6, r1
    a2a0:	e3041dec 	movw	r1, #19948	; 0x4dec
    a2a4:	e3401001 	movt	r1, #1
    a2a8:	e1a0000d 	mov	r0, sp
    a2ac:	eb001855 	bl	10408 <strcpy>
    a2b0:	e1a01006 	mov	r1, r6
    a2b4:	e1a0000d 	mov	r0, sp
    a2b8:	eb00186b 	bl	1046c <strcat>
    a2bc:	e59f1040 	ldr	r1, [pc, #64]	; a304 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a2c0:	e1a0000d 	mov	r0, sp
    a2c4:	eb001868 	bl	1046c <strcat>
    a2c8:	e1a01005 	mov	r1, r5
    a2cc:	e1a0000d 	mov	r0, sp
    a2d0:	eb001865 	bl	1046c <strcat>
    a2d4:	e59f1030 	ldr	r1, [pc, #48]	; a30c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
    a2d8:	e1a0000d 	mov	r0, sp
    a2dc:	eb001862 	bl	1046c <strcat>
    a2e0:	e59f1020 	ldr	r1, [pc, #32]	; a308 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    a2e4:	e1a0000d 	mov	r0, sp
    a2e8:	eb00185f 	bl	1046c <strcat>
    a2ec:	e1a0100d 	mov	r1, sp
    a2f0:	e1a00004 	mov	r0, r4
    a2f4:	ebffff8f 	bl	a138 <CLogger::Write(char const*)>
    a2f8:	e3a000ff 	mov	r0, #255	; 0xff
    a2fc:	eb0013c3 	bl	f210 <set_qemu_exit_status>
    a300:	eb0013c3 	bl	f214 <halt>
    a304:	00014df4 	.word	0x00014df4
    a308:	00014e00 	.word	0x00014e00
    a30c:	00014df8 	.word	0x00014df8

0000a310 <CLogger::Read(void*, unsigned int, bool)>:
    a310:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a314:	e1a04000 	mov	r4, r0
    a318:	e590001c 	ldr	r0, [r0, #28]
    a31c:	e1a05001 	mov	r5, r1
    a320:	e1a07002 	mov	r7, r2
    a324:	e1a08003 	mov	r8, r3
    a328:	e3500000 	cmp	r0, #0
    a32c:	1a00001a 	bne	a39c <CLogger::Read(void*, unsigned int, bool)+0x8c>
    a330:	e594c018 	ldr	ip, [r4, #24]
    a334:	e5943014 	ldr	r3, [r4, #20]
    a338:	e153000c 	cmp	r3, ip
    a33c:	0a000024 	beq	a3d4 <CLogger::Read(void*, unsigned int, bool)+0xc4>
    a340:	e1a09007 	mov	r9, r7
    a344:	e3a0e000 	mov	lr, #0
    a348:	ea000006 	b	a368 <CLogger::Read(void*, unsigned int, bool)+0x58>
    a34c:	e5946010 	ldr	r6, [r4, #16]
    a350:	e19660dc 	ldrsb	r6, [r6, ip]
    a354:	e7edc051 	ubfx	ip, r1, #0, #14
    a358:	e4c56001 	strb	r6, [r5], #1
    a35c:	e5941014 	ldr	r1, [r4, #20]
    a360:	e151000c 	cmp	r1, ip
    a364:	0a00000a 	beq	a394 <CLogger::Read(void*, unsigned int, bool)+0x84>
    a368:	e15e0007 	cmp	lr, r7
    a36c:	e28c1001 	add	r1, ip, #1
    a370:	e28ee001 	add	lr, lr, #1
    a374:	1afffff4 	bne	a34c <CLogger::Read(void*, unsigned int, bool)+0x3c>
    a378:	e594301c 	ldr	r3, [r4, #28]
    a37c:	e3580000 	cmp	r8, #0
    a380:	1584c018 	strne	ip, [r4, #24]
    a384:	e3530000 	cmp	r3, #0
    a388:	1a00000e 	bne	a3c8 <CLogger::Read(void*, unsigned int, bool)+0xb8>
    a38c:	e1a00009 	mov	r0, r9
    a390:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a394:	e1a0900e 	mov	r9, lr
    a398:	eafffff6 	b	a378 <CLogger::Read(void*, unsigned int, bool)+0x68>
    a39c:	eb001e0e 	bl	11bdc <EnterCritical>
    a3a0:	e594c018 	ldr	ip, [r4, #24]
    a3a4:	e5943014 	ldr	r3, [r4, #20]
    a3a8:	e153000c 	cmp	r3, ip
    a3ac:	1affffe3 	bne	a340 <CLogger::Read(void*, unsigned int, bool)+0x30>
    a3b0:	e594301c 	ldr	r3, [r4, #28]
    a3b4:	e3530000 	cmp	r3, #0
    a3b8:	0a000005 	beq	a3d4 <CLogger::Read(void*, unsigned int, bool)+0xc4>
    a3bc:	e3e09000 	mvn	r9, #0
    a3c0:	eb001e30 	bl	11c88 <LeaveCritical>
    a3c4:	eafffff0 	b	a38c <CLogger::Read(void*, unsigned int, bool)+0x7c>
    a3c8:	eb001e2e 	bl	11c88 <LeaveCritical>
    a3cc:	e1a00009 	mov	r0, r9
    a3d0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a3d4:	e3e09000 	mvn	r9, #0
    a3d8:	eaffffeb 	b	a38c <CLogger::Read(void*, unsigned int, bool)+0x7c>

0000a3dc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    a3dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a3e0:	e1a04000 	mov	r4, r0
    a3e4:	e24dd008 	sub	sp, sp, #8
    a3e8:	e3a00f42 	mov	r0, #264	; 0x108
    a3ec:	e1a07002 	mov	r7, r2
    a3f0:	e1a06003 	mov	r6, r3
    a3f4:	e1a08001 	mov	r8, r1
    a3f8:	eb001a75 	bl	10dd4 <operator new(unsigned int)>
    a3fc:	e1a05000 	mov	r5, r0
    a400:	e1a01008 	mov	r1, r8
    a404:	e4c07001 	strb	r7, [r0], #1
    a408:	e3a02032 	mov	r2, #50	; 0x32
    a40c:	e3a07000 	mov	r7, #0
    a410:	eb001807 	bl	10434 <strncpy>
    a414:	e5c57032 	strb	r7, [r5, #50]	; 0x32
    a418:	e3a020c8 	mov	r2, #200	; 0xc8
    a41c:	e1a01006 	mov	r1, r6
    a420:	e2850033 	add	r0, r5, #51	; 0x33
    a424:	eb001802 	bl	10434 <strncpy>
    a428:	e5940004 	ldr	r0, [r4, #4]
    a42c:	e5c570fa 	strb	r7, [r5, #250]	; 0xfa
    a430:	e1500007 	cmp	r0, r7
    a434:	0a000004 	beq	a44c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    a438:	e28d2004 	add	r2, sp, #4
    a43c:	e1a0100d 	mov	r1, sp
    a440:	eb001458 	bl	f5a8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    a444:	e1500007 	cmp	r0, r7
    a448:	1a000038 	bne	a530 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
    a44c:	e3a03000 	mov	r3, #0
    a450:	e58530fc 	str	r3, [r5, #252]	; 0xfc
    a454:	e5853100 	str	r3, [r5, #256]	; 0x100
    a458:	e5853104 	str	r3, [r5, #260]	; 0x104
    a45c:	e59400f0 	ldr	r0, [r4, #240]	; 0xf0
    a460:	e3500000 	cmp	r0, #0
    a464:	1a00002e 	bne	a524 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
    a468:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    a46c:	e2831008 	add	r1, r3, #8
    a470:	e3530031 	cmp	r3, #49	; 0x31
    a474:	e7845101 	str	r5, [r4, r1, lsl #2]
    a478:	e2831001 	add	r1, r3, #1
    a47c:	0a00001c 	beq	a4f4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
    a480:	e59420ec 	ldr	r2, [r4, #236]	; 0xec
    a484:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    a488:	e1510002 	cmp	r1, r2
    a48c:	0a000007 	beq	a4b0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
    a490:	e3500000 	cmp	r0, #0
    a494:	1a000014 	bne	a4ec <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
    a498:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    a49c:	e3530000 	cmp	r3, #0
    a4a0:	0a000000 	beq	a4a8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    a4a4:	e12fff33 	blx	r3
    a4a8:	e28dd008 	add	sp, sp, #8
    a4ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a4b0:	e2833009 	add	r3, r3, #9
    a4b4:	e3510031 	cmp	r1, #49	; 0x31
    a4b8:	e2811001 	add	r1, r1, #1
    a4bc:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    a4c0:	03a03000 	moveq	r3, #0
    a4c4:	058430ec 	streq	r3, [r4, #236]	; 0xec
    a4c8:	1a000010 	bne	a510 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
    a4cc:	e3500000 	cmp	r0, #0
    a4d0:	1a000011 	bne	a51c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
    a4d4:	e3550000 	cmp	r5, #0
    a4d8:	0affffee 	beq	a498 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    a4dc:	e3a01f42 	mov	r1, #264	; 0x108
    a4e0:	e1a00005 	mov	r0, r5
    a4e4:	eb001a52 	bl	10e34 <operator delete(void*, unsigned int)>
    a4e8:	eaffffea 	b	a498 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    a4ec:	eb001de5 	bl	11c88 <LeaveCritical>
    a4f0:	eaffffe8 	b	a498 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    a4f4:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    a4f8:	e3a01000 	mov	r1, #0
    a4fc:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    a500:	e1530001 	cmp	r3, r1
    a504:	1affffe1 	bne	a490 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
    a508:	e5945020 	ldr	r5, [r4, #32]
    a50c:	e3a01001 	mov	r1, #1
    a510:	e58410ec 	str	r1, [r4, #236]	; 0xec
    a514:	e3500000 	cmp	r0, #0
    a518:	0affffed 	beq	a4d4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    a51c:	eb001dd9 	bl	11c88 <LeaveCritical>
    a520:	eaffffeb 	b	a4d4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    a524:	eb001dac 	bl	11bdc <EnterCritical>
    a528:	e59400f0 	ldr	r0, [r4, #240]	; 0xf0
    a52c:	eaffffcd 	b	a468 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    a530:	e59d3004 	ldr	r3, [sp, #4]
    a534:	e3012759 	movw	r2, #5977	; 0x1759
    a538:	e34d21b7 	movt	r2, #53687	; 0xd1b7
    a53c:	e0832392 	umull	r2, r3, r2, r3
    a540:	e59d1000 	ldr	r1, [sp]
    a544:	e1a036a3 	lsr	r3, r3, #13
    a548:	e5940004 	ldr	r0, [r4, #4]
    a54c:	e58510fc 	str	r1, [r5, #252]	; 0xfc
    a550:	e5853100 	str	r3, [r5, #256]	; 0x100
    a554:	eb0013df 	bl	f4d8 <CTimer::GetTimeZone() const>
    a558:	e5850104 	str	r0, [r5, #260]	; 0x104
    a55c:	eaffffbe 	b	a45c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>

0000a560 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    a560:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a564:	e1a04000 	mov	r4, r0
    a568:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
    a56c:	e1a08001 	mov	r8, r1
    a570:	e1a06002 	mov	r6, r2
    a574:	e1a07003 	mov	r7, r3
    a578:	e3500000 	cmp	r0, #0
    a57c:	1a000021 	bne	a608 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa8>
    a580:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
    a584:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    a588:	e15c0003 	cmp	ip, r3
    a58c:	0a000027 	beq	a630 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd0>
    a590:	e28c3008 	add	r3, ip, #8
    a594:	e35c0031 	cmp	ip, #49	; 0x31
    a598:	e28cc001 	add	ip, ip, #1
    a59c:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    a5a0:	03a03000 	moveq	r3, #0
    a5a4:	1584c0ec 	strne	ip, [r4, #236]	; 0xec
    a5a8:	058430ec 	streq	r3, [r4, #236]	; 0xec
    a5ac:	e3500000 	cmp	r0, #0
    a5b0:	1a000020 	bne	a638 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd8>
    a5b4:	e1a01005 	mov	r1, r5
    a5b8:	e1a00006 	mov	r0, r6
    a5bc:	e4d13001 	ldrb	r3, [r1], #1
    a5c0:	e5c83000 	strb	r3, [r8]
    a5c4:	eb00178f 	bl	10408 <strcpy>
    a5c8:	e2851033 	add	r1, r5, #51	; 0x33
    a5cc:	e1a00007 	mov	r0, r7
    a5d0:	eb00178c 	bl	10408 <strcpy>
    a5d4:	e1c52fdc 	ldrd	r2, [r5, #252]	; 0xfc
    a5d8:	e59d0018 	ldr	r0, [sp, #24]
    a5dc:	e3a01f42 	mov	r1, #264	; 0x108
    a5e0:	e5802000 	str	r2, [r0]
    a5e4:	e1a00005 	mov	r0, r5
    a5e8:	e59d201c 	ldr	r2, [sp, #28]
    a5ec:	e5823000 	str	r3, [r2]
    a5f0:	e59d2020 	ldr	r2, [sp, #32]
    a5f4:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    a5f8:	e5823000 	str	r3, [r2]
    a5fc:	eb001a0c 	bl	10e34 <operator delete(void*, unsigned int)>
    a600:	e3a00001 	mov	r0, #1
    a604:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a608:	eb001d73 	bl	11bdc <EnterCritical>
    a60c:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
    a610:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    a614:	e153000c 	cmp	r3, ip
    a618:	159400f0 	ldrne	r0, [r4, #240]	; 0xf0
    a61c:	1affffdb 	bne	a590 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    a620:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    a624:	e3530000 	cmp	r3, #0
    a628:	0a000000 	beq	a630 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd0>
    a62c:	eb001d95 	bl	11c88 <LeaveCritical>
    a630:	e3a00000 	mov	r0, #0
    a634:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a638:	eb001d92 	bl	11c88 <LeaveCritical>
    a63c:	eaffffdc 	b	a5b4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000a640 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    a640:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    a644:	e12fff1e 	bx	lr

0000a648 <CLogger::RegisterPanicHandler(void (*)())>:
    a648:	e58010f8 	str	r1, [r0, #248]	; 0xf8
    a64c:	e12fff1e 	bx	lr

0000a650 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    a650:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a654:	e24dd024 	sub	sp, sp, #36	; 0x24
    a658:	e1a07003 	mov	r7, r3
    a65c:	e1a04000 	mov	r4, r0
    a660:	e1a0000d 	mov	r0, sp
    a664:	e1a05002 	mov	r5, r2
    a668:	e1a06001 	mov	r6, r1
    a66c:	eb000d3c 	bl	db64 <CString::CString()>
    a670:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    a674:	e1a01007 	mov	r1, r7
    a678:	e1a0000d 	mov	r0, sp
    a67c:	eb000f8b 	bl	e4b0 <CString::FormatV(char const*, std::__va_list)>
    a680:	e1a0000d 	mov	r0, sp
    a684:	eb000d6d 	bl	dc40 <CString::operator char const*() const>
    a688:	e1a03000 	mov	r3, r0
    a68c:	e1a02005 	mov	r2, r5
    a690:	e1a01006 	mov	r1, r6
    a694:	e1a00004 	mov	r0, r4
    a698:	ebffff4f 	bl	a3dc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    a69c:	e5943000 	ldr	r3, [r4]
    a6a0:	e1550003 	cmp	r5, r3
    a6a4:	8a000029 	bhi	a750 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
    a6a8:	e28d0010 	add	r0, sp, #16
    a6ac:	eb000d2c 	bl	db64 <CString::CString()>
    a6b0:	e3550000 	cmp	r5, #0
    a6b4:	0a000029 	beq	a760 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
    a6b8:	e5940004 	ldr	r0, [r4, #4]
    a6bc:	e3500000 	cmp	r0, #0
    a6c0:	0a00000d 	beq	a6fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a6c4:	eb001422 	bl	f754 <CTimer::GetTimeString()>
    a6c8:	e2505000 	subs	r5, r0, #0
    a6cc:	0a00000a 	beq	a6fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a6d0:	eb000d5a 	bl	dc40 <CString::operator char const*() const>
    a6d4:	e1a01000 	mov	r1, r0
    a6d8:	e28d0010 	add	r0, sp, #16
    a6dc:	eb000d98 	bl	dd44 <CString::Append(char const*)>
    a6e0:	e59f1140 	ldr	r1, [pc, #320]	; a828 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    a6e4:	e28d0010 	add	r0, sp, #16
    a6e8:	eb000d95 	bl	dd44 <CString::Append(char const*)>
    a6ec:	e5953000 	ldr	r3, [r5]
    a6f0:	e1a00005 	mov	r0, r5
    a6f4:	e5933004 	ldr	r3, [r3, #4]
    a6f8:	e12fff33 	blx	r3
    a6fc:	e1a01006 	mov	r1, r6
    a700:	e28d0010 	add	r0, sp, #16
    a704:	eb000d8e 	bl	dd44 <CString::Append(char const*)>
    a708:	e59f111c 	ldr	r1, [pc, #284]	; a82c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    a70c:	e28d0010 	add	r0, sp, #16
    a710:	eb000d8b 	bl	dd44 <CString::Append(char const*)>
    a714:	e1a0000d 	mov	r0, sp
    a718:	eb000d48 	bl	dc40 <CString::operator char const*() const>
    a71c:	e1a01000 	mov	r1, r0
    a720:	e28d0010 	add	r0, sp, #16
    a724:	eb000d86 	bl	dd44 <CString::Append(char const*)>
    a728:	e59f1100 	ldr	r1, [pc, #256]	; a830 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    a72c:	e28d0010 	add	r0, sp, #16
    a730:	eb000d83 	bl	dd44 <CString::Append(char const*)>
    a734:	e28d0010 	add	r0, sp, #16
    a738:	eb000d40 	bl	dc40 <CString::operator char const*() const>
    a73c:	e1a01000 	mov	r1, r0
    a740:	e1a00004 	mov	r0, r4
    a744:	ebfffe7b 	bl	a138 <CLogger::Write(char const*)>
    a748:	e28d0010 	add	r0, sp, #16
    a74c:	eb000cd1 	bl	da98 <CString::~CString()>
    a750:	e1a0000d 	mov	r0, sp
    a754:	eb000ccf 	bl	da98 <CString::~CString()>
    a758:	e28dd024 	add	sp, sp, #36	; 0x24
    a75c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a760:	e3041dec 	movw	r1, #19948	; 0x4dec
    a764:	e28d0010 	add	r0, sp, #16
    a768:	e3401001 	movt	r1, #1
    a76c:	eb000d39 	bl	dc58 <CString::operator=(char const*)>
    a770:	e5940004 	ldr	r0, [r4, #4]
    a774:	e3500000 	cmp	r0, #0
    a778:	0a00000d 	beq	a7b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x164>
    a77c:	eb0013f4 	bl	f754 <CTimer::GetTimeString()>
    a780:	e2505000 	subs	r5, r0, #0
    a784:	0a00000a 	beq	a7b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x164>
    a788:	eb000d2c 	bl	dc40 <CString::operator char const*() const>
    a78c:	e1a01000 	mov	r1, r0
    a790:	e28d0010 	add	r0, sp, #16
    a794:	eb000d6a 	bl	dd44 <CString::Append(char const*)>
    a798:	e59f1088 	ldr	r1, [pc, #136]	; a828 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    a79c:	e28d0010 	add	r0, sp, #16
    a7a0:	eb000d67 	bl	dd44 <CString::Append(char const*)>
    a7a4:	e5953000 	ldr	r3, [r5]
    a7a8:	e1a00005 	mov	r0, r5
    a7ac:	e5933004 	ldr	r3, [r3, #4]
    a7b0:	e12fff33 	blx	r3
    a7b4:	e1a01006 	mov	r1, r6
    a7b8:	e28d0010 	add	r0, sp, #16
    a7bc:	eb000d60 	bl	dd44 <CString::Append(char const*)>
    a7c0:	e59f1064 	ldr	r1, [pc, #100]	; a82c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    a7c4:	e28d0010 	add	r0, sp, #16
    a7c8:	eb000d5d 	bl	dd44 <CString::Append(char const*)>
    a7cc:	e1a0000d 	mov	r0, sp
    a7d0:	eb000d1a 	bl	dc40 <CString::operator char const*() const>
    a7d4:	e1a01000 	mov	r1, r0
    a7d8:	e28d0010 	add	r0, sp, #16
    a7dc:	eb000d58 	bl	dd44 <CString::Append(char const*)>
    a7e0:	e59f104c 	ldr	r1, [pc, #76]	; a834 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    a7e4:	e28d0010 	add	r0, sp, #16
    a7e8:	eb000d55 	bl	dd44 <CString::Append(char const*)>
    a7ec:	e59f103c 	ldr	r1, [pc, #60]	; a830 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    a7f0:	e28d0010 	add	r0, sp, #16
    a7f4:	eb000d52 	bl	dd44 <CString::Append(char const*)>
    a7f8:	e28d0010 	add	r0, sp, #16
    a7fc:	eb000d0f 	bl	dc40 <CString::operator char const*() const>
    a800:	e1a01000 	mov	r1, r0
    a804:	e1a00004 	mov	r0, r4
    a808:	ebfffe4a 	bl	a138 <CLogger::Write(char const*)>
    a80c:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
    a810:	e3530000 	cmp	r3, #0
    a814:	0a000000 	beq	a81c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1cc>
    a818:	e12fff33 	blx	r3
    a81c:	e3a000ff 	mov	r0, #255	; 0xff
    a820:	eb00127a 	bl	f210 <set_qemu_exit_status>
    a824:	eb00127a 	bl	f214 <halt>
    a828:	00014e04 	.word	0x00014e04
    a82c:	00014df4 	.word	0x00014df4
    a830:	00014e00 	.word	0x00014e00
    a834:	00014df8 	.word	0x00014df8

0000a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    a838:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    a83c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a840:	e24dd010 	sub	sp, sp, #16
    a844:	e28dc018 	add	ip, sp, #24
    a848:	e59d3014 	ldr	r3, [sp, #20]
    a84c:	e58dc000 	str	ip, [sp]
    a850:	e58dc00c 	str	ip, [sp, #12]
    a854:	ebffff7d 	bl	a650 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    a858:	e28dd010 	add	sp, sp, #16
    a85c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a860:	e28dd004 	add	sp, sp, #4
    a864:	e12fff1e 	bx	lr

0000a868 <CLogger::Initialize(CDevice*)>:
    a868:	e92d4010 	push	{r4, lr}
    a86c:	e24dd008 	sub	sp, sp, #8
    a870:	e580100c 	str	r1, [r0, #12]
    a874:	e1a04000 	mov	r4, r0
    a878:	eb000227 	bl	b11c <CMachineInfo::Get()>
    a87c:	eb000127 	bl	ad20 <CMachineInfo::GetMachineName() const>
    a880:	e58d0004 	str	r0, [sp, #4]
    a884:	e3041dec 	movw	r1, #19948	; 0x4dec
    a888:	e3401001 	movt	r1, #1
    a88c:	e30731a8 	movw	r3, #29096	; 0x71a8
    a890:	e3403001 	movt	r3, #1
    a894:	e1a00004 	mov	r0, r4
    a898:	e58d3000 	str	r3, [sp]
    a89c:	e3a02003 	mov	r2, #3
    a8a0:	e281301c 	add	r3, r1, #28
    a8a4:	e2811034 	add	r1, r1, #52	; 0x34
    a8a8:	ebffffe2 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a8ac:	e3a00001 	mov	r0, #1
    a8b0:	e28dd008 	add	sp, sp, #8
    a8b4:	e8bd8010 	pop	{r4, pc}

0000a8b8 <CMachineInfo::CMachineInfo()>:
    a8b8:	e92d4810 	push	{r4, fp, lr}
    a8bc:	e28db008 	add	fp, sp, #8
    a8c0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    a8c4:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
    a8c8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8cc:	e3a02000 	mov	r2, #0
    a8d0:	e5832000 	str	r2, [r3]
    a8d4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8d8:	e3a02014 	mov	r2, #20
    a8dc:	e5c32008 	strb	r2, [r3, #8]
    a8e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8e4:	e3a02000 	mov	r2, #0
    a8e8:	e5832010 	str	r2, [r3, #16]
    a8ec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8f0:	e3a02000 	mov	r2, #0
    a8f4:	e5832018 	str	r2, [r3, #24]
    a8f8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8fc:	e3a02004 	mov	r2, #4
    a900:	e5c32020 	strb	r2, [r3, #32]
    a904:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a908:	e3a02000 	mov	r2, #0
    a90c:	e5832028 	str	r2, [r3, #40]	; 0x28
    a910:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a914:	e3012f35 	movw	r2, #7989	; 0x1f35
    a918:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
    a91c:	e307318c 	movw	r3, #29068	; 0x718c
    a920:	e3403001 	movt	r3, #1
    a924:	e5933000 	ldr	r3, [r3]
    a928:	e3530000 	cmp	r3, #0
    a92c:	0a000024 	beq	a9c4 <CMachineInfo::CMachineInfo()+0x10c>
    a930:	e307318c 	movw	r3, #29068	; 0x718c
    a934:	e3403001 	movt	r3, #1
    a938:	e5933000 	ldr	r3, [r3]
    a93c:	e5932000 	ldr	r2, [r3]
    a940:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a944:	e5832000 	str	r2, [r3]
    a948:	e307318c 	movw	r3, #29068	; 0x718c
    a94c:	e3403001 	movt	r3, #1
    a950:	e5933000 	ldr	r3, [r3]
    a954:	e5d32008 	ldrb	r2, [r3, #8]
    a958:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a95c:	e5c32008 	strb	r2, [r3, #8]
    a960:	e307318c 	movw	r3, #29068	; 0x718c
    a964:	e3403001 	movt	r3, #1
    a968:	e5933000 	ldr	r3, [r3]
    a96c:	e5932010 	ldr	r2, [r3, #16]
    a970:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a974:	e5832010 	str	r2, [r3, #16]
    a978:	e307318c 	movw	r3, #29068	; 0x718c
    a97c:	e3403001 	movt	r3, #1
    a980:	e5933000 	ldr	r3, [r3]
    a984:	e5932018 	ldr	r2, [r3, #24]
    a988:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a98c:	e5832018 	str	r2, [r3, #24]
    a990:	e307318c 	movw	r3, #29068	; 0x718c
    a994:	e3403001 	movt	r3, #1
    a998:	e5933000 	ldr	r3, [r3]
    a99c:	e5d32020 	ldrb	r2, [r3, #32]
    a9a0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a9a4:	e5c32020 	strb	r2, [r3, #32]
    a9a8:	e307318c 	movw	r3, #29068	; 0x718c
    a9ac:	e3403001 	movt	r3, #1
    a9b0:	e5933000 	ldr	r3, [r3]
    a9b4:	e5932028 	ldr	r2, [r3, #40]	; 0x28
    a9b8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a9bc:	e5832028 	str	r2, [r3, #40]	; 0x28
    a9c0:	ea0000c9 	b	acec <CMachineInfo::CMachineInfo()+0x434>
    a9c4:	e307318c 	movw	r3, #29068	; 0x718c
    a9c8:	e3403001 	movt	r3, #1
    a9cc:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
    a9d0:	e5832000 	str	r2, [r3]
    a9d4:	e24b3020 	sub	r3, fp, #32
    a9d8:	e3a01001 	mov	r1, #1
    a9dc:	e1a00003 	mov	r0, r3
    a9e0:	eb001fc8 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    a9e4:	e24b2030 	sub	r2, fp, #48	; 0x30
    a9e8:	e24b0020 	sub	r0, fp, #32
    a9ec:	e3a03000 	mov	r3, #0
    a9f0:	e58d3000 	str	r3, [sp]
    a9f4:	e3a03010 	mov	r3, #16
    a9f8:	e3a01001 	mov	r1, #1
    a9fc:	e3401006 	movt	r1, #6
    aa00:	eb002006 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    aa04:	e1a03000 	mov	r3, r0
    aa08:	e3530000 	cmp	r3, #0
    aa0c:	0a000003 	beq	aa20 <CMachineInfo::CMachineInfo()+0x168>
    aa10:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    aa14:	e6ff2073 	uxth	r2, r3
    aa18:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa1c:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
    aa20:	e24b2040 	sub	r2, fp, #64	; 0x40
    aa24:	e24b0020 	sub	r0, fp, #32
    aa28:	e3a03000 	mov	r3, #0
    aa2c:	e58d3000 	str	r3, [sp]
    aa30:	e3a03010 	mov	r3, #16
    aa34:	e3a01002 	mov	r1, #2
    aa38:	e3401001 	movt	r1, #1
    aa3c:	eb001ff7 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    aa40:	e1a03000 	mov	r3, r0
    aa44:	e2233001 	eor	r3, r3, #1
    aa48:	e6ef3073 	uxtb	r3, r3
    aa4c:	e3530000 	cmp	r3, #0
    aa50:	0a000001 	beq	aa5c <CMachineInfo::CMachineInfo()+0x1a4>
    aa54:	e3a04000 	mov	r4, #0
    aa58:	ea00009f 	b	acdc <CMachineInfo::CMachineInfo()+0x424>
    aa5c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    aa60:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa64:	e5832000 	str	r2, [r3]
    aa68:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa6c:	e5933000 	ldr	r3, [r3]
    aa70:	e2033502 	and	r3, r3, #8388608	; 0x800000
    aa74:	e3530000 	cmp	r3, #0
    aa78:	0a000061 	beq	ac04 <CMachineInfo::CMachineInfo()+0x34c>
    aa7c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa80:	e5933000 	ldr	r3, [r3]
    aa84:	e1a03223 	lsr	r3, r3, #4
    aa88:	e6ef3073 	uxtb	r3, r3
    aa8c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    aa90:	e3a03000 	mov	r3, #0
    aa94:	e50b3010 	str	r3, [fp, #-16]
    aa98:	e51b3010 	ldr	r3, [fp, #-16]
    aa9c:	e3530011 	cmp	r3, #17
    aaa0:	8a00000e 	bhi	aae0 <CMachineInfo::CMachineInfo()+0x228>
    aaa4:	e3043e28 	movw	r3, #20008	; 0x4e28
    aaa8:	e3403001 	movt	r3, #1
    aaac:	e51b2010 	ldr	r2, [fp, #-16]
    aab0:	e3a0100c 	mov	r1, #12
    aab4:	e0020291 	mul	r2, r1, r2
    aab8:	e0833002 	add	r3, r3, r2
    aabc:	e5933000 	ldr	r3, [r3]
    aac0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    aac4:	e1520003 	cmp	r2, r3
    aac8:	0a000003 	beq	aadc <CMachineInfo::CMachineInfo()+0x224>
    aacc:	e51b3010 	ldr	r3, [fp, #-16]
    aad0:	e2833001 	add	r3, r3, #1
    aad4:	e50b3010 	str	r3, [fp, #-16]
    aad8:	eaffffee 	b	aa98 <CMachineInfo::CMachineInfo()+0x1e0>
    aadc:	e320f000 	nop	{0}
    aae0:	e51b3010 	ldr	r3, [fp, #-16]
    aae4:	e3530011 	cmp	r3, #17
    aae8:	9a000001 	bls	aaf4 <CMachineInfo::CMachineInfo()+0x23c>
    aaec:	e3a04000 	mov	r4, #0
    aaf0:	ea000079 	b	acdc <CMachineInfo::CMachineInfo()+0x424>
    aaf4:	e3043e28 	movw	r3, #20008	; 0x4e28
    aaf8:	e3403001 	movt	r3, #1
    aafc:	e51b2010 	ldr	r2, [fp, #-16]
    ab00:	e3a0100c 	mov	r1, #12
    ab04:	e0020291 	mul	r2, r1, r2
    ab08:	e0833002 	add	r3, r3, r2
    ab0c:	e2833004 	add	r3, r3, #4
    ab10:	e5d32000 	ldrb	r2, [r3]
    ab14:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab18:	e5c32008 	strb	r2, [r3, #8]
    ab1c:	e3043e28 	movw	r3, #20008	; 0x4e28
    ab20:	e3403001 	movt	r3, #1
    ab24:	e51b2010 	ldr	r2, [fp, #-16]
    ab28:	e3a0100c 	mov	r1, #12
    ab2c:	e0020291 	mul	r2, r1, r2
    ab30:	e0833002 	add	r3, r3, r2
    ab34:	e2833008 	add	r3, r3, #8
    ab38:	e5932000 	ldr	r2, [r3]
    ab3c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab40:	e5832010 	str	r2, [r3, #16]
    ab44:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab48:	e5933000 	ldr	r3, [r3]
    ab4c:	e203300f 	and	r3, r3, #15
    ab50:	e2832001 	add	r2, r3, #1
    ab54:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab58:	e5832018 	str	r2, [r3, #24]
    ab5c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab60:	e5933000 	ldr	r3, [r3]
    ab64:	e1a03623 	lsr	r3, r3, #12
    ab68:	e6ef3073 	uxtb	r3, r3
    ab6c:	e203300f 	and	r3, r3, #15
    ab70:	e6ef2073 	uxtb	r2, r3
    ab74:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab78:	e5c32020 	strb	r2, [r3, #32]
    ab7c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab80:	e5933000 	ldr	r3, [r3]
    ab84:	e1a03a23 	lsr	r3, r3, #20
    ab88:	e2033007 	and	r3, r3, #7
    ab8c:	e3a02c01 	mov	r2, #256	; 0x100
    ab90:	e1a03312 	lsl	r3, r2, r3
    ab94:	e1a02003 	mov	r2, r3
    ab98:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab9c:	e5832028 	str	r2, [r3, #40]	; 0x28
    aba0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aba4:	e5d33020 	ldrb	r3, [r3, #32]
    aba8:	e3530003 	cmp	r3, #3
    abac:	9a000002 	bls	abbc <CMachineInfo::CMachineInfo()+0x304>
    abb0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abb4:	e3a02004 	mov	r2, #4
    abb8:	e5c32020 	strb	r2, [r3, #32]
    abbc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abc0:	e5d33008 	ldrb	r3, [r3, #8]
    abc4:	e3530003 	cmp	r3, #3
    abc8:	1a000042 	bne	acd8 <CMachineInfo::CMachineInfo()+0x420>
    abcc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abd0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    abd4:	e3530c01 	cmp	r3, #256	; 0x100
    abd8:	1a00003e 	bne	acd8 <CMachineInfo::CMachineInfo()+0x420>
    abdc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abe0:	e5933018 	ldr	r3, [r3, #24]
    abe4:	e3530001 	cmp	r3, #1
    abe8:	1a000001 	bne	abf4 <CMachineInfo::CMachineInfo()+0x33c>
    abec:	e3a02001 	mov	r2, #1
    abf0:	ea000000 	b	abf8 <CMachineInfo::CMachineInfo()+0x340>
    abf4:	e3a02002 	mov	r2, #2
    abf8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abfc:	e5c32008 	strb	r2, [r3, #8]
    ac00:	ea000034 	b	acd8 <CMachineInfo::CMachineInfo()+0x420>
    ac04:	e3a03000 	mov	r3, #0
    ac08:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ac0c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac10:	e3530010 	cmp	r3, #16
    ac14:	8a00000c 	bhi	ac4c <CMachineInfo::CMachineInfo()+0x394>
    ac18:	e3043f00 	movw	r3, #20224	; 0x4f00
    ac1c:	e3403001 	movt	r3, #1
    ac20:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
    ac24:	e7932202 	ldr	r2, [r3, r2, lsl #4]
    ac28:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac2c:	e5933000 	ldr	r3, [r3]
    ac30:	e1520003 	cmp	r2, r3
    ac34:	0a000003 	beq	ac48 <CMachineInfo::CMachineInfo()+0x390>
    ac38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac3c:	e2833001 	add	r3, r3, #1
    ac40:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ac44:	eafffff0 	b	ac0c <CMachineInfo::CMachineInfo()+0x354>
    ac48:	e320f000 	nop	{0}
    ac4c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac50:	e3530010 	cmp	r3, #16
    ac54:	9a000001 	bls	ac60 <CMachineInfo::CMachineInfo()+0x3a8>
    ac58:	e3a04000 	mov	r4, #0
    ac5c:	ea00001e 	b	acdc <CMachineInfo::CMachineInfo()+0x424>
    ac60:	e3042f00 	movw	r2, #20224	; 0x4f00
    ac64:	e3402001 	movt	r2, #1
    ac68:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac6c:	e1a03203 	lsl	r3, r3, #4
    ac70:	e0823003 	add	r3, r2, r3
    ac74:	e5d32004 	ldrb	r2, [r3, #4]
    ac78:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac7c:	e5c32008 	strb	r2, [r3, #8]
    ac80:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac84:	e3a02001 	mov	r2, #1
    ac88:	e5832010 	str	r2, [r3, #16]
    ac8c:	e3042f00 	movw	r2, #20224	; 0x4f00
    ac90:	e3402001 	movt	r2, #1
    ac94:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac98:	e1a03203 	lsl	r3, r3, #4
    ac9c:	e0823003 	add	r3, r2, r3
    aca0:	e5932008 	ldr	r2, [r3, #8]
    aca4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aca8:	e5832018 	str	r2, [r3, #24]
    acac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acb0:	e3a02000 	mov	r2, #0
    acb4:	e5c32020 	strb	r2, [r3, #32]
    acb8:	e3042f00 	movw	r2, #20224	; 0x4f00
    acbc:	e3402001 	movt	r2, #1
    acc0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    acc4:	e1a03203 	lsl	r3, r3, #4
    acc8:	e0823003 	add	r3, r2, r3
    accc:	e593200c 	ldr	r2, [r3, #12]
    acd0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acd4:	e5832028 	str	r2, [r3, #40]	; 0x28
    acd8:	e3a04001 	mov	r4, #1
    acdc:	e24b3020 	sub	r3, fp, #32
    ace0:	e1a00003 	mov	r0, r3
    ace4:	eb001f0e 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
    ace8:	e3540001 	cmp	r4, #1
    acec:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acf0:	e1a00003 	mov	r0, r3
    acf4:	e24bd008 	sub	sp, fp, #8
    acf8:	e8bd8810 	pop	{r4, fp, pc}

0000acfc <CMachineInfo::~CMachineInfo()>:
    acfc:	e307318c 	movw	r3, #29068	; 0x718c
    ad00:	e3403001 	movt	r3, #1
    ad04:	e5932000 	ldr	r2, [r3]
    ad08:	e1520000 	cmp	r2, r0
    ad0c:	03a02000 	moveq	r2, #0
    ad10:	05832000 	streq	r2, [r3]
    ad14:	e12fff1e 	bx	lr

0000ad18 <CMachineInfo::GetMachineModel() const>:
    ad18:	e5d00008 	ldrb	r0, [r0, #8]
    ad1c:	e12fff1e 	bx	lr

0000ad20 <CMachineInfo::GetMachineName() const>:
    ad20:	e5d02008 	ldrb	r2, [r0, #8]
    ad24:	e3053010 	movw	r3, #20496	; 0x5010
    ad28:	e3403001 	movt	r3, #1
    ad2c:	e7930102 	ldr	r0, [r3, r2, lsl #2]
    ad30:	e12fff1e 	bx	lr

0000ad34 <CMachineInfo::GetModelMajor() const>:
    ad34:	e5900010 	ldr	r0, [r0, #16]
    ad38:	e12fff1e 	bx	lr

0000ad3c <CMachineInfo::GetModelRevision() const>:
    ad3c:	e5900018 	ldr	r0, [r0, #24]
    ad40:	e12fff1e 	bx	lr

0000ad44 <CMachineInfo::GetSoCType() const>:
    ad44:	e5d00020 	ldrb	r0, [r0, #32]
    ad48:	e12fff1e 	bx	lr

0000ad4c <CMachineInfo::GetRAMSize() const>:
    ad4c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    ad50:	e12fff1e 	bx	lr

0000ad54 <CMachineInfo::GetSoCName() const>:
    ad54:	e5d02020 	ldrb	r2, [r0, #32]
    ad58:	e3053010 	movw	r3, #20496	; 0x5010
    ad5c:	e3403001 	movt	r3, #1
    ad60:	e0833102 	add	r3, r3, r2, lsl #2
    ad64:	e5930054 	ldr	r0, [r3, #84]	; 0x54
    ad68:	e12fff1e 	bx	lr

0000ad6c <CMachineInfo::GetRevisionRaw() const>:
    ad6c:	e5900000 	ldr	r0, [r0]
    ad70:	e12fff1e 	bx	lr

0000ad74 <CMachineInfo::GetActLEDInfo() const>:
    ad74:	e5d02008 	ldrb	r2, [r0, #8]
    ad78:	e3053010 	movw	r3, #20496	; 0x5010
    ad7c:	e3403001 	movt	r3, #1
    ad80:	e0833102 	add	r3, r3, r2, lsl #2
    ad84:	e5930068 	ldr	r0, [r3, #104]	; 0x68
    ad88:	e12fff1e 	bx	lr

0000ad8c <CMachineInfo::GetClockRate(unsigned int) const>:
    ad8c:	e92d4070 	push	{r4, r5, r6, lr}
    ad90:	e24dd028 	sub	sp, sp, #40	; 0x28
    ad94:	e1a04001 	mov	r4, r1
    ad98:	e1a06000 	mov	r6, r0
    ad9c:	e3a01000 	mov	r1, #0
    ada0:	e28d000c 	add	r0, sp, #12
    ada4:	eb001ed7 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    ada8:	e58d4020 	str	r4, [sp, #32]
    adac:	e3a03004 	mov	r3, #4
    adb0:	e58d3000 	str	r3, [sp]
    adb4:	e3a01002 	mov	r1, #2
    adb8:	e3401003 	movt	r1, #3
    adbc:	e3a03014 	mov	r3, #20
    adc0:	e08d2003 	add	r2, sp, r3
    adc4:	e28d000c 	add	r0, sp, #12
    adc8:	eb001f14 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    adcc:	e3500000 	cmp	r0, #0
    add0:	0a000002 	beq	ade0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    add4:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    add8:	e3550000 	cmp	r5, #0
    addc:	1a000026 	bne	ae7c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    ade0:	e58d4020 	str	r4, [sp, #32]
    ade4:	e3a03004 	mov	r3, #4
    ade8:	e58d3000 	str	r3, [sp]
    adec:	e3a01047 	mov	r1, #71	; 0x47
    adf0:	e3401003 	movt	r1, #3
    adf4:	e3a03014 	mov	r3, #20
    adf8:	e08d2003 	add	r2, sp, r3
    adfc:	e28d000c 	add	r0, sp, #12
    ae00:	eb001f06 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ae04:	e3500000 	cmp	r0, #0
    ae08:	0a000002 	beq	ae18 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    ae0c:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    ae10:	e3550000 	cmp	r5, #0
    ae14:	1a000018 	bne	ae7c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    ae18:	e2444001 	sub	r4, r4, #1
    ae1c:	e354000d 	cmp	r4, #13
    ae20:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    ae24:	ea00001f 	b	aea8 <CMachineInfo::GetClockRate(unsigned int) const+0x11c>
    ae28:	0000ae90 	.word	0x0000ae90
    ae2c:	0000aeb8 	.word	0x0000aeb8
    ae30:	0000aea8 	.word	0x0000aea8
    ae34:	0000ae60 	.word	0x0000ae60
    ae38:	0000aea8 	.word	0x0000aea8
    ae3c:	0000aea8 	.word	0x0000aea8
    ae40:	0000aea8 	.word	0x0000aea8
    ae44:	0000aea8 	.word	0x0000aea8
    ae48:	0000aea8 	.word	0x0000aea8
    ae4c:	0000aea8 	.word	0x0000aea8
    ae50:	0000aea8 	.word	0x0000aea8
    ae54:	0000ae90 	.word	0x0000ae90
    ae58:	0000aea8 	.word	0x0000aea8
    ae5c:	0000ae9c 	.word	0x0000ae9c
    ae60:	e5962010 	ldr	r2, [r6, #16]
    ae64:	e3a03ca3 	mov	r3, #41728	; 0xa300
    ae68:	e34131e1 	movt	r3, #4577	; 0x11e1
    ae6c:	e30b5280 	movw	r5, #45696	; 0xb280
    ae70:	e3405ee6 	movt	r5, #3814	; 0xee6
    ae74:	e3520002 	cmp	r2, #2
    ae78:	81a05003 	movhi	r5, r3
    ae7c:	e28d000c 	add	r0, sp, #12
    ae80:	eb001ea7 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
    ae84:	e1a00005 	mov	r0, r5
    ae88:	e28dd028 	add	sp, sp, #40	; 0x28
    ae8c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ae90:	e3a05ce1 	mov	r5, #57600	; 0xe100
    ae94:	e34055f5 	movt	r5, #1525	; 0x5f5
    ae98:	eafffff7 	b	ae7c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    ae9c:	e30658c0 	movw	r5, #26816	; 0x68c0
    aea0:	e3405478 	movt	r5, #1144	; 0x478
    aea4:	eafffff4 	b	ae7c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    aea8:	e59f1014 	ldr	r1, [pc, #20]	; aec4 <CMachineInfo::GetClockRate(unsigned int) const+0x138>
    aeac:	e3002161 	movw	r2, #353	; 0x161
    aeb0:	e2810010 	add	r0, r1, #16
    aeb4:	eb001d40 	bl	123bc <assertion_failed>
    aeb8:	e3a05b1b 	mov	r5, #27648	; 0x6c00
    aebc:	e34052dc 	movt	r5, #732	; 0x2dc
    aec0:	eaffffed 	b	ae7c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    aec4:	000150cc 	.word	0x000150cc

0000aec8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    aec8:	e3510036 	cmp	r1, #54	; 0x36
    aecc:	0a000006 	beq	aeec <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    aed0:	e3510037 	cmp	r1, #55	; 0x37
    aed4:	1a00000e 	bne	af14 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
    aed8:	e5d03008 	ldrb	r3, [r0, #8]
    aedc:	e3530003 	cmp	r3, #3
    aee0:	83a00028 	movhi	r0, #40	; 0x28
    aee4:	93a0002d 	movls	r0, #45	; 0x2d
    aee8:	e12fff1e 	bx	lr
    aeec:	e5d03008 	ldrb	r3, [r0, #8]
    aef0:	e3530003 	cmp	r3, #3
    aef4:	9a000004 	bls	af0c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
    aef8:	e5903010 	ldr	r3, [r0, #16]
    aefc:	e3530003 	cmp	r3, #3
    af00:	33a0002d 	movcc	r0, #45	; 0x2d
    af04:	23a00029 	movcs	r0, #41	; 0x29
    af08:	e12fff1e 	bx	lr
    af0c:	e3a00028 	mov	r0, #40	; 0x28
    af10:	e12fff1e 	bx	lr
    af14:	e59f100c 	ldr	r1, [pc, #12]	; af28 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    af18:	e3a02f69 	mov	r2, #420	; 0x1a4
    af1c:	e92d4010 	push	{r4, lr}
    af20:	e2810010 	add	r0, r1, #16
    af24:	eb001d24 	bl	123bc <assertion_failed>
    af28:	000150cc 	.word	0x000150cc

0000af2c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    af2c:	e5903010 	ldr	r3, [r0, #16]
    af30:	e3530003 	cmp	r3, #3
    af34:	8a000006 	bhi	af54 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
    af38:	e3510001 	cmp	r1, #1
    af3c:	0a00000b 	beq	af70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    af40:	e3510006 	cmp	r1, #6
    af44:	e3a00c65 	mov	r0, #25856	; 0x6500
    af48:	e3410dcd 	movt	r0, #7629	; 0x1dcd
    af4c:	13a00000 	movne	r0, #0
    af50:	e12fff1e 	bx	lr
    af54:	e3510001 	cmp	r1, #1
    af58:	0a000007 	beq	af7c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    af5c:	e3510006 	cmp	r1, #6
    af60:	e3a00d5e 	mov	r0, #6016	; 0x1780
    af64:	e3420cb4 	movt	r0, #11444	; 0x2cb4
    af68:	13a00000 	movne	r0, #0
    af6c:	e12fff1e 	bx	lr
    af70:	e3a00b3e 	mov	r0, #63488	; 0xf800
    af74:	e3400124 	movt	r0, #292	; 0x124
    af78:	e12fff1e 	bx	lr
    af7c:	e30f0980 	movw	r0, #63872	; 0xf980
    af80:	e3400337 	movt	r0, #823	; 0x337
    af84:	e12fff1e 	bx	lr

0000af88 <CMachineInfo::GetDevice(TDeviceId) const>:
    af88:	e3510000 	cmp	r1, #0
    af8c:	1a000003 	bne	afa0 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    af90:	e5d00008 	ldrb	r0, [r0, #8]
    af94:	e2500001 	subs	r0, r0, #1
    af98:	13a00001 	movne	r0, #1
    af9c:	e12fff1e 	bx	lr
    afa0:	e59f100c 	ldr	r1, [pc, #12]	; afb4 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
    afa4:	e30021df 	movw	r2, #479	; 0x1df
    afa8:	e92d4010 	push	{r4, lr}
    afac:	e2810010 	add	r0, r1, #16
    afb0:	eb001d01 	bl	123bc <assertion_failed>
    afb4:	000150cc 	.word	0x000150cc

0000afb8 <CMachineInfo::ArePWMChannelsSwapped() const>:
    afb8:	e5d03008 	ldrb	r3, [r0, #8]
    afbc:	e2430006 	sub	r0, r3, #6
    afc0:	e3500002 	cmp	r0, #2
    afc4:	83530003 	cmphi	r3, #3
    afc8:	83a00001 	movhi	r0, #1
    afcc:	93a00000 	movls	r0, #0
    afd0:	e12fff1e 	bx	lr

0000afd4 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    afd4:	e307318c 	movw	r3, #29068	; 0x718c
    afd8:	e1a02000 	mov	r2, r0
    afdc:	e3403001 	movt	r3, #1
    afe0:	e92d4010 	push	{r4, lr}
    afe4:	e5933000 	ldr	r3, [r3]
    afe8:	ea000002 	b	aff8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x24>
    afec:	e1530002 	cmp	r3, r2
    aff0:	0a000006 	beq	b010 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x3c>
    aff4:	e1a02003 	mov	r2, r3
    aff8:	e3530000 	cmp	r3, #0
    affc:	1afffffa 	bne	afec <CMachineInfo::AllocateDMAChannel(unsigned int)+0x18>
    b000:	e59f108c 	ldr	r1, [pc, #140]	; b094 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    b004:	e3a02e1f 	mov	r2, #496	; 0x1f0
    b008:	e2810014 	add	r0, r1, #20
    b00c:	eb001cea 	bl	123bc <assertion_failed>
    b010:	e3d1000f 	bics	r0, r1, #15
    b014:	1a00000a 	bne	b044 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
    b018:	e351000b 	cmp	r1, #11
    b01c:	8a000018 	bhi	b084 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb0>
    b020:	e1d323b0 	ldrh	r2, [r3, #48]	; 0x30
    b024:	e1a00152 	asr	r0, r2, r1
    b028:	e3100001 	tst	r0, #1
    b02c:	0a00000d 	beq	b068 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
    b030:	e3a0c001 	mov	ip, #1
    b034:	e1a00001 	mov	r0, r1
    b038:	e1c2111c 	bic	r1, r2, ip, lsl r1
    b03c:	e1c313b0 	strh	r1, [r3, #48]	; 0x30
    b040:	e8bd8010 	pop	{r4, pc}
    b044:	e1d2c3b0 	ldrh	ip, [r2, #48]	; 0x30
    b048:	e3510081 	cmp	r1, #129	; 0x81
    b04c:	03a03006 	moveq	r3, #6
    b050:	13a0300b 	movne	r3, #11
    b054:	e1a0135c 	asr	r1, ip, r3
    b058:	e3110001 	tst	r1, #1
    b05c:	1a000003 	bne	b070 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x9c>
    b060:	e2533001 	subs	r3, r3, #1
    b064:	2afffffa 	bcs	b054 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x80>
    b068:	e3a00080 	mov	r0, #128	; 0x80
    b06c:	e8bd8010 	pop	{r4, pc}
    b070:	e3a01001 	mov	r1, #1
    b074:	e1a00003 	mov	r0, r3
    b078:	e1cc3311 	bic	r3, ip, r1, lsl r3
    b07c:	e1c233b0 	strh	r3, [r2, #48]	; 0x30
    b080:	e8bd8010 	pop	{r4, pc}
    b084:	e59f1008 	ldr	r1, [pc, #8]	; b094 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    b088:	e30021f9 	movw	r2, #505	; 0x1f9
    b08c:	e2810024 	add	r0, r1, #36	; 0x24
    b090:	eb001cc9 	bl	123bc <assertion_failed>
    b094:	000150cc 	.word	0x000150cc

0000b098 <CMachineInfo::FreeDMAChannel(unsigned int)>:
    b098:	e307318c 	movw	r3, #29068	; 0x718c
    b09c:	e3403001 	movt	r3, #1
    b0a0:	e92d4010 	push	{r4, lr}
    b0a4:	e5933000 	ldr	r3, [r3]
    b0a8:	ea000002 	b	b0b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
    b0ac:	e1530000 	cmp	r3, r0
    b0b0:	0a000006 	beq	b0d0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x38>
    b0b4:	e1a00003 	mov	r0, r3
    b0b8:	e3530000 	cmp	r3, #0
    b0bc:	1afffffa 	bne	b0ac <CMachineInfo::FreeDMAChannel(unsigned int)+0x14>
    b0c0:	e59f1050 	ldr	r1, [pc, #80]	; b118 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b0c4:	e300221d 	movw	r2, #541	; 0x21d
    b0c8:	e2810014 	add	r0, r1, #20
    b0cc:	eb001cba 	bl	123bc <assertion_failed>
    b0d0:	e351000b 	cmp	r1, #11
    b0d4:	8a000007 	bhi	b0f8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
    b0d8:	e1d323b0 	ldrh	r2, [r3, #48]	; 0x30
    b0dc:	e1e00152 	mvn	r0, r2, asr r1
    b0e0:	e3100001 	tst	r0, #1
    b0e4:	0a000007 	beq	b108 <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
    b0e8:	e3a00001 	mov	r0, #1
    b0ec:	e1821110 	orr	r1, r2, r0, lsl r1
    b0f0:	e1c313b0 	strh	r1, [r3, #48]	; 0x30
    b0f4:	e8bd8010 	pop	{r4, pc}
    b0f8:	e59f1018 	ldr	r1, [pc, #24]	; b118 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b0fc:	e3002225 	movw	r2, #549	; 0x225
    b100:	e2810024 	add	r0, r1, #36	; 0x24
    b104:	eb001cac 	bl	123bc <assertion_failed>
    b108:	e59f1008 	ldr	r1, [pc, #8]	; b118 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b10c:	e3002226 	movw	r2, #550	; 0x226
    b110:	e2810040 	add	r0, r1, #64	; 0x40
    b114:	eb001ca8 	bl	123bc <assertion_failed>
    b118:	000150cc 	.word	0x000150cc

0000b11c <CMachineInfo::Get()>:
    b11c:	e307318c 	movw	r3, #29068	; 0x718c
    b120:	e3403001 	movt	r3, #1
    b124:	e5930000 	ldr	r0, [r3]
    b128:	e3500000 	cmp	r0, #0
    b12c:	112fff1e 	bxne	lr
    b130:	e59f100c 	ldr	r1, [pc, #12]	; b144 <CMachineInfo::Get()+0x28>
    b134:	e300226d 	movw	r2, #621	; 0x26d
    b138:	e92d4010 	push	{r4, lr}
    b13c:	e2810014 	add	r0, r1, #20
    b140:	eb001c9d 	bl	123bc <assertion_failed>
    b144:	000150cc 	.word	0x000150cc

0000b148 <CScreenDevice::~CScreenDevice()>:
    b148:	e5d03010 	ldrb	r3, [r0, #16]
    b14c:	e59f2088 	ldr	r2, [pc, #136]	; b1dc <CScreenDevice::~CScreenDevice()+0x94>
    b150:	e3530000 	cmp	r3, #0
    b154:	e92d4070 	push	{r4, r5, r6, lr}
    b158:	e1a04000 	mov	r4, r0
    b15c:	e5802000 	str	r2, [r0]
    b160:	0a000003 	beq	b174 <CScreenDevice::~CScreenDevice()+0x2c>
    b164:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b168:	e3500000 	cmp	r0, #0
    b16c:	0a000000 	beq	b174 <CScreenDevice::~CScreenDevice()+0x2c>
    b170:	eb001729 	bl	10e1c <operator delete[](void*)>
    b174:	e5945018 	ldr	r5, [r4, #24]
    b178:	e3a03000 	mov	r3, #0
    b17c:	e5843024 	str	r3, [r4, #36]	; 0x24
    b180:	e1550003 	cmp	r5, r3
    b184:	0a000004 	beq	b19c <CScreenDevice::~CScreenDevice()+0x54>
    b188:	e1a00005 	mov	r0, r5
    b18c:	eb001d28 	bl	12634 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b190:	e3a01098 	mov	r1, #152	; 0x98
    b194:	e1a00005 	mov	r0, r5
    b198:	eb001725 	bl	10e34 <operator delete(void*, unsigned int)>
    b19c:	e5940020 	ldr	r0, [r4, #32]
    b1a0:	e3a03000 	mov	r3, #0
    b1a4:	e5843018 	str	r3, [r4, #24]
    b1a8:	e1500003 	cmp	r0, r3
    b1ac:	0a000000 	beq	b1b4 <CScreenDevice::~CScreenDevice()+0x6c>
    b1b0:	eb001719 	bl	10e1c <operator delete[](void*)>
    b1b4:	e3a03000 	mov	r3, #0
    b1b8:	e2840064 	add	r0, r4, #100	; 0x64
    b1bc:	e5843020 	str	r3, [r4, #32]
    b1c0:	eb001f77 	bl	12fa4 <CDMAChannel::~CDMAChannel()>
    b1c4:	e284001c 	add	r0, r4, #28
    b1c8:	eb001e37 	bl	12aac <CCharGenerator::~CCharGenerator()>
    b1cc:	e1a00004 	mov	r0, r4
    b1d0:	eb001ecd 	bl	12d0c <CDevice::~CDevice()>
    b1d4:	e1a00004 	mov	r0, r4
    b1d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b1dc:	0001530c 	.word	0x0001530c

0000b1e0 <CScreenDevice::~CScreenDevice()>:
    b1e0:	e92d4010 	push	{r4, lr}
    b1e4:	e1a04000 	mov	r4, r0
    b1e8:	ebffffd6 	bl	b148 <CScreenDevice::~CScreenDevice()>
    b1ec:	e1a00004 	mov	r0, r4
    b1f0:	e3a01090 	mov	r1, #144	; 0x90
    b1f4:	eb00170e 	bl	10e34 <operator delete(void*, unsigned int)>
    b1f8:	e1a00004 	mov	r0, r4
    b1fc:	e8bd8010 	pop	{r4, pc}

0000b200 <CScreenDevice::InvertCursor() [clone .part.0]>:
    b200:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b204:	e280701c 	add	r7, r0, #28
    b208:	e5909020 	ldr	r9, [r0, #32]
    b20c:	e1a04000 	mov	r4, r0
    b210:	e1a00007 	mov	r0, r7
    b214:	eb001e29 	bl	12ac0 <CCharGenerator::GetUnderline() const>
    b218:	e1a08000 	mov	r8, r0
    b21c:	e1a00007 	mov	r0, r7
    b220:	eb001e24 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    b224:	e1500008 	cmp	r0, r8
    b228:	9a000034 	bls	b300 <CScreenDevice::InvertCursor() [clone .part.0]+0x100>
    b22c:	e1a06009 	mov	r6, r9
    b230:	e3a05000 	mov	r5, #0
    b234:	ea00000a 	b	b264 <CScreenDevice::InvertCursor() [clone .part.0]+0x64>
    b238:	e1530002 	cmp	r3, r2
    b23c:	2a000004 	bcs	b254 <CScreenDevice::InvertCursor() [clone .part.0]+0x54>
    b240:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    b244:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    b248:	e0882002 	add	r2, r8, r2
    b24c:	e1520001 	cmp	r2, r1
    b250:	3a00001c 	bcc	b2c8 <CScreenDevice::InvertCursor() [clone .part.0]+0xc8>
    b254:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    b258:	e1c630b0 	strh	r3, [r6]
    b25c:	e2855001 	add	r5, r5, #1
    b260:	e2866002 	add	r6, r6, #2
    b264:	e1a00007 	mov	r0, r7
    b268:	e1a09006 	mov	r9, r6
    b26c:	eb001e0f 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    b270:	e1500005 	cmp	r0, r5
    b274:	9a00001c 	bls	b2ec <CScreenDevice::InvertCursor() [clone .part.0]+0xec>
    b278:	e5d43051 	ldrb	r3, [r4, #81]	; 0x51
    b27c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    b280:	e3530000 	cmp	r3, #0
    b284:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    b288:	e0853003 	add	r3, r5, r3
    b28c:	0affffe9 	beq	b238 <CScreenDevice::InvertCursor() [clone .part.0]+0x38>
    b290:	e1530002 	cmp	r3, r2
    b294:	2afffff0 	bcs	b25c <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
    b298:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    b29c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    b2a0:	e0882002 	add	r2, r8, r2
    b2a4:	e1520001 	cmp	r2, r1
    b2a8:	2affffeb 	bcs	b25c <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
    b2ac:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    b2b0:	e1d600b0 	ldrh	r0, [r6]
    b2b4:	e023329c 	mla	r3, ip, r2, r3
    b2b8:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    b2bc:	e1a03083 	lsl	r3, r3, #1
    b2c0:	e18100b3 	strh	r0, [r1, r3]
    b2c4:	eaffffe4 	b	b25c <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
    b2c8:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b2cc:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    b2d0:	e0233290 	mla	r3, r0, r2, r3
    b2d4:	e1a03083 	lsl	r3, r3, #1
    b2d8:	e19120b3 	ldrh	r2, [r1, r3]
    b2dc:	e1c620b0 	strh	r2, [r6]
    b2e0:	e1d425b2 	ldrh	r2, [r4, #82]	; 0x52
    b2e4:	e18120b3 	strh	r2, [r1, r3]
    b2e8:	eaffffdb 	b	b25c <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
    b2ec:	e1a00007 	mov	r0, r7
    b2f0:	e2888001 	add	r8, r8, #1
    b2f4:	eb001def 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    b2f8:	e1500008 	cmp	r0, r8
    b2fc:	8affffca 	bhi	b22c <CScreenDevice::InvertCursor() [clone .part.0]+0x2c>
    b300:	e5d43051 	ldrb	r3, [r4, #81]	; 0x51
    b304:	e2233001 	eor	r3, r3, #1
    b308:	e5c43051 	strb	r3, [r4, #81]	; 0x51
    b30c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000b310 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
    b310:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b314:	e1a04000 	mov	r4, r0
    b318:	e1a05001 	mov	r5, r1
    b31c:	e1a07002 	mov	r7, r2
    b320:	e1a06003 	mov	r6, r3
    b324:	eb001ea5 	bl	12dc0 <CDevice::CDevice()>
    b328:	e59d3018 	ldr	r3, [sp, #24]
    b32c:	e284001c 	add	r0, r4, #28
    b330:	e5845008 	str	r5, [r4, #8]
    b334:	e3a05000 	mov	r5, #0
    b338:	e5843014 	str	r3, [r4, #20]
    b33c:	e59f305c 	ldr	r3, [pc, #92]	; b3a0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x90>
    b340:	e584700c 	str	r7, [r4, #12]
    b344:	e5843000 	str	r3, [r4]
    b348:	e5c46010 	strb	r6, [r4, #16]
    b34c:	e5845018 	str	r5, [r4, #24]
    b350:	eb001dd2 	bl	12aa0 <CCharGenerator::CCharGenerator()>
    b354:	e5845020 	str	r5, [r4, #32]
    b358:	e3a03001 	mov	r3, #1
    b35c:	e34f3fdf 	movt	r3, #65503	; 0xffdf
    b360:	e1a02005 	mov	r2, r5
    b364:	e5843050 	str	r3, [r4, #80]	; 0x50
    b368:	e3a01081 	mov	r1, #129	; 0x81
    b36c:	e5845024 	str	r5, [r4, #36]	; 0x24
    b370:	e2840064 	add	r0, r4, #100	; 0x64
    b374:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b378:	e5845040 	str	r5, [r4, #64]	; 0x40
    b37c:	e5845048 	str	r5, [r4, #72]	; 0x48
    b380:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b384:	e5845054 	str	r5, [r4, #84]	; 0x54
    b388:	e5c45060 	strb	r5, [r4, #96]	; 0x60
    b38c:	eb001ec9 	bl	12eb8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    b390:	e3a03001 	mov	r3, #1
    b394:	e1a00004 	mov	r0, r4
    b398:	e584308c 	str	r3, [r4, #140]	; 0x8c
    b39c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b3a0:	0001530c 	.word	0x0001530c

0000b3a4 <CScreenDevice::GetWidth() const>:
    b3a4:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    b3a8:	e12fff1e 	bx	lr

0000b3ac <CScreenDevice::GetHeight() const>:
    b3ac:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    b3b0:	e12fff1e 	bx	lr

0000b3b4 <CScreenDevice::GetColumns() const>:
    b3b4:	e92d4010 	push	{r4, lr}
    b3b8:	e280001c 	add	r0, r0, #28
    b3bc:	e5904014 	ldr	r4, [r0, #20]
    b3c0:	eb001dba 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    b3c4:	e730f014 	udiv	r0, r4, r0
    b3c8:	e8bd8010 	pop	{r4, pc}

0000b3cc <CScreenDevice::GetRows() const>:
    b3cc:	e92d4010 	push	{r4, lr}
    b3d0:	e280001c 	add	r0, r0, #28
    b3d4:	e590401c 	ldr	r4, [r0, #28]
    b3d8:	eb001db6 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    b3dc:	e730f014 	udiv	r0, r4, r0
    b3e0:	e8bd8010 	pop	{r4, pc}

0000b3e4 <CScreenDevice::GetFrameBuffer()>:
    b3e4:	e5900018 	ldr	r0, [r0, #24]
    b3e8:	e12fff1e 	bx	lr

0000b3ec <CScreenDevice::GetStatus()>:
    b3ec:	e5912028 	ldr	r2, [r1, #40]	; 0x28
    b3f0:	e591c024 	ldr	ip, [r1, #36]	; 0x24
    b3f4:	e5802004 	str	r2, [r0, #4]
    b3f8:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    b3fc:	e580c000 	str	ip, [r0]
    b400:	e580200c 	str	r2, [r0, #12]
    b404:	e5912048 	ldr	r2, [r1, #72]	; 0x48
    b408:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    b40c:	e5802014 	str	r2, [r0, #20]
    b410:	e5d12050 	ldrb	r2, [r1, #80]	; 0x50
    b414:	e580c008 	str	ip, [r0, #8]
    b418:	e5c0201c 	strb	r2, [r0, #28]
    b41c:	e591c044 	ldr	ip, [r1, #68]	; 0x44
    b420:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    b424:	e580c010 	str	ip, [r0, #16]
    b428:	e5802024 	str	r2, [r0, #36]	; 0x24
    b42c:	e591c04c 	ldr	ip, [r1, #76]	; 0x4c
    b430:	e591205c 	ldr	r2, [r1, #92]	; 0x5c
    b434:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b438:	e580c018 	str	ip, [r0, #24]
    b43c:	e5d1e060 	ldrb	lr, [r1, #96]	; 0x60
    b440:	e1d1c5b2 	ldrh	ip, [r1, #82]	; 0x52
    b444:	e5802028 	str	r2, [r0, #40]	; 0x28
    b448:	e5912054 	ldr	r2, [r1, #84]	; 0x54
    b44c:	e5c0e02c 	strb	lr, [r0, #44]	; 0x2c
    b450:	e1c0c1be 	strh	ip, [r0, #30]
    b454:	e5802020 	str	r2, [r0, #32]
    b458:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b45c <CScreenDevice::SetStatus(TScreenStatus const&)>:
    b45c:	e5902028 	ldr	r2, [r0, #40]	; 0x28
    b460:	e5913004 	ldr	r3, [r1, #4]
    b464:	e1520003 	cmp	r2, r3
    b468:	0a000001 	beq	b474 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    b46c:	e3a00000 	mov	r0, #0
    b470:	e12fff1e 	bx	lr
    b474:	e92d4070 	push	{r4, r5, r6, lr}
    b478:	e1a05001 	mov	r5, r1
    b47c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b480:	e1a04000 	mov	r4, r0
    b484:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
    b488:	e1510003 	cmp	r1, r3
    b48c:	1a000031 	bne	b558 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b490:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
    b494:	e3500000 	cmp	r0, #0
    b498:	1a000022 	bne	b528 <CScreenDevice::SetStatus(TScreenStatus const&)+0xcc>
    b49c:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    b4a0:	e3530000 	cmp	r3, #0
    b4a4:	1a00002b 	bne	b558 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b4a8:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b4ac:	e3530000 	cmp	r3, #0
    b4b0:	1a000028 	bne	b558 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b4b4:	e5951000 	ldr	r1, [r5]
    b4b8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    b4bc:	eb001537 	bl	109a0 <memcpy>
    b4c0:	e595300c 	ldr	r3, [r5, #12]
    b4c4:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
    b4c8:	e5951008 	ldr	r1, [r5, #8]
    b4cc:	e5843040 	str	r3, [r4, #64]	; 0x40
    b4d0:	e3520000 	cmp	r2, #0
    b4d4:	e1c521d0 	ldrd	r2, [r5, #16]
    b4d8:	e584103c 	str	r1, [r4, #60]	; 0x3c
    b4dc:	e5951018 	ldr	r1, [r5, #24]
    b4e0:	e1c424f4 	strd	r2, [r4, #68]	; 0x44
    b4e4:	e5d5301c 	ldrb	r3, [r5, #28]
    b4e8:	e1d521be 	ldrh	r2, [r5, #30]
    b4ec:	e5c43050 	strb	r3, [r4, #80]	; 0x50
    b4f0:	e1d532b0 	ldrh	r3, [r5, #32]
    b4f4:	e5d50022 	ldrb	r0, [r5, #34]	; 0x22
    b4f8:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b4fc:	e1c425b2 	strh	r2, [r4, #82]	; 0x52
    b500:	e5d51023 	ldrb	r1, [r5, #35]	; 0x23
    b504:	e1c435b4 	strh	r3, [r4, #84]	; 0x54
    b508:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
    b50c:	e5c40056 	strb	r0, [r4, #86]	; 0x56
    b510:	e5c41057 	strb	r1, [r4, #87]	; 0x57
    b514:	e1c425f8 	strd	r2, [r4, #88]	; 0x58
    b518:	1a000010 	bne	b560 <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
    b51c:	f57ff05f 	dmb	sy
    b520:	e3a00001 	mov	r0, #1
    b524:	e8bd8070 	pop	{r4, r5, r6, pc}
    b528:	eb0019ab 	bl	11bdc <EnterCritical>
    b52c:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    b530:	e3530000 	cmp	r3, #0
    b534:	1a000003 	bne	b548 <CScreenDevice::SetStatus(TScreenStatus const&)+0xec>
    b538:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b53c:	e3530000 	cmp	r3, #0
    b540:	05942028 	ldreq	r2, [r4, #40]	; 0x28
    b544:	0affffda 	beq	b4b4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    b548:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
    b54c:	e3530000 	cmp	r3, #0
    b550:	0a000000 	beq	b558 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b554:	eb0019cb 	bl	11c88 <LeaveCritical>
    b558:	e3a00000 	mov	r0, #0
    b55c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b560:	eb0019c8 	bl	11c88 <LeaveCritical>
    b564:	eaffffec 	b	b51c <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0000b568 <CScreenDevice::CarriageReturn()>:
    b568:	e3a03000 	mov	r3, #0
    b56c:	e5803048 	str	r3, [r0, #72]	; 0x48
    b570:	e12fff1e 	bx	lr

0000b574 <CScreenDevice::CursorHome()>:
    b574:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b578:	e3a02000 	mov	r2, #0
    b57c:	e1c024f8 	strd	r2, [r0, #72]	; 0x48
    b580:	e12fff1e 	bx	lr

0000b584 <CScreenDevice::CursorLeft()>:
    b584:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    b588:	e92d4070 	push	{r4, r5, r6, lr}
    b58c:	e3530000 	cmp	r3, #0
    b590:	e1a04000 	mov	r4, r0
    b594:	1a00000f 	bne	b5d8 <CScreenDevice::CursorLeft()+0x54>
    b598:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    b59c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b5a0:	e1520003 	cmp	r2, r3
    b5a4:	98bd8070 	popls	{r4, r5, r6, pc}
    b5a8:	e5905030 	ldr	r5, [r0, #48]	; 0x30
    b5ac:	e280601c 	add	r6, r0, #28
    b5b0:	e1a00006 	mov	r0, r6
    b5b4:	eb001d3d 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    b5b8:	e0455000 	sub	r5, r5, r0
    b5bc:	e1a00006 	mov	r0, r6
    b5c0:	e5845048 	str	r5, [r4, #72]	; 0x48
    b5c4:	eb001d3b 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    b5c8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b5cc:	e0433000 	sub	r3, r3, r0
    b5d0:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b5d4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b5d8:	e280001c 	add	r0, r0, #28
    b5dc:	eb001d33 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    b5e0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    b5e4:	e0433000 	sub	r3, r3, r0
    b5e8:	e5843048 	str	r3, [r4, #72]	; 0x48
    b5ec:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b5f0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b5f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b5f4:	e280701c 	add	r7, r0, #28
    b5f8:	e1a05000 	mov	r5, r0
    b5fc:	e1a00007 	mov	r0, r7
    b600:	e1a04002 	mov	r4, r2
    b604:	e1a06001 	mov	r6, r1
    b608:	e2444001 	sub	r4, r4, #1
    b60c:	eb001d27 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    b610:	e1a02000 	mov	r2, r0
    b614:	e1a00007 	mov	r0, r7
    b618:	e0040492 	mul	r4, r2, r4
    b61c:	eb001d25 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    b620:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    b624:	e1530004 	cmp	r3, r4
    b628:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    b62c:	e5953040 	ldr	r3, [r5, #64]	; 0x40
    b630:	e2466001 	sub	r6, r6, #1
    b634:	e0060690 	mul	r6, r0, r6
    b638:	e1530006 	cmp	r3, r6
    b63c:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    b640:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    b644:	e1530006 	cmp	r3, r6
    b648:	85854048 	strhi	r4, [r5, #72]	; 0x48
    b64c:	8585604c 	strhi	r6, [r5, #76]	; 0x4c
    b650:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b654 <CScreenDevice::CursorUp()>:
    b654:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    b658:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b65c:	e1520003 	cmp	r2, r3
    b660:	912fff1e 	bxls	lr
    b664:	e92d4010 	push	{r4, lr}
    b668:	e1a04000 	mov	r4, r0
    b66c:	e280001c 	add	r0, r0, #28
    b670:	eb001d10 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    b674:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b678:	e0433000 	sub	r3, r3, r0
    b67c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b680:	e8bd8010 	pop	{r4, pc}

0000b684 <CScreenDevice::DeleteChars(unsigned int)>:
    b684:	e12fff1e 	bx	lr

0000b688 <CScreenDevice::DeleteLines(unsigned int)>:
    b688:	e12fff1e 	bx	lr

0000b68c <CScreenDevice::GetTextBackgroundColor()>:
    b68c:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    b690:	e3530000 	cmp	r3, #0
    b694:	11d005b2 	ldrhne	r0, [r0, #82]	; 0x52
    b698:	01d005b4 	ldrheq	r0, [r0, #84]	; 0x54
    b69c:	e12fff1e 	bx	lr

0000b6a0 <CScreenDevice::GetTextColor()>:
    b6a0:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    b6a4:	e3530000 	cmp	r3, #0
    b6a8:	11d005b4 	ldrhne	r0, [r0, #84]	; 0x54
    b6ac:	01d005b2 	ldrheq	r0, [r0, #82]	; 0x52
    b6b0:	e12fff1e 	bx	lr

0000b6b4 <CScreenDevice::InsertLines(unsigned int)>:
    b6b4:	e12fff1e 	bx	lr

0000b6b8 <CScreenDevice::InsertMode(bool)>:
    b6b8:	e5c01057 	strb	r1, [r0, #87]	; 0x57
    b6bc:	e12fff1e 	bx	lr

0000b6c0 <CScreenDevice::ReverseScroll()>:
    b6c0:	e12fff1e 	bx	lr

0000b6c4 <CScreenDevice::SetCursorMode(bool)>:
    b6c4:	e5c01050 	strb	r1, [r0, #80]	; 0x50
    b6c8:	e12fff1e 	bx	lr

0000b6cc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b6cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b6d0:	e280701c 	add	r7, r0, #28
    b6d4:	e1a05000 	mov	r5, r0
    b6d8:	e1a00007 	mov	r0, r7
    b6dc:	e1a04001 	mov	r4, r1
    b6e0:	e1a06002 	mov	r6, r2
    b6e4:	e2444001 	sub	r4, r4, #1
    b6e8:	eb001cf2 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    b6ec:	e1a01000 	mov	r1, r0
    b6f0:	e1a00007 	mov	r0, r7
    b6f4:	e0040491 	mul	r4, r1, r4
    b6f8:	eb001cee 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    b6fc:	e0000096 	mul	r0, r6, r0
    b700:	e5951038 	ldr	r1, [r5, #56]	; 0x38
    b704:	e1510000 	cmp	r1, r0
    b708:	31a03001 	movcc	r3, r1
    b70c:	21a03000 	movcs	r3, r0
    b710:	e1540003 	cmp	r4, r3
    b714:	33a03001 	movcc	r3, #1
    b718:	23a03000 	movcs	r3, #0
    b71c:	e1510000 	cmp	r1, r0
    b720:	33a03000 	movcc	r3, #0
    b724:	e3530000 	cmp	r3, #0
    b728:	e3a03000 	mov	r3, #0
    b72c:	15854040 	strne	r4, [r5, #64]	; 0x40
    b730:	05954040 	ldreq	r4, [r5, #64]	; 0x40
    b734:	15850044 	strne	r0, [r5, #68]	; 0x44
    b738:	e585404c 	str	r4, [r5, #76]	; 0x4c
    b73c:	e5853048 	str	r3, [r5, #72]	; 0x48
    b740:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b744 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b744:	e351006b 	cmp	r1, #107	; 0x6b
    b748:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b74c:	ea00006d 	b	b908 <CScreenDevice::SetStandoutMode(unsigned int)+0x1c4>
    b750:	0000b928 	.word	0x0000b928
    b754:	0000b90c 	.word	0x0000b90c
    b758:	0000b91c 	.word	0x0000b91c
    b75c:	0000b908 	.word	0x0000b908
    b760:	0000b908 	.word	0x0000b908
    b764:	0000b908 	.word	0x0000b908
    b768:	0000b908 	.word	0x0000b908
    b76c:	0000bab4 	.word	0x0000bab4
    b770:	0000b908 	.word	0x0000b908
    b774:	0000b908 	.word	0x0000b908
    b778:	0000b908 	.word	0x0000b908
    b77c:	0000b908 	.word	0x0000b908
    b780:	0000b908 	.word	0x0000b908
    b784:	0000b908 	.word	0x0000b908
    b788:	0000b908 	.word	0x0000b908
    b78c:	0000b908 	.word	0x0000b908
    b790:	0000b908 	.word	0x0000b908
    b794:	0000b908 	.word	0x0000b908
    b798:	0000b908 	.word	0x0000b908
    b79c:	0000b908 	.word	0x0000b908
    b7a0:	0000b908 	.word	0x0000b908
    b7a4:	0000b908 	.word	0x0000b908
    b7a8:	0000b908 	.word	0x0000b908
    b7ac:	0000b908 	.word	0x0000b908
    b7b0:	0000b908 	.word	0x0000b908
    b7b4:	0000b908 	.word	0x0000b908
    b7b8:	0000b908 	.word	0x0000b908
    b7bc:	0000b928 	.word	0x0000b928
    b7c0:	0000b908 	.word	0x0000b908
    b7c4:	0000b908 	.word	0x0000b908
    b7c8:	0000ba08 	.word	0x0000ba08
    b7cc:	0000b9fc 	.word	0x0000b9fc
    b7d0:	0000b9f0 	.word	0x0000b9f0
    b7d4:	0000b9e0 	.word	0x0000b9e0
    b7d8:	0000b91c 	.word	0x0000b91c
    b7dc:	0000b9d0 	.word	0x0000b9d0
    b7e0:	0000b9c4 	.word	0x0000b9c4
    b7e4:	0000b9b4 	.word	0x0000b9b4
    b7e8:	0000b908 	.word	0x0000b908
    b7ec:	0000b908 	.word	0x0000b908
    b7f0:	0000b9a8 	.word	0x0000b9a8
    b7f4:	0000b99c 	.word	0x0000b99c
    b7f8:	0000b990 	.word	0x0000b990
    b7fc:	0000b980 	.word	0x0000b980
    b800:	0000b974 	.word	0x0000b974
    b804:	0000b964 	.word	0x0000b964
    b808:	0000b958 	.word	0x0000b958
    b80c:	0000b948 	.word	0x0000b948
    b810:	0000b908 	.word	0x0000b908
    b814:	0000b908 	.word	0x0000b908
    b818:	0000b908 	.word	0x0000b908
    b81c:	0000b908 	.word	0x0000b908
    b820:	0000b908 	.word	0x0000b908
    b824:	0000b908 	.word	0x0000b908
    b828:	0000b908 	.word	0x0000b908
    b82c:	0000b908 	.word	0x0000b908
    b830:	0000b908 	.word	0x0000b908
    b834:	0000b908 	.word	0x0000b908
    b838:	0000b908 	.word	0x0000b908
    b83c:	0000b908 	.word	0x0000b908
    b840:	0000b908 	.word	0x0000b908
    b844:	0000b908 	.word	0x0000b908
    b848:	0000b908 	.word	0x0000b908
    b84c:	0000b908 	.word	0x0000b908
    b850:	0000b908 	.word	0x0000b908
    b854:	0000b908 	.word	0x0000b908
    b858:	0000b908 	.word	0x0000b908
    b85c:	0000b908 	.word	0x0000b908
    b860:	0000b908 	.word	0x0000b908
    b864:	0000b908 	.word	0x0000b908
    b868:	0000b908 	.word	0x0000b908
    b86c:	0000b908 	.word	0x0000b908
    b870:	0000b908 	.word	0x0000b908
    b874:	0000b908 	.word	0x0000b908
    b878:	0000b908 	.word	0x0000b908
    b87c:	0000b908 	.word	0x0000b908
    b880:	0000b908 	.word	0x0000b908
    b884:	0000b908 	.word	0x0000b908
    b888:	0000b908 	.word	0x0000b908
    b88c:	0000b908 	.word	0x0000b908
    b890:	0000b908 	.word	0x0000b908
    b894:	0000b908 	.word	0x0000b908
    b898:	0000b908 	.word	0x0000b908
    b89c:	0000b908 	.word	0x0000b908
    b8a0:	0000b908 	.word	0x0000b908
    b8a4:	0000b908 	.word	0x0000b908
    b8a8:	0000b908 	.word	0x0000b908
    b8ac:	0000b908 	.word	0x0000b908
    b8b0:	0000b908 	.word	0x0000b908
    b8b4:	0000b908 	.word	0x0000b908
    b8b8:	0000baa8 	.word	0x0000baa8
    b8bc:	0000b90c 	.word	0x0000b90c
    b8c0:	0000b93c 	.word	0x0000b93c
    b8c4:	0000ba6c 	.word	0x0000ba6c
    b8c8:	0000ba60 	.word	0x0000ba60
    b8cc:	0000ba54 	.word	0x0000ba54
    b8d0:	0000ba48 	.word	0x0000ba48
    b8d4:	0000ba3c 	.word	0x0000ba3c
    b8d8:	0000b908 	.word	0x0000b908
    b8dc:	0000b908 	.word	0x0000b908
    b8e0:	0000ba30 	.word	0x0000ba30
    b8e4:	0000ba20 	.word	0x0000ba20
    b8e8:	0000ba14 	.word	0x0000ba14
    b8ec:	0000ba90 	.word	0x0000ba90
    b8f0:	0000ba84 	.word	0x0000ba84
    b8f4:	0000ba78 	.word	0x0000ba78
    b8f8:	0000ba9c 	.word	0x0000ba9c
    b8fc:	0000b900 	.word	0x0000b900
    b900:	e3e03020 	mvn	r3, #32
    b904:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b908:	e12fff1e 	bx	lr
    b90c:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
    b910:	e34f3fff 	movt	r3, #65535	; 0xffff
    b914:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b918:	e12fff1e 	bx	lr
    b91c:	e3a03015 	mov	r3, #21
    b920:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b924:	e12fff1e 	bx	lr
    b928:	e3a02000 	mov	r2, #0
    b92c:	e3e03020 	mvn	r3, #32
    b930:	e5c02056 	strb	r2, [r0, #86]	; 0x56
    b934:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b938:	e12fff1e 	bx	lr
    b93c:	e30537ca 	movw	r3, #22474	; 0x57ca
    b940:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b944:	e12fff1e 	bx	lr
    b948:	e30a3d55 	movw	r3, #44373	; 0xad55
    b94c:	e34f3fff 	movt	r3, #65535	; 0xffff
    b950:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b954:	e12fff1e 	bx	lr
    b958:	e3003555 	movw	r3, #1365	; 0x555
    b95c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b960:	e12fff1e 	bx	lr
    b964:	e30a3815 	movw	r3, #43029	; 0xa815
    b968:	e34f3fff 	movt	r3, #65535	; 0xffff
    b96c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b970:	e12fff1e 	bx	lr
    b974:	e3a03015 	mov	r3, #21
    b978:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b97c:	e12fff1e 	bx	lr
    b980:	e30a3a80 	movw	r3, #43648	; 0xaa80
    b984:	e34f3fff 	movt	r3, #65535	; 0xffff
    b988:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b98c:	e12fff1e 	bx	lr
    b990:	e3a03d15 	mov	r3, #1344	; 0x540
    b994:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b998:	e12fff1e 	bx	lr
    b99c:	e3a03b2a 	mov	r3, #43008	; 0xa800
    b9a0:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b9a4:	e12fff1e 	bx	lr
    b9a8:	e3a03000 	mov	r3, #0
    b9ac:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b9b0:	e12fff1e 	bx	lr
    b9b4:	e30a3d55 	movw	r3, #44373	; 0xad55
    b9b8:	e34f3fff 	movt	r3, #65535	; 0xffff
    b9bc:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9c0:	e12fff1e 	bx	lr
    b9c4:	e3003555 	movw	r3, #1365	; 0x555
    b9c8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9cc:	e12fff1e 	bx	lr
    b9d0:	e30a3815 	movw	r3, #43029	; 0xa815
    b9d4:	e34f3fff 	movt	r3, #65535	; 0xffff
    b9d8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9dc:	e12fff1e 	bx	lr
    b9e0:	e30a3a80 	movw	r3, #43648	; 0xaa80
    b9e4:	e34f3fff 	movt	r3, #65535	; 0xffff
    b9e8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9ec:	e12fff1e 	bx	lr
    b9f0:	e3a03d15 	mov	r3, #1344	; 0x540
    b9f4:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9f8:	e12fff1e 	bx	lr
    b9fc:	e3a03b2a 	mov	r3, #43008	; 0xa800
    ba00:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba04:	e12fff1e 	bx	lr
    ba08:	e3a03000 	mov	r3, #0
    ba0c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba10:	e12fff1e 	bx	lr
    ba14:	e30537ca 	movw	r3, #22474	; 0x57ca
    ba18:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba1c:	e12fff1e 	bx	lr
    ba20:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
    ba24:	e34f3fff 	movt	r3, #65535	; 0xffff
    ba28:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba2c:	e12fff1e 	bx	lr
    ba30:	e305328a 	movw	r3, #21130	; 0x528a
    ba34:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba38:	e12fff1e 	bx	lr
    ba3c:	e3e03020 	mvn	r3, #32
    ba40:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba44:	e12fff1e 	bx	lr
    ba48:	e30537df 	movw	r3, #22495	; 0x57df
    ba4c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba50:	e12fff1e 	bx	lr
    ba54:	e3e03e56 	mvn	r3, #1376	; 0x560
    ba58:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba5c:	e12fff1e 	bx	lr
    ba60:	e305329f 	movw	r3, #21151	; 0x529f
    ba64:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba68:	e12fff1e 	bx	lr
    ba6c:	e3e03035 	mvn	r3, #53	; 0x35
    ba70:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba74:	e12fff1e 	bx	lr
    ba78:	e3e03e56 	mvn	r3, #1376	; 0x560
    ba7c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba80:	e12fff1e 	bx	lr
    ba84:	e305329f 	movw	r3, #21151	; 0x529f
    ba88:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba8c:	e12fff1e 	bx	lr
    ba90:	e3e03035 	mvn	r3, #53	; 0x35
    ba94:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba98:	e12fff1e 	bx	lr
    ba9c:	e30537df 	movw	r3, #22495	; 0x57df
    baa0:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    baa4:	e12fff1e 	bx	lr
    baa8:	e305328a 	movw	r3, #21130	; 0x528a
    baac:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    bab0:	e12fff1e 	bx	lr
    bab4:	e3a03001 	mov	r3, #1
    bab8:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    babc:	e12fff1e 	bx	lr

0000bac0 <CScreenDevice::Scroll()>:
    bac0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bac4:	e1a05000 	mov	r5, r0
    bac8:	e24dd008 	sub	sp, sp, #8
    bacc:	e280001c 	add	r0, r0, #28
    bad0:	eb001bf8 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bad4:	e595c040 	ldr	ip, [r5, #64]	; 0x40
    bad8:	e1a04000 	mov	r4, r0
    badc:	e5956044 	ldr	r6, [r5, #68]	; 0x44
    bae0:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
    bae4:	e046600c 	sub	r6, r6, ip
    bae8:	e0466000 	sub	r6, r6, r0
    baec:	e1a03081 	lsl	r3, r1, #1
    baf0:	e0060693 	mul	r6, r3, r6
    baf4:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    baf8:	e0070c91 	mul	r7, r1, ip
    bafc:	e3560000 	cmp	r6, #0
    bb00:	e0827087 	add	r7, r2, r7, lsl #1
    bb04:	1a00001d 	bne	bb80 <CScreenDevice::Scroll()+0xc0>
    bb08:	e0030491 	mul	r3, r1, r4
    bb0c:	e1a03083 	lsl	r3, r3, #1
    bb10:	e1a0c123 	lsr	ip, r3, #2
    bb14:	e35c0000 	cmp	ip, #0
    bb18:	e24c0001 	sub	r0, ip, #1
    bb1c:	0a000015 	beq	bb78 <CScreenDevice::Scroll()+0xb8>
    bb20:	e1d5e5b4 	ldrh	lr, [r5, #84]	; 0x54
    bb24:	e3500002 	cmp	r0, #2
    bb28:	9a00000c 	bls	bb60 <CScreenDevice::Scroll()+0xa0>
    bb2c:	eea0eb90 	vdup.32	q8, lr
    bb30:	e3c3400f 	bic	r4, r3, #15
    bb34:	e1a02223 	lsr	r2, r3, #4
    bb38:	e1a03007 	mov	r3, r7
    bb3c:	e0871004 	add	r1, r7, r4
    bb40:	f4430a8d 	vst1.32	{d16-d17}, [r3]!
    bb44:	e1530001 	cmp	r3, r1
    bb48:	1afffffc 	bne	bb40 <CScreenDevice::Scroll()+0x80>
    bb4c:	e1a03102 	lsl	r3, r2, #2
    bb50:	e15c0003 	cmp	ip, r3
    bb54:	e0877004 	add	r7, r7, r4
    bb58:	e0400003 	sub	r0, r0, r3
    bb5c:	0a000005 	beq	bb78 <CScreenDevice::Scroll()+0xb8>
    bb60:	e587e000 	str	lr, [r7]
    bb64:	e3500000 	cmp	r0, #0
    bb68:	0a000002 	beq	bb78 <CScreenDevice::Scroll()+0xb8>
    bb6c:	e587e004 	str	lr, [r7, #4]
    bb70:	e3500001 	cmp	r0, #1
    bb74:	1587e008 	strne	lr, [r7, #8]
    bb78:	e28dd008 	add	sp, sp, #8
    bb7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bb80:	e08cc000 	add	ip, ip, r0
    bb84:	e2858064 	add	r8, r5, #100	; 0x64
    bb88:	e3a00002 	mov	r0, #2
    bb8c:	e3a01000 	mov	r1, #0
    bb90:	e0222c93 	mla	r2, r3, ip, r2
    bb94:	e1cd00f0 	strd	r0, [sp]
    bb98:	e1a03006 	mov	r3, r6
    bb9c:	e1a01007 	mov	r1, r7
    bba0:	e3c66003 	bic	r6, r6, #3
    bba4:	e1a00008 	mov	r0, r8
    bba8:	e0877006 	add	r7, r7, r6
    bbac:	eb001d37 	bl	13090 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    bbb0:	e1a00008 	mov	r0, r8
    bbb4:	eb001ebc 	bl	136ac <CDMAChannel::Start()>
    bbb8:	e1a00008 	mov	r0, r8
    bbbc:	eb001f04 	bl	137d4 <CDMAChannel::Wait()>
    bbc0:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
    bbc4:	eaffffcf 	b	bb08 <CScreenDevice::Scroll()+0x48>

0000bbc8 <CScreenDevice::CursorDown()>:
    bbc8:	e92d4070 	push	{r4, r5, r6, lr}
    bbcc:	e1a04000 	mov	r4, r0
    bbd0:	e280501c 	add	r5, r0, #28
    bbd4:	e1a00005 	mov	r0, r5
    bbd8:	eb001bb6 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bbdc:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bbe0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bbe4:	e0800002 	add	r0, r0, r2
    bbe8:	e1500003 	cmp	r0, r3
    bbec:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bbf0:	38bd8070 	popcc	{r4, r5, r6, pc}
    bbf4:	e1a00004 	mov	r0, r4
    bbf8:	ebffffb0 	bl	bac0 <CScreenDevice::Scroll()>
    bbfc:	e1a00005 	mov	r0, r5
    bc00:	eb001bac 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bc04:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bc08:	e0433000 	sub	r3, r3, r0
    bc0c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bc10:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bc14 <CScreenDevice::NewLine()>:
    bc14:	e92d4070 	push	{r4, r5, r6, lr}
    bc18:	e3a03000 	mov	r3, #0
    bc1c:	e5803048 	str	r3, [r0, #72]	; 0x48
    bc20:	e1a04000 	mov	r4, r0
    bc24:	e280501c 	add	r5, r0, #28
    bc28:	e1a00005 	mov	r0, r5
    bc2c:	eb001ba1 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bc30:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bc34:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bc38:	e0800002 	add	r0, r0, r2
    bc3c:	e1500003 	cmp	r0, r3
    bc40:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bc44:	38bd8070 	popcc	{r4, r5, r6, pc}
    bc48:	e1a00004 	mov	r0, r4
    bc4c:	ebffff9b 	bl	bac0 <CScreenDevice::Scroll()>
    bc50:	e1a00005 	mov	r0, r5
    bc54:	eb001b97 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bc58:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bc5c:	e0433000 	sub	r3, r3, r0
    bc60:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bc64:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bc68 <CScreenDevice::CursorRight()>:
    bc68:	e92d4070 	push	{r4, r5, r6, lr}
    bc6c:	e1a04000 	mov	r4, r0
    bc70:	e280501c 	add	r5, r0, #28
    bc74:	e1a00005 	mov	r0, r5
    bc78:	eb001b8c 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    bc7c:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    bc80:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    bc84:	e0800002 	add	r0, r0, r2
    bc88:	e1500003 	cmp	r0, r3
    bc8c:	e5840048 	str	r0, [r4, #72]	; 0x48
    bc90:	38bd8070 	popcc	{r4, r5, r6, pc}
    bc94:	e3a03000 	mov	r3, #0
    bc98:	e1a00005 	mov	r0, r5
    bc9c:	e5843048 	str	r3, [r4, #72]	; 0x48
    bca0:	eb001b84 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bca4:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bca8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bcac:	e0800002 	add	r0, r0, r2
    bcb0:	e1500003 	cmp	r0, r3
    bcb4:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bcb8:	38bd8070 	popcc	{r4, r5, r6, pc}
    bcbc:	e1a00004 	mov	r0, r4
    bcc0:	ebffff7e 	bl	bac0 <CScreenDevice::Scroll()>
    bcc4:	e1a00005 	mov	r0, r5
    bcc8:	eb001b7a 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bccc:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bcd0:	e0433000 	sub	r3, r3, r0
    bcd4:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bcd8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bcdc <CScreenDevice::Tabulator()>:
    bcdc:	e92d4070 	push	{r4, r5, r6, lr}
    bce0:	e1a04000 	mov	r4, r0
    bce4:	e280501c 	add	r5, r0, #28
    bce8:	e1a00005 	mov	r0, r5
    bcec:	eb001b6f 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    bcf0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    bcf4:	e1a00180 	lsl	r0, r0, #3
    bcf8:	e0803002 	add	r3, r0, r2
    bcfc:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    bd00:	e733f013 	udiv	r3, r3, r0
    bd04:	e0030390 	mul	r3, r0, r3
    bd08:	e1530001 	cmp	r3, r1
    bd0c:	e5843048 	str	r3, [r4, #72]	; 0x48
    bd10:	38bd8070 	popcc	{r4, r5, r6, pc}
    bd14:	e3a03000 	mov	r3, #0
    bd18:	e1a00005 	mov	r0, r5
    bd1c:	e5843048 	str	r3, [r4, #72]	; 0x48
    bd20:	eb001b64 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bd24:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bd28:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bd2c:	e0800002 	add	r0, r0, r2
    bd30:	e1500003 	cmp	r0, r3
    bd34:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bd38:	38bd8070 	popcc	{r4, r5, r6, pc}
    bd3c:	e1a00004 	mov	r0, r4
    bd40:	ebffff5e 	bl	bac0 <CScreenDevice::Scroll()>
    bd44:	e1a00005 	mov	r0, r5
    bd48:	eb001b5a 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bd4c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bd50:	e0433000 	sub	r3, r3, r0
    bd54:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bd58:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bd5c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    bd5c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd60:	e280701c 	add	r7, r0, #28
    bd64:	e24dd00c 	sub	sp, sp, #12
    bd68:	e1a06000 	mov	r6, r0
    bd6c:	e1a00007 	mov	r0, r7
    bd70:	e1a09001 	mov	r9, r1
    bd74:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    bd78:	e1a0a003 	mov	sl, r3
    bd7c:	e58d2004 	str	r2, [sp, #4]
    bd80:	e3a08000 	mov	r8, #0
    bd84:	eb001b4b 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bd88:	e1500008 	cmp	r0, r8
    bd8c:	9a000024 	bls	be24 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    bd90:	e59d5004 	ldr	r5, [sp, #4]
    bd94:	e3a04000 	mov	r4, #0
    bd98:	ea000013 	b	bdec <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x90>
    bd9c:	eb001b49 	bl	12ac8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bda0:	e3500000 	cmp	r0, #0
    bda4:	e1a0200b 	mov	r2, fp
    bda8:	1a000003 	bne	bdbc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x60>
    bdac:	e5d63056 	ldrb	r3, [r6, #86]	; 0x56
    bdb0:	e3530000 	cmp	r3, #0
    bdb4:	11d625b2 	ldrhne	r2, [r6, #82]	; 0x52
    bdb8:	01d625b4 	ldrheq	r2, [r6, #84]	; 0x54
    bdbc:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    bdc0:	e2844001 	add	r4, r4, #1
    bdc4:	e1530005 	cmp	r3, r5
    bdc8:	9a000006 	bls	bde8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
    bdcc:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    bdd0:	e153000a 	cmp	r3, sl
    bdd4:	8596302c 	ldrhi	r3, [r6, #44]	; 0x2c
    bdd8:	85961024 	ldrhi	r1, [r6, #36]	; 0x24
    bddc:	80235a93 	mlahi	r3, r3, sl, r5
    bde0:	81a03083 	lslhi	r3, r3, #1
    bde4:	818120b3 	strhhi	r2, [r1, r3]
    bde8:	e2855001 	add	r5, r5, #1
    bdec:	e1a00007 	mov	r0, r7
    bdf0:	eb001b2e 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    bdf4:	e1500004 	cmp	r0, r4
    bdf8:	e1a02004 	mov	r2, r4
    bdfc:	e1a03008 	mov	r3, r8
    be00:	e1a01009 	mov	r1, r9
    be04:	e1a00007 	mov	r0, r7
    be08:	8affffe3 	bhi	bd9c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x40>
    be0c:	e1a00007 	mov	r0, r7
    be10:	e2888001 	add	r8, r8, #1
    be14:	e28aa001 	add	sl, sl, #1
    be18:	eb001b26 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    be1c:	e1500008 	cmp	r0, r8
    be20:	8affffda 	bhi	bd90 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    be24:	e28dd00c 	add	sp, sp, #12
    be28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000be2c <CScreenDevice::DisplayChar(char)>:
    be2c:	e6ef3071 	uxtb	r3, r1
    be30:	e353001f 	cmp	r3, #31
    be34:	912fff1e 	bxls	lr
    be38:	e92d4030 	push	{r4, r5, lr}
    be3c:	e1a04000 	mov	r4, r0
    be40:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
    be44:	e24dd00c 	sub	sp, sp, #12
    be48:	e1c424d8 	ldrd	r2, [r4, #72]	; 0x48
    be4c:	e3500000 	cmp	r0, #0
    be50:	e284501c 	add	r5, r4, #28
    be54:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
    be58:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
    be5c:	e58d0000 	str	r0, [sp]
    be60:	e1a00004 	mov	r0, r4
    be64:	ebffffbc 	bl	bd5c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    be68:	e1a00005 	mov	r0, r5
    be6c:	eb001b0f 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    be70:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    be74:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    be78:	e0800002 	add	r0, r0, r2
    be7c:	e1500003 	cmp	r0, r3
    be80:	e5840048 	str	r0, [r4, #72]	; 0x48
    be84:	2a000001 	bcs	be90 <CScreenDevice::DisplayChar(char)+0x64>
    be88:	e28dd00c 	add	sp, sp, #12
    be8c:	e8bd8030 	pop	{r4, r5, pc}
    be90:	e3a03000 	mov	r3, #0
    be94:	e1a00005 	mov	r0, r5
    be98:	e5843048 	str	r3, [r4, #72]	; 0x48
    be9c:	eb001b05 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bea0:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bea4:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bea8:	e0800002 	add	r0, r0, r2
    beac:	e1500003 	cmp	r0, r3
    beb0:	e584004c 	str	r0, [r4, #76]	; 0x4c
    beb4:	3afffff3 	bcc	be88 <CScreenDevice::DisplayChar(char)+0x5c>
    beb8:	e1a00004 	mov	r0, r4
    bebc:	ebfffeff 	bl	bac0 <CScreenDevice::Scroll()>
    bec0:	e1a00005 	mov	r0, r5
    bec4:	eb001afb 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bec8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    becc:	e0433000 	sub	r3, r3, r0
    bed0:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bed4:	eaffffeb 	b	be88 <CScreenDevice::DisplayChar(char)+0x5c>

0000bed8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    bed8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    bedc:	e1a06000 	mov	r6, r0
    bee0:	e1a0a001 	mov	sl, r1
    bee4:	e1a08002 	mov	r8, r2
    bee8:	e280701c 	add	r7, r0, #28
    beec:	e3a09000 	mov	r9, #0
    bef0:	e1a00007 	mov	r0, r7
    bef4:	eb001aef 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    bef8:	e1500009 	cmp	r0, r9
    befc:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    bf00:	e1a0500a 	mov	r5, sl
    bf04:	e3a04000 	mov	r4, #0
    bf08:	ea00000c 	b	bf40 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    bf0c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    bf10:	e1530005 	cmp	r3, r5
    bf14:	9a000008 	bls	bf3c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x64>
    bf18:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    bf1c:	e1530008 	cmp	r3, r8
    bf20:	9a000005 	bls	bf3c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x64>
    bf24:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
    bf28:	e1d615b4 	ldrh	r1, [r6, #84]	; 0x54
    bf2c:	e0235893 	mla	r3, r3, r8, r5
    bf30:	e5962024 	ldr	r2, [r6, #36]	; 0x24
    bf34:	e1a03083 	lsl	r3, r3, #1
    bf38:	e18210b3 	strh	r1, [r2, r3]
    bf3c:	e2855001 	add	r5, r5, #1
    bf40:	e1a00007 	mov	r0, r7
    bf44:	eb001ad9 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    bf48:	e1500004 	cmp	r0, r4
    bf4c:	e2844001 	add	r4, r4, #1
    bf50:	8affffed 	bhi	bf0c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bf54:	e2899001 	add	r9, r9, #1
    bf58:	e2888001 	add	r8, r8, #1
    bf5c:	eaffffe3 	b	bef0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000bf60 <CScreenDevice::ClearLineEnd()>:
    bf60:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bf64:	e92d4070 	push	{r4, r5, r6, lr}
    bf68:	e5904048 	ldr	r4, [r0, #72]	; 0x48
    bf6c:	e1540003 	cmp	r4, r3
    bf70:	28bd8070 	popcs	{r4, r5, r6, pc}
    bf74:	e1a05000 	mov	r5, r0
    bf78:	e280601c 	add	r6, r0, #28
    bf7c:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    bf80:	e1a01004 	mov	r1, r4
    bf84:	e1a00005 	mov	r0, r5
    bf88:	ebffffd2 	bl	bed8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bf8c:	e1a00006 	mov	r0, r6
    bf90:	eb001ac6 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    bf94:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    bf98:	e0844000 	add	r4, r4, r0
    bf9c:	e1530004 	cmp	r3, r4
    bfa0:	8afffff5 	bhi	bf7c <CScreenDevice::ClearLineEnd()+0x1c>
    bfa4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bfa8 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
    bfa8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bfac:	e280701c 	add	r7, r0, #28
    bfb0:	e5906048 	ldr	r6, [r0, #72]	; 0x48
    bfb4:	e1a05000 	mov	r5, r0
    bfb8:	e1a00007 	mov	r0, r7
    bfbc:	e1a04001 	mov	r4, r1
    bfc0:	eb001aba 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    bfc4:	e0266094 	mla	r6, r4, r0, r6
    bfc8:	e5950030 	ldr	r0, [r5, #48]	; 0x30
    bfcc:	e5954048 	ldr	r4, [r5, #72]	; 0x48
    bfd0:	e1560000 	cmp	r6, r0
    bfd4:	21a06000 	movcs	r6, r0
    bfd8:	e1560004 	cmp	r6, r4
    bfdc:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    bfe0:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    bfe4:	e1a01004 	mov	r1, r4
    bfe8:	e1a00005 	mov	r0, r5
    bfec:	ebffffb9 	bl	bed8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bff0:	e1a00007 	mov	r0, r7
    bff4:	eb001aad 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    bff8:	e0844000 	add	r4, r4, r0
    bffc:	e1560004 	cmp	r6, r4
    c000:	8afffff6 	bhi	bfe0 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x38>
    c004:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000c008 <CScreenDevice::EraseChars(unsigned int)>:
    c008:	e3510000 	cmp	r1, #0
    c00c:	012fff1e 	bxeq	lr
    c010:	eaffffe4 	b	bfa8 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

0000c014 <CScreenDevice::ClearDisplayEnd()>:
    c014:	e92d4070 	push	{r4, r5, r6, lr}
    c018:	e1a04000 	mov	r4, r0
    c01c:	e5905048 	ldr	r5, [r0, #72]	; 0x48
    c020:	e280601c 	add	r6, r0, #28
    c024:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c028:	e1550003 	cmp	r5, r3
    c02c:	2a000009 	bcs	c058 <CScreenDevice::ClearDisplayEnd()+0x44>
    c030:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c034:	e1a01005 	mov	r1, r5
    c038:	e1a00004 	mov	r0, r4
    c03c:	ebffffa5 	bl	bed8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c040:	e1a00006 	mov	r0, r6
    c044:	eb001a99 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    c048:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    c04c:	e0855000 	add	r5, r5, r0
    c050:	e1530005 	cmp	r3, r5
    c054:	8afffff5 	bhi	c030 <CScreenDevice::ClearDisplayEnd()+0x1c>
    c058:	e594504c 	ldr	r5, [r4, #76]	; 0x4c
    c05c:	e1a00006 	mov	r0, r6
    c060:	eb001a94 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c064:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    c068:	e0852000 	add	r2, r5, r0
    c06c:	e0020293 	mul	r2, r3, r2
    c070:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c074:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    c078:	e1a030a3 	lsr	r3, r3, #1
    c07c:	e080c082 	add	ip, r0, r2, lsl #1
    c080:	e0432002 	sub	r2, r3, r2
    c084:	e3520000 	cmp	r2, #0
    c088:	e2421001 	sub	r1, r2, #1
    c08c:	08bd8070 	popeq	{r4, r5, r6, pc}
    c090:	e0800083 	add	r0, r0, r3, lsl #1
    c094:	e284e056 	add	lr, r4, #86	; 0x56
    c098:	e2843054 	add	r3, r4, #84	; 0x54
    c09c:	e15c000e 	cmp	ip, lr
    c0a0:	31530000 	cmpcc	r3, r0
    c0a4:	23a03001 	movcs	r3, #1
    c0a8:	33a03000 	movcc	r3, #0
    c0ac:	e3510008 	cmp	r1, #8
    c0b0:	93a03000 	movls	r3, #0
    c0b4:	82033001 	andhi	r3, r3, #1
    c0b8:	e3530000 	cmp	r3, #0
    c0bc:	0a000025 	beq	c158 <CScreenDevice::ClearDisplayEnd()+0x144>
    c0c0:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c0c4:	e1a0000c 	mov	r0, ip
    c0c8:	e1a0e1a2 	lsr	lr, r2, #3
    c0cc:	eea03bb0 	vdup.16	q8, r3
    c0d0:	e3a03000 	mov	r3, #0
    c0d4:	e2833001 	add	r3, r3, #1
    c0d8:	e15e0003 	cmp	lr, r3
    c0dc:	f4400a4d 	vst1.16	{d16-d17}, [r0]!
    c0e0:	1afffffb 	bne	c0d4 <CScreenDevice::ClearDisplayEnd()+0xc0>
    c0e4:	e3c23007 	bic	r3, r2, #7
    c0e8:	e1520003 	cmp	r2, r3
    c0ec:	e0411003 	sub	r1, r1, r3
    c0f0:	e1a03083 	lsl	r3, r3, #1
    c0f4:	e08c2003 	add	r2, ip, r3
    c0f8:	08bd8070 	popeq	{r4, r5, r6, pc}
    c0fc:	e1d405b4 	ldrh	r0, [r4, #84]	; 0x54
    c100:	e3510000 	cmp	r1, #0
    c104:	e18c00b3 	strh	r0, [ip, r3]
    c108:	08bd8070 	popeq	{r4, r5, r6, pc}
    c10c:	e1c200b2 	strh	r0, [r2, #2]
    c110:	e3510001 	cmp	r1, #1
    c114:	08bd8070 	popeq	{r4, r5, r6, pc}
    c118:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c11c:	e3510002 	cmp	r1, #2
    c120:	e1c230b4 	strh	r3, [r2, #4]
    c124:	08bd8070 	popeq	{r4, r5, r6, pc}
    c128:	e1c230b6 	strh	r3, [r2, #6]
    c12c:	e3510003 	cmp	r1, #3
    c130:	08bd8070 	popeq	{r4, r5, r6, pc}
    c134:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c138:	e3510004 	cmp	r1, #4
    c13c:	e1c230b8 	strh	r3, [r2, #8]
    c140:	08bd8070 	popeq	{r4, r5, r6, pc}
    c144:	e1c230ba 	strh	r3, [r2, #10]
    c148:	e3510005 	cmp	r1, #5
    c14c:	11d435b4 	ldrhne	r3, [r4, #84]	; 0x54
    c150:	11c230bc 	strhne	r3, [r2, #12]
    c154:	e8bd8070 	pop	{r4, r5, r6, pc}
    c158:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c15c:	e2411001 	sub	r1, r1, #1
    c160:	e3710001 	cmn	r1, #1
    c164:	e0cc30b2 	strh	r3, [ip], #2
    c168:	1afffffa 	bne	c158 <CScreenDevice::ClearDisplayEnd()+0x144>
    c16c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c170 <CScreenDevice::Initialize()>:
    c170:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c174:	e1a04000 	mov	r4, r0
    c178:	e5d05010 	ldrb	r5, [r0, #16]
    c17c:	e24dd010 	sub	sp, sp, #16
    c180:	e3550000 	cmp	r5, #0
    c184:	0a000030 	beq	c24c <CScreenDevice::Initialize()+0xdc>
    c188:	e5903008 	ldr	r3, [r0, #8]
    c18c:	e284601c 	add	r6, r4, #28
    c190:	e590100c 	ldr	r1, [r0, #12]
    c194:	e5803030 	str	r3, [r0, #48]	; 0x30
    c198:	e0020391 	mul	r2, r1, r3
    c19c:	e5801034 	str	r1, [r0, #52]	; 0x34
    c1a0:	e580302c 	str	r3, [r0, #44]	; 0x2c
    c1a4:	e372010f 	cmn	r2, #-1073741821	; 0xc0000003
    c1a8:	e1a00082 	lsl	r0, r2, #1
    c1ac:	e5840028 	str	r0, [r4, #40]	; 0x28
    c1b0:	23e00000 	mvncs	r0, #0
    c1b4:	eb00130c 	bl	10dec <operator new[](unsigned int)>
    c1b8:	e5840024 	str	r0, [r4, #36]	; 0x24
    c1bc:	e5945034 	ldr	r5, [r4, #52]	; 0x34
    c1c0:	e1a00006 	mov	r0, r6
    c1c4:	eb001a3b 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c1c8:	e1a03000 	mov	r3, r0
    c1cc:	e1a00006 	mov	r0, r6
    c1d0:	e735f315 	udiv	r5, r5, r3
    c1d4:	eb001a37 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c1d8:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    c1dc:	e1a03000 	mov	r3, r0
    c1e0:	e0030593 	mul	r3, r3, r5
    c1e4:	e584204c 	str	r2, [r4, #76]	; 0x4c
    c1e8:	e3a02000 	mov	r2, #0
    c1ec:	e5843038 	str	r3, [r4, #56]	; 0x38
    c1f0:	e1a00004 	mov	r0, r4
    c1f4:	e5843044 	str	r3, [r4, #68]	; 0x44
    c1f8:	e5842048 	str	r2, [r4, #72]	; 0x48
    c1fc:	ebffff84 	bl	c014 <CScreenDevice::ClearDisplayEnd()>
    c200:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
    c204:	e3530000 	cmp	r3, #0
    c208:	1a00000c 	bne	c240 <CScreenDevice::Initialize()+0xd0>
    c20c:	e3a05001 	mov	r5, #1
    c210:	ebfff1f7 	bl	89f4 <CDeviceNameService::Get()>
    c214:	e5942014 	ldr	r2, [r4, #20]
    c218:	e3a0c000 	mov	ip, #0
    c21c:	e58dc000 	str	ip, [sp]
    c220:	e3051300 	movw	r1, #21248	; 0x5300
    c224:	e3401001 	movt	r1, #1
    c228:	e1a03004 	mov	r3, r4
    c22c:	e2822001 	add	r2, r2, #1
    c230:	ebfff1fb 	bl	8a24 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    c234:	e1a00005 	mov	r0, r5
    c238:	e28dd010 	add	sp, sp, #16
    c23c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c240:	e1a00004 	mov	r0, r4
    c244:	ebfffbed 	bl	b200 <CScreenDevice::InvertCursor() [clone .part.0]>
    c248:	eaffffef 	b	c20c <CScreenDevice::Initialize()+0x9c>
    c24c:	e3a00098 	mov	r0, #152	; 0x98
    c250:	eb0012df 	bl	10dd4 <operator new(unsigned int)>
    c254:	e5943014 	ldr	r3, [r4, #20]
    c258:	e1a06000 	mov	r6, r0
    c25c:	e58d500c 	str	r5, [sp, #12]
    c260:	e58d3008 	str	r3, [sp, #8]
    c264:	e3a03010 	mov	r3, #16
    c268:	e58d5004 	str	r5, [sp, #4]
    c26c:	e58d5000 	str	r5, [sp]
    c270:	e594200c 	ldr	r2, [r4, #12]
    c274:	e5941008 	ldr	r1, [r4, #8]
    c278:	eb001894 	bl	124d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    c27c:	e5846018 	str	r6, [r4, #24]
    c280:	e1a00006 	mov	r0, r6
    c284:	eb001908 	bl	126ac <CBcmFrameBuffer::Initialize()>
    c288:	e3500000 	cmp	r0, #0
    c28c:	0affffe8 	beq	c234 <CScreenDevice::Initialize()+0xc4>
    c290:	e5940018 	ldr	r0, [r4, #24]
    c294:	eb001945 	bl	127b0 <CBcmFrameBuffer::GetDepth() const>
    c298:	e3500010 	cmp	r0, #16
    c29c:	1affffe4 	bne	c234 <CScreenDevice::Initialize()+0xc4>
    c2a0:	e5940018 	ldr	r0, [r4, #24]
    c2a4:	e284601c 	add	r6, r4, #28
    c2a8:	eb001942 	bl	127b8 <CBcmFrameBuffer::GetBuffer() const>
    c2ac:	e5840024 	str	r0, [r4, #36]	; 0x24
    c2b0:	e5940018 	ldr	r0, [r4, #24]
    c2b4:	eb001941 	bl	127c0 <CBcmFrameBuffer::GetSize() const>
    c2b8:	e5840028 	str	r0, [r4, #40]	; 0x28
    c2bc:	e5940018 	ldr	r0, [r4, #24]
    c2c0:	eb001938 	bl	127a8 <CBcmFrameBuffer::GetPitch() const>
    c2c4:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c2c8:	e5940018 	ldr	r0, [r4, #24]
    c2cc:	eb00192d 	bl	12788 <CBcmFrameBuffer::GetWidth() const>
    c2d0:	e5840030 	str	r0, [r4, #48]	; 0x30
    c2d4:	e5940018 	ldr	r0, [r4, #24]
    c2d8:	eb00192c 	bl	12790 <CBcmFrameBuffer::GetHeight() const>
    c2dc:	e5840034 	str	r0, [r4, #52]	; 0x34
    c2e0:	e1a00006 	mov	r0, r6
    c2e4:	eb0019f1 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    c2e8:	e1a08000 	mov	r8, r0
    c2ec:	e1a00006 	mov	r0, r6
    c2f0:	eb0019f0 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c2f4:	e1a07000 	mov	r7, r0
    c2f8:	e1a00006 	mov	r0, r6
    c2fc:	eb0019ef 	bl	12ac0 <CCharGenerator::GetUnderline() const>
    c300:	e0477000 	sub	r7, r7, r0
    c304:	e0000798 	mul	r0, r8, r7
    c308:	e3700113 	cmn	r0, #-1073741820	; 0xc0000004
    c30c:	91a00080 	lslls	r0, r0, #1
    c310:	83e00000 	mvnhi	r0, #0
    c314:	eb0012b4 	bl	10dec <operator new[](unsigned int)>
    c318:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    c31c:	e5840020 	str	r0, [r4, #32]
    c320:	e3130003 	tst	r3, #3
    c324:	1affffc2 	bne	c234 <CScreenDevice::Initialize()+0xc4>
    c328:	e1a030a3 	lsr	r3, r3, #1
    c32c:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c330:	eaffffa1 	b	c1bc <CScreenDevice::Initialize()+0x4c>

0000c334 <CScreenDevice::Write(char)>:
    c334:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    c338:	e92d4070 	push	{r4, r5, r6, lr}
    c33c:	e1a04000 	mov	r4, r0
    c340:	e24dd008 	sub	sp, sp, #8
    c344:	e3530007 	cmp	r3, #7
    c348:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c34c:	ea000009 	b	c378 <CScreenDevice::Write(char)+0x44>
    c350:	0000c3c0 	.word	0x0000c3c0
    c354:	0000c370 	.word	0x0000c370
    c358:	0000c420 	.word	0x0000c420
    c35c:	0000c478 	.word	0x0000c478
    c360:	0000c554 	.word	0x0000c554
    c364:	0000c578 	.word	0x0000c578
    c368:	0000c59c 	.word	0x0000c59c
    c36c:	0000c388 	.word	0x0000c388
    c370:	e351005b 	cmp	r1, #91	; 0x5b
    c374:	0a0000cf 	beq	c6b8 <CScreenDevice::Write(char)+0x384>
    c378:	e3a03000 	mov	r3, #0
    c37c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c380:	e28dd008 	add	sp, sp, #8
    c384:	e8bd8070 	pop	{r4, r5, r6, pc}
    c388:	e3c13004 	bic	r3, r1, #4
    c38c:	e3530068 	cmp	r3, #104	; 0x68
    c390:	0a000090 	beq	c5d8 <CScreenDevice::Write(char)+0x2a4>
    c394:	e2411030 	sub	r1, r1, #48	; 0x30
    c398:	e6ef3071 	uxtb	r3, r1
    c39c:	e3530009 	cmp	r3, #9
    c3a0:	8afffff4 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c3a4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c3a8:	e3a0200a 	mov	r2, #10
    c3ac:	e0211392 	mla	r1, r2, r3, r1
    c3b0:	e5801058 	str	r1, [r0, #88]	; 0x58
    c3b4:	e3510063 	cmp	r1, #99	; 0x63
    c3b8:	8affffee 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c3bc:	eaffffef 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c3c0:	e2413008 	sub	r3, r1, #8
    c3c4:	e3530013 	cmp	r3, #19
    c3c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c3cc:	ea000093 	b	c620 <CScreenDevice::Write(char)+0x2ec>
    c3d0:	0000c700 	.word	0x0000c700
    c3d4:	0000c6f4 	.word	0x0000c6f4
    c3d8:	0000c718 	.word	0x0000c718
    c3dc:	0000c620 	.word	0x0000c620
    c3e0:	0000c620 	.word	0x0000c620
    c3e4:	0000c70c 	.word	0x0000c70c
    c3e8:	0000c620 	.word	0x0000c620
    c3ec:	0000c620 	.word	0x0000c620
    c3f0:	0000c620 	.word	0x0000c620
    c3f4:	0000c620 	.word	0x0000c620
    c3f8:	0000c620 	.word	0x0000c620
    c3fc:	0000c620 	.word	0x0000c620
    c400:	0000c620 	.word	0x0000c620
    c404:	0000c620 	.word	0x0000c620
    c408:	0000c620 	.word	0x0000c620
    c40c:	0000c620 	.word	0x0000c620
    c410:	0000c620 	.word	0x0000c620
    c414:	0000c620 	.word	0x0000c620
    c418:	0000c620 	.word	0x0000c620
    c41c:	0000c6e8 	.word	0x0000c6e8
    c420:	e241303f 	sub	r3, r1, #63	; 0x3f
    c424:	e3530011 	cmp	r3, #17
    c428:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c42c:	ea0000a4 	b	c6c4 <CScreenDevice::Write(char)+0x390>
    c430:	0000c7fc 	.word	0x0000c7fc
    c434:	0000c6c4 	.word	0x0000c6c4
    c438:	0000c78c 	.word	0x0000c78c
    c43c:	0000c748 	.word	0x0000c748
    c440:	0000c7ec 	.word	0x0000c7ec
    c444:	0000c7dc 	.word	0x0000c7dc
    c448:	0000c6c4 	.word	0x0000c6c4
    c44c:	0000c6c4 	.word	0x0000c6c4
    c450:	0000c6c4 	.word	0x0000c6c4
    c454:	0000c7c4 	.word	0x0000c7c4
    c458:	0000c6c4 	.word	0x0000c6c4
    c45c:	0000c7b4 	.word	0x0000c7b4
    c460:	0000c808 	.word	0x0000c808
    c464:	0000c378 	.word	0x0000c378
    c468:	0000c378 	.word	0x0000c378
    c46c:	0000c6c4 	.word	0x0000c6c4
    c470:	0000c6c4 	.word	0x0000c6c4
    c474:	0000c378 	.word	0x0000c378
    c478:	e241303b 	sub	r3, r1, #59	; 0x3b
    c47c:	e3530032 	cmp	r3, #50	; 0x32
    c480:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c484:	ea00005a 	b	c5f4 <CScreenDevice::Write(char)+0x2c0>
    c488:	0000c88c 	.word	0x0000c88c
    c48c:	0000c5f4 	.word	0x0000c5f4
    c490:	0000c5f4 	.word	0x0000c5f4
    c494:	0000c5f4 	.word	0x0000c5f4
    c498:	0000c5f4 	.word	0x0000c5f4
    c49c:	0000c5f4 	.word	0x0000c5f4
    c4a0:	0000c5f4 	.word	0x0000c5f4
    c4a4:	0000c5f4 	.word	0x0000c5f4
    c4a8:	0000c5f4 	.word	0x0000c5f4
    c4ac:	0000c5f4 	.word	0x0000c5f4
    c4b0:	0000c5f4 	.word	0x0000c5f4
    c4b4:	0000c5f4 	.word	0x0000c5f4
    c4b8:	0000c5f4 	.word	0x0000c5f4
    c4bc:	0000c5f4 	.word	0x0000c5f4
    c4c0:	0000c5f4 	.word	0x0000c5f4
    c4c4:	0000c5f4 	.word	0x0000c5f4
    c4c8:	0000c5f4 	.word	0x0000c5f4
    c4cc:	0000c378 	.word	0x0000c378
    c4d0:	0000c378 	.word	0x0000c378
    c4d4:	0000c5f4 	.word	0x0000c5f4
    c4d8:	0000c5f4 	.word	0x0000c5f4
    c4dc:	0000c378 	.word	0x0000c378
    c4e0:	0000c5f4 	.word	0x0000c5f4
    c4e4:	0000c5f4 	.word	0x0000c5f4
    c4e8:	0000c5f4 	.word	0x0000c5f4
    c4ec:	0000c5f4 	.word	0x0000c5f4
    c4f0:	0000c5f4 	.word	0x0000c5f4
    c4f4:	0000c5f4 	.word	0x0000c5f4
    c4f8:	0000c5f4 	.word	0x0000c5f4
    c4fc:	0000c878 	.word	0x0000c878
    c500:	0000c5f4 	.word	0x0000c5f4
    c504:	0000c5f4 	.word	0x0000c5f4
    c508:	0000c5f4 	.word	0x0000c5f4
    c50c:	0000c5f4 	.word	0x0000c5f4
    c510:	0000c5f4 	.word	0x0000c5f4
    c514:	0000c5f4 	.word	0x0000c5f4
    c518:	0000c5f4 	.word	0x0000c5f4
    c51c:	0000c5f4 	.word	0x0000c5f4
    c520:	0000c5f4 	.word	0x0000c5f4
    c524:	0000c5f4 	.word	0x0000c5f4
    c528:	0000c5f4 	.word	0x0000c5f4
    c52c:	0000c5f4 	.word	0x0000c5f4
    c530:	0000c5f4 	.word	0x0000c5f4
    c534:	0000c5f4 	.word	0x0000c5f4
    c538:	0000c5f4 	.word	0x0000c5f4
    c53c:	0000c848 	.word	0x0000c848
    c540:	0000c5f4 	.word	0x0000c5f4
    c544:	0000c5f4 	.word	0x0000c5f4
    c548:	0000c5f4 	.word	0x0000c5f4
    c54c:	0000c848 	.word	0x0000c848
    c550:	0000c864 	.word	0x0000c864
    c554:	e2411030 	sub	r1, r1, #48	; 0x30
    c558:	e6ef3071 	uxtb	r3, r1
    c55c:	e3530009 	cmp	r3, #9
    c560:	8affff84 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c564:	e6af1071 	sxtb	r1, r1
    c568:	e3a03007 	mov	r3, #7
    c56c:	e5801058 	str	r1, [r0, #88]	; 0x58
    c570:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c574:	eaffff81 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c578:	e2411030 	sub	r1, r1, #48	; 0x30
    c57c:	e6ef3071 	uxtb	r3, r1
    c580:	e3530009 	cmp	r3, #9
    c584:	8affff7b 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c588:	e6af1071 	sxtb	r1, r1
    c58c:	e3a03006 	mov	r3, #6
    c590:	e580105c 	str	r1, [r0, #92]	; 0x5c
    c594:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c598:	eaffff78 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c59c:	e3510048 	cmp	r1, #72	; 0x48
    c5a0:	0a0000c0 	beq	c8a8 <CScreenDevice::Write(char)+0x574>
    c5a4:	e3510072 	cmp	r1, #114	; 0x72
    c5a8:	0a0000ba 	beq	c898 <CScreenDevice::Write(char)+0x564>
    c5ac:	e2411030 	sub	r1, r1, #48	; 0x30
    c5b0:	e6ef3071 	uxtb	r3, r1
    c5b4:	e3530009 	cmp	r3, #9
    c5b8:	8affff6e 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c5bc:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c5c0:	e3a0200a 	mov	r2, #10
    c5c4:	e0211392 	mla	r1, r2, r3, r1
    c5c8:	e580105c 	str	r1, [r0, #92]	; 0x5c
    c5cc:	e35100c7 	cmp	r1, #199	; 0xc7
    c5d0:	8affff68 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c5d4:	eaffff69 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c5d8:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c5dc:	e3530019 	cmp	r3, #25
    c5e0:	02411068 	subeq	r1, r1, #104	; 0x68
    c5e4:	016f1f11 	clzeq	r1, r1
    c5e8:	01a012a1 	lsreq	r1, r1, #5
    c5ec:	05c01050 	strbeq	r1, [r0, #80]	; 0x50
    c5f0:	eaffff60 	b	c378 <CScreenDevice::Write(char)+0x44>
    c5f4:	e2411030 	sub	r1, r1, #48	; 0x30
    c5f8:	e6ef3071 	uxtb	r3, r1
    c5fc:	e3530009 	cmp	r3, #9
    c600:	8affff5c 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c604:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c608:	e3a0200a 	mov	r2, #10
    c60c:	e0211392 	mla	r1, r2, r3, r1
    c610:	e5801058 	str	r1, [r0, #88]	; 0x58
    c614:	e35100c7 	cmp	r1, #199	; 0xc7
    c618:	8affff56 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c61c:	eaffff57 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c620:	e6ef3071 	uxtb	r3, r1
    c624:	e353001f 	cmp	r3, #31
    c628:	9affff54 	bls	c380 <CScreenDevice::Write(char)+0x4c>
    c62c:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
    c630:	e284501c 	add	r5, r4, #28
    c634:	e1c424d8 	ldrd	r2, [r4, #72]	; 0x48
    c638:	e3500000 	cmp	r0, #0
    c63c:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
    c640:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
    c644:	e58d0000 	str	r0, [sp]
    c648:	e1a00004 	mov	r0, r4
    c64c:	ebfffdc2 	bl	bd5c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c650:	e1a00005 	mov	r0, r5
    c654:	eb001915 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    c658:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c65c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    c660:	e0803003 	add	r3, r0, r3
    c664:	e1530002 	cmp	r3, r2
    c668:	e5843048 	str	r3, [r4, #72]	; 0x48
    c66c:	3affff43 	bcc	c380 <CScreenDevice::Write(char)+0x4c>
    c670:	e3a03000 	mov	r3, #0
    c674:	e1a00005 	mov	r0, r5
    c678:	e5843048 	str	r3, [r4, #72]	; 0x48
    c67c:	eb00190d 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c680:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c684:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    c688:	e0803003 	add	r3, r0, r3
    c68c:	e1530002 	cmp	r3, r2
    c690:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c694:	3affff39 	bcc	c380 <CScreenDevice::Write(char)+0x4c>
    c698:	e1a00004 	mov	r0, r4
    c69c:	ebfffd07 	bl	bac0 <CScreenDevice::Scroll()>
    c6a0:	e1a00005 	mov	r0, r5
    c6a4:	eb001903 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c6a8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c6ac:	e0433000 	sub	r3, r3, r0
    c6b0:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c6b4:	eaffff31 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c6b8:	e3a03002 	mov	r3, #2
    c6bc:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c6c0:	eaffff2e 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c6c4:	e2411030 	sub	r1, r1, #48	; 0x30
    c6c8:	e6ef3071 	uxtb	r3, r1
    c6cc:	e3530009 	cmp	r3, #9
    c6d0:	8affff28 	bhi	c378 <CScreenDevice::Write(char)+0x44>
    c6d4:	e6af1071 	sxtb	r1, r1
    c6d8:	e3a03003 	mov	r3, #3
    c6dc:	e5801058 	str	r1, [r0, #88]	; 0x58
    c6e0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c6e4:	eaffff25 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c6e8:	e3a03001 	mov	r3, #1
    c6ec:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c6f0:	eaffff22 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c6f4:	e28dd008 	add	sp, sp, #8
    c6f8:	e8bd4070 	pop	{r4, r5, r6, lr}
    c6fc:	eafffd76 	b	bcdc <CScreenDevice::Tabulator()>
    c700:	e28dd008 	add	sp, sp, #8
    c704:	e8bd4070 	pop	{r4, r5, r6, lr}
    c708:	eafffb9d 	b	b584 <CScreenDevice::CursorLeft()>
    c70c:	e3a03000 	mov	r3, #0
    c710:	e5803048 	str	r3, [r0, #72]	; 0x48
    c714:	eaffff19 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c718:	e3a03000 	mov	r3, #0
    c71c:	e280501c 	add	r5, r0, #28
    c720:	e5803048 	str	r3, [r0, #72]	; 0x48
    c724:	e1a00005 	mov	r0, r5
    c728:	eb0018e2 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c72c:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c730:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c734:	e0800002 	add	r0, r0, r2
    c738:	e1500003 	cmp	r0, r3
    c73c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c740:	3affff0e 	bcc	c380 <CScreenDevice::Write(char)+0x4c>
    c744:	eaffffd3 	b	c698 <CScreenDevice::Write(char)+0x364>
    c748:	e280501c 	add	r5, r0, #28
    c74c:	e1a00005 	mov	r0, r5
    c750:	eb0018d8 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c754:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c758:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    c75c:	e0803003 	add	r3, r0, r3
    c760:	e1530002 	cmp	r3, r2
    c764:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c768:	3affff02 	bcc	c378 <CScreenDevice::Write(char)+0x44>
    c76c:	e1a00004 	mov	r0, r4
    c770:	ebfffcd2 	bl	bac0 <CScreenDevice::Scroll()>
    c774:	e1a00005 	mov	r0, r5
    c778:	eb0018ce 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c77c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c780:	e0433000 	sub	r3, r3, r0
    c784:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c788:	eafffefa 	b	c378 <CScreenDevice::Write(char)+0x44>
    c78c:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    c790:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c794:	e1520003 	cmp	r2, r3
    c798:	9afffef6 	bls	c378 <CScreenDevice::Write(char)+0x44>
    c79c:	e280001c 	add	r0, r0, #28
    c7a0:	eb0018c4 	bl	12ab8 <CCharGenerator::GetCharHeight() const>
    c7a4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c7a8:	e0433000 	sub	r3, r3, r0
    c7ac:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c7b0:	eafffef0 	b	c378 <CScreenDevice::Write(char)+0x44>
    c7b4:	ebfffe16 	bl	c014 <CScreenDevice::ClearDisplayEnd()>
    c7b8:	e3a03000 	mov	r3, #0
    c7bc:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c7c0:	eafffeee 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c7c4:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c7c8:	e3a03000 	mov	r3, #0
    c7cc:	e5803048 	str	r3, [r0, #72]	; 0x48
    c7d0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c7d4:	e580204c 	str	r2, [r0, #76]	; 0x4c
    c7d8:	eafffee8 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c7dc:	ebfffb68 	bl	b584 <CScreenDevice::CursorLeft()>
    c7e0:	e3a03000 	mov	r3, #0
    c7e4:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c7e8:	eafffee4 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c7ec:	ebfffd1d 	bl	bc68 <CScreenDevice::CursorRight()>
    c7f0:	e3a03000 	mov	r3, #0
    c7f4:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c7f8:	eafffee0 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c7fc:	e3a03004 	mov	r3, #4
    c800:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c804:	eafffedd 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c808:	e5905048 	ldr	r5, [r0, #72]	; 0x48
    c80c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c810:	e1530005 	cmp	r3, r5
    c814:	9afffed7 	bls	c378 <CScreenDevice::Write(char)+0x44>
    c818:	e280601c 	add	r6, r0, #28
    c81c:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c820:	e1a01005 	mov	r1, r5
    c824:	e1a00004 	mov	r0, r4
    c828:	ebfffdaa 	bl	bed8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c82c:	e1a00006 	mov	r0, r6
    c830:	eb00189e 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    c834:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    c838:	e0855000 	add	r5, r5, r0
    c83c:	e1530005 	cmp	r3, r5
    c840:	8afffff5 	bhi	c81c <CScreenDevice::Write(char)+0x4e8>
    c844:	eafffecb 	b	c378 <CScreenDevice::Write(char)+0x44>
    c848:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c84c:	e3530004 	cmp	r3, #4
    c850:	02411068 	subeq	r1, r1, #104	; 0x68
    c854:	016f1f11 	clzeq	r1, r1
    c858:	01a012a1 	lsreq	r1, r1, #5
    c85c:	05c01057 	strbeq	r1, [r0, #87]	; 0x57
    c860:	eafffec4 	b	c378 <CScreenDevice::Write(char)+0x44>
    c864:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    c868:	ebfffbb5 	bl	b744 <CScreenDevice::SetStandoutMode(unsigned int)>
    c86c:	e3a03000 	mov	r3, #0
    c870:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c874:	eafffec1 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c878:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    c87c:	e3510000 	cmp	r1, #0
    c880:	0afffebc 	beq	c378 <CScreenDevice::Write(char)+0x44>
    c884:	ebfffdc7 	bl	bfa8 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
    c888:	eafffeba 	b	c378 <CScreenDevice::Write(char)+0x44>
    c88c:	e3a03005 	mov	r3, #5
    c890:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c894:	eafffeb9 	b	c380 <CScreenDevice::Write(char)+0x4c>
    c898:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    c89c:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    c8a0:	ebfffb89 	bl	b6cc <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c8a4:	eafffeb3 	b	c378 <CScreenDevice::Write(char)+0x44>
    c8a8:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    c8ac:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    c8b0:	ebfffb4e 	bl	b5f0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c8b4:	e3a03000 	mov	r3, #0
    c8b8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c8bc:	eafffeaf 	b	c380 <CScreenDevice::Write(char)+0x4c>

0000c8c0 <CScreenDevice::Write(void const*, unsigned int)>:
    c8c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c8c4:	e1a05000 	mov	r5, r0
    c8c8:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
    c8cc:	e1a06001 	mov	r6, r1
    c8d0:	e1a04002 	mov	r4, r2
    c8d4:	e3500000 	cmp	r0, #0
    c8d8:	1a000025 	bne	c974 <CScreenDevice::Write(void const*, unsigned int)+0xb4>
    c8dc:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    c8e0:	e3a02001 	mov	r2, #1
    c8e4:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    c8e8:	e3530000 	cmp	r3, #0
    c8ec:	1a000019 	bne	c958 <CScreenDevice::Write(void const*, unsigned int)+0x98>
    c8f0:	e3540000 	cmp	r4, #0
    c8f4:	e2447001 	sub	r7, r4, #1
    c8f8:	01a07004 	moveq	r7, r4
    c8fc:	0a00000d 	beq	c938 <CScreenDevice::Write(void const*, unsigned int)+0x78>
    c900:	e1a04006 	mov	r4, r6
    c904:	e0d410d1 	ldrsb	r1, [r4], #1
    c908:	e1a00005 	mov	r0, r5
    c90c:	ebfffe88 	bl	c334 <CScreenDevice::Write(char)>
    c910:	e2643001 	rsb	r3, r4, #1
    c914:	e0863003 	add	r3, r6, r3
    c918:	e1730007 	cmn	r3, r7
    c91c:	1afffff8 	bne	c904 <CScreenDevice::Write(void const*, unsigned int)+0x44>
    c920:	e2877001 	add	r7, r7, #1
    c924:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    c928:	e3530000 	cmp	r3, #0
    c92c:	0a000001 	beq	c938 <CScreenDevice::Write(void const*, unsigned int)+0x78>
    c930:	e1a00005 	mov	r0, r5
    c934:	ebfffa31 	bl	b200 <CScreenDevice::InvertCursor() [clone .part.0]>
    c938:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
    c93c:	e3a02000 	mov	r2, #0
    c940:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    c944:	e1530002 	cmp	r3, r2
    c948:	1a00000b 	bne	c97c <CScreenDevice::Write(void const*, unsigned int)+0xbc>
    c94c:	f57ff05f 	dmb	sy
    c950:	e1a00007 	mov	r0, r7
    c954:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c958:	e1a00005 	mov	r0, r5
    c95c:	e2447001 	sub	r7, r4, #1
    c960:	ebfffa26 	bl	b200 <CScreenDevice::InvertCursor() [clone .part.0]>
    c964:	e3540000 	cmp	r4, #0
    c968:	1affffe4 	bne	c900 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c96c:	e1a07004 	mov	r7, r4
    c970:	eaffffeb 	b	c924 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    c974:	eb001498 	bl	11bdc <EnterCritical>
    c978:	eaffffd7 	b	c8dc <CScreenDevice::Write(void const*, unsigned int)+0x1c>
    c97c:	eb0014c1 	bl	11c88 <LeaveCritical>
    c980:	eafffff1 	b	c94c <CScreenDevice::Write(void const*, unsigned int)+0x8c>

0000c984 <CScreenDevice::InvertCursor()>:
    c984:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
    c988:	e3530000 	cmp	r3, #0
    c98c:	012fff1e 	bxeq	lr
    c990:	eafffa1a 	b	b200 <CScreenDevice::InvertCursor() [clone .part.0]>

0000c994 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    c994:	e590c030 	ldr	ip, [r0, #48]	; 0x30
    c998:	e15c0001 	cmp	ip, r1
    c99c:	912fff1e 	bxls	lr
    c9a0:	e590c034 	ldr	ip, [r0, #52]	; 0x34
    c9a4:	e15c0002 	cmp	ip, r2
    c9a8:	8590c02c 	ldrhi	ip, [r0, #44]	; 0x2c
    c9ac:	85900024 	ldrhi	r0, [r0, #36]	; 0x24
    c9b0:	8021129c 	mlahi	r1, ip, r2, r1
    c9b4:	81a01081 	lslhi	r1, r1, #1
    c9b8:	818030b1 	strhhi	r3, [r0, r1]
    c9bc:	e12fff1e 	bx	lr

0000c9c0 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c9c0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c9c4:	e1530001 	cmp	r3, r1
    c9c8:	9a000002 	bls	c9d8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
    c9cc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c9d0:	e1530002 	cmp	r3, r2
    c9d4:	8a000001 	bhi	c9e0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
    c9d8:	e1d005b4 	ldrh	r0, [r0, #84]	; 0x54
    c9dc:	e12fff1e 	bx	lr
    c9e0:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    c9e4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c9e8:	e021129c 	mla	r1, ip, r2, r1
    c9ec:	e1a01081 	lsl	r1, r1, #1
    c9f0:	e19300b1 	ldrh	r0, [r3, r1]
    c9f4:	e12fff1e 	bx	lr

0000c9f8 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c9f8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c9fc:	e1a06000 	mov	r6, r0
    ca00:	e5907030 	ldr	r7, [r0, #48]	; 0x30
    ca04:	e24dd00c 	sub	sp, sp, #12
    ca08:	e280001c 	add	r0, r0, #28
    ca0c:	e1a05002 	mov	r5, r2
    ca10:	e1a04001 	mov	r4, r1
    ca14:	eb001825 	bl	12ab0 <CCharGenerator::GetCharWidth() const>
    ca18:	e3053304 	movw	r3, #21252	; 0x5304
    ca1c:	e2051003 	and	r1, r5, #3
    ca20:	e3403001 	movt	r3, #1
    ca24:	e2044003 	and	r4, r4, #3
    ca28:	e0831001 	add	r1, r3, r1
    ca2c:	e30fca8a 	movw	ip, #64138	; 0xfa8a
    ca30:	e58dc000 	str	ip, [sp]
    ca34:	e2844001 	add	r4, r4, #1
    ca38:	e0627490 	mls	r2, r0, r4, r7
    ca3c:	e1d112d4 	ldrsb	r1, [r1, #36]	; 0x24
    ca40:	e1a00006 	mov	r0, r6
    ca44:	e3a03000 	mov	r3, #0
    ca48:	ebfffcc3 	bl	bd5c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    ca4c:	e28dd00c 	add	sp, sp, #12
    ca50:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000ca54 <CSerialDevice::Read(void*, unsigned int)>:
    ca54:	e5d03018 	ldrb	r3, [r0, #24]
    ca58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ca5c:	e3530000 	cmp	r3, #0
    ca60:	0a00004b 	beq	cb94 <CSerialDevice::Read(void*, unsigned int)+0x140>
    ca64:	e3510000 	cmp	r1, #0
    ca68:	e1a06001 	mov	r6, r1
    ca6c:	0a00004d 	beq	cba8 <CSerialDevice::Read(void*, unsigned int)+0x154>
    ca70:	e5905008 	ldr	r5, [r0, #8]
    ca74:	e1a04000 	mov	r4, r0
    ca78:	e1a07002 	mov	r7, r2
    ca7c:	e3550000 	cmp	r5, #0
    ca80:	0a000028 	beq	cb28 <CSerialDevice::Read(void*, unsigned int)+0xd4>
    ca84:	e2808a01 	add	r8, r0, #4096	; 0x1000
    ca88:	e59800e0 	ldr	r0, [r8, #224]	; 0xe0
    ca8c:	e3500000 	cmp	r0, #0
    ca90:	1a00003a 	bne	cb80 <CSerialDevice::Read(void*, unsigned int)+0x12c>
    ca94:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    ca98:	e3530000 	cmp	r3, #0
    ca9c:	ba000019 	blt	cb08 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    caa0:	e3570000 	cmp	r7, #0
    caa4:	0a00004a 	beq	cbd4 <CSerialDevice::Read(void*, unsigned int)+0x180>
    caa8:	e3a05000 	mov	r5, #0
    caac:	ea00000b 	b	cae0 <CSerialDevice::Read(void*, unsigned int)+0x8c>
    cab0:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    cab4:	e2855001 	add	r5, r5, #1
    cab8:	e1570005 	cmp	r7, r5
    cabc:	e0842003 	add	r2, r4, r3
    cac0:	e2833001 	add	r3, r3, #1
    cac4:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
    cac8:	e5d230bc 	ldrb	r3, [r2, #188]	; 0xbc
    cacc:	e4c63001 	strb	r3, [r6], #1
    cad0:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    cad4:	e7ea3053 	ubfx	r3, r3, #0, #11
    cad8:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
    cadc:	0a00000c 	beq	cb14 <CSerialDevice::Read(void*, unsigned int)+0xc0>
    cae0:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    cae4:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    cae8:	e1520003 	cmp	r2, r3
    caec:	1affffef 	bne	cab0 <CSerialDevice::Read(void*, unsigned int)+0x5c>
    caf0:	e59830e0 	ldr	r3, [r8, #224]	; 0xe0
    caf4:	e3530000 	cmp	r3, #0
    caf8:	0a000008 	beq	cb20 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cafc:	eb001461 	bl	11c88 <LeaveCritical>
    cb00:	e1a00005 	mov	r0, r5
    cb04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cb08:	e59458c4 	ldr	r5, [r4, #2244]	; 0x8c4
    cb0c:	e3a03000 	mov	r3, #0
    cb10:	e58438c4 	str	r3, [r4, #2244]	; 0x8c4
    cb14:	e59830e0 	ldr	r3, [r8, #224]	; 0xe0
    cb18:	e3530000 	cmp	r3, #0
    cb1c:	1afffff6 	bne	cafc <CSerialDevice::Read(void*, unsigned int)+0xa8>
    cb20:	e1a00005 	mov	r0, r5
    cb24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cb28:	e3520000 	cmp	r2, #0
    cb2c:	1a00000a 	bne	cb5c <CSerialDevice::Read(void*, unsigned int)+0x108>
    cb30:	ea000029 	b	cbdc <CSerialDevice::Read(void*, unsigned int)+0x188>
    cb34:	e3130b02 	tst	r3, #2048	; 0x800
    cb38:	1a00001f 	bne	cbbc <CSerialDevice::Read(void*, unsigned int)+0x168>
    cb3c:	e3130c01 	tst	r3, #256	; 0x100
    cb40:	1a00001f 	bne	cbc4 <CSerialDevice::Read(void*, unsigned int)+0x170>
    cb44:	e3130c02 	tst	r3, #512	; 0x200
    cb48:	1a00001f 	bne	cbcc <CSerialDevice::Read(void*, unsigned int)+0x178>
    cb4c:	e4c63001 	strb	r3, [r6], #1
    cb50:	e2855001 	add	r5, r5, #1
    cb54:	e1570005 	cmp	r7, r5
    cb58:	0afffff0 	beq	cb20 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cb5c:	e5943014 	ldr	r3, [r4, #20]
    cb60:	e5932018 	ldr	r2, [r3, #24]
    cb64:	e3120010 	tst	r2, #16
    cb68:	1affffec 	bne	cb20 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cb6c:	e5933000 	ldr	r3, [r3]
    cb70:	e3130b01 	tst	r3, #1024	; 0x400
    cb74:	0affffee 	beq	cb34 <CSerialDevice::Read(void*, unsigned int)+0xe0>
    cb78:	e3e05000 	mvn	r5, #0
    cb7c:	eaffffe7 	b	cb20 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cb80:	eb001415 	bl	11bdc <EnterCritical>
    cb84:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    cb88:	e3530000 	cmp	r3, #0
    cb8c:	aaffffc3 	bge	caa0 <CSerialDevice::Read(void*, unsigned int)+0x4c>
    cb90:	eaffffdc 	b	cb08 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    cb94:	e3051330 	movw	r1, #21296	; 0x5330
    cb98:	e3a02d07 	mov	r2, #448	; 0x1c0
    cb9c:	e3401001 	movt	r1, #1
    cba0:	e281000c 	add	r0, r1, #12
    cba4:	eb001604 	bl	123bc <assertion_failed>
    cba8:	e3051330 	movw	r1, #21296	; 0x5330
    cbac:	e30021c3 	movw	r2, #451	; 0x1c3
    cbb0:	e3401001 	movt	r1, #1
    cbb4:	e2810018 	add	r0, r1, #24
    cbb8:	eb0015ff 	bl	123bc <assertion_failed>
    cbbc:	e3e05001 	mvn	r5, #1
    cbc0:	eaffffd6 	b	cb20 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cbc4:	e3e05002 	mvn	r5, #2
    cbc8:	eaffffd4 	b	cb20 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cbcc:	e3e05003 	mvn	r5, #3
    cbd0:	eaffffd2 	b	cb20 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cbd4:	e1a05007 	mov	r5, r7
    cbd8:	eaffffcd 	b	cb14 <CSerialDevice::Read(void*, unsigned int)+0xc0>
    cbdc:	e1a05002 	mov	r5, r2
    cbe0:	eaffffce 	b	cb20 <CSerialDevice::Read(void*, unsigned int)+0xcc>

0000cbe4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
    cbe4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbe8:	e1a04000 	mov	r4, r0
    cbec:	e59f61a4 	ldr	r6, [pc, #420]	; cd98 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b4>
    cbf0:	e1a05001 	mov	r5, r1
    cbf4:	e24dd00c 	sub	sp, sp, #12
    cbf8:	e1a08002 	mov	r8, r2
    cbfc:	e1a07003 	mov	r7, r3
    cc00:	eb00186e 	bl	12dc0 <CDevice::CDevice()>
    cc04:	e5845008 	str	r5, [r4, #8]
    cc08:	e284301c 	add	r3, r4, #28
    cc0c:	e5846000 	str	r6, [r4]
    cc10:	e3a05000 	mov	r5, #0
    cc14:	e5c4800c 	strb	r8, [r4, #12]
    cc18:	e1a00003 	mov	r0, r3
    cc1c:	e5847010 	str	r7, [r4, #16]
    cc20:	e284b044 	add	fp, r4, #68	; 0x44
    cc24:	e5845014 	str	r5, [r4, #20]
    cc28:	e284a06c 	add	sl, r4, #108	; 0x6c
    cc2c:	e5c45018 	strb	r5, [r4, #24]
    cc30:	e2849094 	add	r9, r4, #148	; 0x94
    cc34:	e58d3004 	str	r3, [sp, #4]
    cc38:	ebfff011 	bl	8c84 <CGPIOPin::CGPIOPin()>
    cc3c:	e1a0000b 	mov	r0, fp
    cc40:	ebfff00f 	bl	8c84 <CGPIOPin::CGPIOPin()>
    cc44:	e1a0000a 	mov	r0, sl
    cc48:	ebfff00d 	bl	8c84 <CGPIOPin::CGPIOPin()>
    cc4c:	e1a00009 	mov	r0, r9
    cc50:	ebfff00b 	bl	8c84 <CGPIOPin::CGPIOPin()>
    cc54:	e1580005 	cmp	r8, r5
    cc58:	e2841a01 	add	r1, r4, #4096	; 0x1000
    cc5c:	e58458bc 	str	r5, [r4, #2236]	; 0x8bc
    cc60:	e3a02001 	mov	r2, #1
    cc64:	e58458c0 	str	r5, [r4, #2240]	; 0x8c0
    cc68:	13a00002 	movne	r0, #2
    cc6c:	e58458c4 	str	r5, [r4, #2244]	; 0x8c4
    cc70:	01a00002 	moveq	r0, r2
    cc74:	e58150c8 	str	r5, [r1, #200]	; 0xc8
    cc78:	e58150d4 	str	r5, [r1, #212]	; 0xd4
    cc7c:	e58150cc 	str	r5, [r1, #204]	; 0xcc
    cc80:	e58120d0 	str	r2, [r1, #208]	; 0xd0
    cc84:	e58120e4 	str	r2, [r1, #228]	; 0xe4
    cc88:	e58100e0 	str	r0, [r1, #224]	; 0xe0
    cc8c:	e5941010 	ldr	r1, [r4, #16]
    cc90:	e1510005 	cmp	r1, r5
    cc94:	1a000027 	bne	cd38 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x154>
    cc98:	e1a08207 	lsl	r8, r7, #4
    cc9c:	e246602c 	sub	r6, r6, #44	; 0x2c
    cca0:	e0861008 	add	r1, r6, r8
    cca4:	e5915048 	ldr	r5, [r1, #72]	; 0x48
    cca8:	e3550035 	cmp	r5, #53	; 0x35
    ccac:	8a000021 	bhi	cd38 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x154>
    ccb0:	e59d3004 	ldr	r3, [sp, #4]
    ccb4:	e3071190 	movw	r1, #29072	; 0x7190
    ccb8:	e3401001 	movt	r1, #1
    ccbc:	e5910000 	ldr	r0, [r1]
    ccc0:	e3500000 	cmp	r0, #0
    ccc4:	1a00002f 	bne	cd88 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1a4>
    ccc8:	e5814000 	str	r4, [r1]
    cccc:	e3570000 	cmp	r7, #0
    ccd0:	e3a01a01 	mov	r1, #4096	; 0x1000
    ccd4:	e3431f20 	movt	r1, #16160	; 0x3f20
    ccd8:	e5841014 	str	r1, [r4, #20]
    ccdc:	0a000018 	beq	cd44 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>
    cce0:	e0866008 	add	r6, r6, r8
    cce4:	e1a01005 	mov	r1, r5
    cce8:	e1a0000a 	mov	r0, sl
    ccec:	ebffeff2 	bl	8cbc <CGPIOPin::AssignPin(unsigned int)>
    ccf0:	e596104c 	ldr	r1, [r6, #76]	; 0x4c
    ccf4:	e3a02001 	mov	r2, #1
    ccf8:	e1a0000a 	mov	r0, sl
    ccfc:	e2811004 	add	r1, r1, #4
    cd00:	e6ef1071 	uxtb	r1, r1
    cd04:	ebfff219 	bl	9570 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cd08:	e5961050 	ldr	r1, [r6, #80]	; 0x50
    cd0c:	e1a00009 	mov	r0, r9
    cd10:	ebffefe9 	bl	8cbc <CGPIOPin::AssignPin(unsigned int)>
    cd14:	e3a02001 	mov	r2, #1
    cd18:	e3a01004 	mov	r1, #4
    cd1c:	e1a00009 	mov	r0, r9
    cd20:	ebfff212 	bl	9570 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cd24:	e3a01002 	mov	r1, #2
    cd28:	e1a00009 	mov	r0, r9
    cd2c:	ebfff1b9 	bl	9418 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    cd30:	e3a03001 	mov	r3, #1
    cd34:	e5c43018 	strb	r3, [r4, #24]
    cd38:	e1a00004 	mov	r0, r4
    cd3c:	e28dd00c 	add	sp, sp, #12
    cd40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd44:	e58d3004 	str	r3, [sp, #4]
    cd48:	e1a00003 	mov	r0, r3
    cd4c:	e3a01020 	mov	r1, #32
    cd50:	ebffefd9 	bl	8cbc <CGPIOPin::AssignPin(unsigned int)>
    cd54:	e59d3004 	ldr	r3, [sp, #4]
    cd58:	e3a02001 	mov	r2, #1
    cd5c:	e1a01007 	mov	r1, r7
    cd60:	e1a00003 	mov	r0, r3
    cd64:	ebfff201 	bl	9570 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cd68:	e1a0000b 	mov	r0, fp
    cd6c:	e3a01021 	mov	r1, #33	; 0x21
    cd70:	ebffefd1 	bl	8cbc <CGPIOPin::AssignPin(unsigned int)>
    cd74:	e3a02001 	mov	r2, #1
    cd78:	e1a01007 	mov	r1, r7
    cd7c:	e1a0000b 	mov	r0, fp
    cd80:	ebfff1fa 	bl	9570 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cd84:	eaffffd5 	b	cce0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xfc>
    cd88:	e3a020b0 	mov	r2, #176	; 0xb0
    cd8c:	e1a01006 	mov	r1, r6
    cd90:	e2860058 	add	r0, r6, #88	; 0x58
    cd94:	eb001588 	bl	123bc <assertion_failed>
    cd98:	0001535c 	.word	0x0001535c

0000cd9c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
    cd9c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cda0:	e24dd00c 	sub	sp, sp, #12
    cda4:	e5d07018 	ldrb	r7, [r0, #24]
    cda8:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
    cdac:	e3570000 	cmp	r7, #0
    cdb0:	1a000002 	bne	cdc0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x24>
    cdb4:	e1a00007 	mov	r0, r7
    cdb8:	e28dd00c 	add	sp, sp, #12
    cdbc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cdc0:	e1a0a001 	mov	sl, r1
    cdc4:	e1a05002 	mov	r5, r2
    cdc8:	e1a06003 	mov	r6, r3
    cdcc:	e1a04000 	mov	r4, r0
    cdd0:	ebfff8d1 	bl	b11c <CMachineInfo::Get()>
    cdd4:	e3a01002 	mov	r1, #2
    cdd8:	ebfff7eb 	bl	ad8c <CMachineInfo::GetClockRate(unsigned int) const>
    cddc:	e3500000 	cmp	r0, #0
    cde0:	0a000088 	beq	d008 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x26c>
    cde4:	e30037d4 	movw	r3, #2004	; 0x7d4
    cde8:	e24a2f4b 	sub	r2, sl, #300	; 0x12c
    cdec:	e340303d 	movt	r3, #61	; 0x3d
    cdf0:	e1520003 	cmp	r2, r3
    cdf4:	8a000088 	bhi	d01c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x280>
    cdf8:	e1a0320a 	lsl	r3, sl, #4
    cdfc:	e30f2ffe 	movw	r2, #65534	; 0xfffe
    ce00:	e739f310 	udiv	r9, r0, r3
    ce04:	e2491001 	sub	r1, r9, #1
    ce08:	e1510002 	cmp	r1, r2
    ce0c:	8a000087 	bhi	d030 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x294>
    ce10:	e0600993 	mls	r0, r3, r9, r0
    ce14:	e1a00180 	lsl	r0, r0, #3
    ce18:	e730fa10 	udiv	r0, r0, sl
    ce1c:	e200a001 	and	sl, r0, #1
    ce20:	e08aa0a0 	add	sl, sl, r0, lsr #1
    ce24:	e35a003f 	cmp	sl, #63	; 0x3f
    ce28:	8a000085 	bhi	d044 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2a8>
    ce2c:	e5940008 	ldr	r0, [r4, #8]
    ce30:	e3500000 	cmp	r0, #0
    ce34:	0a000013 	beq	ce88 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xec>
    ce38:	e307b190 	movw	fp, #29072	; 0x7190
    ce3c:	e340b001 	movt	fp, #1
    ce40:	e59b3004 	ldr	r3, [fp, #4]
    ce44:	e3530000 	cmp	r3, #0
    ce48:	1a000049 	bne	cf74 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1d8>
    ce4c:	e5d4200c 	ldrb	r2, [r4, #12]
    ce50:	e58b0008 	str	r0, [fp, #8]
    ce54:	e5cb200c 	strb	r2, [fp, #12]
    ce58:	e3520000 	cmp	r2, #0
    ce5c:	1a000056 	bne	cfbc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x220>
    ce60:	e1a03002 	mov	r3, r2
    ce64:	e30d2870 	movw	r2, #55408	; 0xd870
    ce68:	e3402000 	movt	r2, #0
    ce6c:	e3a01039 	mov	r1, #57	; 0x39
    ce70:	eb0013d8 	bl	11dd8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ce74:	e59b3004 	ldr	r3, [fp, #4]
    ce78:	e3530000 	cmp	r3, #0
    ce7c:	1a000057 	bne	cfe0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x244>
    ce80:	e3a03001 	mov	r3, #1
    ce84:	e58b3004 	str	r3, [fp, #4]
    ce88:	e5943014 	ldr	r3, [r4, #20]
    ce8c:	e3a02000 	mov	r2, #0
    ce90:	e5832038 	str	r2, [r3, #56]	; 0x38
    ce94:	e30027ff 	movw	r2, #2047	; 0x7ff
    ce98:	e5943014 	ldr	r3, [r4, #20]
    ce9c:	e5832044 	str	r2, [r3, #68]	; 0x44
    cea0:	e5943014 	ldr	r3, [r4, #20]
    cea4:	e5839024 	str	r9, [r3, #36]	; 0x24
    cea8:	e2453005 	sub	r3, r5, #5
    ceac:	e5942014 	ldr	r2, [r4, #20]
    ceb0:	e3530003 	cmp	r3, #3
    ceb4:	e582a028 	str	sl, [r2, #40]	; 0x28
    ceb8:	8a000066 	bhi	d058 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2bc>
    cebc:	e1a05285 	lsl	r5, r5, #5
    cec0:	e2463001 	sub	r3, r6, #1
    cec4:	e3530001 	cmp	r3, #1
    cec8:	e2455090 	sub	r5, r5, #144	; 0x90
    cecc:	8a000048 	bhi	cff4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x258>
    ced0:	e3560002 	cmp	r6, #2
    ced4:	03855008 	orreq	r5, r5, #8
    ced8:	e3580001 	cmp	r8, #1
    cedc:	0a000034 	beq	cfb4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x218>
    cee0:	e3580002 	cmp	r8, #2
    cee4:	1a00002b 	bne	cf98 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1fc>
    cee8:	e3855006 	orr	r5, r5, #6
    ceec:	e5943008 	ldr	r3, [r4, #8]
    cef0:	e3530000 	cmp	r3, #0
    cef4:	e5943014 	ldr	r3, [r4, #20]
    cef8:	0583502c 	streq	r5, [r3, #44]	; 0x2c
    cefc:	0a00000e 	beq	cf3c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1a0>
    cf00:	e3a02009 	mov	r2, #9
    cf04:	e3a01e45 	mov	r1, #1104	; 0x450
    cf08:	e5832034 	str	r2, [r3, #52]	; 0x34
    cf0c:	e3a00001 	mov	r0, #1
    cf10:	e5943014 	ldr	r3, [r4, #20]
    cf14:	e583502c 	str	r5, [r3, #44]	; 0x2c
    cf18:	e3073190 	movw	r3, #29072	; 0x7190
    cf1c:	e3403001 	movt	r3, #1
    cf20:	e5942014 	ldr	r2, [r4, #20]
    cf24:	e5821038 	str	r1, [r2, #56]	; 0x38
    cf28:	e5932010 	ldr	r2, [r3, #16]
    cf2c:	e5941010 	ldr	r1, [r4, #16]
    cf30:	e1822110 	orr	r2, r2, r0, lsl r1
    cf34:	e5832010 	str	r2, [r3, #16]
    cf38:	f57ff04f 	dsb	sy
    cf3c:	e5943014 	ldr	r3, [r4, #20]
    cf40:	e3002301 	movw	r2, #769	; 0x301
    cf44:	e5832030 	str	r2, [r3, #48]	; 0x30
    cf48:	ebffeea9 	bl	89f4 <CDeviceNameService::Get()>
    cf4c:	e5942010 	ldr	r2, [r4, #16]
    cf50:	e3a03000 	mov	r3, #0
    cf54:	e58d3000 	str	r3, [sp]
    cf58:	e1a03004 	mov	r3, r4
    cf5c:	e59f1108 	ldr	r1, [pc, #264]	; d06c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d0>
    cf60:	e2822001 	add	r2, r2, #1
    cf64:	ebffeeae 	bl	8a24 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    cf68:	e1a00007 	mov	r0, r7
    cf6c:	e28dd00c 	add	sp, sp, #12
    cf70:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf74:	e59b3008 	ldr	r3, [fp, #8]
    cf78:	e1500003 	cmp	r0, r3
    cf7c:	0a000013 	beq	cfd0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>
    cf80:	e5942010 	ldr	r2, [r4, #16]
    cf84:	e3a03000 	mov	r3, #0
    cf88:	e5c43018 	strb	r3, [r4, #24]
    cf8c:	e1a07003 	mov	r7, r3
    cf90:	e78b3102 	str	r3, [fp, r2, lsl #2]
    cf94:	eaffff86 	b	cdb4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
    cf98:	e3580000 	cmp	r8, #0
    cf9c:	0affffd2 	beq	ceec <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x150>
    cfa0:	e3051330 	movw	r1, #21296	; 0x5330
    cfa4:	e3002157 	movw	r2, #343	; 0x157
    cfa8:	e3401001 	movt	r1, #1
    cfac:	e2810f43 	add	r0, r1, #268	; 0x10c
    cfb0:	eb001501 	bl	123bc <assertion_failed>
    cfb4:	e3855002 	orr	r5, r5, #2
    cfb8:	eaffffcb 	b	ceec <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x150>
    cfbc:	e30d2870 	movw	r2, #55408	; 0xd870
    cfc0:	e3a01039 	mov	r1, #57	; 0x39
    cfc4:	e3402000 	movt	r2, #0
    cfc8:	eb0013e9 	bl	11f74 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    cfcc:	eaffffa8 	b	ce74 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xd8>
    cfd0:	e5d4200c 	ldrb	r2, [r4, #12]
    cfd4:	e5db300c 	ldrb	r3, [fp, #12]
    cfd8:	e1520003 	cmp	r2, r3
    cfdc:	1affffe7 	bne	cf80 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e4>
    cfe0:	e3051330 	movw	r1, #21296	; 0x5330
    cfe4:	e300212a 	movw	r2, #298	; 0x12a
    cfe8:	e3401001 	movt	r1, #1
    cfec:	e28100e4 	add	r0, r1, #228	; 0xe4
    cff0:	eb0014f1 	bl	123bc <assertion_failed>
    cff4:	e3051330 	movw	r1, #21296	; 0x5330
    cff8:	e3002143 	movw	r2, #323	; 0x143
    cffc:	e3401001 	movt	r1, #1
    d000:	e2810e11 	add	r0, r1, #272	; 0x110
    d004:	eb0014ec 	bl	123bc <assertion_failed>
    d008:	e3051330 	movw	r1, #21296	; 0x5330
    d00c:	e3a02c01 	mov	r2, #256	; 0x100
    d010:	e3401001 	movt	r1, #1
    d014:	e2810070 	add	r0, r1, #112	; 0x70
    d018:	eb0014e7 	bl	123bc <assertion_failed>
    d01c:	e3051330 	movw	r1, #21296	; 0x5330
    d020:	e3002102 	movw	r2, #258	; 0x102
    d024:	e3401001 	movt	r1, #1
    d028:	e2810080 	add	r0, r1, #128	; 0x80
    d02c:	eb0014e2 	bl	123bc <assertion_failed>
    d030:	e3051330 	movw	r1, #21296	; 0x5330
    d034:	e3002105 	movw	r2, #261	; 0x105
    d038:	e3401001 	movt	r1, #1
    d03c:	e28100ac 	add	r0, r1, #172	; 0xac
    d040:	eb0014dd 	bl	123bc <assertion_failed>
    d044:	e3051330 	movw	r1, #21296	; 0x5330
    d048:	e3a02f42 	mov	r2, #264	; 0x108
    d04c:	e3401001 	movt	r1, #1
    d050:	e28100d0 	add	r0, r1, #208	; 0xd0
    d054:	eb0014d8 	bl	123bc <assertion_failed>
    d058:	e3051330 	movw	r1, #21296	; 0x5330
    d05c:	e300213f 	movw	r2, #319	; 0x13f
    d060:	e3401001 	movt	r1, #1
    d064:	e2810f43 	add	r0, r1, #268	; 0x10c
    d068:	eb0014d3 	bl	123bc <assertion_failed>
    d06c:	00015464 	.word	0x00015464

0000d070 <CSerialDevice::GetOptions() const>:
    d070:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d074:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
    d078:	e12fff1e 	bx	lr

0000d07c <CSerialDevice::SetOptions(unsigned int)>:
    d07c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d080:	e58010d0 	str	r1, [r0, #208]	; 0xd0
    d084:	e12fff1e 	bx	lr

0000d088 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    d088:	e5903008 	ldr	r3, [r0, #8]
    d08c:	e92d4010 	push	{r4, lr}
    d090:	e3530000 	cmp	r3, #0
    d094:	0a00000e 	beq	d0d4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
    d098:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d09c:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
    d0a0:	e3530000 	cmp	r3, #0
    d0a4:	1a00000f 	bne	d0e8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x60>
    d0a8:	e3510000 	cmp	r1, #0
    d0ac:	0a000012 	beq	d0fc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x74>
    d0b0:	e1d130d0 	ldrsb	r3, [r1]
    d0b4:	e3530000 	cmp	r3, #0
    d0b8:	0a000014 	beq	d110 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x88>
    d0bc:	e3520000 	cmp	r2, #0
    d0c0:	0a000017 	beq	d124 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    d0c4:	e58020dc 	str	r2, [r0, #220]	; 0xdc
    d0c8:	e58010d8 	str	r1, [r0, #216]	; 0xd8
    d0cc:	e58010d4 	str	r1, [r0, #212]	; 0xd4
    d0d0:	e8bd8010 	pop	{r4, pc}
    d0d4:	e3051330 	movw	r1, #21296	; 0x5330
    d0d8:	e3a02e22 	mov	r2, #544	; 0x220
    d0dc:	e3401001 	movt	r1, #1
    d0e0:	e2810f4f 	add	r0, r1, #316	; 0x13c
    d0e4:	eb0014b4 	bl	123bc <assertion_failed>
    d0e8:	e3051330 	movw	r1, #21296	; 0x5330
    d0ec:	e3002221 	movw	r2, #545	; 0x221
    d0f0:	e3401001 	movt	r1, #1
    d0f4:	e2810f55 	add	r0, r1, #340	; 0x154
    d0f8:	eb0014af 	bl	123bc <assertion_failed>
    d0fc:	e3051330 	movw	r1, #21296	; 0x5330
    d100:	e3002223 	movw	r2, #547	; 0x223
    d104:	e3401001 	movt	r1, #1
    d108:	e2810f59 	add	r0, r1, #356	; 0x164
    d10c:	eb0014aa 	bl	123bc <assertion_failed>
    d110:	e3051330 	movw	r1, #21296	; 0x5330
    d114:	e3a02f89 	mov	r2, #548	; 0x224
    d118:	e3401001 	movt	r1, #1
    d11c:	e2810e17 	add	r0, r1, #368	; 0x170
    d120:	eb0014a5 	bl	123bc <assertion_failed>
    d124:	e3051330 	movw	r1, #21296	; 0x5330
    d128:	e3002225 	movw	r2, #549	; 0x225
    d12c:	e3401001 	movt	r1, #1
    d130:	e2810d06 	add	r0, r1, #384	; 0x180
    d134:	eb0014a0 	bl	123bc <assertion_failed>

0000d138 <CSerialDevice::AvailableForWrite()>:
    d138:	e5d03018 	ldrb	r3, [r0, #24]
    d13c:	e92d4010 	push	{r4, lr}
    d140:	e3530000 	cmp	r3, #0
    d144:	0a000019 	beq	d1b0 <CSerialDevice::AvailableForWrite()+0x78>
    d148:	e5903008 	ldr	r3, [r0, #8]
    d14c:	e3530000 	cmp	r3, #0
    d150:	0a00001b 	beq	d1c4 <CSerialDevice::AvailableForWrite()+0x8c>
    d154:	e2804a01 	add	r4, r0, #4096	; 0x1000
    d158:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d15c:	e3500000 	cmp	r0, #0
    d160:	1a00000c 	bne	d198 <CSerialDevice::AvailableForWrite()+0x60>
    d164:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d168:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d16c:	e1520003 	cmp	r2, r3
    d170:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d174:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d178:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    d17c:	82434001 	subhi	r4, r3, #1
    d180:	9284400f 	addls	r4, r4, #15
    d184:	e3500000 	cmp	r0, #0
    d188:	e0444002 	sub	r4, r4, r2
    d18c:	1a000004 	bne	d1a4 <CSerialDevice::AvailableForWrite()+0x6c>
    d190:	e1a00004 	mov	r0, r4
    d194:	e8bd8010 	pop	{r4, pc}
    d198:	eb00128f 	bl	11bdc <EnterCritical>
    d19c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d1a0:	eaffffef 	b	d164 <CSerialDevice::AvailableForWrite()+0x2c>
    d1a4:	eb0012b7 	bl	11c88 <LeaveCritical>
    d1a8:	e1a00004 	mov	r0, r4
    d1ac:	e8bd8010 	pop	{r4, pc}
    d1b0:	e3051330 	movw	r1, #21296	; 0x5330
    d1b4:	e300222f 	movw	r2, #559	; 0x22f
    d1b8:	e3401001 	movt	r1, #1
    d1bc:	e281000c 	add	r0, r1, #12
    d1c0:	eb00147d 	bl	123bc <assertion_failed>
    d1c4:	e3051330 	movw	r1, #21296	; 0x5330
    d1c8:	e3a02e23 	mov	r2, #560	; 0x230
    d1cc:	e3401001 	movt	r1, #1
    d1d0:	e2810f4f 	add	r0, r1, #316	; 0x13c
    d1d4:	eb001478 	bl	123bc <assertion_failed>

0000d1d8 <CSerialDevice::AvailableForRead()>:
    d1d8:	e5d03018 	ldrb	r3, [r0, #24]
    d1dc:	e92d4070 	push	{r4, r5, r6, lr}
    d1e0:	e3530000 	cmp	r3, #0
    d1e4:	0a00001a 	beq	d254 <CSerialDevice::AvailableForRead()+0x7c>
    d1e8:	e5903008 	ldr	r3, [r0, #8]
    d1ec:	e1a04000 	mov	r4, r0
    d1f0:	e3530000 	cmp	r3, #0
    d1f4:	0a00001b 	beq	d268 <CSerialDevice::AvailableForRead()+0x90>
    d1f8:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d1fc:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d200:	e3500000 	cmp	r0, #0
    d204:	1a00000c 	bne	d23c <CSerialDevice::AvailableForRead()+0x64>
    d208:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    d20c:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d210:	e1520003 	cmp	r2, r3
    d214:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d218:	359428c0 	ldrcc	r2, [r4, #2240]	; 0x8c0
    d21c:	259448c0 	ldrcs	r4, [r4, #2240]	; 0x8c0
    d220:	32834b02 	addcc	r4, r3, #2048	; 0x800
    d224:	30444002 	subcc	r4, r4, r2
    d228:	20434004 	subcs	r4, r3, r4
    d22c:	e3500000 	cmp	r0, #0
    d230:	1a000004 	bne	d248 <CSerialDevice::AvailableForRead()+0x70>
    d234:	e1a00004 	mov	r0, r4
    d238:	e8bd8070 	pop	{r4, r5, r6, pc}
    d23c:	eb001266 	bl	11bdc <EnterCritical>
    d240:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d244:	eaffffef 	b	d208 <CSerialDevice::AvailableForRead()+0x30>
    d248:	eb00128e 	bl	11c88 <LeaveCritical>
    d24c:	e1a00004 	mov	r0, r4
    d250:	e8bd8070 	pop	{r4, r5, r6, pc}
    d254:	e3051330 	movw	r1, #21296	; 0x5330
    d258:	e3002245 	movw	r2, #581	; 0x245
    d25c:	e3401001 	movt	r1, #1
    d260:	e281000c 	add	r0, r1, #12
    d264:	eb001454 	bl	123bc <assertion_failed>
    d268:	e3051330 	movw	r1, #21296	; 0x5330
    d26c:	e3002246 	movw	r2, #582	; 0x246
    d270:	e3401001 	movt	r1, #1
    d274:	e2810f4f 	add	r0, r1, #316	; 0x13c
    d278:	eb00144f 	bl	123bc <assertion_failed>

0000d27c <CSerialDevice::Peek()>:
    d27c:	e5d03018 	ldrb	r3, [r0, #24]
    d280:	e92d4070 	push	{r4, r5, r6, lr}
    d284:	e3530000 	cmp	r3, #0
    d288:	0a00001f 	beq	d30c <CSerialDevice::Peek()+0x90>
    d28c:	e5903008 	ldr	r3, [r0, #8]
    d290:	e1a04000 	mov	r4, r0
    d294:	e3530000 	cmp	r3, #0
    d298:	0a000020 	beq	d320 <CSerialDevice::Peek()+0xa4>
    d29c:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d2a0:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d2a4:	e3500000 	cmp	r0, #0
    d2a8:	1a000008 	bne	d2d0 <CSerialDevice::Peek()+0x54>
    d2ac:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d2b0:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
    d2b4:	e1520003 	cmp	r2, r3
    d2b8:	0a00001d 	beq	d334 <CSerialDevice::Peek()+0xb8>
    d2bc:	e59408c0 	ldr	r0, [r4, #2240]	; 0x8c0
    d2c0:	e0844000 	add	r4, r4, r0
    d2c4:	e5d440bc 	ldrb	r4, [r4, #188]	; 0xbc
    d2c8:	e1a00004 	mov	r0, r4
    d2cc:	e8bd8070 	pop	{r4, r5, r6, pc}
    d2d0:	eb001241 	bl	11bdc <EnterCritical>
    d2d4:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    d2d8:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d2dc:	e1520003 	cmp	r2, r3
    d2e0:	03e04000 	mvneq	r4, #0
    d2e4:	159408c0 	ldrne	r0, [r4, #2240]	; 0x8c0
    d2e8:	059530e0 	ldreq	r3, [r5, #224]	; 0xe0
    d2ec:	10844000 	addne	r4, r4, r0
    d2f0:	159530e0 	ldrne	r3, [r5, #224]	; 0xe0
    d2f4:	15d440bc 	ldrbne	r4, [r4, #188]	; 0xbc
    d2f8:	e3530000 	cmp	r3, #0
    d2fc:	0afffff1 	beq	d2c8 <CSerialDevice::Peek()+0x4c>
    d300:	eb001260 	bl	11c88 <LeaveCritical>
    d304:	e1a00004 	mov	r0, r4
    d308:	e8bd8070 	pop	{r4, r5, r6, pc}
    d30c:	e3051330 	movw	r1, #21296	; 0x5330
    d310:	e300225b 	movw	r2, #603	; 0x25b
    d314:	e3401001 	movt	r1, #1
    d318:	e281000c 	add	r0, r1, #12
    d31c:	eb001426 	bl	123bc <assertion_failed>
    d320:	e3051330 	movw	r1, #21296	; 0x5330
    d324:	e3a02f97 	mov	r2, #604	; 0x25c
    d328:	e3401001 	movt	r1, #1
    d32c:	e2810f4f 	add	r0, r1, #316	; 0x13c
    d330:	eb001421 	bl	123bc <assertion_failed>
    d334:	e3e04000 	mvn	r4, #0
    d338:	eaffffe2 	b	d2c8 <CSerialDevice::Peek()+0x4c>

0000d33c <CSerialDevice::Flush()>:
    d33c:	e5902014 	ldr	r2, [r0, #20]
    d340:	e2822018 	add	r2, r2, #24
    d344:	e5923000 	ldr	r3, [r2]
    d348:	e3130008 	tst	r3, #8
    d34c:	1afffffc 	bne	d344 <CSerialDevice::Flush()+0x8>
    d350:	e12fff1e 	bx	lr

0000d354 <CSerialDevice::Write(unsigned char)>:
    d354:	e5903008 	ldr	r3, [r0, #8]
    d358:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d35c:	e3530000 	cmp	r3, #0
    d360:	e1a04000 	mov	r4, r0
    d364:	e1a05001 	mov	r5, r1
    d368:	0a000021 	beq	d3f4 <CSerialDevice::Write(unsigned char)+0xa0>
    d36c:	e2806a01 	add	r6, r0, #4096	; 0x1000
    d370:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
    d374:	e3500000 	cmp	r0, #0
    d378:	1a000013 	bne	d3cc <CSerialDevice::Write(unsigned char)+0x78>
    d37c:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d380:	e59610cc 	ldr	r1, [r6, #204]	; 0xcc
    d384:	e2833001 	add	r3, r3, #1
    d388:	e7ea3053 	ubfx	r3, r3, #0, #11
    d38c:	e1530001 	cmp	r3, r1
    d390:	0a000020 	beq	d418 <CSerialDevice::Write(unsigned char)+0xc4>
    d394:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d398:	e3a07001 	mov	r7, #1
    d39c:	e0844003 	add	r4, r4, r3
    d3a0:	e2833001 	add	r3, r3, #1
    d3a4:	e58630c8 	str	r3, [r6, #200]	; 0xc8
    d3a8:	e5c458c8 	strb	r5, [r4, #2248]	; 0x8c8
    d3ac:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d3b0:	e7ea3053 	ubfx	r3, r3, #0, #11
    d3b4:	e58630c8 	str	r3, [r6, #200]	; 0xc8
    d3b8:	e3500000 	cmp	r0, #0
    d3bc:	0a000000 	beq	d3c4 <CSerialDevice::Write(unsigned char)+0x70>
    d3c0:	eb001230 	bl	11c88 <LeaveCritical>
    d3c4:	e1a00007 	mov	r0, r7
    d3c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d3cc:	eb001202 	bl	11bdc <EnterCritical>
    d3d0:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d3d4:	e59620cc 	ldr	r2, [r6, #204]	; 0xcc
    d3d8:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
    d3dc:	e2833001 	add	r3, r3, #1
    d3e0:	e7ea3053 	ubfx	r3, r3, #0, #11
    d3e4:	e1530002 	cmp	r3, r2
    d3e8:	03a07000 	moveq	r7, #0
    d3ec:	1affffe8 	bne	d394 <CSerialDevice::Write(unsigned char)+0x40>
    d3f0:	eafffff0 	b	d3b8 <CSerialDevice::Write(unsigned char)+0x64>
    d3f4:	e5901014 	ldr	r1, [r0, #20]
    d3f8:	e2812018 	add	r2, r1, #24
    d3fc:	e5923000 	ldr	r3, [r2]
    d400:	e3130020 	tst	r3, #32
    d404:	1afffffc 	bne	d3fc <CSerialDevice::Write(unsigned char)+0xa8>
    d408:	e5815000 	str	r5, [r1]
    d40c:	e3a07001 	mov	r7, #1
    d410:	e1a00007 	mov	r0, r7
    d414:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d418:	e1a07000 	mov	r7, r0
    d41c:	e1a00007 	mov	r0, r7
    d420:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d424 <CSerialDevice::Write(void const*, unsigned int)>:
    d424:	e5d03018 	ldrb	r3, [r0, #24]
    d428:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d42c:	e3530000 	cmp	r3, #0
    d430:	0a000089 	beq	d65c <CSerialDevice::Write(void const*, unsigned int)+0x238>
    d434:	e2804a01 	add	r4, r0, #4096	; 0x1000
    d438:	e1a06000 	mov	r6, r0
    d43c:	e1a05001 	mov	r5, r1
    d440:	e1a08002 	mov	r8, r2
    d444:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
    d448:	e3500000 	cmp	r0, #0
    d44c:	1a000077 	bne	d630 <CSerialDevice::Write(void const*, unsigned int)+0x20c>
    d450:	e3550000 	cmp	r5, #0
    d454:	0a000085 	beq	d670 <CSerialDevice::Write(void const*, unsigned int)+0x24c>
    d458:	e3580000 	cmp	r8, #0
    d45c:	0a000088 	beq	d684 <CSerialDevice::Write(void const*, unsigned int)+0x260>
    d460:	e2455001 	sub	r5, r5, #1
    d464:	e3a07000 	mov	r7, #0
    d468:	ea000002 	b	d478 <CSerialDevice::Write(void const*, unsigned int)+0x54>
    d46c:	e2877001 	add	r7, r7, #1
    d470:	e1580007 	cmp	r8, r7
    d474:	0a00001f 	beq	d4f8 <CSerialDevice::Write(void const*, unsigned int)+0xd4>
    d478:	e5963008 	ldr	r3, [r6, #8]
    d47c:	e5f59001 	ldrb	r9, [r5, #1]!
    d480:	e3530000 	cmp	r3, #0
    d484:	0a000046 	beq	d5a4 <CSerialDevice::Write(void const*, unsigned int)+0x180>
    d488:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d48c:	e3500000 	cmp	r0, #0
    d490:	1a00004a 	bne	d5c0 <CSerialDevice::Write(void const*, unsigned int)+0x19c>
    d494:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d498:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d49c:	e2833001 	add	r3, r3, #1
    d4a0:	e7ea3053 	ubfx	r3, r3, #0, #11
    d4a4:	e1520003 	cmp	r2, r3
    d4a8:	0a000012 	beq	d4f8 <CSerialDevice::Write(void const*, unsigned int)+0xd4>
    d4ac:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d4b0:	e0862003 	add	r2, r6, r3
    d4b4:	e2833001 	add	r3, r3, #1
    d4b8:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    d4bc:	e5c298c8 	strb	r9, [r2, #2248]	; 0x8c8
    d4c0:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d4c4:	e7ea3053 	ubfx	r3, r3, #0, #11
    d4c8:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    d4cc:	e5d53000 	ldrb	r3, [r5]
    d4d0:	e353000a 	cmp	r3, #10
    d4d4:	1affffe4 	bne	d46c <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d4d8:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    d4dc:	e3130001 	tst	r3, #1
    d4e0:	0affffe1 	beq	d46c <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d4e4:	e3a0100d 	mov	r1, #13
    d4e8:	e1a00006 	mov	r0, r6
    d4ec:	ebffff98 	bl	d354 <CSerialDevice::Write(unsigned char)>
    d4f0:	e3500000 	cmp	r0, #0
    d4f4:	1affffdc 	bne	d46c <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d4f8:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    d4fc:	e3530000 	cmp	r3, #0
    d500:	1a000048 	bne	d628 <CSerialDevice::Write(void const*, unsigned int)+0x204>
    d504:	e5963008 	ldr	r3, [r6, #8]
    d508:	e3530000 	cmp	r3, #0
    d50c:	0a000022 	beq	d59c <CSerialDevice::Write(void const*, unsigned int)+0x178>
    d510:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d514:	e3500000 	cmp	r0, #0
    d518:	1a000049 	bne	d644 <CSerialDevice::Write(void const*, unsigned int)+0x220>
    d51c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d520:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d524:	e1520003 	cmp	r2, r3
    d528:	0a00001b 	beq	d59c <CSerialDevice::Write(void const*, unsigned int)+0x178>
    d52c:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d530:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d534:	e1520003 	cmp	r2, r3
    d538:	1a00000d 	bne	d574 <CSerialDevice::Write(void const*, unsigned int)+0x150>
    d53c:	ea000013 	b	d590 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    d540:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d544:	e0861003 	add	r1, r6, r3
    d548:	e2833001 	add	r3, r3, #1
    d54c:	e58430cc 	str	r3, [r4, #204]	; 0xcc
    d550:	e5d138c8 	ldrb	r3, [r1, #2248]	; 0x8c8
    d554:	e5823000 	str	r3, [r2]
    d558:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d55c:	e7ea3053 	ubfx	r3, r3, #0, #11
    d560:	e58430cc 	str	r3, [r4, #204]	; 0xcc
    d564:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d568:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d56c:	e1520003 	cmp	r2, r3
    d570:	0a000006 	beq	d590 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    d574:	e5962014 	ldr	r2, [r6, #20]
    d578:	e5923018 	ldr	r3, [r2, #24]
    d57c:	e3130020 	tst	r3, #32
    d580:	0affffee 	beq	d540 <CSerialDevice::Write(void const*, unsigned int)+0x11c>
    d584:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    d588:	e3833020 	orr	r3, r3, #32
    d58c:	e5823038 	str	r3, [r2, #56]	; 0x38
    d590:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
    d594:	e3530000 	cmp	r3, #0
    d598:	1a000026 	bne	d638 <CSerialDevice::Write(void const*, unsigned int)+0x214>
    d59c:	e1a00007 	mov	r0, r7
    d5a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d5a4:	e5962014 	ldr	r2, [r6, #20]
    d5a8:	e2821018 	add	r1, r2, #24
    d5ac:	e5913000 	ldr	r3, [r1]
    d5b0:	e3130020 	tst	r3, #32
    d5b4:	1afffffc 	bne	d5ac <CSerialDevice::Write(void const*, unsigned int)+0x188>
    d5b8:	e5829000 	str	r9, [r2]
    d5bc:	eaffffc2 	b	d4cc <CSerialDevice::Write(void const*, unsigned int)+0xa8>
    d5c0:	eb001185 	bl	11bdc <EnterCritical>
    d5c4:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d5c8:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d5cc:	e59410e0 	ldr	r1, [r4, #224]	; 0xe0
    d5d0:	e2833001 	add	r3, r3, #1
    d5d4:	e7ea3053 	ubfx	r3, r3, #0, #11
    d5d8:	e1530002 	cmp	r3, r2
    d5dc:	0a00000b 	beq	d610 <CSerialDevice::Write(void const*, unsigned int)+0x1ec>
    d5e0:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d5e4:	e3510000 	cmp	r1, #0
    d5e8:	e0862003 	add	r2, r6, r3
    d5ec:	e2833001 	add	r3, r3, #1
    d5f0:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    d5f4:	e5c298c8 	strb	r9, [r2, #2248]	; 0x8c8
    d5f8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d5fc:	e7ea3053 	ubfx	r3, r3, #0, #11
    d600:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    d604:	0affffb0 	beq	d4cc <CSerialDevice::Write(void const*, unsigned int)+0xa8>
    d608:	eb00119e 	bl	11c88 <LeaveCritical>
    d60c:	eaffffae 	b	d4cc <CSerialDevice::Write(void const*, unsigned int)+0xa8>
    d610:	e3510000 	cmp	r1, #0
    d614:	0affffb7 	beq	d4f8 <CSerialDevice::Write(void const*, unsigned int)+0xd4>
    d618:	eb00119a 	bl	11c88 <LeaveCritical>
    d61c:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    d620:	e3530000 	cmp	r3, #0
    d624:	0affffb6 	beq	d504 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    d628:	eb001196 	bl	11c88 <LeaveCritical>
    d62c:	eaffffb4 	b	d504 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    d630:	eb001169 	bl	11bdc <EnterCritical>
    d634:	eaffff85 	b	d450 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
    d638:	eb001192 	bl	11c88 <LeaveCritical>
    d63c:	e1a00007 	mov	r0, r7
    d640:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d644:	eb001164 	bl	11bdc <EnterCritical>
    d648:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d64c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d650:	e1520003 	cmp	r2, r3
    d654:	1affffb4 	bne	d52c <CSerialDevice::Write(void const*, unsigned int)+0x108>
    d658:	eaffffcc 	b	d590 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    d65c:	e3051330 	movw	r1, #21296	; 0x5330
    d660:	e3002176 	movw	r2, #374	; 0x176
    d664:	e3401001 	movt	r1, #1
    d668:	e281000c 	add	r0, r1, #12
    d66c:	eb001352 	bl	123bc <assertion_failed>
    d670:	e3051330 	movw	r1, #21296	; 0x5330
    d674:	e3002183 	movw	r2, #387	; 0x183
    d678:	e3401001 	movt	r1, #1
    d67c:	e2810018 	add	r0, r1, #24
    d680:	eb00134d 	bl	123bc <assertion_failed>
    d684:	e1a07008 	mov	r7, r8
    d688:	eaffff9a 	b	d4f8 <CSerialDevice::Write(void const*, unsigned int)+0xd4>

0000d68c <CSerialDevice::InterruptHandler()>:
    d68c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d690:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d694:	e1a04000 	mov	r4, r0
    d698:	e24dd004 	sub	sp, sp, #4
    d69c:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d6a0:	e3500000 	cmp	r0, #0
    d6a4:	1a00006d 	bne	d860 <CSerialDevice::InterruptHandler()+0x1d4>
    d6a8:	e5943014 	ldr	r3, [r4, #20]
    d6ac:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    d6b0:	e5832044 	str	r2, [r3, #68]	; 0x44
    d6b4:	e5942014 	ldr	r2, [r4, #20]
    d6b8:	e5926018 	ldr	r6, [r2, #24]
    d6bc:	e282e018 	add	lr, r2, #24
    d6c0:	e2166010 	ands	r6, r6, #16
    d6c4:	13a06000 	movne	r6, #0
    d6c8:	1a000035 	bne	d7a4 <CSerialDevice::InterruptHandler()+0x118>
    d6cc:	e595c0d4 	ldr	ip, [r5, #212]	; 0xd4
    d6d0:	e3e0a003 	mvn	sl, #3
    d6d4:	e3e09002 	mvn	r9, #2
    d6d8:	e3e07001 	mvn	r7, #1
    d6dc:	e3e08000 	mvn	r8, #0
    d6e0:	ea000020 	b	d768 <CSerialDevice::InterruptHandler()+0xdc>
    d6e4:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d6e8:	e3530000 	cmp	r3, #0
    d6ec:	058488c4 	streq	r8, [r4, #2244]	; 0x8c4
    d6f0:	e35c0000 	cmp	ip, #0
    d6f4:	0a00000a 	beq	d724 <CSerialDevice::InterruptHandler()+0x98>
    d6f8:	e59500d8 	ldr	r0, [r5, #216]	; 0xd8
    d6fc:	e6af3071 	sxtb	r3, r1
    d700:	e1d0b0d0 	ldrsb	fp, [r0]
    d704:	e15b0003 	cmp	fp, r3
    d708:	1585c0d8 	strne	ip, [r5, #216]	; 0xd8
    d70c:	1a000004 	bne	d724 <CSerialDevice::InterruptHandler()+0x98>
    d710:	e2803001 	add	r3, r0, #1
    d714:	e58530d8 	str	r3, [r5, #216]	; 0xd8
    d718:	e1d030d1 	ldrsb	r3, [r0, #1]
    d71c:	e3530000 	cmp	r3, #0
    d720:	03a06001 	moveq	r6, #1
    d724:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d728:	e59408c0 	ldr	r0, [r4, #2240]	; 0x8c0
    d72c:	e2833001 	add	r3, r3, #1
    d730:	e7ea3053 	ubfx	r3, r3, #0, #11
    d734:	e1530000 	cmp	r3, r0
    d738:	0a000013 	beq	d78c <CSerialDevice::InterruptHandler()+0x100>
    d73c:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d740:	e0840003 	add	r0, r4, r3
    d744:	e2833001 	add	r3, r3, #1
    d748:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
    d74c:	e5c010bc 	strb	r1, [r0, #188]	; 0xbc
    d750:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d754:	e7ea3053 	ubfx	r3, r3, #0, #11
    d758:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
    d75c:	e59e3000 	ldr	r3, [lr]
    d760:	e3130010 	tst	r3, #16
    d764:	1a00000e 	bne	d7a4 <CSerialDevice::InterruptHandler()+0x118>
    d768:	e5921000 	ldr	r1, [r2]
    d76c:	e3110b01 	tst	r1, #1024	; 0x400
    d770:	1affffdb 	bne	d6e4 <CSerialDevice::InterruptHandler()+0x58>
    d774:	e3110b02 	tst	r1, #2048	; 0x800
    d778:	0a00002a 	beq	d828 <CSerialDevice::InterruptHandler()+0x19c>
    d77c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d780:	e3530000 	cmp	r3, #0
    d784:	058478c4 	streq	r7, [r4, #2244]	; 0x8c4
    d788:	eaffffd8 	b	d6f0 <CSerialDevice::InterruptHandler()+0x64>
    d78c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d790:	e3530000 	cmp	r3, #0
    d794:	058478c4 	streq	r7, [r4, #2244]	; 0x8c4
    d798:	e59e3000 	ldr	r3, [lr]
    d79c:	e3130010 	tst	r3, #16
    d7a0:	0afffff0 	beq	d768 <CSerialDevice::InterruptHandler()+0xdc>
    d7a4:	e59e3000 	ldr	r3, [lr]
    d7a8:	e3130020 	tst	r3, #32
    d7ac:	0a00000d 	beq	d7e8 <CSerialDevice::InterruptHandler()+0x15c>
    d7b0:	ea000013 	b	d804 <CSerialDevice::InterruptHandler()+0x178>
    d7b4:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d7b8:	e0841003 	add	r1, r4, r3
    d7bc:	e2833001 	add	r3, r3, #1
    d7c0:	e58530cc 	str	r3, [r5, #204]	; 0xcc
    d7c4:	e5d138c8 	ldrb	r3, [r1, #2248]	; 0x8c8
    d7c8:	e5823000 	str	r3, [r2]
    d7cc:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d7d0:	e7ea3053 	ubfx	r3, r3, #0, #11
    d7d4:	e58530cc 	str	r3, [r5, #204]	; 0xcc
    d7d8:	e5942014 	ldr	r2, [r4, #20]
    d7dc:	e5923018 	ldr	r3, [r2, #24]
    d7e0:	e3130020 	tst	r3, #32
    d7e4:	1a000006 	bne	d804 <CSerialDevice::InterruptHandler()+0x178>
    d7e8:	e59510c8 	ldr	r1, [r5, #200]	; 0xc8
    d7ec:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d7f0:	e1510003 	cmp	r1, r3
    d7f4:	1affffee 	bne	d7b4 <CSerialDevice::InterruptHandler()+0x128>
    d7f8:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    d7fc:	e3c33020 	bic	r3, r3, #32
    d800:	e5823038 	str	r3, [r2, #56]	; 0x38
    d804:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
    d808:	e3530000 	cmp	r3, #0
    d80c:	1a000015 	bne	d868 <CSerialDevice::InterruptHandler()+0x1dc>
    d810:	e3560000 	cmp	r6, #0
    d814:	0a00000f 	beq	d858 <CSerialDevice::InterruptHandler()+0x1cc>
    d818:	e59530dc 	ldr	r3, [r5, #220]	; 0xdc
    d81c:	e28dd004 	add	sp, sp, #4
    d820:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d824:	e12fff13 	bx	r3
    d828:	e3110c01 	tst	r1, #256	; 0x100
    d82c:	0a000003 	beq	d840 <CSerialDevice::InterruptHandler()+0x1b4>
    d830:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d834:	e3530000 	cmp	r3, #0
    d838:	058498c4 	streq	r9, [r4, #2244]	; 0x8c4
    d83c:	eaffffab 	b	d6f0 <CSerialDevice::InterruptHandler()+0x64>
    d840:	e3110c02 	tst	r1, #512	; 0x200
    d844:	0affffa9 	beq	d6f0 <CSerialDevice::InterruptHandler()+0x64>
    d848:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d84c:	e3530000 	cmp	r3, #0
    d850:	0584a8c4 	streq	sl, [r4, #2244]	; 0x8c4
    d854:	eaffffa5 	b	d6f0 <CSerialDevice::InterruptHandler()+0x64>
    d858:	e28dd004 	add	sp, sp, #4
    d85c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d860:	eb0010dd 	bl	11bdc <EnterCritical>
    d864:	eaffff8f 	b	d6a8 <CSerialDevice::InterruptHandler()+0x1c>
    d868:	eb001106 	bl	11c88 <LeaveCritical>
    d86c:	eaffffe7 	b	d810 <CSerialDevice::InterruptHandler()+0x184>

0000d870 <CSerialDevice::InterruptStub(void*)>:
    d870:	f57ff05f 	dmb	sy
    d874:	e3073190 	movw	r3, #29072	; 0x7190
    d878:	e3403001 	movt	r3, #1
    d87c:	e5932010 	ldr	r2, [r3, #16]
    d880:	e3120001 	tst	r2, #1
    d884:	012fff1e 	bxeq	lr
    d888:	e5930000 	ldr	r0, [r3]
    d88c:	e3500000 	cmp	r0, #0
    d890:	0a000000 	beq	d898 <CSerialDevice::InterruptStub(void*)+0x28>
    d894:	eaffff7c 	b	d68c <CSerialDevice::InterruptHandler()>
    d898:	e3051330 	movw	r1, #21296	; 0x5330
    d89c:	e300230f 	movw	r2, #783	; 0x30f
    d8a0:	e3401001 	movt	r1, #1
    d8a4:	e2810e19 	add	r0, r1, #400	; 0x190
    d8a8:	e92d4010 	push	{r4, lr}
    d8ac:	eb0012c2 	bl	123bc <assertion_failed>

0000d8b0 <CSerialDevice::~CSerialDevice() [clone .part.0]>:
    d8b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d8b4:	e1a04000 	mov	r4, r0
    d8b8:	e3075190 	movw	r5, #29072	; 0x7190
    d8bc:	ebffec4c 	bl	89f4 <CDeviceNameService::Get()>
    d8c0:	e5942010 	ldr	r2, [r4, #16]
    d8c4:	e3a03000 	mov	r3, #0
    d8c8:	e3405001 	movt	r5, #1
    d8cc:	e59f10fc 	ldr	r1, [pc, #252]	; d9d0 <CSerialDevice::~CSerialDevice() [clone .part.0]+0x120>
    d8d0:	e2822001 	add	r2, r2, #1
    d8d4:	ebffec6c 	bl	8a8c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    d8d8:	e5953010 	ldr	r3, [r5, #16]
    d8dc:	e3a01001 	mov	r1, #1
    d8e0:	e5942010 	ldr	r2, [r4, #16]
    d8e4:	e1c33211 	bic	r3, r3, r1, lsl r2
    d8e8:	e5853010 	str	r3, [r5, #16]
    d8ec:	f57ff04f 	dsb	sy
    d8f0:	e5942008 	ldr	r2, [r4, #8]
    d8f4:	e3a03000 	mov	r3, #0
    d8f8:	e5941014 	ldr	r1, [r4, #20]
    d8fc:	e1520003 	cmp	r2, r3
    d900:	e5813038 	str	r3, [r1, #56]	; 0x38
    d904:	e5942014 	ldr	r2, [r4, #20]
    d908:	e5823030 	str	r3, [r2, #48]	; 0x30
    d90c:	0a00000e 	beq	d94c <CSerialDevice::~CSerialDevice() [clone .part.0]+0x9c>
    d910:	e5953004 	ldr	r3, [r5, #4]
    d914:	e2433001 	sub	r3, r3, #1
    d918:	e5853004 	str	r3, [r5, #4]
    d91c:	e3530000 	cmp	r3, #0
    d920:	1a000009 	bne	d94c <CSerialDevice::~CSerialDevice() [clone .part.0]+0x9c>
    d924:	e5950008 	ldr	r0, [r5, #8]
    d928:	e3500000 	cmp	r0, #0
    d92c:	0a000022 	beq	d9bc <CSerialDevice::~CSerialDevice() [clone .part.0]+0x10c>
    d930:	e5d5300c 	ldrb	r3, [r5, #12]
    d934:	e3530000 	cmp	r3, #0
    d938:	0a00001c 	beq	d9b0 <CSerialDevice::~CSerialDevice() [clone .part.0]+0x100>
    d93c:	eb0011af 	bl	12000 <CInterruptSystem::DisconnectFIQ()>
    d940:	e3a03000 	mov	r3, #0
    d944:	e5853008 	str	r3, [r5, #8]
    d948:	e5c5300c 	strb	r3, [r5, #12]
    d94c:	e284606c 	add	r6, r4, #108	; 0x6c
    d950:	e2847094 	add	r7, r4, #148	; 0x94
    d954:	e1a00006 	mov	r0, r6
    d958:	e3a02001 	mov	r2, #1
    d95c:	e3a01000 	mov	r1, #0
    d960:	ebffef02 	bl	9570 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d964:	e3a01000 	mov	r1, #0
    d968:	e1a00007 	mov	r0, r7
    d96c:	e3a02001 	mov	r2, #1
    d970:	ebffeefe 	bl	9570 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d974:	e5942010 	ldr	r2, [r4, #16]
    d978:	e3a03000 	mov	r3, #0
    d97c:	e5c43018 	strb	r3, [r4, #24]
    d980:	e1a00007 	mov	r0, r7
    d984:	e7853102 	str	r3, [r5, r2, lsl #2]
    d988:	ebffecb6 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    d98c:	e1a00006 	mov	r0, r6
    d990:	ebffecb4 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    d994:	e2840044 	add	r0, r4, #68	; 0x44
    d998:	ebffecb2 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    d99c:	e284001c 	add	r0, r4, #28
    d9a0:	ebffecb0 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    d9a4:	e1a00004 	mov	r0, r4
    d9a8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d9ac:	ea0014d6 	b	12d0c <CDevice::~CDevice()>
    d9b0:	e3a01039 	mov	r1, #57	; 0x39
    d9b4:	eb00113a 	bl	11ea4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d9b8:	eaffffe0 	b	d940 <CSerialDevice::~CSerialDevice() [clone .part.0]+0x90>
    d9bc:	e3051330 	movw	r1, #21296	; 0x5330
    d9c0:	e3a020e2 	mov	r2, #226	; 0xe2
    d9c4:	e3401001 	movt	r1, #1
    d9c8:	e2810e1a 	add	r0, r1, #416	; 0x1a0
    d9cc:	eb00127a 	bl	123bc <assertion_failed>
    d9d0:	00015464 	.word	0x00015464

0000d9d4 <CSerialDevice::~CSerialDevice()>:
    d9d4:	e5d03018 	ldrb	r3, [r0, #24]
    d9d8:	e59f204c 	ldr	r2, [pc, #76]	; da2c <CSerialDevice::~CSerialDevice()+0x58>
    d9dc:	e3530000 	cmp	r3, #0
    d9e0:	e92d4010 	push	{r4, lr}
    d9e4:	e1a04000 	mov	r4, r0
    d9e8:	e5802000 	str	r2, [r0]
    d9ec:	0a000002 	beq	d9fc <CSerialDevice::~CSerialDevice()+0x28>
    d9f0:	ebffffae 	bl	d8b0 <CSerialDevice::~CSerialDevice() [clone .part.0]>
    d9f4:	e1a00004 	mov	r0, r4
    d9f8:	e8bd8010 	pop	{r4, pc}
    d9fc:	e2800094 	add	r0, r0, #148	; 0x94
    da00:	ebffec98 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    da04:	e284006c 	add	r0, r4, #108	; 0x6c
    da08:	ebffec96 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    da0c:	e2840044 	add	r0, r4, #68	; 0x44
    da10:	ebffec94 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    da14:	e284001c 	add	r0, r4, #28
    da18:	ebffec92 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    da1c:	e1a00004 	mov	r0, r4
    da20:	eb0014b9 	bl	12d0c <CDevice::~CDevice()>
    da24:	e1a00004 	mov	r0, r4
    da28:	e8bd8010 	pop	{r4, pc}
    da2c:	0001535c 	.word	0x0001535c

0000da30 <CSerialDevice::~CSerialDevice()>:
    da30:	e5d03018 	ldrb	r3, [r0, #24]
    da34:	e59f2054 	ldr	r2, [pc, #84]	; da90 <CSerialDevice::~CSerialDevice()+0x60>
    da38:	e3530000 	cmp	r3, #0
    da3c:	e92d4010 	push	{r4, lr}
    da40:	e1a04000 	mov	r4, r0
    da44:	e5802000 	str	r2, [r0]
    da48:	0a000005 	beq	da64 <CSerialDevice::~CSerialDevice()+0x34>
    da4c:	ebffff97 	bl	d8b0 <CSerialDevice::~CSerialDevice() [clone .part.0]>
    da50:	e1a00004 	mov	r0, r4
    da54:	e30110e8 	movw	r1, #4328	; 0x10e8
    da58:	eb000cf5 	bl	10e34 <operator delete(void*, unsigned int)>
    da5c:	e1a00004 	mov	r0, r4
    da60:	e8bd8010 	pop	{r4, pc}
    da64:	e2800094 	add	r0, r0, #148	; 0x94
    da68:	ebffec7e 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    da6c:	e284006c 	add	r0, r4, #108	; 0x6c
    da70:	ebffec7c 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    da74:	e2840044 	add	r0, r4, #68	; 0x44
    da78:	ebffec7a 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    da7c:	e284001c 	add	r0, r4, #28
    da80:	ebffec78 	bl	8c68 <CGPIOPin::~CGPIOPin()>
    da84:	e1a00004 	mov	r0, r4
    da88:	eb00149f 	bl	12d0c <CDevice::~CDevice()>
    da8c:	eaffffef 	b	da50 <CSerialDevice::~CSerialDevice()+0x20>
    da90:	0001535c 	.word	0x0001535c
    da94:	00000000 	.word	0x00000000

0000da98 <CString::~CString()>:
    da98:	e92d4010 	push	{r4, lr}
    da9c:	e1a04000 	mov	r4, r0
    daa0:	e5900004 	ldr	r0, [r0, #4]
    daa4:	e59f3014 	ldr	r3, [pc, #20]	; dac0 <CString::~CString()+0x28>
    daa8:	e3500000 	cmp	r0, #0
    daac:	e5843000 	str	r3, [r4]
    dab0:	0a000000 	beq	dab8 <CString::~CString()+0x20>
    dab4:	eb000cd8 	bl	10e1c <operator delete[](void*)>
    dab8:	e1a00004 	mov	r0, r4
    dabc:	e8bd8010 	pop	{r4, pc}
    dac0:	00015504 	.word	0x00015504

0000dac4 <CString::~CString()>:
    dac4:	e92d4010 	push	{r4, lr}
    dac8:	e1a04000 	mov	r4, r0
    dacc:	e5900004 	ldr	r0, [r0, #4]
    dad0:	e59f3020 	ldr	r3, [pc, #32]	; daf8 <CString::~CString()+0x34>
    dad4:	e3500000 	cmp	r0, #0
    dad8:	e5843000 	str	r3, [r4]
    dadc:	0a000000 	beq	dae4 <CString::~CString()+0x20>
    dae0:	eb000ccd 	bl	10e1c <operator delete[](void*)>
    dae4:	e1a00004 	mov	r0, r4
    dae8:	e3a01010 	mov	r1, #16
    daec:	eb000cd0 	bl	10e34 <operator delete(void*, unsigned int)>
    daf0:	e1a00004 	mov	r0, r4
    daf4:	e8bd8010 	pop	{r4, pc}
    daf8:	00015504 	.word	0x00015504

0000dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    dafc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    db00:	e990004c 	ldmib	r0, {r2, r3, r6}
    db04:	e0466002 	sub	r6, r6, r2
    db08:	e0861001 	add	r1, r6, r1
    db0c:	e2812001 	add	r2, r1, #1
    db10:	e1520003 	cmp	r2, r3
    db14:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    db18:	e1a04000 	mov	r4, r0
    db1c:	e2815041 	add	r5, r1, #65	; 0x41
    db20:	e1a00005 	mov	r0, r5
    db24:	eb000cb0 	bl	10dec <operator new[](unsigned int)>
    db28:	e594300c 	ldr	r3, [r4, #12]
    db2c:	e3a02000 	mov	r2, #0
    db30:	e1a07000 	mov	r7, r0
    db34:	e5c32000 	strb	r2, [r3]
    db38:	e5941004 	ldr	r1, [r4, #4]
    db3c:	eb000a31 	bl	10408 <strcpy>
    db40:	e5940004 	ldr	r0, [r4, #4]
    db44:	e3500000 	cmp	r0, #0
    db48:	0a000000 	beq	db50 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    db4c:	eb000cb2 	bl	10e1c <operator delete[](void*)>
    db50:	e0876006 	add	r6, r7, r6
    db54:	e5847004 	str	r7, [r4, #4]
    db58:	e5845008 	str	r5, [r4, #8]
    db5c:	e584600c 	str	r6, [r4, #12]
    db60:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000db64 <CString::CString()>:
    db64:	e59f100c 	ldr	r1, [pc, #12]	; db78 <CString::CString()+0x14>
    db68:	e3a02000 	mov	r2, #0
    db6c:	e5802008 	str	r2, [r0, #8]
    db70:	e8800006 	stm	r0, {r1, r2}
    db74:	e12fff1e 	bx	lr
    db78:	00015504 	.word	0x00015504

0000db7c <CString::CString(char const*)>:
    db7c:	e59f3034 	ldr	r3, [pc, #52]	; dbb8 <CString::CString(char const*)+0x3c>
    db80:	e92d4070 	push	{r4, r5, r6, lr}
    db84:	e1a04000 	mov	r4, r0
    db88:	e5803000 	str	r3, [r0]
    db8c:	e1a00001 	mov	r0, r1
    db90:	e1a05001 	mov	r5, r1
    db94:	eb000976 	bl	10174 <strlen>
    db98:	e2800001 	add	r0, r0, #1
    db9c:	e5840008 	str	r0, [r4, #8]
    dba0:	eb000c91 	bl	10dec <operator new[](unsigned int)>
    dba4:	e5840004 	str	r0, [r4, #4]
    dba8:	e1a01005 	mov	r1, r5
    dbac:	eb000a15 	bl	10408 <strcpy>
    dbb0:	e1a00004 	mov	r0, r4
    dbb4:	e8bd8070 	pop	{r4, r5, r6, pc}
    dbb8:	00015504 	.word	0x00015504

0000dbbc <CString::CString(CString const&)>:
    dbbc:	e5913004 	ldr	r3, [r1, #4]
    dbc0:	e92d4070 	push	{r4, r5, r6, lr}
    dbc4:	e1a04000 	mov	r4, r0
    dbc8:	e59f2044 	ldr	r2, [pc, #68]	; dc14 <CString::CString(CString const&)+0x58>
    dbcc:	e3045998 	movw	r5, #18840	; 0x4998
    dbd0:	e3405001 	movt	r5, #1
    dbd4:	e3530000 	cmp	r3, #0
    dbd8:	e5842000 	str	r2, [r4]
    dbdc:	11a00003 	movne	r0, r3
    dbe0:	01a00005 	moveq	r0, r5
    dbe4:	e1a06001 	mov	r6, r1
    dbe8:	eb000961 	bl	10174 <strlen>
    dbec:	e2800001 	add	r0, r0, #1
    dbf0:	e5840008 	str	r0, [r4, #8]
    dbf4:	eb000c7c 	bl	10dec <operator new[](unsigned int)>
    dbf8:	e5961004 	ldr	r1, [r6, #4]
    dbfc:	e5840004 	str	r0, [r4, #4]
    dc00:	e3510000 	cmp	r1, #0
    dc04:	01a01005 	moveq	r1, r5
    dc08:	eb0009fe 	bl	10408 <strcpy>
    dc0c:	e1a00004 	mov	r0, r4
    dc10:	e8bd8070 	pop	{r4, r5, r6, pc}
    dc14:	00015504 	.word	0x00015504

0000dc18 <CString::CString(CString&&)>:
    dc18:	e59f201c 	ldr	r2, [pc, #28]	; dc3c <CString::CString(CString&&)+0x24>
    dc1c:	e3a03000 	mov	r3, #0
    dc20:	e591c008 	ldr	ip, [r1, #8]
    dc24:	e5802000 	str	r2, [r0]
    dc28:	e5912004 	ldr	r2, [r1, #4]
    dc2c:	e5813008 	str	r3, [r1, #8]
    dc30:	e9801004 	stmib	r0, {r2, ip}
    dc34:	e5813004 	str	r3, [r1, #4]
    dc38:	e12fff1e 	bx	lr
    dc3c:	00015504 	.word	0x00015504

0000dc40 <CString::operator char const*() const>:
    dc40:	e5900004 	ldr	r0, [r0, #4]
    dc44:	e3043998 	movw	r3, #18840	; 0x4998
    dc48:	e3403001 	movt	r3, #1
    dc4c:	e3500000 	cmp	r0, #0
    dc50:	01a00003 	moveq	r0, r3
    dc54:	e12fff1e 	bx	lr

0000dc58 <CString::operator=(char const*)>:
    dc58:	e92d4070 	push	{r4, r5, r6, lr}
    dc5c:	e1a04000 	mov	r4, r0
    dc60:	e5900004 	ldr	r0, [r0, #4]
    dc64:	e1a05001 	mov	r5, r1
    dc68:	e3500000 	cmp	r0, #0
    dc6c:	0a000000 	beq	dc74 <CString::operator=(char const*)+0x1c>
    dc70:	eb000c69 	bl	10e1c <operator delete[](void*)>
    dc74:	e1a00005 	mov	r0, r5
    dc78:	eb00093d 	bl	10174 <strlen>
    dc7c:	e2800001 	add	r0, r0, #1
    dc80:	e5840008 	str	r0, [r4, #8]
    dc84:	eb000c58 	bl	10dec <operator new[](unsigned int)>
    dc88:	e5840004 	str	r0, [r4, #4]
    dc8c:	e1a01005 	mov	r1, r5
    dc90:	eb0009dc 	bl	10408 <strcpy>
    dc94:	e5940004 	ldr	r0, [r4, #4]
    dc98:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dc9c <CString::operator=(CString const&)>:
    dc9c:	e92d4070 	push	{r4, r5, r6, lr}
    dca0:	e1a04000 	mov	r4, r0
    dca4:	e5900004 	ldr	r0, [r0, #4]
    dca8:	e1a06001 	mov	r6, r1
    dcac:	e3500000 	cmp	r0, #0
    dcb0:	0a000000 	beq	dcb8 <CString::operator=(CString const&)+0x1c>
    dcb4:	eb000c58 	bl	10e1c <operator delete[](void*)>
    dcb8:	e5960004 	ldr	r0, [r6, #4]
    dcbc:	e3045998 	movw	r5, #18840	; 0x4998
    dcc0:	e3405001 	movt	r5, #1
    dcc4:	e3500000 	cmp	r0, #0
    dcc8:	01a00005 	moveq	r0, r5
    dccc:	eb000928 	bl	10174 <strlen>
    dcd0:	e2800001 	add	r0, r0, #1
    dcd4:	e5840008 	str	r0, [r4, #8]
    dcd8:	eb000c43 	bl	10dec <operator new[](unsigned int)>
    dcdc:	e5840004 	str	r0, [r4, #4]
    dce0:	e5961004 	ldr	r1, [r6, #4]
    dce4:	e3510000 	cmp	r1, #0
    dce8:	01a01005 	moveq	r1, r5
    dcec:	eb0009c5 	bl	10408 <strcpy>
    dcf0:	e1a00004 	mov	r0, r4
    dcf4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dcf8 <CString::operator=(CString&&)>:
    dcf8:	e92d4070 	push	{r4, r5, r6, lr}
    dcfc:	e1a05000 	mov	r5, r0
    dd00:	e5900004 	ldr	r0, [r0, #4]
    dd04:	e1a04001 	mov	r4, r1
    dd08:	e3500000 	cmp	r0, #0
    dd0c:	0a000000 	beq	dd14 <CString::operator=(CString&&)+0x1c>
    dd10:	eb000c41 	bl	10e1c <operator delete[](void*)>
    dd14:	e1c420d4 	ldrd	r2, [r4, #4]
    dd18:	e1a00005 	mov	r0, r5
    dd1c:	e5853008 	str	r3, [r5, #8]
    dd20:	e3a03000 	mov	r3, #0
    dd24:	e5852004 	str	r2, [r5, #4]
    dd28:	e5843008 	str	r3, [r4, #8]
    dd2c:	e5843004 	str	r3, [r4, #4]
    dd30:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dd34 <CString::GetLength() const>:
    dd34:	e5900004 	ldr	r0, [r0, #4]
    dd38:	e3500000 	cmp	r0, #0
    dd3c:	012fff1e 	bxeq	lr
    dd40:	ea00090b 	b	10174 <strlen>

0000dd44 <CString::Append(char const*)>:
    dd44:	e92d4070 	push	{r4, r5, r6, lr}
    dd48:	e1a04000 	mov	r4, r0
    dd4c:	e5900004 	ldr	r0, [r0, #4]
    dd50:	e3a03001 	mov	r3, #1
    dd54:	e5843008 	str	r3, [r4, #8]
    dd58:	e1a06001 	mov	r6, r1
    dd5c:	e3500000 	cmp	r0, #0
    dd60:	0a000003 	beq	dd74 <CString::Append(char const*)+0x30>
    dd64:	eb000902 	bl	10174 <strlen>
    dd68:	e5943008 	ldr	r3, [r4, #8]
    dd6c:	e0833000 	add	r3, r3, r0
    dd70:	e5843008 	str	r3, [r4, #8]
    dd74:	e1a00006 	mov	r0, r6
    dd78:	eb0008fd 	bl	10174 <strlen>
    dd7c:	e5943008 	ldr	r3, [r4, #8]
    dd80:	e0800003 	add	r0, r0, r3
    dd84:	e5840008 	str	r0, [r4, #8]
    dd88:	eb000c17 	bl	10dec <operator new[](unsigned int)>
    dd8c:	e5941004 	ldr	r1, [r4, #4]
    dd90:	e1a05000 	mov	r5, r0
    dd94:	e3510000 	cmp	r1, #0
    dd98:	05c01000 	strbeq	r1, [r0]
    dd9c:	0a000004 	beq	ddb4 <CString::Append(char const*)+0x70>
    dda0:	eb000998 	bl	10408 <strcpy>
    dda4:	e5940004 	ldr	r0, [r4, #4]
    dda8:	e3500000 	cmp	r0, #0
    ddac:	0a000000 	beq	ddb4 <CString::Append(char const*)+0x70>
    ddb0:	eb000c19 	bl	10e1c <operator delete[](void*)>
    ddb4:	e1a01006 	mov	r1, r6
    ddb8:	e1a00005 	mov	r0, r5
    ddbc:	eb0009aa 	bl	1046c <strcat>
    ddc0:	e5845004 	str	r5, [r4, #4]
    ddc4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000ddc8 <CString::Compare(char const*) const>:
    ddc8:	e5900004 	ldr	r0, [r0, #4]
    ddcc:	ea0008f2 	b	1019c <strcmp>

0000ddd0 <CString::Find(char) const>:
    ddd0:	e5902004 	ldr	r2, [r0, #4]
    ddd4:	e1d230d0 	ldrsb	r3, [r2]
    ddd8:	e3530000 	cmp	r3, #0
    dddc:	0a000006 	beq	ddfc <CString::Find(char) const+0x2c>
    dde0:	e3a00000 	mov	r0, #0
    dde4:	e1510003 	cmp	r1, r3
    dde8:	012fff1e 	bxeq	lr
    ddec:	e1f230d1 	ldrsb	r3, [r2, #1]!
    ddf0:	e2800001 	add	r0, r0, #1
    ddf4:	e3530000 	cmp	r3, #0
    ddf8:	1afffff9 	bne	dde4 <CString::Find(char) const+0x14>
    ddfc:	e3e00000 	mvn	r0, #0
    de00:	e12fff1e 	bx	lr

0000de04 <CString::Replace(char const*, char const*)>:
    de04:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de08:	e1d170d0 	ldrsb	r7, [r1]
    de0c:	e3570000 	cmp	r7, #0
    de10:	1a000001 	bne	de1c <CString::Replace(char const*, char const*)+0x18>
    de14:	e1a00007 	mov	r0, r7
    de18:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de1c:	e5904004 	ldr	r4, [r0, #4]
    de20:	e1a05000 	mov	r5, r0
    de24:	e1a06001 	mov	r6, r1
    de28:	e1a08002 	mov	r8, r2
    de2c:	e1a00004 	mov	r0, r4
    de30:	eb0008cf 	bl	10174 <strlen>
    de34:	e2800001 	add	r0, r0, #1
    de38:	eb000beb 	bl	10dec <operator new[](unsigned int)>
    de3c:	e1a01004 	mov	r1, r4
    de40:	e1a09000 	mov	r9, r0
    de44:	eb00096f 	bl	10408 <strcpy>
    de48:	e5950004 	ldr	r0, [r5, #4]
    de4c:	e3500000 	cmp	r0, #0
    de50:	0a000000 	beq	de58 <CString::Replace(char const*, char const*)+0x54>
    de54:	eb000bf0 	bl	10e1c <operator delete[](void*)>
    de58:	e3a00040 	mov	r0, #64	; 0x40
    de5c:	e1a04009 	mov	r4, r9
    de60:	e5850008 	str	r0, [r5, #8]
    de64:	e3a07000 	mov	r7, #0
    de68:	eb000bdf 	bl	10dec <operator new[](unsigned int)>
    de6c:	e5850004 	str	r0, [r5, #4]
    de70:	e585000c 	str	r0, [r5, #12]
    de74:	e1d610d0 	ldrsb	r1, [r6]
    de78:	e1a00004 	mov	r0, r4
    de7c:	eb00098b 	bl	104b0 <strchr>
    de80:	e250a000 	subs	sl, r0, #0
    de84:	0a000033 	beq	df58 <CString::Replace(char const*, char const*)+0x154>
    de88:	e154000a 	cmp	r4, sl
    de8c:	2a000044 	bcs	dfa4 <CString::Replace(char const*, char const*)+0x1a0>
    de90:	e0d4b0d1 	ldrsb	fp, [r4], #1
    de94:	e3a01001 	mov	r1, #1
    de98:	e1a00005 	mov	r0, r5
    de9c:	ebffff16 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dea0:	e595300c 	ldr	r3, [r5, #12]
    dea4:	e15a0004 	cmp	sl, r4
    dea8:	e2832001 	add	r2, r3, #1
    deac:	e585200c 	str	r2, [r5, #12]
    deb0:	e5c3b000 	strb	fp, [r3]
    deb4:	1afffff5 	bne	de90 <CString::Replace(char const*, char const*)+0x8c>
    deb8:	e1a0c00a 	mov	ip, sl
    debc:	e1d600d1 	ldrsb	r0, [r6, #1]
    dec0:	e2861001 	add	r1, r6, #1
    dec4:	e28a4001 	add	r4, sl, #1
    dec8:	e3500000 	cmp	r0, #0
    decc:	0a000012 	beq	df1c <CString::Replace(char const*, char const*)+0x118>
    ded0:	e1a03004 	mov	r3, r4
    ded4:	ea000002 	b	dee4 <CString::Replace(char const*, char const*)+0xe0>
    ded8:	e1f100d1 	ldrsb	r0, [r1, #1]!
    dedc:	e3500000 	cmp	r0, #0
    dee0:	0a00000d 	beq	df1c <CString::Replace(char const*, char const*)+0x118>
    dee4:	e0d320d1 	ldrsb	r2, [r3], #1
    dee8:	e1520000 	cmp	r2, r0
    deec:	e1a04003 	mov	r4, r3
    def0:	0afffff8 	beq	ded8 <CString::Replace(char const*, char const*)+0xd4>
    def4:	e1a0400c 	mov	r4, ip
    def8:	e3a01001 	mov	r1, #1
    defc:	e1a00005 	mov	r0, r5
    df00:	e0d4a0d1 	ldrsb	sl, [r4], #1
    df04:	ebfffefc 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df08:	e595300c 	ldr	r3, [r5, #12]
    df0c:	e2832001 	add	r2, r3, #1
    df10:	e585200c 	str	r2, [r5, #12]
    df14:	e5c3a000 	strb	sl, [r3]
    df18:	eaffffd5 	b	de74 <CString::Replace(char const*, char const*)+0x70>
    df1c:	e1a00008 	mov	r0, r8
    df20:	eb000893 	bl	10174 <strlen>
    df24:	e250a000 	subs	sl, r0, #0
    df28:	0a000002 	beq	df38 <CString::Replace(char const*, char const*)+0x134>
    df2c:	e1a0100a 	mov	r1, sl
    df30:	e1a00005 	mov	r0, r5
    df34:	ebfffef0 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df38:	e595000c 	ldr	r0, [r5, #12]
    df3c:	e1a01008 	mov	r1, r8
    df40:	e2877001 	add	r7, r7, #1
    df44:	eb00092f 	bl	10408 <strcpy>
    df48:	e595000c 	ldr	r0, [r5, #12]
    df4c:	e080000a 	add	r0, r0, sl
    df50:	e585000c 	str	r0, [r5, #12]
    df54:	eaffffc6 	b	de74 <CString::Replace(char const*, char const*)+0x70>
    df58:	e1a00004 	mov	r0, r4
    df5c:	eb000884 	bl	10174 <strlen>
    df60:	e2506000 	subs	r6, r0, #0
    df64:	0a000002 	beq	df74 <CString::Replace(char const*, char const*)+0x170>
    df68:	e1a01006 	mov	r1, r6
    df6c:	e1a00005 	mov	r0, r5
    df70:	ebfffee1 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df74:	e595000c 	ldr	r0, [r5, #12]
    df78:	e1a01004 	mov	r1, r4
    df7c:	eb000921 	bl	10408 <strcpy>
    df80:	e595300c 	ldr	r3, [r5, #12]
    df84:	e1a00009 	mov	r0, r9
    df88:	e0832006 	add	r2, r3, r6
    df8c:	e585200c 	str	r2, [r5, #12]
    df90:	e3a02000 	mov	r2, #0
    df94:	e7c32006 	strb	r2, [r3, r6]
    df98:	eb000b9f 	bl	10e1c <operator delete[](void*)>
    df9c:	e1a00007 	mov	r0, r7
    dfa0:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfa4:	e1a0c004 	mov	ip, r4
    dfa8:	eaffffc3 	b	debc <CString::Replace(char const*, char const*)+0xb8>

0000dfac <CString::PutChar(char, unsigned int)>:
    dfac:	e92d4070 	push	{r4, r5, r6, lr}
    dfb0:	e2524000 	subs	r4, r2, #0
    dfb4:	08bd8070 	popeq	{r4, r5, r6, pc}
    dfb8:	e1a06001 	mov	r6, r1
    dfbc:	e1a01004 	mov	r1, r4
    dfc0:	e1a05000 	mov	r5, r0
    dfc4:	ebfffecc 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dfc8:	e2442001 	sub	r2, r4, #1
    dfcc:	e595300c 	ldr	r3, [r5, #12]
    dfd0:	e2422001 	sub	r2, r2, #1
    dfd4:	e3720001 	cmn	r2, #1
    dfd8:	e2830001 	add	r0, r3, #1
    dfdc:	e585000c 	str	r0, [r5, #12]
    dfe0:	e5c36000 	strb	r6, [r3]
    dfe4:	1afffff8 	bne	dfcc <CString::PutChar(char, unsigned int)+0x20>
    dfe8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dfec <CString::PutString(char const*)>:
    dfec:	e92d4070 	push	{r4, r5, r6, lr}
    dff0:	e1a04000 	mov	r4, r0
    dff4:	e1a00001 	mov	r0, r1
    dff8:	e1a06001 	mov	r6, r1
    dffc:	eb00085c 	bl	10174 <strlen>
    e000:	e2505000 	subs	r5, r0, #0
    e004:	0a000002 	beq	e014 <CString::PutString(char const*)+0x28>
    e008:	e1a01005 	mov	r1, r5
    e00c:	e1a00004 	mov	r0, r4
    e010:	ebfffeb9 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e014:	e594000c 	ldr	r0, [r4, #12]
    e018:	e1a01006 	mov	r1, r6
    e01c:	eb0008f9 	bl	10408 <strcpy>
    e020:	e594000c 	ldr	r0, [r4, #12]
    e024:	e0800005 	add	r0, r0, r5
    e028:	e584000c 	str	r0, [r4, #12]
    e02c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e030 <CString::ReserveSpace(unsigned int)>:
    e030:	e3510000 	cmp	r1, #0
    e034:	012fff1e 	bxeq	lr
    e038:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e03c:	e1a05000 	mov	r5, r0
    e040:	e990004c 	ldmib	r0, {r2, r3, r6}
    e044:	e0466002 	sub	r6, r6, r2
    e048:	e0811006 	add	r1, r1, r6
    e04c:	e2812001 	add	r2, r1, #1
    e050:	e1520003 	cmp	r2, r3
    e054:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e058:	e2814041 	add	r4, r1, #65	; 0x41
    e05c:	e1a00004 	mov	r0, r4
    e060:	eb000b61 	bl	10dec <operator new[](unsigned int)>
    e064:	e595300c 	ldr	r3, [r5, #12]
    e068:	e3a02000 	mov	r2, #0
    e06c:	e1a07000 	mov	r7, r0
    e070:	e5c32000 	strb	r2, [r3]
    e074:	e5951004 	ldr	r1, [r5, #4]
    e078:	eb0008e2 	bl	10408 <strcpy>
    e07c:	e5950004 	ldr	r0, [r5, #4]
    e080:	e3500000 	cmp	r0, #0
    e084:	0a000000 	beq	e08c <CString::ReserveSpace(unsigned int)+0x5c>
    e088:	eb000b63 	bl	10e1c <operator delete[](void*)>
    e08c:	e0876006 	add	r6, r7, r6
    e090:	e5857004 	str	r7, [r5, #4]
    e094:	e5854008 	str	r4, [r5, #8]
    e098:	e585600c 	str	r6, [r5, #12]
    e09c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e0a0 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    e0a0:	e1510002 	cmp	r1, r2
    e0a4:	23a0c001 	movcs	ip, #1
    e0a8:	e92d4070 	push	{r4, r5, r6, lr}
    e0ac:	3a000019 	bcc	e118 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x78>
    e0b0:	e00c0c92 	mul	ip, r2, ip
    e0b4:	e734fc11 	udiv	r4, r1, ip
    e0b8:	e1540002 	cmp	r4, r2
    e0bc:	e1a0e004 	mov	lr, r4
    e0c0:	2afffffa 	bcs	e0b0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
    e0c4:	e3530000 	cmp	r3, #0
    e0c8:	e1a05000 	mov	r5, r0
    e0cc:	03a06020 	moveq	r6, #32
    e0d0:	13a06000 	movne	r6, #0
    e0d4:	e2866037 	add	r6, r6, #55	; 0x37
    e0d8:	ea000001 	b	e0e4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x44>
    e0dc:	e73efc11 	udiv	lr, r1, ip
    e0e0:	e1a0400e 	mov	r4, lr
    e0e4:	e086300e 	add	r3, r6, lr
    e0e8:	e35e0009 	cmp	lr, #9
    e0ec:	e28ee030 	add	lr, lr, #48	; 0x30
    e0f0:	e6af3073 	sxtb	r3, r3
    e0f4:	96af307e 	sxtbls	r3, lr
    e0f8:	e15c0002 	cmp	ip, r2
    e0fc:	e061149c 	mls	r1, ip, r4, r1
    e100:	e4c53001 	strb	r3, [r5], #1
    e104:	e73cf21c 	udiv	ip, ip, r2
    e108:	2afffff3 	bcs	e0dc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>
    e10c:	e3a03000 	mov	r3, #0
    e110:	e5c53000 	strb	r3, [r5]
    e114:	e8bd8070 	pop	{r4, r5, r6, pc}
    e118:	e1a0e001 	mov	lr, r1
    e11c:	e3a0c001 	mov	ip, #1
    e120:	e1a04001 	mov	r4, r1
    e124:	eaffffe6 	b	e0c4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

0000e128 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    e128:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e12c:	e24dd014 	sub	sp, sp, #20
    e130:	e1a0b003 	mov	fp, r3
    e134:	e1a0a002 	mov	sl, r2
    e138:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
    e13c:	e3a05000 	mov	r5, #0
    e140:	e5dd903c 	ldrb	r9, [sp, #60]	; 0x3c
    e144:	e1520007 	cmp	r2, r7
    e148:	e2db3000 	sbcs	r3, fp, #0
    e14c:	e58d000c 	str	r0, [sp, #12]
    e150:	23a06001 	movcs	r6, #1
    e154:	3a00003e 	bcc	e254 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x12c>
    e158:	e0030597 	mul	r3, r7, r5
    e15c:	e0856796 	umull	r6, r5, r6, r7
    e160:	e1a0000a 	mov	r0, sl
    e164:	e1a0100b 	mov	r1, fp
    e168:	e0835005 	add	r5, r3, r5
    e16c:	e1a02006 	mov	r2, r6
    e170:	e1a03005 	mov	r3, r5
    e174:	fa00190e 	blx	145b4 <__aeabi_uldivmod>
    e178:	e1500007 	cmp	r0, r7
    e17c:	e2d13000 	sbcs	r3, r1, #0
    e180:	2afffff4 	bcs	e158 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x30>
    e184:	e1a04000 	mov	r4, r0
    e188:	e1a08001 	mov	r8, r1
    e18c:	e59d300c 	ldr	r3, [sp, #12]
    e190:	e3590000 	cmp	r9, #0
    e194:	e58d3004 	str	r3, [sp, #4]
    e198:	03a03020 	moveq	r3, #32
    e19c:	13a03000 	movne	r3, #0
    e1a0:	e2833037 	add	r3, r3, #55	; 0x37
    e1a4:	e58d3008 	str	r3, [sp, #8]
    e1a8:	ea000002 	b	e1b8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x90>
    e1ac:	fa001900 	blx	145b4 <__aeabi_uldivmod>
    e1b0:	e1a04000 	mov	r4, r0
    e1b4:	e1a08001 	mov	r8, r1
    e1b8:	e1a02006 	mov	r2, r6
    e1bc:	e1a03005 	mov	r3, r5
    e1c0:	e1a0000a 	mov	r0, sl
    e1c4:	e1a0100b 	mov	r1, fp
    e1c8:	fa0018f9 	blx	145b4 <__aeabi_uldivmod>
    e1cc:	e59d1008 	ldr	r1, [sp, #8]
    e1d0:	e354000a 	cmp	r4, #10
    e1d4:	e2d80000 	sbcs	r0, r8, #0
    e1d8:	e1a0b003 	mov	fp, r3
    e1dc:	e0811004 	add	r1, r1, r4
    e1e0:	e1a08003 	mov	r8, r3
    e1e4:	e59d3004 	ldr	r3, [sp, #4]
    e1e8:	e2844030 	add	r4, r4, #48	; 0x30
    e1ec:	e6af1071 	sxtb	r1, r1
    e1f0:	36af1074 	sxtbcc	r1, r4
    e1f4:	e4c31001 	strb	r1, [r3], #1
    e1f8:	e1a09002 	mov	r9, r2
    e1fc:	e58d3004 	str	r3, [sp, #4]
    e200:	e1a00006 	mov	r0, r6
    e204:	e3a03000 	mov	r3, #0
    e208:	e1a01005 	mov	r1, r5
    e20c:	e1a0a002 	mov	sl, r2
    e210:	e1a02007 	mov	r2, r7
    e214:	fa0018e6 	blx	145b4 <__aeabi_uldivmod>
    e218:	e1560007 	cmp	r6, r7
    e21c:	e1a02000 	mov	r2, r0
    e220:	e2d5c000 	sbcs	ip, r5, #0
    e224:	e1a03001 	mov	r3, r1
    e228:	e1a00009 	mov	r0, r9
    e22c:	e1a01008 	mov	r1, r8
    e230:	e1a06002 	mov	r6, r2
    e234:	e1a05003 	mov	r5, r3
    e238:	2affffdb 	bcs	e1ac <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x84>
    e23c:	e59d000c 	ldr	r0, [sp, #12]
    e240:	e3a03000 	mov	r3, #0
    e244:	e59d2004 	ldr	r2, [sp, #4]
    e248:	e5c23000 	strb	r3, [r2]
    e24c:	e28dd014 	add	sp, sp, #20
    e250:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e254:	e1a04002 	mov	r4, r2
    e258:	e1a0800b 	mov	r8, fp
    e25c:	e3a06001 	mov	r6, #1
    e260:	eaffffc9 	b	e18c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x64>

0000e264 <CString::ftoa(char*, double, unsigned int)>:
    e264:	eeb50bc0 	vcmpe.f64	d0, #0.0
    e268:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e26c:	e1a04000 	mov	r4, r0
    e270:	ed2d8b02 	vpush	{d8}
    e274:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e278:	e24dd010 	sub	sp, sp, #16
    e27c:	eeb08b40 	vmov.f64	d8, d0
    e280:	e1a07001 	mov	r7, r1
    e284:	eddf0b87 	vldr	d16, [pc, #540]	; e4a8 <CString::ftoa(char*, double, unsigned int)+0x244>
    e288:	4eb18b40 	vnegmi.f64	d8, d0
    e28c:	41a06000 	movmi	r6, r0
    e290:	43a0302d 	movmi	r3, #45	; 0x2d
    e294:	51a06000 	movpl	r6, r0
    e298:	44c63001 	strbmi	r3, [r6], #1
    e29c:	eeb48be0 	vcmpe.f64	d8, d16
    e2a0:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e2a4:	ca00006b 	bgt	e458 <CString::ftoa(char*, double, unsigned int)+0x1f4>
    e2a8:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e2ac:	ee175a90 	vmov	r5, s15
    e2b0:	e3550009 	cmp	r5, #9
    e2b4:	83a02001 	movhi	r2, #1
    e2b8:	83a0100a 	movhi	r1, #10
    e2bc:	9a00006d 	bls	e478 <CString::ftoa(char*, double, unsigned int)+0x214>
    e2c0:	e0020291 	mul	r2, r1, r2
    e2c4:	e733f215 	udiv	r3, r5, r2
    e2c8:	e3530009 	cmp	r3, #9
    e2cc:	8afffffb 	bhi	e2c0 <CString::ftoa(char*, double, unsigned int)+0x5c>
    e2d0:	e30ceccd 	movw	lr, #52429	; 0xcccd
    e2d4:	e1a0c006 	mov	ip, r6
    e2d8:	e34ceccc 	movt	lr, #52428	; 0xcccc
    e2dc:	e1a01005 	mov	r1, r5
    e2e0:	ea000001 	b	e2ec <CString::ftoa(char*, double, unsigned int)+0x88>
    e2e4:	e1a02003 	mov	r2, r3
    e2e8:	e733f311 	udiv	r3, r1, r3
    e2ec:	e738f211 	udiv	r8, r1, r2
    e2f0:	e3530009 	cmp	r3, #9
    e2f4:	e2830057 	add	r0, r3, #87	; 0x57
    e2f8:	e2833030 	add	r3, r3, #48	; 0x30
    e2fc:	e6af0070 	sxtb	r0, r0
    e300:	e0611892 	mls	r1, r2, r8, r1
    e304:	96af0073 	sxtbls	r0, r3
    e308:	e3520009 	cmp	r2, #9
    e30c:	e083829e 	umull	r8, r3, lr, r2
    e310:	e4cc0001 	strb	r0, [ip], #1
    e314:	e1a031a3 	lsr	r3, r3, #3
    e318:	8afffff1 	bhi	e2e4 <CString::ftoa(char*, double, unsigned int)+0x80>
    e31c:	e3570000 	cmp	r7, #0
    e320:	e3a03000 	mov	r3, #0
    e324:	e5cc3000 	strb	r3, [ip]
    e328:	1a000003 	bne	e33c <CString::ftoa(char*, double, unsigned int)+0xd8>
    e32c:	e1a00004 	mov	r0, r4
    e330:	e28dd010 	add	sp, sp, #16
    e334:	ecbd8b02 	vpop	{d8}
    e338:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e33c:	e1a00006 	mov	r0, r6
    e340:	eb00078b 	bl	10174 <strlen>
    e344:	e0868000 	add	r8, r6, r0
    e348:	e3570009 	cmp	r7, #9
    e34c:	e3a0302e 	mov	r3, #46	; 0x2e
    e350:	e7c63000 	strb	r3, [r6, r0]
    e354:	31a06007 	movcc	r6, r7
    e358:	23a06009 	movcs	r6, #9
    e35c:	e3570001 	cmp	r7, #1
    e360:	e2887001 	add	r7, r8, #1
    e364:	0a000048 	beq	e48c <CString::ftoa(char*, double, unsigned int)+0x228>
    e368:	e3a0200a 	mov	r2, #10
    e36c:	e3a03002 	mov	r3, #2
    e370:	e1a01002 	mov	r1, r2
    e374:	e2833001 	add	r3, r3, #1
    e378:	e1530006 	cmp	r3, r6
    e37c:	e0020291 	mul	r2, r1, r2
    e380:	9afffffb 	bls	e374 <CString::ftoa(char*, double, unsigned int)+0x110>
    e384:	ee072a90 	vmov	s15, r2
    e388:	eef81b67 	vcvt.f64.u32	d17, s15
    e38c:	ee075a90 	vmov	s15, r5
    e390:	eef80b67 	vcvt.f64.u32	d16, s15
    e394:	ee388b60 	vsub.f64	d8, d8, d16
    e398:	ee288b21 	vmul.f64	d8, d8, d17
    e39c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e3a0:	ee172a90 	vmov	r2, s15
    e3a4:	e3520009 	cmp	r2, #9
    e3a8:	83a01001 	movhi	r1, #1
    e3ac:	83a0c00a 	movhi	ip, #10
    e3b0:	9a000037 	bls	e494 <CString::ftoa(char*, double, unsigned int)+0x230>
    e3b4:	e001019c 	mul	r1, ip, r1
    e3b8:	e730f112 	udiv	r0, r2, r1
    e3bc:	e3500009 	cmp	r0, #9
    e3c0:	e1a03000 	mov	r3, r0
    e3c4:	8afffffa 	bhi	e3b4 <CString::ftoa(char*, double, unsigned int)+0x150>
    e3c8:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    e3cc:	e28de004 	add	lr, sp, #4
    e3d0:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    e3d4:	ea000002 	b	e3e4 <CString::ftoa(char*, double, unsigned int)+0x180>
    e3d8:	e1a01003 	mov	r1, r3
    e3dc:	e733f312 	udiv	r3, r2, r3
    e3e0:	e1a00003 	mov	r0, r3
    e3e4:	e3530009 	cmp	r3, #9
    e3e8:	e283c057 	add	ip, r3, #87	; 0x57
    e3ec:	e2833030 	add	r3, r3, #48	; 0x30
    e3f0:	e6afc07c 	sxtb	ip, ip
    e3f4:	e0622091 	mls	r2, r1, r0, r2
    e3f8:	96afc073 	sxtbls	ip, r3
    e3fc:	e3510009 	cmp	r1, #9
    e400:	e0830195 	umull	r0, r3, r5, r1
    e404:	e4cec001 	strb	ip, [lr], #1
    e408:	e1a031a3 	lsr	r3, r3, #3
    e40c:	8afffff1 	bhi	e3d8 <CString::ftoa(char*, double, unsigned int)+0x174>
    e410:	e3a03000 	mov	r3, #0
    e414:	e28d0004 	add	r0, sp, #4
    e418:	e5ce3000 	strb	r3, [lr]
    e41c:	eb000754 	bl	10174 <strlen>
    e420:	e0566000 	subs	r6, r6, r0
    e424:	0a000016 	beq	e484 <CString::ftoa(char*, double, unsigned int)+0x220>
    e428:	e2866001 	add	r6, r6, #1
    e42c:	e3a03030 	mov	r3, #48	; 0x30
    e430:	e0880006 	add	r0, r8, r6
    e434:	e4c73001 	strb	r3, [r7], #1
    e438:	e1570000 	cmp	r7, r0
    e43c:	1afffffc 	bne	e434 <CString::ftoa(char*, double, unsigned int)+0x1d0>
    e440:	e28d1004 	add	r1, sp, #4
    e444:	eb0007ef 	bl	10408 <strcpy>
    e448:	e1a00004 	mov	r0, r4
    e44c:	e28dd010 	add	sp, sp, #16
    e450:	ecbd8b02 	vpop	{d8}
    e454:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e458:	e30514e8 	movw	r1, #21736	; 0x54e8
    e45c:	e1a00006 	mov	r0, r6
    e460:	e3401001 	movt	r1, #1
    e464:	eb0007e7 	bl	10408 <strcpy>
    e468:	e1a00004 	mov	r0, r4
    e46c:	e28dd010 	add	sp, sp, #16
    e470:	ecbd8b02 	vpop	{d8}
    e474:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e478:	ee173a90 	vmov	r3, s15
    e47c:	e3a02001 	mov	r2, #1
    e480:	eaffff92 	b	e2d0 <CString::ftoa(char*, double, unsigned int)+0x6c>
    e484:	e1a00007 	mov	r0, r7
    e488:	eaffffec 	b	e440 <CString::ftoa(char*, double, unsigned int)+0x1dc>
    e48c:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    e490:	eaffffbd 	b	e38c <CString::ftoa(char*, double, unsigned int)+0x128>
    e494:	ee173a90 	vmov	r3, s15
    e498:	e3a01001 	mov	r1, #1
    e49c:	ee170a90 	vmov	r0, s15
    e4a0:	eaffffc8 	b	e3c8 <CString::ftoa(char*, double, unsigned int)+0x164>
    e4a4:	e320f000 	nop	{0}
    e4a8:	ffe00000 	.word	0xffe00000
    e4ac:	41efffff 	.word	0x41efffff

0000e4b0 <CString::FormatV(char const*, std::__va_list)>:
    e4b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4b4:	e1a0b000 	mov	fp, r0
    e4b8:	e5900004 	ldr	r0, [r0, #4]
    e4bc:	e24dd064 	sub	sp, sp, #100	; 0x64
    e4c0:	e1a0a001 	mov	sl, r1
    e4c4:	e58d2008 	str	r2, [sp, #8]
    e4c8:	e3500000 	cmp	r0, #0
    e4cc:	0a000000 	beq	e4d4 <CString::FormatV(char const*, std::__va_list)+0x24>
    e4d0:	eb000a51 	bl	10e1c <operator delete[](void*)>
    e4d4:	e3a00040 	mov	r0, #64	; 0x40
    e4d8:	e58b0008 	str	r0, [fp, #8]
    e4dc:	eb000a42 	bl	10dec <operator new[](unsigned int)>
    e4e0:	e58b0004 	str	r0, [fp, #4]
    e4e4:	e58b000c 	str	r0, [fp, #12]
    e4e8:	e1da40d0 	ldrsb	r4, [sl]
    e4ec:	e3540000 	cmp	r4, #0
    e4f0:	0a000080 	beq	e6f8 <CString::FormatV(char const*, std::__va_list)+0x248>
    e4f4:	e30534f4 	movw	r3, #21748	; 0x54f4
    e4f8:	e1a0900b 	mov	r9, fp
    e4fc:	e3403001 	movt	r3, #1
    e500:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    e504:	e30534f8 	movw	r3, #21752	; 0x54f8
    e508:	e3403001 	movt	r3, #1
    e50c:	e58d3030 	str	r3, [sp, #48]	; 0x30
    e510:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    e514:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    e518:	e58d3034 	str	r3, [sp, #52]	; 0x34
    e51c:	e3540025 	cmp	r4, #37	; 0x25
    e520:	1a000068 	bne	e6c8 <CString::FormatV(char const*, std::__va_list)+0x218>
    e524:	e1da30d1 	ldrsb	r3, [sl, #1]
    e528:	e3530025 	cmp	r3, #37	; 0x25
    e52c:	0a000075 	beq	e708 <CString::FormatV(char const*, std::__va_list)+0x258>
    e530:	e3530023 	cmp	r3, #35	; 0x23
    e534:	e3a0b000 	mov	fp, #0
    e538:	128aa001 	addne	sl, sl, #1
    e53c:	13a0c000 	movne	ip, #0
    e540:	01da30d2 	ldrsbeq	r3, [sl, #2]
    e544:	03a0c001 	moveq	ip, #1
    e548:	028aa002 	addeq	sl, sl, #2
    e54c:	e353002d 	cmp	r3, #45	; 0x2d
    e550:	03a02001 	moveq	r2, #1
    e554:	13a02000 	movne	r2, #0
    e558:	01da30d1 	ldrsbeq	r3, [sl, #1]
    e55c:	028aa001 	addeq	sl, sl, #1
    e560:	e58d2010 	str	r2, [sp, #16]
    e564:	e3530030 	cmp	r3, #48	; 0x30
    e568:	03a02001 	moveq	r2, #1
    e56c:	13a02000 	movne	r2, #0
    e570:	01da30d1 	ldrsbeq	r3, [sl, #1]
    e574:	028aa001 	addeq	sl, sl, #1
    e578:	e58d2014 	str	r2, [sp, #20]
    e57c:	e2432030 	sub	r2, r3, #48	; 0x30
    e580:	e6ef2072 	uxtb	r2, r2
    e584:	e3520009 	cmp	r2, #9
    e588:	8a000007 	bhi	e5ac <CString::FormatV(char const*, std::__va_list)+0xfc>
    e58c:	e3a0000a 	mov	r0, #10
    e590:	e02b3b90 	mla	fp, r0, fp, r3
    e594:	e1fa30d1 	ldrsb	r3, [sl, #1]!
    e598:	e24bb030 	sub	fp, fp, #48	; 0x30
    e59c:	e2432030 	sub	r2, r3, #48	; 0x30
    e5a0:	e6ef2072 	uxtb	r2, r2
    e5a4:	e3520009 	cmp	r2, #9
    e5a8:	9afffff8 	bls	e590 <CString::FormatV(char const*, std::__va_list)+0xe0>
    e5ac:	e353002e 	cmp	r3, #46	; 0x2e
    e5b0:	0a0001b0 	beq	ec78 <CString::FormatV(char const*, std::__va_list)+0x7c8>
    e5b4:	e1da30d0 	ldrsb	r3, [sl]
    e5b8:	e3a01006 	mov	r1, #6
    e5bc:	e58d3000 	str	r3, [sp]
    e5c0:	e59d3000 	ldr	r3, [sp]
    e5c4:	e353006c 	cmp	r3, #108	; 0x6c
    e5c8:	13a03000 	movne	r3, #0
    e5cc:	158d300c 	strne	r3, [sp, #12]
    e5d0:	11a05003 	movne	r5, r3
    e5d4:	1a00000c 	bne	e60c <CString::FormatV(char const*, std::__va_list)+0x15c>
    e5d8:	e1da30d1 	ldrsb	r3, [sl, #1]
    e5dc:	e58d3000 	str	r3, [sp]
    e5e0:	e353006c 	cmp	r3, #108	; 0x6c
    e5e4:	03a05000 	moveq	r5, #0
    e5e8:	13a05001 	movne	r5, #1
    e5ec:	01da30d2 	ldrsbeq	r3, [sl, #2]
    e5f0:	028aa001 	addeq	sl, sl, #1
    e5f4:	e28aa001 	add	sl, sl, #1
    e5f8:	13a03000 	movne	r3, #0
    e5fc:	058d3000 	streq	r3, [sp]
    e600:	03a03001 	moveq	r3, #1
    e604:	058d300c 	streq	r3, [sp, #12]
    e608:	158d300c 	strne	r3, [sp, #12]
    e60c:	e59d3000 	ldr	r3, [sp]
    e610:	e2433058 	sub	r3, r3, #88	; 0x58
    e614:	e3530020 	cmp	r3, #32
    e618:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e61c:	ea000042 	b	e72c <CString::FormatV(char const*, std::__va_list)+0x27c>
    e620:	0000e758 	.word	0x0000e758
    e624:	0000e72c 	.word	0x0000e72c
    e628:	0000e72c 	.word	0x0000e72c
    e62c:	0000e72c 	.word	0x0000e72c
    e630:	0000e72c 	.word	0x0000e72c
    e634:	0000e72c 	.word	0x0000e72c
    e638:	0000e72c 	.word	0x0000e72c
    e63c:	0000e72c 	.word	0x0000e72c
    e640:	0000e72c 	.word	0x0000e72c
    e644:	0000e72c 	.word	0x0000e72c
    e648:	0000e72c 	.word	0x0000e72c
    e64c:	0000e6a4 	.word	0x0000e6a4
    e650:	0000e950 	.word	0x0000e950
    e654:	0000e72c 	.word	0x0000e72c
    e658:	0000eac4 	.word	0x0000eac4
    e65c:	0000e72c 	.word	0x0000e72c
    e660:	0000e72c 	.word	0x0000e72c
    e664:	0000e950 	.word	0x0000e950
    e668:	0000e72c 	.word	0x0000e72c
    e66c:	0000e72c 	.word	0x0000e72c
    e670:	0000e72c 	.word	0x0000e72c
    e674:	0000e72c 	.word	0x0000e72c
    e678:	0000e72c 	.word	0x0000e72c
    e67c:	0000eba8 	.word	0x0000eba8
    e680:	0000e758 	.word	0x0000e758
    e684:	0000e72c 	.word	0x0000e72c
    e688:	0000e72c 	.word	0x0000e72c
    e68c:	0000eb44 	.word	0x0000eb44
    e690:	0000e72c 	.word	0x0000e72c
    e694:	0000eeb8 	.word	0x0000eeb8
    e698:	0000e72c 	.word	0x0000e72c
    e69c:	0000e72c 	.word	0x0000e72c
    e6a0:	0000e758 	.word	0x0000e758
    e6a4:	e59d3010 	ldr	r3, [sp, #16]
    e6a8:	e59d5008 	ldr	r5, [sp, #8]
    e6ac:	e3530000 	cmp	r3, #0
    e6b0:	e4954004 	ldr	r4, [r5], #4
    e6b4:	e6af4074 	sxtb	r4, r4
    e6b8:	1a000269 	bne	f064 <CString::FormatV(char const*, std::__va_list)+0xbb4>
    e6bc:	e35b0001 	cmp	fp, #1
    e6c0:	8a0001fe 	bhi	eec0 <CString::FormatV(char const*, std::__va_list)+0xa10>
    e6c4:	e58d5008 	str	r5, [sp, #8]
    e6c8:	e3a01001 	mov	r1, #1
    e6cc:	e1a00009 	mov	r0, r9
    e6d0:	ebfffd09 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e6d4:	e599300c 	ldr	r3, [r9, #12]
    e6d8:	e2832001 	add	r2, r3, #1
    e6dc:	e589200c 	str	r2, [r9, #12]
    e6e0:	e5c34000 	strb	r4, [r3]
    e6e4:	e28aa001 	add	sl, sl, #1
    e6e8:	e1da40d0 	ldrsb	r4, [sl]
    e6ec:	e3540000 	cmp	r4, #0
    e6f0:	1affff89 	bne	e51c <CString::FormatV(char const*, std::__va_list)+0x6c>
    e6f4:	e599000c 	ldr	r0, [r9, #12]
    e6f8:	e3a03000 	mov	r3, #0
    e6fc:	e5c03000 	strb	r3, [r0]
    e700:	e28dd064 	add	sp, sp, #100	; 0x64
    e704:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e708:	e3a01001 	mov	r1, #1
    e70c:	e1a00009 	mov	r0, r9
    e710:	e28aa002 	add	sl, sl, #2
    e714:	ebfffcf8 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e718:	e599300c 	ldr	r3, [r9, #12]
    e71c:	e2832001 	add	r2, r3, #1
    e720:	e589200c 	str	r2, [r9, #12]
    e724:	e5c34000 	strb	r4, [r3]
    e728:	eaffffee 	b	e6e8 <CString::FormatV(char const*, std::__va_list)+0x238>
    e72c:	e3a01001 	mov	r1, #1
    e730:	e1a00009 	mov	r0, r9
    e734:	ebfffcf0 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e738:	e599300c 	ldr	r3, [r9, #12]
    e73c:	e3a01001 	mov	r1, #1
    e740:	e3a02025 	mov	r2, #37	; 0x25
    e744:	e0830001 	add	r0, r3, r1
    e748:	e589000c 	str	r0, [r9, #12]
    e74c:	e5c32000 	strb	r2, [r3]
    e750:	e1da40d0 	ldrsb	r4, [sl]
    e754:	eaffffdc 	b	e6cc <CString::FormatV(char const*, std::__va_list)+0x21c>
    e758:	e35c0000 	cmp	ip, #0
    e75c:	03a08010 	moveq	r8, #16
    e760:	1a0001be 	bne	ee60 <CString::FormatV(char const*, std::__va_list)+0x9b0>
    e764:	e59d300c 	ldr	r3, [sp, #12]
    e768:	e3530000 	cmp	r3, #0
    e76c:	e59d3008 	ldr	r3, [sp, #8]
    e770:	0a00011e 	beq	ebf0 <CString::FormatV(char const*, std::__va_list)+0x740>
    e774:	e2833007 	add	r3, r3, #7
    e778:	e3a05000 	mov	r5, #0
    e77c:	e3c33007 	bic	r3, r3, #7
    e780:	e5937004 	ldr	r7, [r3, #4]
    e784:	e4934008 	ldr	r4, [r3], #8
    e788:	e58d701c 	str	r7, [sp, #28]
    e78c:	e1540008 	cmp	r4, r8
    e790:	e58d3008 	str	r3, [sp, #8]
    e794:	e2d73000 	sbcs	r3, r7, #0
    e798:	e58d4018 	str	r4, [sp, #24]
    e79c:	3a00024a 	bcc	f0cc <CString::FormatV(char const*, std::__va_list)+0xc1c>
    e7a0:	e3a06001 	mov	r6, #1
    e7a4:	e0030598 	mul	r3, r8, r5
    e7a8:	e0856896 	umull	r6, r5, r6, r8
    e7ac:	e1a00004 	mov	r0, r4
    e7b0:	e1a01007 	mov	r1, r7
    e7b4:	e0835005 	add	r5, r3, r5
    e7b8:	e1a02006 	mov	r2, r6
    e7bc:	e1a03005 	mov	r3, r5
    e7c0:	fa00177b 	blx	145b4 <__aeabi_uldivmod>
    e7c4:	e1500008 	cmp	r0, r8
    e7c8:	e2d13000 	sbcs	r3, r1, #0
    e7cc:	2afffff4 	bcs	e7a4 <CString::FormatV(char const*, std::__va_list)+0x2f4>
    e7d0:	e1a04000 	mov	r4, r0
    e7d4:	e1a07001 	mov	r7, r1
    e7d8:	e59d3000 	ldr	r3, [sp]
    e7dc:	e58db020 	str	fp, [sp, #32]
    e7e0:	e58da028 	str	sl, [sp, #40]	; 0x28
    e7e4:	e3530058 	cmp	r3, #88	; 0x58
    e7e8:	e58d9024 	str	r9, [sp, #36]	; 0x24
    e7ec:	e28d303c 	add	r3, sp, #60	; 0x3c
    e7f0:	e58d3004 	str	r3, [sp, #4]
    e7f4:	e58d3000 	str	r3, [sp]
    e7f8:	13a03020 	movne	r3, #32
    e7fc:	03a03000 	moveq	r3, #0
    e800:	e2833037 	add	r3, r3, #55	; 0x37
    e804:	e1cda1d8 	ldrd	sl, [sp, #24]
    e808:	e58d300c 	str	r3, [sp, #12]
    e80c:	ea000002 	b	e81c <CString::FormatV(char const*, std::__va_list)+0x36c>
    e810:	fa001767 	blx	145b4 <__aeabi_uldivmod>
    e814:	e1a04000 	mov	r4, r0
    e818:	e1a07001 	mov	r7, r1
    e81c:	e1a02006 	mov	r2, r6
    e820:	e1a03005 	mov	r3, r5
    e824:	e1a0000a 	mov	r0, sl
    e828:	e1a0100b 	mov	r1, fp
    e82c:	fa001760 	blx	145b4 <__aeabi_uldivmod>
    e830:	e59d100c 	ldr	r1, [sp, #12]
    e834:	e354000a 	cmp	r4, #10
    e838:	e2d70000 	sbcs	r0, r7, #0
    e83c:	e1a0b003 	mov	fp, r3
    e840:	e0811004 	add	r1, r1, r4
    e844:	e1a07003 	mov	r7, r3
    e848:	e59d3000 	ldr	r3, [sp]
    e84c:	e2844030 	add	r4, r4, #48	; 0x30
    e850:	e6af1071 	sxtb	r1, r1
    e854:	36af1074 	sxtbcc	r1, r4
    e858:	e4c31001 	strb	r1, [r3], #1
    e85c:	e1a09002 	mov	r9, r2
    e860:	e58d3000 	str	r3, [sp]
    e864:	e1a00006 	mov	r0, r6
    e868:	e3a03000 	mov	r3, #0
    e86c:	e1a01005 	mov	r1, r5
    e870:	e1a0a002 	mov	sl, r2
    e874:	e1a02008 	mov	r2, r8
    e878:	fa00174d 	blx	145b4 <__aeabi_uldivmod>
    e87c:	e1560008 	cmp	r6, r8
    e880:	e1a02000 	mov	r2, r0
    e884:	e2d5c000 	sbcs	ip, r5, #0
    e888:	e1a03001 	mov	r3, r1
    e88c:	e1a00009 	mov	r0, r9
    e890:	e1a01007 	mov	r1, r7
    e894:	e1a06002 	mov	r6, r2
    e898:	e1a05003 	mov	r5, r3
    e89c:	2affffdb 	bcs	e810 <CString::FormatV(char const*, std::__va_list)+0x360>
    e8a0:	e59d2000 	ldr	r2, [sp]
    e8a4:	e3a03000 	mov	r3, #0
    e8a8:	e59db020 	ldr	fp, [sp, #32]
    e8ac:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
    e8b0:	e59da028 	ldr	sl, [sp, #40]	; 0x28
    e8b4:	e5c23000 	strb	r3, [r2]
    e8b8:	e59d0004 	ldr	r0, [sp, #4]
    e8bc:	eb00062c 	bl	10174 <strlen>
    e8c0:	e59d3010 	ldr	r3, [sp, #16]
    e8c4:	e1a04000 	mov	r4, r0
    e8c8:	e3530000 	cmp	r3, #0
    e8cc:	1a0000fb 	bne	ecc0 <CString::FormatV(char const*, std::__va_list)+0x810>
    e8d0:	e150000b 	cmp	r0, fp
    e8d4:	2a00000f 	bcs	e918 <CString::FormatV(char const*, std::__va_list)+0x468>
    e8d8:	e59d3014 	ldr	r3, [sp, #20]
    e8dc:	e04b4000 	sub	r4, fp, r0
    e8e0:	e1a00009 	mov	r0, r9
    e8e4:	e3530000 	cmp	r3, #0
    e8e8:	e1a01004 	mov	r1, r4
    e8ec:	13a05030 	movne	r5, #48	; 0x30
    e8f0:	03a05020 	moveq	r5, #32
    e8f4:	ebfffc80 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e8f8:	e2443001 	sub	r3, r4, #1
    e8fc:	e599200c 	ldr	r2, [r9, #12]
    e900:	e2433001 	sub	r3, r3, #1
    e904:	e3730001 	cmn	r3, #1
    e908:	e2821001 	add	r1, r2, #1
    e90c:	e589100c 	str	r1, [r9, #12]
    e910:	e5c25000 	strb	r5, [r2]
    e914:	1afffff8 	bne	e8fc <CString::FormatV(char const*, std::__va_list)+0x44c>
    e918:	e59d0004 	ldr	r0, [sp, #4]
    e91c:	eb000614 	bl	10174 <strlen>
    e920:	e2504000 	subs	r4, r0, #0
    e924:	0a000002 	beq	e934 <CString::FormatV(char const*, std::__va_list)+0x484>
    e928:	e1a01004 	mov	r1, r4
    e92c:	e1a00009 	mov	r0, r9
    e930:	ebfffc71 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e934:	e599000c 	ldr	r0, [r9, #12]
    e938:	e59d1004 	ldr	r1, [sp, #4]
    e93c:	eb0006b1 	bl	10408 <strcpy>
    e940:	e599000c 	ldr	r0, [r9, #12]
    e944:	e0800004 	add	r0, r0, r4
    e948:	e589000c 	str	r0, [r9, #12]
    e94c:	eaffff64 	b	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    e950:	e59d300c 	ldr	r3, [sp, #12]
    e954:	e3530000 	cmp	r3, #0
    e958:	e59d3008 	ldr	r3, [sp, #8]
    e95c:	0a0000f4 	beq	ed34 <CString::FormatV(char const*, std::__va_list)+0x884>
    e960:	e2833007 	add	r3, r3, #7
    e964:	e3c33007 	bic	r3, r3, #7
    e968:	e5938004 	ldr	r8, [r3, #4]
    e96c:	e4932008 	ldr	r2, [r3], #8
    e970:	e3580000 	cmp	r8, #0
    e974:	e58d3008 	str	r3, [sp, #8]
    e978:	a3a03000 	movge	r3, #0
    e97c:	a58d300c 	strge	r3, [sp, #12]
    e980:	aa000002 	bge	e990 <CString::FormatV(char const*, std::__va_list)+0x4e0>
    e984:	e2723000 	rsbs	r3, r2, #0
    e988:	e2e88000 	rsc	r8, r8, #0
    e98c:	e1a02003 	mov	r2, r3
    e990:	e58d8018 	str	r8, [sp, #24]
    e994:	e352000a 	cmp	r2, #10
    e998:	e1a03002 	mov	r3, r2
    e99c:	e2d82000 	sbcs	r2, r8, #0
    e9a0:	e58d3000 	str	r3, [sp]
    e9a4:	ba0001ff 	blt	f1a8 <CString::FormatV(char const*, std::__va_list)+0xcf8>
    e9a8:	e1a06008 	mov	r6, r8
    e9ac:	e3a04001 	mov	r4, #1
    e9b0:	e3a05000 	mov	r5, #0
    e9b4:	e1a08003 	mov	r8, r3
    e9b8:	e0941004 	adds	r1, r4, r4
    e9bc:	e1a00008 	mov	r0, r8
    e9c0:	e0a53005 	adc	r3, r5, r5
    e9c4:	e0911001 	adds	r1, r1, r1
    e9c8:	e0a33003 	adc	r3, r3, r3
    e9cc:	e0912004 	adds	r2, r1, r4
    e9d0:	e1a01006 	mov	r1, r6
    e9d4:	e0a55003 	adc	r5, r5, r3
    e9d8:	e0922002 	adds	r2, r2, r2
    e9dc:	e0a55005 	adc	r5, r5, r5
    e9e0:	e1a04002 	mov	r4, r2
    e9e4:	e1a03005 	mov	r3, r5
    e9e8:	fa0016f1 	blx	145b4 <__aeabi_uldivmod>
    e9ec:	e350000a 	cmp	r0, #10
    e9f0:	e2d13000 	sbcs	r3, r1, #0
    e9f4:	2affffef 	bcs	e9b8 <CString::FormatV(char const*, std::__va_list)+0x508>
    e9f8:	e1a06000 	mov	r6, r0
    e9fc:	e1a07001 	mov	r7, r1
    ea00:	e58db01c 	str	fp, [sp, #28]
    ea04:	e28d303c 	add	r3, sp, #60	; 0x3c
    ea08:	e58d9020 	str	r9, [sp, #32]
    ea0c:	e1a09003 	mov	r9, r3
    ea10:	e58da024 	str	sl, [sp, #36]	; 0x24
    ea14:	e59db018 	ldr	fp, [sp, #24]
    ea18:	e59da000 	ldr	sl, [sp]
    ea1c:	e58d3004 	str	r3, [sp, #4]
    ea20:	ea000002 	b	ea30 <CString::FormatV(char const*, std::__va_list)+0x580>
    ea24:	fa0016e2 	blx	145b4 <__aeabi_uldivmod>
    ea28:	e1a06000 	mov	r6, r0
    ea2c:	e1a07001 	mov	r7, r1
    ea30:	e1a02004 	mov	r2, r4
    ea34:	e1a03005 	mov	r3, r5
    ea38:	e1a0000a 	mov	r0, sl
    ea3c:	e1a0100b 	mov	r1, fp
    ea40:	fa0016db 	blx	145b4 <__aeabi_uldivmod>
    ea44:	e356000a 	cmp	r6, #10
    ea48:	e2861057 	add	r1, r6, #87	; 0x57
    ea4c:	e2d70000 	sbcs	r0, r7, #0
    ea50:	e2866030 	add	r6, r6, #48	; 0x30
    ea54:	e6af1071 	sxtb	r1, r1
    ea58:	36af1076 	sxtbcc	r1, r6
    ea5c:	e4c91001 	strb	r1, [r9], #1
    ea60:	e1a08002 	mov	r8, r2
    ea64:	e1a07003 	mov	r7, r3
    ea68:	e1a00004 	mov	r0, r4
    ea6c:	e1a01005 	mov	r1, r5
    ea70:	e1a0a002 	mov	sl, r2
    ea74:	e1a0b003 	mov	fp, r3
    ea78:	e3a0200a 	mov	r2, #10
    ea7c:	e3a03000 	mov	r3, #0
    ea80:	fa0016cb 	blx	145b4 <__aeabi_uldivmod>
    ea84:	e354000a 	cmp	r4, #10
    ea88:	e1a02000 	mov	r2, r0
    ea8c:	e2d5c000 	sbcs	ip, r5, #0
    ea90:	e1a03001 	mov	r3, r1
    ea94:	e1a00008 	mov	r0, r8
    ea98:	e1a01007 	mov	r1, r7
    ea9c:	e1a04002 	mov	r4, r2
    eaa0:	e1a05003 	mov	r5, r3
    eaa4:	2affffde 	bcs	ea24 <CString::FormatV(char const*, std::__va_list)+0x574>
    eaa8:	e59db01c 	ldr	fp, [sp, #28]
    eaac:	e1a02009 	mov	r2, r9
    eab0:	e59da024 	ldr	sl, [sp, #36]	; 0x24
    eab4:	e3a03000 	mov	r3, #0
    eab8:	e59d9020 	ldr	r9, [sp, #32]
    eabc:	e5c23000 	strb	r3, [r2]
    eac0:	ea0000be 	b	edc0 <CString::FormatV(char const*, std::__va_list)+0x910>
    eac4:	e59d3008 	ldr	r3, [sp, #8]
    eac8:	e2833007 	add	r3, r3, #7
    eacc:	e3c33007 	bic	r3, r3, #7
    ead0:	ecb30b02 	vldmia	r3!, {d0}
    ead4:	e58d3008 	str	r3, [sp, #8]
    ead8:	e28d303c 	add	r3, sp, #60	; 0x3c
    eadc:	e58d3004 	str	r3, [sp, #4]
    eae0:	e1a04003 	mov	r4, r3
    eae4:	e1a00003 	mov	r0, r3
    eae8:	ebfffddd 	bl	e264 <CString::ftoa(char*, double, unsigned int)>
    eaec:	e1a00004 	mov	r0, r4
    eaf0:	eb00059f 	bl	10174 <strlen>
    eaf4:	e59d3010 	ldr	r3, [sp, #16]
    eaf8:	e1a04000 	mov	r4, r0
    eafc:	e3530000 	cmp	r3, #0
    eb00:	1a00013a 	bne	eff0 <CString::FormatV(char const*, std::__va_list)+0xb40>
    eb04:	e150000b 	cmp	r0, fp
    eb08:	2affff82 	bcs	e918 <CString::FormatV(char const*, std::__va_list)+0x468>
    eb0c:	e04b4000 	sub	r4, fp, r0
    eb10:	e1a00009 	mov	r0, r9
    eb14:	e1a01004 	mov	r1, r4
    eb18:	ebfffbf7 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb1c:	e2443001 	sub	r3, r4, #1
    eb20:	e3a00020 	mov	r0, #32
    eb24:	e599200c 	ldr	r2, [r9, #12]
    eb28:	e2433001 	sub	r3, r3, #1
    eb2c:	e3730001 	cmn	r3, #1
    eb30:	e2821001 	add	r1, r2, #1
    eb34:	e589100c 	str	r1, [r9, #12]
    eb38:	e5c20000 	strb	r0, [r2]
    eb3c:	1afffff8 	bne	eb24 <CString::FormatV(char const*, std::__va_list)+0x674>
    eb40:	eaffff74 	b	e918 <CString::FormatV(char const*, std::__va_list)+0x468>
    eb44:	e59d5008 	ldr	r5, [sp, #8]
    eb48:	e4956004 	ldr	r6, [r5], #4
    eb4c:	e1a00006 	mov	r0, r6
    eb50:	eb000587 	bl	10174 <strlen>
    eb54:	e59d3010 	ldr	r3, [sp, #16]
    eb58:	e1a04000 	mov	r4, r0
    eb5c:	e3530000 	cmp	r3, #0
    eb60:	1a000111 	bne	efac <CString::FormatV(char const*, std::__va_list)+0xafc>
    eb64:	e150000b 	cmp	r0, fp
    eb68:	3a0000e1 	bcc	eef4 <CString::FormatV(char const*, std::__va_list)+0xa44>
    eb6c:	e1a00006 	mov	r0, r6
    eb70:	eb00057f 	bl	10174 <strlen>
    eb74:	e2504000 	subs	r4, r0, #0
    eb78:	0a000002 	beq	eb88 <CString::FormatV(char const*, std::__va_list)+0x6d8>
    eb7c:	e1a01004 	mov	r1, r4
    eb80:	e1a00009 	mov	r0, r9
    eb84:	ebfffbdc 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb88:	e599000c 	ldr	r0, [r9, #12]
    eb8c:	e1a01006 	mov	r1, r6
    eb90:	eb00061c 	bl	10408 <strcpy>
    eb94:	e599000c 	ldr	r0, [r9, #12]
    eb98:	e58d5008 	str	r5, [sp, #8]
    eb9c:	e0800004 	add	r0, r0, r4
    eba0:	e589000c 	str	r0, [r9, #12]
    eba4:	eafffece 	b	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    eba8:	e35c0000 	cmp	ip, #0
    ebac:	03a08008 	moveq	r8, #8
    ebb0:	0afffeeb 	beq	e764 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    ebb4:	e3a01001 	mov	r1, #1
    ebb8:	e1a00009 	mov	r0, r9
    ebbc:	e3a08008 	mov	r8, #8
    ebc0:	ebfffbcd 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ebc4:	e599300c 	ldr	r3, [r9, #12]
    ebc8:	e3a02030 	mov	r2, #48	; 0x30
    ebcc:	e2831001 	add	r1, r3, #1
    ebd0:	e589100c 	str	r1, [r9, #12]
    ebd4:	e5c32000 	strb	r2, [r3]
    ebd8:	e1da30d0 	ldrsb	r3, [sl]
    ebdc:	e58d3000 	str	r3, [sp]
    ebe0:	e59d300c 	ldr	r3, [sp, #12]
    ebe4:	e3530000 	cmp	r3, #0
    ebe8:	e59d3008 	ldr	r3, [sp, #8]
    ebec:	1afffee0 	bne	e774 <CString::FormatV(char const*, std::__va_list)+0x2c4>
    ebf0:	e493c004 	ldr	ip, [r3], #4
    ebf4:	e158000c 	cmp	r8, ip
    ebf8:	e58d3008 	str	r3, [sp, #8]
    ebfc:	8a00012e 	bhi	f0bc <CString::FormatV(char const*, std::__va_list)+0xc0c>
    ec00:	e3a03001 	mov	r3, #1
    ec04:	e0030398 	mul	r3, r8, r3
    ec08:	e731f31c 	udiv	r1, ip, r3
    ec0c:	e1580001 	cmp	r8, r1
    ec10:	e1a02001 	mov	r2, r1
    ec14:	9afffffa 	bls	ec04 <CString::FormatV(char const*, std::__va_list)+0x754>
    ec18:	e59d0000 	ldr	r0, [sp]
    ec1c:	e3500058 	cmp	r0, #88	; 0x58
    ec20:	e28d003c 	add	r0, sp, #60	; 0x3c
    ec24:	e58d0004 	str	r0, [sp, #4]
    ec28:	13a04020 	movne	r4, #32
    ec2c:	03a04000 	moveq	r4, #0
    ec30:	e1a0e000 	mov	lr, r0
    ec34:	e2844037 	add	r4, r4, #55	; 0x37
    ec38:	ea000001 	b	ec44 <CString::FormatV(char const*, std::__va_list)+0x794>
    ec3c:	e732f31c 	udiv	r2, ip, r3
    ec40:	e1a01002 	mov	r1, r2
    ec44:	e0840002 	add	r0, r4, r2
    ec48:	e3520009 	cmp	r2, #9
    ec4c:	e2822030 	add	r2, r2, #48	; 0x30
    ec50:	e6af0070 	sxtb	r0, r0
    ec54:	96af0072 	sxtbls	r0, r2
    ec58:	e1580003 	cmp	r8, r3
    ec5c:	e06cc193 	mls	ip, r3, r1, ip
    ec60:	e4ce0001 	strb	r0, [lr], #1
    ec64:	e733f813 	udiv	r3, r3, r8
    ec68:	9afffff3 	bls	ec3c <CString::FormatV(char const*, std::__va_list)+0x78c>
    ec6c:	e3a03000 	mov	r3, #0
    ec70:	e5ce3000 	strb	r3, [lr]
    ec74:	eaffff0f 	b	e8b8 <CString::FormatV(char const*, std::__va_list)+0x408>
    ec78:	e1da00d1 	ldrsb	r0, [sl, #1]
    ec7c:	e3a01000 	mov	r1, #0
    ec80:	e28aa001 	add	sl, sl, #1
    ec84:	e58d0000 	str	r0, [sp]
    ec88:	e2403030 	sub	r3, r0, #48	; 0x30
    ec8c:	e6ef3073 	uxtb	r3, r3
    ec90:	e3530009 	cmp	r3, #9
    ec94:	8afffe49 	bhi	e5c0 <CString::FormatV(char const*, std::__va_list)+0x110>
    ec98:	e3a0200a 	mov	r2, #10
    ec9c:	e0210192 	mla	r1, r2, r1, r0
    eca0:	e1fa00d1 	ldrsb	r0, [sl, #1]!
    eca4:	e2411030 	sub	r1, r1, #48	; 0x30
    eca8:	e2403030 	sub	r3, r0, #48	; 0x30
    ecac:	e6ef3073 	uxtb	r3, r3
    ecb0:	e3530009 	cmp	r3, #9
    ecb4:	9afffff8 	bls	ec9c <CString::FormatV(char const*, std::__va_list)+0x7ec>
    ecb8:	e58d0000 	str	r0, [sp]
    ecbc:	eafffe3f 	b	e5c0 <CString::FormatV(char const*, std::__va_list)+0x110>
    ecc0:	e59d0004 	ldr	r0, [sp, #4]
    ecc4:	eb00052a 	bl	10174 <strlen>
    ecc8:	e2505000 	subs	r5, r0, #0
    eccc:	0a000002 	beq	ecdc <CString::FormatV(char const*, std::__va_list)+0x82c>
    ecd0:	e1a01005 	mov	r1, r5
    ecd4:	e1a00009 	mov	r0, r9
    ecd8:	ebfffb87 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ecdc:	e599000c 	ldr	r0, [r9, #12]
    ece0:	e59d1004 	ldr	r1, [sp, #4]
    ece4:	eb0005c7 	bl	10408 <strcpy>
    ece8:	e599300c 	ldr	r3, [r9, #12]
    ecec:	e154000b 	cmp	r4, fp
    ecf0:	e0835005 	add	r5, r3, r5
    ecf4:	e589500c 	str	r5, [r9, #12]
    ecf8:	2afffe79 	bcs	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    ecfc:	e04b4004 	sub	r4, fp, r4
    ed00:	e1a00009 	mov	r0, r9
    ed04:	e1a01004 	mov	r1, r4
    ed08:	ebfffb7b 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ed0c:	e2443001 	sub	r3, r4, #1
    ed10:	e3a00020 	mov	r0, #32
    ed14:	e599200c 	ldr	r2, [r9, #12]
    ed18:	e2433001 	sub	r3, r3, #1
    ed1c:	e3730001 	cmn	r3, #1
    ed20:	e2821001 	add	r1, r2, #1
    ed24:	e589100c 	str	r1, [r9, #12]
    ed28:	e5c20000 	strb	r0, [r2]
    ed2c:	1afffff8 	bne	ed14 <CString::FormatV(char const*, std::__va_list)+0x864>
    ed30:	eafffe6b 	b	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    ed34:	e4930004 	ldr	r0, [r3], #4
    ed38:	e58d3008 	str	r3, [sp, #8]
    ed3c:	e3500000 	cmp	r0, #0
    ed40:	b2600000 	rsblt	r0, r0, #0
    ed44:	b3a03001 	movlt	r3, #1
    ed48:	b58d300c 	strlt	r3, [sp, #12]
    ed4c:	e3500009 	cmp	r0, #9
    ed50:	e1a01000 	mov	r1, r0
    ed54:	da000118 	ble	f1bc <CString::FormatV(char const*, std::__va_list)+0xd0c>
    ed58:	e3a02001 	mov	r2, #1
    ed5c:	e3a0c00a 	mov	ip, #10
    ed60:	e002029c 	mul	r2, ip, r2
    ed64:	e733f210 	udiv	r3, r0, r2
    ed68:	e3530009 	cmp	r3, #9
    ed6c:	8afffffb 	bhi	ed60 <CString::FormatV(char const*, std::__va_list)+0x8b0>
    ed70:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    ed74:	e28d003c 	add	r0, sp, #60	; 0x3c
    ed78:	e58d0004 	str	r0, [sp, #4]
    ed7c:	ea000001 	b	ed88 <CString::FormatV(char const*, std::__va_list)+0x8d8>
    ed80:	e1a02003 	mov	r2, r3
    ed84:	e733f311 	udiv	r3, r1, r3
    ed88:	e73ef211 	udiv	lr, r1, r2
    ed8c:	e3530009 	cmp	r3, #9
    ed90:	e283c057 	add	ip, r3, #87	; 0x57
    ed94:	e2833030 	add	r3, r3, #48	; 0x30
    ed98:	e6afc07c 	sxtb	ip, ip
    ed9c:	e0611e92 	mls	r1, r2, lr, r1
    eda0:	96afc073 	sxtbls	ip, r3
    eda4:	e3520009 	cmp	r2, #9
    eda8:	e083e294 	umull	lr, r3, r4, r2
    edac:	e4c0c001 	strb	ip, [r0], #1
    edb0:	e1a031a3 	lsr	r3, r3, #3
    edb4:	8afffff1 	bhi	ed80 <CString::FormatV(char const*, std::__va_list)+0x8d0>
    edb8:	e3a03000 	mov	r3, #0
    edbc:	e5c03000 	strb	r3, [r0]
    edc0:	e59d0004 	ldr	r0, [sp, #4]
    edc4:	eb0004ea 	bl	10174 <strlen>
    edc8:	e59d300c 	ldr	r3, [sp, #12]
    edcc:	e1a04000 	mov	r4, r0
    edd0:	e3530000 	cmp	r3, #0
    edd4:	0a000054 	beq	ef2c <CString::FormatV(char const*, std::__va_list)+0xa7c>
    edd8:	e59d3010 	ldr	r3, [sp, #16]
    eddc:	e2804001 	add	r4, r0, #1
    ede0:	e3530000 	cmp	r3, #0
    ede4:	1a0000cf 	bne	f128 <CString::FormatV(char const*, std::__va_list)+0xc78>
    ede8:	e59d3014 	ldr	r3, [sp, #20]
    edec:	e3530000 	cmp	r3, #0
    edf0:	1a0000e3 	bne	f184 <CString::FormatV(char const*, std::__va_list)+0xcd4>
    edf4:	e15b0004 	cmp	fp, r4
    edf8:	9a00000f 	bls	ee3c <CString::FormatV(char const*, std::__va_list)+0x98c>
    edfc:	e04b4004 	sub	r4, fp, r4
    ee00:	e1a00009 	mov	r0, r9
    ee04:	e1a01004 	mov	r1, r4
    ee08:	ebfffb3b 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee0c:	e2443001 	sub	r3, r4, #1
    ee10:	e3a00020 	mov	r0, #32
    ee14:	e599200c 	ldr	r2, [r9, #12]
    ee18:	e2433001 	sub	r3, r3, #1
    ee1c:	e3730001 	cmn	r3, #1
    ee20:	e2821001 	add	r1, r2, #1
    ee24:	e589100c 	str	r1, [r9, #12]
    ee28:	e5c20000 	strb	r0, [r2]
    ee2c:	1afffff8 	bne	ee14 <CString::FormatV(char const*, std::__va_list)+0x964>
    ee30:	e59d300c 	ldr	r3, [sp, #12]
    ee34:	e3530000 	cmp	r3, #0
    ee38:	0afffeb6 	beq	e918 <CString::FormatV(char const*, std::__va_list)+0x468>
    ee3c:	e3a01001 	mov	r1, #1
    ee40:	e1a00009 	mov	r0, r9
    ee44:	ebfffb2c 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee48:	e599300c 	ldr	r3, [r9, #12]
    ee4c:	e3a0202d 	mov	r2, #45	; 0x2d
    ee50:	e2831001 	add	r1, r3, #1
    ee54:	e589100c 	str	r1, [r9, #12]
    ee58:	e5c32000 	strb	r2, [r3]
    ee5c:	eafffead 	b	e918 <CString::FormatV(char const*, std::__va_list)+0x468>
    ee60:	e59d2000 	ldr	r2, [sp]
    ee64:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
    ee68:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
    ee6c:	e3520058 	cmp	r2, #88	; 0x58
    ee70:	01a06003 	moveq	r6, r3
    ee74:	e1a00006 	mov	r0, r6
    ee78:	eb0004bd 	bl	10174 <strlen>
    ee7c:	e2504000 	subs	r4, r0, #0
    ee80:	0a000002 	beq	ee90 <CString::FormatV(char const*, std::__va_list)+0x9e0>
    ee84:	e1a01004 	mov	r1, r4
    ee88:	e1a00009 	mov	r0, r9
    ee8c:	ebfffb1a 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee90:	e599000c 	ldr	r0, [r9, #12]
    ee94:	e1a01006 	mov	r1, r6
    ee98:	e3a08010 	mov	r8, #16
    ee9c:	eb000559 	bl	10408 <strcpy>
    eea0:	e599300c 	ldr	r3, [r9, #12]
    eea4:	e0834004 	add	r4, r3, r4
    eea8:	e589400c 	str	r4, [r9, #12]
    eeac:	e1da30d0 	ldrsb	r3, [sl]
    eeb0:	e58d3000 	str	r3, [sp]
    eeb4:	eafffe2a 	b	e764 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    eeb8:	e3a0800a 	mov	r8, #10
    eebc:	eafffe28 	b	e764 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    eec0:	e1a00009 	mov	r0, r9
    eec4:	e24b1001 	sub	r1, fp, #1
    eec8:	ebfffb0b 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eecc:	e24b3002 	sub	r3, fp, #2
    eed0:	e3a00020 	mov	r0, #32
    eed4:	e599200c 	ldr	r2, [r9, #12]
    eed8:	e2433001 	sub	r3, r3, #1
    eedc:	e3730001 	cmn	r3, #1
    eee0:	e2821001 	add	r1, r2, #1
    eee4:	e589100c 	str	r1, [r9, #12]
    eee8:	e5c20000 	strb	r0, [r2]
    eeec:	1afffff8 	bne	eed4 <CString::FormatV(char const*, std::__va_list)+0xa24>
    eef0:	eafffdf3 	b	e6c4 <CString::FormatV(char const*, std::__va_list)+0x214>
    eef4:	e04b4000 	sub	r4, fp, r0
    eef8:	e1a00009 	mov	r0, r9
    eefc:	e1a01004 	mov	r1, r4
    ef00:	ebfffafd 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef04:	e2443001 	sub	r3, r4, #1
    ef08:	e3a00020 	mov	r0, #32
    ef0c:	e599200c 	ldr	r2, [r9, #12]
    ef10:	e2433001 	sub	r3, r3, #1
    ef14:	e3730001 	cmn	r3, #1
    ef18:	e2821001 	add	r1, r2, #1
    ef1c:	e589100c 	str	r1, [r9, #12]
    ef20:	e5c20000 	strb	r0, [r2]
    ef24:	1afffff8 	bne	ef0c <CString::FormatV(char const*, std::__va_list)+0xa5c>
    ef28:	eaffff0f 	b	eb6c <CString::FormatV(char const*, std::__va_list)+0x6bc>
    ef2c:	e59d3010 	ldr	r3, [sp, #16]
    ef30:	e3530000 	cmp	r3, #0
    ef34:	0a000068 	beq	f0dc <CString::FormatV(char const*, std::__va_list)+0xc2c>
    ef38:	e59d0004 	ldr	r0, [sp, #4]
    ef3c:	eb00048c 	bl	10174 <strlen>
    ef40:	e2505000 	subs	r5, r0, #0
    ef44:	0a000002 	beq	ef54 <CString::FormatV(char const*, std::__va_list)+0xaa4>
    ef48:	e1a01005 	mov	r1, r5
    ef4c:	e1a00009 	mov	r0, r9
    ef50:	ebfffae9 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef54:	e599000c 	ldr	r0, [r9, #12]
    ef58:	e59d1004 	ldr	r1, [sp, #4]
    ef5c:	eb000529 	bl	10408 <strcpy>
    ef60:	e599300c 	ldr	r3, [r9, #12]
    ef64:	e15b0004 	cmp	fp, r4
    ef68:	e0835005 	add	r5, r3, r5
    ef6c:	e589500c 	str	r5, [r9, #12]
    ef70:	9afffddb 	bls	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    ef74:	e04b4004 	sub	r4, fp, r4
    ef78:	e1a00009 	mov	r0, r9
    ef7c:	e1a01004 	mov	r1, r4
    ef80:	ebfffadd 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef84:	e2443001 	sub	r3, r4, #1
    ef88:	e3a00020 	mov	r0, #32
    ef8c:	e599200c 	ldr	r2, [r9, #12]
    ef90:	e2433001 	sub	r3, r3, #1
    ef94:	e3730001 	cmn	r3, #1
    ef98:	e2821001 	add	r1, r2, #1
    ef9c:	e589100c 	str	r1, [r9, #12]
    efa0:	e5c20000 	strb	r0, [r2]
    efa4:	1afffff8 	bne	ef8c <CString::FormatV(char const*, std::__va_list)+0xadc>
    efa8:	eafffdcd 	b	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    efac:	e1a00006 	mov	r0, r6
    efb0:	eb00046f 	bl	10174 <strlen>
    efb4:	e2507000 	subs	r7, r0, #0
    efb8:	0a000002 	beq	efc8 <CString::FormatV(char const*, std::__va_list)+0xb18>
    efbc:	e1a01007 	mov	r1, r7
    efc0:	e1a00009 	mov	r0, r9
    efc4:	ebfffacc 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    efc8:	e599000c 	ldr	r0, [r9, #12]
    efcc:	e1a01006 	mov	r1, r6
    efd0:	eb00050c 	bl	10408 <strcpy>
    efd4:	e599300c 	ldr	r3, [r9, #12]
    efd8:	e154000b 	cmp	r4, fp
    efdc:	e0837007 	add	r7, r3, r7
    efe0:	e589700c 	str	r7, [r9, #12]
    efe4:	3a000058 	bcc	f14c <CString::FormatV(char const*, std::__va_list)+0xc9c>
    efe8:	e58d5008 	str	r5, [sp, #8]
    efec:	eafffdbc 	b	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    eff0:	e59d0004 	ldr	r0, [sp, #4]
    eff4:	eb00045e 	bl	10174 <strlen>
    eff8:	e2505000 	subs	r5, r0, #0
    effc:	0a000002 	beq	f00c <CString::FormatV(char const*, std::__va_list)+0xb5c>
    f000:	e1a01005 	mov	r1, r5
    f004:	e1a00009 	mov	r0, r9
    f008:	ebfffabb 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f00c:	e599000c 	ldr	r0, [r9, #12]
    f010:	e59d1004 	ldr	r1, [sp, #4]
    f014:	eb0004fb 	bl	10408 <strcpy>
    f018:	e599300c 	ldr	r3, [r9, #12]
    f01c:	e154000b 	cmp	r4, fp
    f020:	e0835005 	add	r5, r3, r5
    f024:	e589500c 	str	r5, [r9, #12]
    f028:	2afffdad 	bcs	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    f02c:	e04b4004 	sub	r4, fp, r4
    f030:	e1a00009 	mov	r0, r9
    f034:	e1a01004 	mov	r1, r4
    f038:	ebfffaaf 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f03c:	e2443001 	sub	r3, r4, #1
    f040:	e3a00020 	mov	r0, #32
    f044:	e599200c 	ldr	r2, [r9, #12]
    f048:	e2433001 	sub	r3, r3, #1
    f04c:	e3730001 	cmn	r3, #1
    f050:	e2821001 	add	r1, r2, #1
    f054:	e589100c 	str	r1, [r9, #12]
    f058:	e5c20000 	strb	r0, [r2]
    f05c:	1afffff8 	bne	f044 <CString::FormatV(char const*, std::__va_list)+0xb94>
    f060:	eafffd9f 	b	e6e4 <CString::FormatV(char const*, std::__va_list)+0x234>
    f064:	e3a01001 	mov	r1, #1
    f068:	e1a00009 	mov	r0, r9
    f06c:	ebfffaa2 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f070:	e599300c 	ldr	r3, [r9, #12]
    f074:	e35b0001 	cmp	fp, #1
    f078:	e2832001 	add	r2, r3, #1
    f07c:	e589200c 	str	r2, [r9, #12]
    f080:	e5c34000 	strb	r4, [r3]
    f084:	9affffd7 	bls	efe8 <CString::FormatV(char const*, std::__va_list)+0xb38>
    f088:	e1a00009 	mov	r0, r9
    f08c:	e24b1001 	sub	r1, fp, #1
    f090:	ebfffa99 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f094:	e24b3002 	sub	r3, fp, #2
    f098:	e3a00020 	mov	r0, #32
    f09c:	e599200c 	ldr	r2, [r9, #12]
    f0a0:	e2433001 	sub	r3, r3, #1
    f0a4:	e3730001 	cmn	r3, #1
    f0a8:	e2821001 	add	r1, r2, #1
    f0ac:	e589100c 	str	r1, [r9, #12]
    f0b0:	e5c20000 	strb	r0, [r2]
    f0b4:	1afffff8 	bne	f09c <CString::FormatV(char const*, std::__va_list)+0xbec>
    f0b8:	eaffffca 	b	efe8 <CString::FormatV(char const*, std::__va_list)+0xb38>
    f0bc:	e1a0200c 	mov	r2, ip
    f0c0:	e3a03001 	mov	r3, #1
    f0c4:	e1a0100c 	mov	r1, ip
    f0c8:	eafffed2 	b	ec18 <CString::FormatV(char const*, std::__va_list)+0x768>
    f0cc:	e59d4018 	ldr	r4, [sp, #24]
    f0d0:	e3a06001 	mov	r6, #1
    f0d4:	e59d701c 	ldr	r7, [sp, #28]
    f0d8:	eafffdbe 	b	e7d8 <CString::FormatV(char const*, std::__va_list)+0x328>
    f0dc:	e59d3014 	ldr	r3, [sp, #20]
    f0e0:	e3530000 	cmp	r3, #0
    f0e4:	0a000037 	beq	f1c8 <CString::FormatV(char const*, std::__va_list)+0xd18>
    f0e8:	e154000b 	cmp	r4, fp
    f0ec:	2afffe09 	bcs	e918 <CString::FormatV(char const*, std::__va_list)+0x468>
    f0f0:	e04b4004 	sub	r4, fp, r4
    f0f4:	e1a00009 	mov	r0, r9
    f0f8:	e1a01004 	mov	r1, r4
    f0fc:	ebfffa7e 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f100:	e2443001 	sub	r3, r4, #1
    f104:	e3a00030 	mov	r0, #48	; 0x30
    f108:	e599200c 	ldr	r2, [r9, #12]
    f10c:	e2433001 	sub	r3, r3, #1
    f110:	e3730001 	cmn	r3, #1
    f114:	e2821001 	add	r1, r2, #1
    f118:	e589100c 	str	r1, [r9, #12]
    f11c:	e5c20000 	strb	r0, [r2]
    f120:	1afffff8 	bne	f108 <CString::FormatV(char const*, std::__va_list)+0xc58>
    f124:	eafffdfb 	b	e918 <CString::FormatV(char const*, std::__va_list)+0x468>
    f128:	e3a01001 	mov	r1, #1
    f12c:	e1a00009 	mov	r0, r9
    f130:	ebfffa71 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f134:	e599300c 	ldr	r3, [r9, #12]
    f138:	e3a0202d 	mov	r2, #45	; 0x2d
    f13c:	e2831001 	add	r1, r3, #1
    f140:	e589100c 	str	r1, [r9, #12]
    f144:	e5c32000 	strb	r2, [r3]
    f148:	eaffff7a 	b	ef38 <CString::FormatV(char const*, std::__va_list)+0xa88>
    f14c:	e04b4004 	sub	r4, fp, r4
    f150:	e1a00009 	mov	r0, r9
    f154:	e1a01004 	mov	r1, r4
    f158:	ebfffa67 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f15c:	e2443001 	sub	r3, r4, #1
    f160:	e3a00020 	mov	r0, #32
    f164:	e599200c 	ldr	r2, [r9, #12]
    f168:	e2433001 	sub	r3, r3, #1
    f16c:	e3730001 	cmn	r3, #1
    f170:	e2821001 	add	r1, r2, #1
    f174:	e589100c 	str	r1, [r9, #12]
    f178:	e5c20000 	strb	r0, [r2]
    f17c:	1afffff8 	bne	f164 <CString::FormatV(char const*, std::__va_list)+0xcb4>
    f180:	eaffff98 	b	efe8 <CString::FormatV(char const*, std::__va_list)+0xb38>
    f184:	e3a01001 	mov	r1, #1
    f188:	e1a00009 	mov	r0, r9
    f18c:	ebfffa5a 	bl	dafc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f190:	e599300c 	ldr	r3, [r9, #12]
    f194:	e3a0202d 	mov	r2, #45	; 0x2d
    f198:	e2831001 	add	r1, r3, #1
    f19c:	e589100c 	str	r1, [r9, #12]
    f1a0:	e5c32000 	strb	r2, [r3]
    f1a4:	eaffffcf 	b	f0e8 <CString::FormatV(char const*, std::__va_list)+0xc38>
    f1a8:	e59d6000 	ldr	r6, [sp]
    f1ac:	e3a04001 	mov	r4, #1
    f1b0:	e59d7018 	ldr	r7, [sp, #24]
    f1b4:	e3a05000 	mov	r5, #0
    f1b8:	eafffe10 	b	ea00 <CString::FormatV(char const*, std::__va_list)+0x550>
    f1bc:	e1a03001 	mov	r3, r1
    f1c0:	e3a02001 	mov	r2, #1
    f1c4:	eafffee9 	b	ed70 <CString::FormatV(char const*, std::__va_list)+0x8c0>
    f1c8:	e150000b 	cmp	r0, fp
    f1cc:	2afffdd1 	bcs	e918 <CString::FormatV(char const*, std::__va_list)+0x468>
    f1d0:	eaffff09 	b	edfc <CString::FormatV(char const*, std::__va_list)+0x94c>

0000f1d4 <CString::Format(char const*, ...)>:
    f1d4:	e92d000e 	push	{r1, r2, r3}
    f1d8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f1dc:	e24dd008 	sub	sp, sp, #8
    f1e0:	e28d2010 	add	r2, sp, #16
    f1e4:	e59d100c 	ldr	r1, [sp, #12]
    f1e8:	e58d2004 	str	r2, [sp, #4]
    f1ec:	ebfffcaf 	bl	e4b0 <CString::FormatV(char const*, std::__va_list)>
    f1f0:	e28dd008 	add	sp, sp, #8
    f1f4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    f1f8:	e28dd00c 	add	sp, sp, #12
    f1fc:	e12fff1e 	bx	lr

0000f200 <__aeabi_atexit>:
    f200:	e12fff1e 	bx	lr

0000f204 <__errno>:
    f204:	e30701a4 	movw	r0, #29092	; 0x71a4
    f208:	e3400001 	movt	r0, #1
    f20c:	e12fff1e 	bx	lr

0000f210 <set_qemu_exit_status>:
    f210:	e12fff1e 	bx	lr

0000f214 <halt>:
    f214:	f10c0080 	cpsid	i
    f218:	f10c0040 	cpsid	f
    f21c:	f57ff04f 	dsb	sy
    f220:	e320f003 	wfi
    f224:	eafffffc 	b	f21c <halt+0x8>

0000f228 <reboot>:
    f228:	e3a03000 	mov	r3, #0
    f22c:	e3a01001 	mov	r1, #1
    f230:	e3433f10 	movt	r3, #16144	; 0x3f10
    f234:	e3a02020 	mov	r2, #32
    f238:	e3451a00 	movt	r1, #23040	; 0x5a00
    f23c:	e3452a00 	movt	r2, #23040	; 0x5a00
    f240:	e5831024 	str	r1, [r3, #36]	; 0x24
    f244:	e583201c 	str	r2, [r3, #28]
    f248:	eafffffe 	b	f248 <reboot+0x20>

0000f24c <sysinit>:
    f24c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f250:	e24ddf4b 	sub	sp, sp, #300	; 0x12c
    f254:	f1080040 	cpsie	f
    f258:	f1080080 	cpsie	i
    f25c:	eb0007e1 	bl	111e8 <InvalidateDataCacheL1Only>
    f260:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    f264:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    f268:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    f26c:	f57ff06f 	isb	sy
    f270:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    f274:	eee83a10 	vmsr	fpexc, r3
    f278:	e3a03403 	mov	r3, #50331648	; 0x3000000
    f27c:	eee13a10 	vmsr	fpscr, r3
    f280:	e3072230 	movw	r2, #29232	; 0x7230
    f284:	e3070178 	movw	r0, #29048	; 0x7178
    f288:	e3400001 	movt	r0, #1
    f28c:	e3a01000 	mov	r1, #0
    f290:	e3402001 	movt	r2, #1
    f294:	e3075100 	movw	r5, #28928	; 0x7100
    f298:	e0422000 	sub	r2, r2, r0
    f29c:	e30740f4 	movw	r4, #28916	; 0x70f4
    f2a0:	e3405001 	movt	r5, #1
    f2a4:	eb0005a6 	bl	10944 <memset>
    f2a8:	e3404001 	movt	r4, #1
    f2ac:	e28d0010 	add	r0, sp, #16
    f2b0:	ebffed80 	bl	a8b8 <CMachineInfo::CMachineInfo()>
    f2b4:	e3a01001 	mov	r1, #1
    f2b8:	e28d004c 	add	r0, sp, #76	; 0x4c
    f2bc:	eb0009c5 	bl	119d8 <CMemorySystem::CMemorySystem(bool)>
    f2c0:	e1a0000d 	mov	r0, sp
    f2c4:	ebfffa26 	bl	db64 <CString::CString()>
    f2c8:	e305150c 	movw	r1, #21772	; 0x550c
    f2cc:	e3a03001 	mov	r3, #1
    f2d0:	e3401001 	movt	r1, #1
    f2d4:	e3a0202d 	mov	r2, #45	; 0x2d
    f2d8:	e1a0000d 	mov	r0, sp
    f2dc:	ebffffbc 	bl	f1d4 <CString::Format(char const*, ...)>
    f2e0:	e1a0000d 	mov	r0, sp
    f2e4:	ebfffa55 	bl	dc40 <CString::operator char const*() const>
    f2e8:	e1a01000 	mov	r1, r0
    f2ec:	e59f004c 	ldr	r0, [pc, #76]	; f340 <sysinit+0xf4>
    f2f0:	eb000444 	bl	10408 <strcpy>
    f2f4:	e1540005 	cmp	r4, r5
    f2f8:	2a000003 	bcs	f30c <sysinit+0xc0>
    f2fc:	e4943004 	ldr	r3, [r4], #4
    f300:	e12fff33 	blx	r3
    f304:	e1540005 	cmp	r4, r5
    f308:	3afffffb 	bcc	f2fc <sysinit+0xb0>
    f30c:	ebffe357 	bl	8070 <main>
    f310:	e3500001 	cmp	r0, #1
    f314:	0a000000 	beq	f31c <sysinit+0xd0>
    f318:	ebffffbd 	bl	f214 <halt>
    f31c:	eb000689 	bl	10d48 <IsChainBootEnabled>
    f320:	e3500000 	cmp	r0, #0
    f324:	1a000000 	bne	f32c <sysinit+0xe0>
    f328:	ebffffbe 	bl	f228 <reboot>
    f32c:	e28d004c 	add	r0, sp, #76	; 0x4c
    f330:	eb00094e 	bl	11870 <CMemorySystem::Destructor()>
    f334:	f10c0040 	cpsid	f
    f338:	eb000688 	bl	10d60 <DoChainBoot>
    f33c:	eafffff9 	b	f328 <sysinit+0xdc>
    f340:	000171a8 	.word	0x000171a8

0000f344 <CTimer::CTimer(CInterruptSystem*)>:
    f344:	e92d4070 	push	{r4, r5, r6, lr}
    f348:	e1a04000 	mov	r4, r0
    f34c:	e3a05000 	mov	r5, #0
    f350:	e3a06001 	mov	r6, #1
    f354:	e5805004 	str	r5, [r0, #4]
    f358:	e2800018 	add	r0, r0, #24
    f35c:	e5005010 	str	r5, [r0, #-16]
    f360:	e5841000 	str	r1, [r4]
    f364:	e584500c 	str	r5, [r4, #12]
    f368:	e5846010 	str	r6, [r4, #16]
    f36c:	e5845014 	str	r5, [r4, #20]
    f370:	eb00126b 	bl	13d24 <CPtrList::CPtrList()>
    f374:	e584601c 	str	r6, [r4, #28]
    f378:	e30731b8 	movw	r3, #29112	; 0x71b8
    f37c:	e3403001 	movt	r3, #1
    f380:	e3a02d35 	mov	r2, #3392	; 0xd40
    f384:	e3402003 	movt	r2, #3
    f388:	e3a000c8 	mov	r0, #200	; 0xc8
    f38c:	e5931000 	ldr	r1, [r3]
    f390:	e5840024 	str	r0, [r4, #36]	; 0x24
    f394:	e1510005 	cmp	r1, r5
    f398:	e5842020 	str	r2, [r4, #32]
    f39c:	e5845028 	str	r5, [r4, #40]	; 0x28
    f3a0:	e584503c 	str	r5, [r4, #60]	; 0x3c
    f3a4:	1a000002 	bne	f3b4 <CTimer::CTimer(CInterruptSystem*)+0x70>
    f3a8:	e5834000 	str	r4, [r3]
    f3ac:	e1a00004 	mov	r0, r4
    f3b0:	e8bd8070 	pop	{r4, r5, r6, pc}
    f3b4:	e3051514 	movw	r1, #21780	; 0x5514
    f3b8:	e3050520 	movw	r0, #21792	; 0x5520
    f3bc:	e3401001 	movt	r1, #1
    f3c0:	e3a02040 	mov	r2, #64	; 0x40
    f3c4:	e3400001 	movt	r0, #1
    f3c8:	eb000bfb 	bl	123bc <assertion_failed>

0000f3cc <CTimer::~CTimer()>:
    f3cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f3d0:	e1a08000 	mov	r8, r0
    f3d4:	e5900000 	ldr	r0, [r0]
    f3d8:	e3500000 	cmp	r0, #0
    f3dc:	0a00002f 	beq	f4a0 <CTimer::~CTimer()+0xd4>
    f3e0:	e3a03000 	mov	r3, #0
    f3e4:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    f3e8:	e3a01049 	mov	r1, #73	; 0x49
    f3ec:	e2886018 	add	r6, r8, #24
    f3f0:	e3047d43 	movw	r7, #19779	; 0x4d43
    f3f4:	eb000aaa 	bl	11ea4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f3f8:	e3447b54 	movt	r7, #19284	; 0x4b54
    f3fc:	e1a00006 	mov	r0, r6
    f400:	eb001254 	bl	13d58 <CPtrList::GetFirst()>
    f404:	e2504000 	subs	r4, r0, #0
    f408:	0a000011 	beq	f454 <CTimer::~CTimer()+0x88>
    f40c:	e1a01004 	mov	r1, r4
    f410:	e1a00006 	mov	r0, r6
    f414:	eb001267 	bl	13db8 <CPtrList::GetPtr(TPtrListElement*)>
    f418:	e2505000 	subs	r5, r0, #0
    f41c:	0a000013 	beq	f470 <CTimer::~CTimer()+0xa4>
    f420:	e5953000 	ldr	r3, [r5]
    f424:	e1530007 	cmp	r3, r7
    f428:	1a000016 	bne	f488 <CTimer::~CTimer()+0xbc>
    f42c:	e1a01004 	mov	r1, r4
    f430:	e1a00006 	mov	r0, r6
    f434:	eb0012ed 	bl	13ff0 <CPtrList::Remove(TPtrListElement*)>
    f438:	e3a01014 	mov	r1, #20
    f43c:	e1a00005 	mov	r0, r5
    f440:	eb00067b 	bl	10e34 <operator delete(void*, unsigned int)>
    f444:	e1a00006 	mov	r0, r6
    f448:	eb001242 	bl	13d58 <CPtrList::GetFirst()>
    f44c:	e2504000 	subs	r4, r0, #0
    f450:	1affffed 	bne	f40c <CTimer::~CTimer()+0x40>
    f454:	e30731b8 	movw	r3, #29112	; 0x71b8
    f458:	e1a00006 	mov	r0, r6
    f45c:	e3403001 	movt	r3, #1
    f460:	e5834000 	str	r4, [r3]
    f464:	eb001231 	bl	13d30 <CPtrList::~CPtrList()>
    f468:	e1a00008 	mov	r0, r8
    f46c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f470:	e3051514 	movw	r1, #21780	; 0x5514
    f474:	e3050548 	movw	r0, #21832	; 0x5548
    f478:	e3401001 	movt	r1, #1
    f47c:	e3a02057 	mov	r2, #87	; 0x57
    f480:	e3400001 	movt	r0, #1
    f484:	eb000bcc 	bl	123bc <assertion_failed>
    f488:	e3051514 	movw	r1, #21780	; 0x5514
    f48c:	e3050554 	movw	r0, #21844	; 0x5554
    f490:	e3401001 	movt	r1, #1
    f494:	e3a02058 	mov	r2, #88	; 0x58
    f498:	e3400001 	movt	r0, #1
    f49c:	eb000bc6 	bl	123bc <assertion_failed>
    f4a0:	e3051514 	movw	r1, #21780	; 0x5514
    f4a4:	e3050530 	movw	r0, #21808	; 0x5530
    f4a8:	e3401001 	movt	r1, #1
    f4ac:	e3a02046 	mov	r2, #70	; 0x46
    f4b0:	e3400001 	movt	r0, #1
    f4b4:	eb000bc0 	bl	123bc <assertion_failed>

0000f4b8 <CTimer::SetTimeZone(int)>:
    f4b8:	e2813e59 	add	r3, r1, #1424	; 0x590
    f4bc:	e3002b3e 	movw	r2, #2878	; 0xb3e
    f4c0:	e283300f 	add	r3, r3, #15
    f4c4:	e1530002 	cmp	r3, r2
    f4c8:	95801014 	strls	r1, [r0, #20]
    f4cc:	93a00001 	movls	r0, #1
    f4d0:	83a00000 	movhi	r0, #0
    f4d4:	e12fff1e 	bx	lr

0000f4d8 <CTimer::GetTimeZone() const>:
    f4d8:	e5900014 	ldr	r0, [r0, #20]
    f4dc:	e12fff1e 	bx	lr

0000f4e0 <CTimer::SetTime(unsigned int, bool)>:
    f4e0:	e5903014 	ldr	r3, [r0, #20]
    f4e4:	e3520000 	cmp	r2, #0
    f4e8:	e3a0203c 	mov	r2, #60	; 0x3c
    f4ec:	e92d4070 	push	{r4, r5, r6, lr}
    f4f0:	e1a04000 	mov	r4, r0
    f4f4:	e1a05001 	mov	r5, r1
    f4f8:	e0030392 	mul	r3, r2, r3
    f4fc:	1a000002 	bne	f50c <CTimer::SetTime(unsigned int, bool)+0x2c>
    f500:	e3530000 	cmp	r3, #0
    f504:	ba000019 	blt	f570 <CTimer::SetTime(unsigned int, bool)+0x90>
    f508:	e0855003 	add	r5, r5, r3
    f50c:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    f510:	e3520000 	cmp	r2, #0
    f514:	0a000007 	beq	f538 <CTimer::SetTime(unsigned int, bool)+0x58>
    f518:	e594100c 	ldr	r1, [r4, #12]
    f51c:	e0450003 	sub	r0, r5, r3
    f520:	e1530001 	cmp	r3, r1
    f524:	d0411003 	suble	r1, r1, r3
    f528:	c3a01000 	movgt	r1, #0
    f52c:	e12fff32 	blx	r2
    f530:	e3500000 	cmp	r0, #0
    f534:	0a000010 	beq	f57c <CTimer::SetTime(unsigned int, bool)+0x9c>
    f538:	e5940010 	ldr	r0, [r4, #16]
    f53c:	e3500000 	cmp	r0, #0
    f540:	0584500c 	streq	r5, [r4, #12]
    f544:	1a000001 	bne	f550 <CTimer::SetTime(unsigned int, bool)+0x70>
    f548:	e3a00001 	mov	r0, #1
    f54c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f550:	eb0009a1 	bl	11bdc <EnterCritical>
    f554:	e5943010 	ldr	r3, [r4, #16]
    f558:	e584500c 	str	r5, [r4, #12]
    f55c:	e3530000 	cmp	r3, #0
    f560:	0afffff8 	beq	f548 <CTimer::SetTime(unsigned int, bool)+0x68>
    f564:	eb0009c7 	bl	11c88 <LeaveCritical>
    f568:	e3a00001 	mov	r0, #1
    f56c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f570:	e2632000 	rsb	r2, r3, #0
    f574:	e1520001 	cmp	r2, r1
    f578:	daffffe2 	ble	f508 <CTimer::SetTime(unsigned int, bool)+0x28>
    f57c:	e3a00000 	mov	r0, #0
    f580:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f584 <CTimer::GetClockTicks()>:
    f584:	f57ff06f 	isb	sy
    f588:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
    f58c:	e12fff1e 	bx	lr

0000f590 <CTimer::GetTicks() const>:
    f590:	e5900004 	ldr	r0, [r0, #4]
    f594:	e12fff1e 	bx	lr

0000f598 <CTimer::GetUptime() const>:
    f598:	e5900008 	ldr	r0, [r0, #8]
    f59c:	e12fff1e 	bx	lr

0000f5a0 <CTimer::GetTime() const>:
    f5a0:	e590000c 	ldr	r0, [r0, #12]
    f5a4:	e12fff1e 	bx	lr

0000f5a8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    f5a8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f5ac:	e1a04000 	mov	r4, r0
    f5b0:	e5900010 	ldr	r0, [r0, #16]
    f5b4:	e1a06001 	mov	r6, r1
    f5b8:	e1a07002 	mov	r7, r2
    f5bc:	e3500000 	cmp	r0, #0
    f5c0:	1a000011 	bne	f60c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
    f5c4:	e594800c 	ldr	r8, [r4, #12]
    f5c8:	e5945004 	ldr	r5, [r4, #4]
    f5cc:	e3560000 	cmp	r6, #0
    f5d0:	0a000016 	beq	f630 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
    f5d4:	e5868000 	str	r8, [r6]
    f5d8:	e3570000 	cmp	r7, #0
    f5dc:	0a000019 	beq	f648 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
    f5e0:	e308351f 	movw	r3, #34079	; 0x851f
    f5e4:	e3a01064 	mov	r1, #100	; 0x64
    f5e8:	e34531eb 	movt	r3, #20971	; 0x51eb
    f5ec:	e3022710 	movw	r2, #10000	; 0x2710
    f5f0:	e0830593 	umull	r0, r3, r3, r5
    f5f4:	e3a00001 	mov	r0, #1
    f5f8:	e1a032a3 	lsr	r3, r3, #5
    f5fc:	e0655391 	mls	r5, r1, r3, r5
    f600:	e0050592 	mul	r5, r2, r5
    f604:	e5875000 	str	r5, [r7]
    f608:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f60c:	eb000972 	bl	11bdc <EnterCritical>
    f610:	e5943010 	ldr	r3, [r4, #16]
    f614:	e594800c 	ldr	r8, [r4, #12]
    f618:	e5945004 	ldr	r5, [r4, #4]
    f61c:	e3530000 	cmp	r3, #0
    f620:	0affffe9 	beq	f5cc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    f624:	eb000997 	bl	11c88 <LeaveCritical>
    f628:	e3560000 	cmp	r6, #0
    f62c:	1affffe8 	bne	f5d4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    f630:	e3051514 	movw	r1, #21780	; 0x5514
    f634:	e305057c 	movw	r0, #21884	; 0x557c
    f638:	e3401001 	movt	r1, #1
    f63c:	e300210a 	movw	r2, #266	; 0x10a
    f640:	e3400001 	movt	r0, #1
    f644:	eb000b5c 	bl	123bc <assertion_failed>
    f648:	e3051514 	movw	r1, #21780	; 0x5514
    f64c:	e305058c 	movw	r0, #21900	; 0x558c
    f650:	e3401001 	movt	r1, #1
    f654:	e300210d 	movw	r2, #269	; 0x10d
    f658:	e3400001 	movt	r0, #1
    f65c:	eb000b56 	bl	123bc <assertion_failed>

0000f660 <CTimer::GetUniversalTime() const>:
    f660:	e5903014 	ldr	r3, [r0, #20]
    f664:	e3a0203c 	mov	r2, #60	; 0x3c
    f668:	e590000c 	ldr	r0, [r0, #12]
    f66c:	e0030392 	mul	r3, r2, r3
    f670:	e1500003 	cmp	r0, r3
    f674:	a0400003 	subge	r0, r0, r3
    f678:	b3a00000 	movlt	r0, #0
    f67c:	e12fff1e 	bx	lr

0000f680 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    f680:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f684:	e1a04000 	mov	r4, r0
    f688:	e5900010 	ldr	r0, [r0, #16]
    f68c:	e1a05001 	mov	r5, r1
    f690:	e1a06002 	mov	r6, r2
    f694:	e3500000 	cmp	r0, #0
    f698:	1a000019 	bne	f704 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    f69c:	e594700c 	ldr	r7, [r4, #12]
    f6a0:	e5948004 	ldr	r8, [r4, #4]
    f6a4:	e5940014 	ldr	r0, [r4, #20]
    f6a8:	e3a0203c 	mov	r2, #60	; 0x3c
    f6ac:	e0000092 	mul	r0, r2, r0
    f6b0:	e1570000 	cmp	r7, r0
    f6b4:	ba000010 	blt	f6fc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
    f6b8:	e3550000 	cmp	r5, #0
    f6bc:	0a000018 	beq	f724 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
    f6c0:	e0470000 	sub	r0, r7, r0
    f6c4:	e3560000 	cmp	r6, #0
    f6c8:	e5850000 	str	r0, [r5]
    f6cc:	0a00001a 	beq	f73c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
    f6d0:	e308351f 	movw	r3, #34079	; 0x851f
    f6d4:	e3a01064 	mov	r1, #100	; 0x64
    f6d8:	e34531eb 	movt	r3, #20971	; 0x51eb
    f6dc:	e3022710 	movw	r2, #10000	; 0x2710
    f6e0:	e0830893 	umull	r0, r3, r3, r8
    f6e4:	e3a00001 	mov	r0, #1
    f6e8:	e1a032a3 	lsr	r3, r3, #5
    f6ec:	e0638391 	mls	r3, r1, r3, r8
    f6f0:	e0030392 	mul	r3, r2, r3
    f6f4:	e5863000 	str	r3, [r6]
    f6f8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f6fc:	e3a00000 	mov	r0, #0
    f700:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f704:	eb000934 	bl	11bdc <EnterCritical>
    f708:	e5943010 	ldr	r3, [r4, #16]
    f70c:	e594700c 	ldr	r7, [r4, #12]
    f710:	e5948004 	ldr	r8, [r4, #4]
    f714:	e3530000 	cmp	r3, #0
    f718:	0affffe1 	beq	f6a4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f71c:	eb000959 	bl	11c88 <LeaveCritical>
    f720:	eaffffdf 	b	f6a4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f724:	e3051514 	movw	r1, #21780	; 0x5514
    f728:	e305057c 	movw	r0, #21884	; 0x557c
    f72c:	e3401001 	movt	r1, #1
    f730:	e300212f 	movw	r2, #303	; 0x12f
    f734:	e3400001 	movt	r0, #1
    f738:	eb000b1f 	bl	123bc <assertion_failed>
    f73c:	e3051514 	movw	r1, #21780	; 0x5514
    f740:	e305058c 	movw	r0, #21900	; 0x558c
    f744:	e3401001 	movt	r1, #1
    f748:	e3002132 	movw	r2, #306	; 0x132
    f74c:	e3400001 	movt	r0, #1
    f750:	eb000b19 	bl	123bc <assertion_failed>

0000f754 <CTimer::GetTimeString()>:
    f754:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f758:	e1a04000 	mov	r4, r0
    f75c:	e5900010 	ldr	r0, [r0, #16]
    f760:	e24dd014 	sub	sp, sp, #20
    f764:	e3500000 	cmp	r0, #0
    f768:	1a000067 	bne	f90c <CTimer::GetTimeString()+0x1b8>
    f76c:	e594500c 	ldr	r5, [r4, #12]
    f770:	e594a004 	ldr	sl, [r4, #4]
    f774:	e195000a 	orrs	r0, r5, sl
    f778:	01a0a000 	moveq	sl, r0
    f77c:	0a000054 	beq	f8d4 <CTimer::GetTimeString()+0x180>
    f780:	e3089889 	movw	r9, #34953	; 0x8889
    f784:	e30a4aab 	movw	r4, #43691	; 0xaaab
    f788:	e3489888 	movt	r9, #34952	; 0x8888
    f78c:	e305cc29 	movw	ip, #23593	; 0x5c29
    f790:	e0832599 	umull	r2, r3, r9, r5
    f794:	e34a4aaa 	movt	r4, #43690	; 0xaaaa
    f798:	e30067b2 	movw	r6, #1970	; 0x7b2
    f79c:	e1a072a3 	lsr	r7, r3, #5
    f7a0:	e300e16d 	movw	lr, #365	; 0x16d
    f7a4:	e0892799 	umull	r2, r9, r9, r7
    f7a8:	e34cc28f 	movt	ip, #49807	; 0xc28f
    f7ac:	e3a0203c 	mov	r2, #60	; 0x3c
    f7b0:	e1a082a9 	lsr	r8, r9, #5
    f7b4:	e1a03007 	mov	r3, r7
    f7b8:	e0841894 	umull	r1, r4, r4, r8
    f7bc:	e0675792 	mls	r7, r2, r7, r5
    f7c0:	e0693892 	mls	r9, r2, r8, r3
    f7c4:	e30d570a 	movw	r5, #55050	; 0xd70a
    f7c8:	e3052c28 	movw	r2, #23592	; 0x5c28
    f7cc:	e1a04224 	lsr	r4, r4, #4
    f7d0:	e340228f 	movt	r2, #655	; 0x28f
    f7d4:	e34050a3 	movt	r5, #163	; 0xa3
    f7d8:	ea000007 	b	f7fc <CTimer::GetTimeString()+0xa8>
    f7dc:	e3160003 	tst	r6, #3
    f7e0:	03a01001 	moveq	r1, #1
    f7e4:	13a01000 	movne	r1, #0
    f7e8:	e081000e 	add	r0, r1, lr
    f7ec:	e1540000 	cmp	r4, r0
    f7f0:	3a00000a 	bcc	f820 <CTimer::GetTimeString()+0xcc>
    f7f4:	e0444000 	sub	r4, r4, r0
    f7f8:	e2866001 	add	r6, r6, #1
    f7fc:	e003069c 	mul	r3, ip, r6
    f800:	e1520163 	cmp	r2, r3, ror #2
    f804:	3afffff4 	bcc	f7dc <CTimer::GetTimeString()+0x88>
    f808:	e1550263 	cmp	r5, r3, ror #4
    f80c:	23a01001 	movcs	r1, #1
    f810:	33a01000 	movcc	r1, #0
    f814:	e081000e 	add	r0, r1, lr
    f818:	e1540000 	cmp	r4, r0
    f81c:	2afffff4 	bcs	f7f4 <CTimer::GetTimeString()+0xa0>
    f820:	e3052714 	movw	r2, #22292	; 0x5714
    f824:	e3a05000 	mov	r5, #0
    f828:	e3402001 	movt	r2, #1
    f82c:	ea000001 	b	f838 <CTimer::GetTimeString()+0xe4>
    f830:	e0444000 	sub	r4, r4, r0
    f834:	e2855001 	add	r5, r5, #1
    f838:	e3550001 	cmp	r5, #1
    f83c:	13a03000 	movne	r3, #0
    f840:	02013001 	andeq	r3, r1, #1
    f844:	e3530000 	cmp	r3, #0
    f848:	13a0001d 	movne	r0, #29
    f84c:	07920105 	ldreq	r0, [r2, r5, lsl #2]
    f850:	e1540000 	cmp	r4, r0
    f854:	2afffff5 	bcs	f830 <CTimer::GetTimeString()+0xdc>
    f858:	e308b51f 	movw	fp, #34079	; 0x851f
    f85c:	e3a00010 	mov	r0, #16
    f860:	e345b1eb 	movt	fp, #20971	; 0x51eb
    f864:	e08b3a9b 	umull	r3, fp, fp, sl
    f868:	e3a03064 	mov	r3, #100	; 0x64
    f86c:	e1a0b2ab 	lsr	fp, fp, #5
    f870:	e06bab93 	mls	fp, r3, fp, sl
    f874:	eb000556 	bl	10dd4 <operator new(unsigned int)>
    f878:	e1a0a000 	mov	sl, r0
    f87c:	ebfff8b8 	bl	db64 <CString::CString()>
    f880:	e30037b7 	movw	r3, #1975	; 0x7b7
    f884:	e1560003 	cmp	r6, r3
    f888:	9a000014 	bls	f8e0 <CTimer::GetTimeString()+0x18c>
    f88c:	e58db00c 	str	fp, [sp, #12]
    f890:	e30a2aab 	movw	r2, #43691	; 0xaaab
    f894:	e34a2aaa 	movt	r2, #43690	; 0xaaaa
    f898:	e2843001 	add	r3, r4, #1
    f89c:	e0821892 	umull	r1, r2, r2, r8
    f8a0:	e58d7008 	str	r7, [sp, #8]
    f8a4:	e3a01018 	mov	r1, #24
    f8a8:	e1a02222 	lsr	r2, r2, #4
    f8ac:	e1a0000a 	mov	r0, sl
    f8b0:	e0688291 	mls	r8, r1, r2, r8
    f8b4:	e58d9004 	str	r9, [sp, #4]
    f8b8:	e3072108 	movw	r2, #28936	; 0x7108
    f8bc:	e3402001 	movt	r2, #1
    f8c0:	e30515a0 	movw	r1, #21920	; 0x55a0
    f8c4:	e58d8000 	str	r8, [sp]
    f8c8:	e3401001 	movt	r1, #1
    f8cc:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    f8d0:	ebfffe3f 	bl	f1d4 <CString::Format(char const*, ...)>
    f8d4:	e1a0000a 	mov	r0, sl
    f8d8:	e28dd014 	add	sp, sp, #20
    f8dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8e0:	e58db004 	str	fp, [sp, #4]
    f8e4:	e30515bc 	movw	r1, #21948	; 0x55bc
    f8e8:	e3401001 	movt	r1, #1
    f8ec:	e1a0000a 	mov	r0, sl
    f8f0:	e58d7000 	str	r7, [sp]
    f8f4:	e1a03009 	mov	r3, r9
    f8f8:	e1a02008 	mov	r2, r8
    f8fc:	ebfffe34 	bl	f1d4 <CString::Format(char const*, ...)>
    f900:	e1a0000a 	mov	r0, sl
    f904:	e28dd014 	add	sp, sp, #20
    f908:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f90c:	eb0008b2 	bl	11bdc <EnterCritical>
    f910:	e5943010 	ldr	r3, [r4, #16]
    f914:	e594500c 	ldr	r5, [r4, #12]
    f918:	e594a004 	ldr	sl, [r4, #4]
    f91c:	e3530000 	cmp	r3, #0
    f920:	0affff93 	beq	f774 <CTimer::GetTimeString()+0x20>
    f924:	eb0008d7 	bl	11c88 <LeaveCritical>
    f928:	eaffff91 	b	f774 <CTimer::GetTimeString()+0x20>

0000f92c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    f92c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f930:	e1a07000 	mov	r7, r0
    f934:	e1a04002 	mov	r4, r2
    f938:	e3a00014 	mov	r0, #20
    f93c:	e1a06001 	mov	r6, r1
    f940:	e1a08003 	mov	r8, r3
    f944:	eb000522 	bl	10dd4 <operator new(unsigned int)>
    f948:	e5971004 	ldr	r1, [r7, #4]
    f94c:	e3540000 	cmp	r4, #0
    f950:	e0816006 	add	r6, r1, r6
    f954:	0a00003c 	beq	fa4c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    f958:	e5804004 	str	r4, [r0, #4]
    f95c:	e1a05000 	mov	r5, r0
    f960:	e59d3020 	ldr	r3, [sp, #32]
    f964:	e597001c 	ldr	r0, [r7, #28]
    f968:	e5853010 	str	r3, [r5, #16]
    f96c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f970:	e3443b54 	movt	r3, #19284	; 0x4b54
    f974:	e3500000 	cmp	r0, #0
    f978:	e5856008 	str	r6, [r5, #8]
    f97c:	e585800c 	str	r8, [r5, #12]
    f980:	e5853000 	str	r3, [r5]
    f984:	1a000025 	bne	fa20 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
    f988:	e2874018 	add	r4, r7, #24
    f98c:	e1a00004 	mov	r0, r4
    f990:	eb0010f0 	bl	13d58 <CPtrList::GetFirst()>
    f994:	e2509000 	subs	r9, r0, #0
    f998:	0a000033 	beq	fa6c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    f99c:	e3048d43 	movw	r8, #19779	; 0x4d43
    f9a0:	e3448b54 	movt	r8, #19284	; 0x4b54
    f9a4:	e1a01009 	mov	r1, r9
    f9a8:	e1a00004 	mov	r0, r4
    f9ac:	eb001101 	bl	13db8 <CPtrList::GetPtr(TPtrListElement*)>
    f9b0:	e3500000 	cmp	r0, #0
    f9b4:	0a00000d 	beq	f9f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
    f9b8:	e5903000 	ldr	r3, [r0]
    f9bc:	e1530008 	cmp	r3, r8
    f9c0:	1a000010 	bne	fa08 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    f9c4:	e5903008 	ldr	r3, [r0, #8]
    f9c8:	e0433006 	sub	r3, r3, r6
    f9cc:	e3530000 	cmp	r3, #0
    f9d0:	ca000014 	bgt	fa28 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    f9d4:	e1a01009 	mov	r1, r9
    f9d8:	e1a00004 	mov	r0, r4
    f9dc:	eb0010df 	bl	13d60 <CPtrList::GetNext(TPtrListElement*)>
    f9e0:	e3500000 	cmp	r0, #0
    f9e4:	0a000020 	beq	fa6c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    f9e8:	e1a09000 	mov	r9, r0
    f9ec:	eaffffec 	b	f9a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
    f9f0:	e3051514 	movw	r1, #21780	; 0x5514
    f9f4:	e30505d0 	movw	r0, #21968	; 0x55d0
    f9f8:	e3401001 	movt	r1, #1
    f9fc:	e3002199 	movw	r2, #409	; 0x199
    fa00:	e3400001 	movt	r0, #1
    fa04:	eb000a6c 	bl	123bc <assertion_failed>
    fa08:	e3051514 	movw	r1, #21780	; 0x5514
    fa0c:	e30505e0 	movw	r0, #21984	; 0x55e0
    fa10:	e3401001 	movt	r1, #1
    fa14:	e300219a 	movw	r2, #410	; 0x19a
    fa18:	e3400001 	movt	r0, #1
    fa1c:	eb000a66 	bl	123bc <assertion_failed>
    fa20:	eb00086d 	bl	11bdc <EnterCritical>
    fa24:	eaffffd7 	b	f988 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
    fa28:	e1a02005 	mov	r2, r5
    fa2c:	e1a01009 	mov	r1, r9
    fa30:	e1a00004 	mov	r0, r4
    fa34:	eb0010f5 	bl	13e10 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    fa38:	e597301c 	ldr	r3, [r7, #28]
    fa3c:	e3530000 	cmp	r3, #0
    fa40:	1a000007 	bne	fa64 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    fa44:	e1a00005 	mov	r0, r5
    fa48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fa4c:	e3051514 	movw	r1, #21780	; 0x5514
    fa50:	e3050abc 	movw	r0, #23228	; 0x5abc
    fa54:	e3401001 	movt	r1, #1
    fa58:	e3002189 	movw	r2, #393	; 0x189
    fa5c:	e3400001 	movt	r0, #1
    fa60:	eb000a55 	bl	123bc <assertion_failed>
    fa64:	eb000887 	bl	11c88 <LeaveCritical>
    fa68:	eafffff5 	b	fa44 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    fa6c:	e1a02005 	mov	r2, r5
    fa70:	e1a01009 	mov	r1, r9
    fa74:	e1a00004 	mov	r0, r4
    fa78:	eb001120 	bl	13f00 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    fa7c:	eaffffed 	b	fa38 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>

0000fa80 <CTimer::CancelKernelTimer(unsigned int)>:
    fa80:	e92d4070 	push	{r4, r5, r6, lr}
    fa84:	e2514000 	subs	r4, r1, #0
    fa88:	0a00001a 	beq	faf8 <CTimer::CancelKernelTimer(unsigned int)+0x78>
    fa8c:	e1a05000 	mov	r5, r0
    fa90:	e590001c 	ldr	r0, [r0, #28]
    fa94:	e3500000 	cmp	r0, #0
    fa98:	1a000014 	bne	faf0 <CTimer::CancelKernelTimer(unsigned int)+0x70>
    fa9c:	e2856018 	add	r6, r5, #24
    faa0:	e1a01004 	mov	r1, r4
    faa4:	e1a00006 	mov	r0, r6
    faa8:	eb00119a 	bl	14118 <CPtrList::Find(void*)>
    faac:	e2501000 	subs	r1, r0, #0
    fab0:	0a000009 	beq	fadc <CTimer::CancelKernelTimer(unsigned int)+0x5c>
    fab4:	e5942000 	ldr	r2, [r4]
    fab8:	e3043d43 	movw	r3, #19779	; 0x4d43
    fabc:	e3443b54 	movt	r3, #19284	; 0x4b54
    fac0:	e1520003 	cmp	r2, r3
    fac4:	1a000011 	bne	fb10 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    fac8:	e1a00006 	mov	r0, r6
    facc:	eb001147 	bl	13ff0 <CPtrList::Remove(TPtrListElement*)>
    fad0:	e3a01014 	mov	r1, #20
    fad4:	e1a00004 	mov	r0, r4
    fad8:	eb0004d5 	bl	10e34 <operator delete(void*, unsigned int)>
    fadc:	e595301c 	ldr	r3, [r5, #28]
    fae0:	e3530000 	cmp	r3, #0
    fae4:	08bd8070 	popeq	{r4, r5, r6, pc}
    fae8:	e8bd4070 	pop	{r4, r5, r6, lr}
    faec:	ea000865 	b	11c88 <LeaveCritical>
    faf0:	eb000839 	bl	11bdc <EnterCritical>
    faf4:	eaffffe8 	b	fa9c <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    faf8:	e3051514 	movw	r1, #21780	; 0x5514
    fafc:	e3050548 	movw	r0, #21832	; 0x5548
    fb00:	e3401001 	movt	r1, #1
    fb04:	e30021b6 	movw	r2, #438	; 0x1b6
    fb08:	e3400001 	movt	r0, #1
    fb0c:	eb000a2a 	bl	123bc <assertion_failed>
    fb10:	e3051514 	movw	r1, #21780	; 0x5514
    fb14:	e3050554 	movw	r0, #21844	; 0x5554
    fb18:	e3401001 	movt	r1, #1
    fb1c:	e30021bd 	movw	r2, #445	; 0x1bd
    fb20:	e3400001 	movt	r0, #1
    fb24:	eb000a24 	bl	123bc <assertion_failed>

0000fb28 <CTimer::PollKernelTimers()>:
    fb28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fb2c:	e1a06000 	mov	r6, r0
    fb30:	e590001c 	ldr	r0, [r0, #28]
    fb34:	e3500000 	cmp	r0, #0
    fb38:	1a00003e 	bne	fc38 <CTimer::PollKernelTimers()+0x110>
    fb3c:	e2867018 	add	r7, r6, #24
    fb40:	e1a00007 	mov	r0, r7
    fb44:	eb001083 	bl	13d58 <CPtrList::GetFirst()>
    fb48:	e2505000 	subs	r5, r0, #0
    fb4c:	0a000028 	beq	fbf4 <CTimer::PollKernelTimers()+0xcc>
    fb50:	e3048d43 	movw	r8, #19779	; 0x4d43
    fb54:	e3448b54 	movt	r8, #19284	; 0x4b54
    fb58:	e1a01005 	mov	r1, r5
    fb5c:	e1a00007 	mov	r0, r7
    fb60:	eb001094 	bl	13db8 <CPtrList::GetPtr(TPtrListElement*)>
    fb64:	e2504000 	subs	r4, r0, #0
    fb68:	0a000034 	beq	fc40 <CTimer::PollKernelTimers()+0x118>
    fb6c:	e5943000 	ldr	r3, [r4]
    fb70:	e1530008 	cmp	r3, r8
    fb74:	1a000037 	bne	fc58 <CTimer::PollKernelTimers()+0x130>
    fb78:	e5962004 	ldr	r2, [r6, #4]
    fb7c:	e5943008 	ldr	r3, [r4, #8]
    fb80:	e0433002 	sub	r3, r3, r2
    fb84:	e3530000 	cmp	r3, #0
    fb88:	ca000019 	bgt	fbf4 <CTimer::PollKernelTimers()+0xcc>
    fb8c:	e1a01005 	mov	r1, r5
    fb90:	e1a00007 	mov	r0, r7
    fb94:	eb001071 	bl	13d60 <CPtrList::GetNext(TPtrListElement*)>
    fb98:	e1a03000 	mov	r3, r0
    fb9c:	e1a01005 	mov	r1, r5
    fba0:	e1a00007 	mov	r0, r7
    fba4:	e1a05003 	mov	r5, r3
    fba8:	eb001110 	bl	13ff0 <CPtrList::Remove(TPtrListElement*)>
    fbac:	e596301c 	ldr	r3, [r6, #28]
    fbb0:	e3530000 	cmp	r3, #0
    fbb4:	1a000013 	bne	fc08 <CTimer::PollKernelTimers()+0xe0>
    fbb8:	e5943004 	ldr	r3, [r4, #4]
    fbbc:	e3530000 	cmp	r3, #0
    fbc0:	0a000014 	beq	fc18 <CTimer::PollKernelTimers()+0xf0>
    fbc4:	e5942010 	ldr	r2, [r4, #16]
    fbc8:	e1a00004 	mov	r0, r4
    fbcc:	e594100c 	ldr	r1, [r4, #12]
    fbd0:	e12fff33 	blx	r3
    fbd4:	e1a00004 	mov	r0, r4
    fbd8:	e3a01014 	mov	r1, #20
    fbdc:	eb000494 	bl	10e34 <operator delete(void*, unsigned int)>
    fbe0:	e596001c 	ldr	r0, [r6, #28]
    fbe4:	e3500000 	cmp	r0, #0
    fbe8:	1a000010 	bne	fc30 <CTimer::PollKernelTimers()+0x108>
    fbec:	e3550000 	cmp	r5, #0
    fbf0:	1affffd8 	bne	fb58 <CTimer::PollKernelTimers()+0x30>
    fbf4:	e596301c 	ldr	r3, [r6, #28]
    fbf8:	e3530000 	cmp	r3, #0
    fbfc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fc00:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    fc04:	ea00081f 	b	11c88 <LeaveCritical>
    fc08:	eb00081e 	bl	11c88 <LeaveCritical>
    fc0c:	e5943004 	ldr	r3, [r4, #4]
    fc10:	e3530000 	cmp	r3, #0
    fc14:	1affffea 	bne	fbc4 <CTimer::PollKernelTimers()+0x9c>
    fc18:	e3051514 	movw	r1, #21780	; 0x5514
    fc1c:	e3050abc 	movw	r0, #23228	; 0x5abc
    fc20:	e3401001 	movt	r1, #1
    fc24:	e30021e1 	movw	r2, #481	; 0x1e1
    fc28:	e3400001 	movt	r0, #1
    fc2c:	eb0009e2 	bl	123bc <assertion_failed>
    fc30:	eb0007e9 	bl	11bdc <EnterCritical>
    fc34:	eaffffec 	b	fbec <CTimer::PollKernelTimers()+0xc4>
    fc38:	eb0007e7 	bl	11bdc <EnterCritical>
    fc3c:	eaffffbe 	b	fb3c <CTimer::PollKernelTimers()+0x14>
    fc40:	e3051514 	movw	r1, #21780	; 0x5514
    fc44:	e3050548 	movw	r0, #21832	; 0x5548
    fc48:	e3401001 	movt	r1, #1
    fc4c:	e30021d2 	movw	r2, #466	; 0x1d2
    fc50:	e3400001 	movt	r0, #1
    fc54:	eb0009d8 	bl	123bc <assertion_failed>
    fc58:	e3051514 	movw	r1, #21780	; 0x5514
    fc5c:	e3050554 	movw	r0, #21844	; 0x5554
    fc60:	e3401001 	movt	r1, #1
    fc64:	e30021d3 	movw	r2, #467	; 0x1d3
    fc68:	e3400001 	movt	r0, #1
    fc6c:	eb0009d2 	bl	123bc <assertion_failed>

0000fc70 <CTimer::InterruptHandler()>:
    fc70:	e92d4070 	push	{r4, r5, r6, lr}
    fc74:	e1a04000 	mov	r4, r0
    fc78:	ec5e3f2e 	mrrc	15, 2, r3, lr, cr14
    fc7c:	e3022710 	movw	r2, #10000	; 0x2710
    fc80:	e3a0c000 	mov	ip, #0
    fc84:	e0933002 	adds	r3, r3, r2
    fc88:	e1a0100c 	mov	r1, ip
    fc8c:	e2ae2000 	adc	r2, lr, #0
    fc90:	e1a00003 	mov	r0, r3
    fc94:	e1a0300c 	mov	r3, ip
    fc98:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
    fc9c:	e5940010 	ldr	r0, [r4, #16]
    fca0:	e150000c 	cmp	r0, ip
    fca4:	1a000018 	bne	fd0c <CTimer::InterruptHandler()+0x9c>
    fca8:	e5942004 	ldr	r2, [r4, #4]
    fcac:	e308351f 	movw	r3, #34079	; 0x851f
    fcb0:	e34531eb 	movt	r3, #20971	; 0x51eb
    fcb4:	e3a01064 	mov	r1, #100	; 0x64
    fcb8:	e2822001 	add	r2, r2, #1
    fcbc:	e0830293 	umull	r0, r3, r3, r2
    fcc0:	e5842004 	str	r2, [r4, #4]
    fcc4:	e1a032a3 	lsr	r3, r3, #5
    fcc8:	e0632391 	mls	r3, r1, r3, r2
    fccc:	e3530000 	cmp	r3, #0
    fcd0:	0a000019 	beq	fd3c <CTimer::InterruptHandler()+0xcc>
    fcd4:	e1a00004 	mov	r0, r4
    fcd8:	ebffff92 	bl	fb28 <CTimer::PollKernelTimers()>
    fcdc:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    fce0:	e3530000 	cmp	r3, #0
    fce4:	08bd8070 	popeq	{r4, r5, r6, pc}
    fce8:	e284602c 	add	r6, r4, #44	; 0x2c
    fcec:	e3a05000 	mov	r5, #0
    fcf0:	e4963004 	ldr	r3, [r6], #4
    fcf4:	e2855001 	add	r5, r5, #1
    fcf8:	e12fff33 	blx	r3
    fcfc:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    fd00:	e1530005 	cmp	r3, r5
    fd04:	8afffff9 	bhi	fcf0 <CTimer::InterruptHandler()+0x80>
    fd08:	e8bd8070 	pop	{r4, r5, r6, pc}
    fd0c:	eb0007b2 	bl	11bdc <EnterCritical>
    fd10:	e5941004 	ldr	r1, [r4, #4]
    fd14:	e3052c29 	movw	r2, #23593	; 0x5c29
    fd18:	e34c228f 	movt	r2, #49807	; 0xc28f
    fd1c:	e3050c28 	movw	r0, #23592	; 0x5c28
    fd20:	e340028f 	movt	r0, #655	; 0x28f
    fd24:	e2811001 	add	r1, r1, #1
    fd28:	e0020192 	mul	r2, r2, r1
    fd2c:	e5943010 	ldr	r3, [r4, #16]
    fd30:	e1500162 	cmp	r0, r2, ror #2
    fd34:	e5841004 	str	r1, [r4, #4]
    fd38:	3a000005 	bcc	fd54 <CTimer::InterruptHandler()+0xe4>
    fd3c:	e5942008 	ldr	r2, [r4, #8]
    fd40:	e2822001 	add	r2, r2, #1
    fd44:	e5842008 	str	r2, [r4, #8]
    fd48:	e594200c 	ldr	r2, [r4, #12]
    fd4c:	e2822001 	add	r2, r2, #1
    fd50:	e584200c 	str	r2, [r4, #12]
    fd54:	e3530000 	cmp	r3, #0
    fd58:	0affffdd 	beq	fcd4 <CTimer::InterruptHandler()+0x64>
    fd5c:	eb0007c9 	bl	11c88 <LeaveCritical>
    fd60:	eaffffdb 	b	fcd4 <CTimer::InterruptHandler()+0x64>

0000fd64 <CTimer::InterruptHandler(void*)>:
    fd64:	e3500000 	cmp	r0, #0
    fd68:	0a000000 	beq	fd70 <CTimer::InterruptHandler(void*)+0xc>
    fd6c:	eaffffbf 	b	fc70 <CTimer::InterruptHandler()>
    fd70:	e3051514 	movw	r1, #21780	; 0x5514
    fd74:	e3050608 	movw	r0, #22024	; 0x5608
    fd78:	e3401001 	movt	r1, #1
    fd7c:	e3a02f8a 	mov	r2, #552	; 0x228
    fd80:	e3400001 	movt	r0, #1
    fd84:	e92d4010 	push	{r4, lr}
    fd88:	eb00098b 	bl	123bc <assertion_failed>

0000fd8c <CTimer::TuneMsDelay()>:
    fd8c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fd90:	e1a06000 	mov	r6, r0
    fd94:	e5900020 	ldr	r0, [r0, #32]
    fd98:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    fd9c:	e5967004 	ldr	r7, [r6, #4]
    fda0:	e24dd00c 	sub	sp, sp, #12
    fda4:	e0000092 	mul	r0, r2, r0
    fda8:	e3025710 	movw	r5, #10000	; 0x2710
    fdac:	eb000bc7 	bl	12cd0 <DelayLoop>
    fdb0:	e5962004 	ldr	r2, [r6, #4]
    fdb4:	e308451f 	movw	r4, #34079	; 0x851f
    fdb8:	e5963020 	ldr	r3, [r6, #32]
    fdbc:	e0422007 	sub	r2, r2, r7
    fdc0:	e34541eb 	movt	r4, #20971	; 0x51eb
    fdc4:	e735f215 	udiv	r5, r5, r2
    fdc8:	e0030593 	mul	r3, r3, r5
    fdcc:	e0832394 	umull	r2, r3, r4, r3
    fdd0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
    fdd4:	e1a032a3 	lsr	r3, r3, #5
    fdd8:	e3412062 	movt	r2, #4194	; 0x1062
    fddc:	e5863020 	str	r3, [r6, #32]
    fde0:	e2833f7d 	add	r3, r3, #500	; 0x1f4
    fde4:	e0832392 	umull	r2, r3, r2, r3
    fde8:	e1a03323 	lsr	r3, r3, #6
    fdec:	e5863024 	str	r3, [r6, #36]	; 0x24
    fdf0:	e0843594 	umull	r3, r4, r4, r5
    fdf4:	ebffe8b0 	bl	a0bc <CLogger::Get()>
    fdf8:	e1a042a4 	lsr	r4, r4, #5
    fdfc:	e3a03064 	mov	r3, #100	; 0x64
    fe00:	e0655493 	mls	r5, r3, r4, r5
    fe04:	e59f1018 	ldr	r1, [pc, #24]	; fe24 <CTimer::TuneMsDelay()+0x98>
    fe08:	e3053614 	movw	r3, #22036	; 0x5614
    fe0c:	e3403001 	movt	r3, #1
    fe10:	e3a02003 	mov	r2, #3
    fe14:	e1cd40f0 	strd	r4, [sp]
    fe18:	ebffea86 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fe1c:	e28dd00c 	add	sp, sp, #12
    fe20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fe24:	00015744 	.word	0x00015744

0000fe28 <CTimer::Initialize()>:
    fe28:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fe2c:	e1a04000 	mov	r4, r0
    fe30:	e5900000 	ldr	r0, [r0]
    fe34:	e24dd00c 	sub	sp, sp, #12
    fe38:	e3500000 	cmp	r0, #0
    fe3c:	0a000028 	beq	fee4 <CTimer::Initialize()+0xbc>
    fe40:	e30f2d64 	movw	r2, #64868	; 0xfd64
    fe44:	e1a03004 	mov	r3, r4
    fe48:	e3402000 	movt	r2, #0
    fe4c:	e3a01049 	mov	r1, #73	; 0x49
    fe50:	eb0007e0 	bl	11dd8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    fe54:	ec5c3f0e 	mrrc	15, 0, r3, ip, cr14
    fe58:	e3022710 	movw	r2, #10000	; 0x2710
    fe5c:	e3a05000 	mov	r5, #0
    fe60:	e0933002 	adds	r3, r3, r2
    fe64:	e1a01005 	mov	r1, r5
    fe68:	e1a00003 	mov	r0, r3
    fe6c:	e1a07005 	mov	r7, r5
    fe70:	e2ac6000 	adc	r6, ip, #0
    fe74:	ec460f2e 	mcrr	15, 2, r0, r6, cr14
    fe78:	e3a03001 	mov	r3, #1
    fe7c:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    fe80:	e1a00004 	mov	r0, r4
    fe84:	ebffffc0 	bl	fd8c <CTimer::TuneMsDelay()>
    fe88:	ee1e4f10 	mrc	15, 0, r4, cr14, cr0, {0}
    fe8c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    fe90:	e3a02b3e 	mov	r2, #63488	; 0xf800
    fe94:	e3402124 	movt	r2, #292	; 0x124
    fe98:	e30a3aab 	movw	r3, #43691	; 0xaaab
    fe9c:	e5916008 	ldr	r6, [r1, #8]
    fea0:	e34036aa 	movt	r3, #1706	; 0x6aa
    fea4:	e1560003 	cmp	r6, r3
    fea8:	01540002 	cmpeq	r4, r2
    feac:	1a000002 	bne	febc <CTimer::Initialize()+0x94>
    feb0:	e3a00001 	mov	r0, #1
    feb4:	e28dd00c 	add	sp, sp, #12
    feb8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    febc:	ebffe87e 	bl	a0bc <CLogger::Get()>
    fec0:	e59f1034 	ldr	r1, [pc, #52]	; fefc <CTimer::Initialize()+0xd4>
    fec4:	e305362c 	movw	r3, #22060	; 0x562c
    fec8:	e3403001 	movt	r3, #1
    fecc:	e1a02005 	mov	r2, r5
    fed0:	e88d0050 	stm	sp, {r4, r6}
    fed4:	ebffea57 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fed8:	e3a00001 	mov	r0, #1
    fedc:	e28dd00c 	add	sp, sp, #12
    fee0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fee4:	e3051514 	movw	r1, #21780	; 0x5514
    fee8:	e3050530 	movw	r0, #21808	; 0x5530
    feec:	e3401001 	movt	r1, #1
    fef0:	e3a02064 	mov	r2, #100	; 0x64
    fef4:	e3400001 	movt	r0, #1
    fef8:	eb00092f 	bl	123bc <assertion_failed>
    fefc:	00015744 	.word	0x00015744

0000ff00 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
    ff00:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    ff04:	e92d4010 	push	{r4, lr}
    ff08:	e3530000 	cmp	r3, #0
    ff0c:	1a000008 	bne	ff34 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
    ff10:	e5801028 	str	r1, [r0, #40]	; 0x28
    ff14:	e3510000 	cmp	r1, #0
    ff18:	18bd8010 	popne	{r4, pc}
    ff1c:	e3051514 	movw	r1, #21780	; 0x5514
    ff20:	e3050684 	movw	r0, #22148	; 0x5684
    ff24:	e3401001 	movt	r1, #1
    ff28:	e3a02d09 	mov	r2, #576	; 0x240
    ff2c:	e3400001 	movt	r0, #1
    ff30:	eb000921 	bl	123bc <assertion_failed>
    ff34:	e3051514 	movw	r1, #21780	; 0x5514
    ff38:	e3050668 	movw	r0, #22120	; 0x5668
    ff3c:	e3401001 	movt	r1, #1
    ff40:	e300223e 	movw	r2, #574	; 0x23e
    ff44:	e3400001 	movt	r0, #1
    ff48:	eb00091b 	bl	123bc <assertion_failed>

0000ff4c <CTimer::RegisterPeriodicHandler(void (*)())>:
    ff4c:	e3510000 	cmp	r1, #0
    ff50:	e92d4010 	push	{r4, lr}
    ff54:	0a00000a 	beq	ff84 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
    ff58:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    ff5c:	e3530003 	cmp	r3, #3
    ff60:	8a00000d 	bhi	ff9c <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
    ff64:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    ff68:	e0803103 	add	r3, r0, r3, lsl #2
    ff6c:	e583102c 	str	r1, [r3, #44]	; 0x2c
    ff70:	f57ff04f 	dsb	sy
    ff74:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    ff78:	e2833001 	add	r3, r3, #1
    ff7c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ff80:	e8bd8010 	pop	{r4, pc}
    ff84:	e3051514 	movw	r1, #21780	; 0x5514
    ff88:	e3050abc 	movw	r0, #23228	; 0x5abc
    ff8c:	e3401001 	movt	r1, #1
    ff90:	e3002245 	movw	r2, #581	; 0x245
    ff94:	e3400001 	movt	r0, #1
    ff98:	eb000907 	bl	123bc <assertion_failed>
    ff9c:	e3051514 	movw	r1, #21780	; 0x5514
    ffa0:	e30506a0 	movw	r0, #22176	; 0x56a0
    ffa4:	e3401001 	movt	r1, #1
    ffa8:	e3002247 	movw	r2, #583	; 0x247
    ffac:	e3400001 	movt	r0, #1
    ffb0:	eb000901 	bl	123bc <assertion_failed>

0000ffb4 <CTimer::SimpleMsDelay(unsigned int)>:
    ffb4:	e3500000 	cmp	r0, #0
    ffb8:	012fff1e 	bxeq	lr
    ffbc:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    ffc0:	e0000093 	mul	r0, r3, r0
    ffc4:	e3500000 	cmp	r0, #0
    ffc8:	012fff1e 	bxeq	lr
    ffcc:	e2800001 	add	r0, r0, #1
    ffd0:	f57ff06f 	isb	sy
    ffd4:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    ffd8:	f57ff06f 	isb	sy
    ffdc:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    ffe0:	e0433002 	sub	r3, r3, r2
    ffe4:	e1500003 	cmp	r0, r3
    ffe8:	8afffffa 	bhi	ffd8 <CTimer::SimpleMsDelay(unsigned int)+0x24>
    ffec:	e12fff1e 	bx	lr

0000fff0 <CTimer::SimpleusDelay(unsigned int)>:
    fff0:	e3500000 	cmp	r0, #0
    fff4:	012fff1e 	bxeq	lr
    fff8:	e2800001 	add	r0, r0, #1
    fffc:	f57ff06f 	isb	sy
   10000:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   10004:	f57ff06f 	isb	sy
   10008:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   1000c:	e0433002 	sub	r3, r3, r2
   10010:	e1500003 	cmp	r0, r3
   10014:	8afffffa 	bhi	10004 <CTimer::SimpleusDelay(unsigned int)+0x14>
   10018:	e12fff1e 	bx	lr

0001001c <CTimer::IsLeapYear(unsigned int)>:
   1001c:	e3053c29 	movw	r3, #23593	; 0x5c29
   10020:	e3052c28 	movw	r2, #23592	; 0x5c28
   10024:	e34c328f 	movt	r3, #49807	; 0xc28f
   10028:	e0030093 	mul	r3, r3, r0
   1002c:	e340228f 	movt	r2, #655	; 0x28f
   10030:	e1520163 	cmp	r2, r3, ror #2
   10034:	2a000003 	bcs	10048 <CTimer::IsLeapYear(unsigned int)+0x2c>
   10038:	e3100003 	tst	r0, #3
   1003c:	03a00001 	moveq	r0, #1
   10040:	13a00000 	movne	r0, #0
   10044:	e12fff1e 	bx	lr
   10048:	e30d270a 	movw	r2, #55050	; 0xd70a
   1004c:	e34020a3 	movt	r2, #163	; 0xa3
   10050:	e1520263 	cmp	r2, r3, ror #4
   10054:	23a00001 	movcs	r0, #1
   10058:	33a00000 	movcc	r0, #0
   1005c:	e12fff1e 	bx	lr

00010060 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   10060:	e3500001 	cmp	r0, #1
   10064:	0a000003 	beq	10078 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   10068:	e3053714 	movw	r3, #22292	; 0x5714
   1006c:	e3403001 	movt	r3, #1
   10070:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   10074:	e12fff1e 	bx	lr
   10078:	e3053c29 	movw	r3, #23593	; 0x5c29
   1007c:	e3052c28 	movw	r2, #23592	; 0x5c28
   10080:	e34c328f 	movt	r3, #49807	; 0xc28f
   10084:	e0030193 	mul	r3, r3, r1
   10088:	e340228f 	movt	r2, #655	; 0x28f
   1008c:	e1520163 	cmp	r2, r3, ror #2
   10090:	2a000003 	bcs	100a4 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   10094:	e3110003 	tst	r1, #3
   10098:	1afffff2 	bne	10068 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   1009c:	e3a0001d 	mov	r0, #29
   100a0:	e12fff1e 	bx	lr
   100a4:	e30d270a 	movw	r2, #55050	; 0xd70a
   100a8:	e34020a3 	movt	r2, #163	; 0xa3
   100ac:	e1520263 	cmp	r2, r3, ror #4
   100b0:	3affffec 	bcc	10068 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   100b4:	eafffff8 	b	1009c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>

000100b8 <CTimer::Get()>:
   100b8:	e30731b8 	movw	r3, #29112	; 0x71b8
   100bc:	e3403001 	movt	r3, #1
   100c0:	e5930000 	ldr	r0, [r3]
   100c4:	e3500000 	cmp	r0, #0
   100c8:	112fff1e 	bxne	lr
   100cc:	e3051514 	movw	r1, #21780	; 0x5514
   100d0:	e30506d4 	movw	r0, #22228	; 0x56d4
   100d4:	e3401001 	movt	r1, #1
   100d8:	e3a02fa2 	mov	r2, #648	; 0x288
   100dc:	e3400001 	movt	r0, #1
   100e0:	e92d4010 	push	{r4, lr}
   100e4:	eb0008b4 	bl	123bc <assertion_failed>

000100e8 <memmove>:
   100e8:	e1500001 	cmp	r0, r1
   100ec:	9a000002 	bls	100fc <memmove+0x14>
   100f0:	e0813002 	add	r3, r1, r2
   100f4:	e1530000 	cmp	r3, r0
   100f8:	8a000000 	bhi	10100 <memmove+0x18>
   100fc:	ea000227 	b	109a0 <memcpy>
   10100:	e080c002 	add	ip, r0, r2
   10104:	e3520000 	cmp	r2, #0
   10108:	012fff1e 	bxeq	lr
   1010c:	e1a0200c 	mov	r2, ip
   10110:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   10114:	e1510003 	cmp	r1, r3
   10118:	e562c001 	strb	ip, [r2, #-1]!
   1011c:	1afffffb 	bne	10110 <memmove+0x28>
   10120:	e12fff1e 	bx	lr

00010124 <memcmp>:
   10124:	e3520000 	cmp	r2, #0
   10128:	e242c001 	sub	ip, r2, #1
   1012c:	0a00000c 	beq	10164 <memcmp+0x40>
   10130:	e080c00c 	add	ip, r0, ip
   10134:	e2411001 	sub	r1, r1, #1
   10138:	e2400001 	sub	r0, r0, #1
   1013c:	ea000002 	b	1014c <memcmp+0x28>
   10140:	3a000009 	bcc	1016c <memcmp+0x48>
   10144:	e150000c 	cmp	r0, ip
   10148:	0a000005 	beq	10164 <memcmp+0x40>
   1014c:	e5f02001 	ldrb	r2, [r0, #1]!
   10150:	e5f13001 	ldrb	r3, [r1, #1]!
   10154:	e1520003 	cmp	r2, r3
   10158:	9afffff8 	bls	10140 <memcmp+0x1c>
   1015c:	e3a00001 	mov	r0, #1
   10160:	e12fff1e 	bx	lr
   10164:	e3a00000 	mov	r0, #0
   10168:	e12fff1e 	bx	lr
   1016c:	e3e00000 	mvn	r0, #0
   10170:	e12fff1e 	bx	lr

00010174 <strlen>:
   10174:	e1a03000 	mov	r3, r0
   10178:	e0d300d1 	ldrsb	r0, [r3], #1
   1017c:	e3500000 	cmp	r0, #0
   10180:	012fff1e 	bxeq	lr
   10184:	e3a00000 	mov	r0, #0
   10188:	e0d320d1 	ldrsb	r2, [r3], #1
   1018c:	e2800001 	add	r0, r0, #1
   10190:	e3520000 	cmp	r2, #0
   10194:	1afffffb 	bne	10188 <strlen+0x14>
   10198:	e12fff1e 	bx	lr

0001019c <strcmp>:
   1019c:	e1d030d0 	ldrsb	r3, [r0]
   101a0:	e3530000 	cmp	r3, #0
   101a4:	1a000006 	bne	101c4 <strcmp+0x28>
   101a8:	ea000016 	b	10208 <strcmp+0x6c>
   101ac:	e1520003 	cmp	r2, r3
   101b0:	ba00000c 	blt	101e8 <strcmp+0x4c>
   101b4:	ca00000d 	bgt	101f0 <strcmp+0x54>
   101b8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   101bc:	e3530000 	cmp	r3, #0
   101c0:	0a00000c 	beq	101f8 <strcmp+0x5c>
   101c4:	e1a0c001 	mov	ip, r1
   101c8:	e0d120d1 	ldrsb	r2, [r1], #1
   101cc:	e3520000 	cmp	r2, #0
   101d0:	1afffff5 	bne	101ac <strcmp+0x10>
   101d4:	e1530002 	cmp	r3, r2
   101d8:	ca000002 	bgt	101e8 <strcmp+0x4c>
   101dc:	b3e00000 	mvnlt	r0, #0
   101e0:	a3a00000 	movge	r0, #0
   101e4:	e12fff1e 	bx	lr
   101e8:	e3a00001 	mov	r0, #1
   101ec:	e12fff1e 	bx	lr
   101f0:	e3e00000 	mvn	r0, #0
   101f4:	e12fff1e 	bx	lr
   101f8:	e1dc20d1 	ldrsb	r2, [ip, #1]
   101fc:	e1530002 	cmp	r3, r2
   10200:	dafffff5 	ble	101dc <strcmp+0x40>
   10204:	eafffff7 	b	101e8 <strcmp+0x4c>
   10208:	e1d120d0 	ldrsb	r2, [r1]
   1020c:	eafffff0 	b	101d4 <strcmp+0x38>

00010210 <strcasecmp>:
   10210:	e2402001 	sub	r2, r0, #1
   10214:	ea000009 	b	10240 <strcasecmp+0x30>
   10218:	e0d100d1 	ldrsb	r0, [r1], #1
   1021c:	e240c061 	sub	ip, r0, #97	; 0x61
   10220:	e35c0019 	cmp	ip, #25
   10224:	92400020 	subls	r0, r0, #32
   10228:	9a000001 	bls	10234 <strcasecmp+0x24>
   1022c:	e3500000 	cmp	r0, #0
   10230:	0a000012 	beq	10280 <strcasecmp+0x70>
   10234:	e1530000 	cmp	r3, r0
   10238:	ca000012 	bgt	10288 <strcasecmp+0x78>
   1023c:	ba000013 	blt	10290 <strcasecmp+0x80>
   10240:	e1f230d1 	ldrsb	r3, [r2, #1]!
   10244:	e2430061 	sub	r0, r3, #97	; 0x61
   10248:	e3500019 	cmp	r0, #25
   1024c:	92433020 	subls	r3, r3, #32
   10250:	9afffff0 	bls	10218 <strcasecmp+0x8>
   10254:	e3530000 	cmp	r3, #0
   10258:	1affffee 	bne	10218 <strcasecmp+0x8>
   1025c:	e1d100d0 	ldrsb	r0, [r1]
   10260:	e2402061 	sub	r2, r0, #97	; 0x61
   10264:	e3520019 	cmp	r2, #25
   10268:	92400020 	subls	r0, r0, #32
   1026c:	8a000003 	bhi	10280 <strcasecmp+0x70>
   10270:	e1530000 	cmp	r3, r0
   10274:	a3a00000 	movge	r0, #0
   10278:	b3e00000 	mvnlt	r0, #0
   1027c:	e12fff1e 	bx	lr
   10280:	e1500003 	cmp	r0, r3
   10284:	aafffff9 	bge	10270 <strcasecmp+0x60>
   10288:	e3a00001 	mov	r0, #1
   1028c:	e12fff1e 	bx	lr
   10290:	e3e00000 	mvn	r0, #0
   10294:	e12fff1e 	bx	lr

00010298 <strncmp>:
   10298:	e3520000 	cmp	r2, #0
   1029c:	0a000015 	beq	102f8 <strncmp+0x60>
   102a0:	e081c002 	add	ip, r1, r2
   102a4:	e2400001 	sub	r0, r0, #1
   102a8:	ea000007 	b	102cc <strncmp+0x34>
   102ac:	e0d120d1 	ldrsb	r2, [r1], #1
   102b0:	e3520000 	cmp	r2, #0
   102b4:	0a000008 	beq	102dc <strncmp+0x44>
   102b8:	e1530002 	cmp	r3, r2
   102bc:	ca00000b 	bgt	102f0 <strncmp+0x58>
   102c0:	ba00000e 	blt	10300 <strncmp+0x68>
   102c4:	e151000c 	cmp	r1, ip
   102c8:	0a00000a 	beq	102f8 <strncmp+0x60>
   102cc:	e1f030d1 	ldrsb	r3, [r0, #1]!
   102d0:	e3530000 	cmp	r3, #0
   102d4:	1afffff4 	bne	102ac <strncmp+0x14>
   102d8:	e1d120d0 	ldrsb	r2, [r1]
   102dc:	e1520003 	cmp	r2, r3
   102e0:	ba000002 	blt	102f0 <strncmp+0x58>
   102e4:	c3e00000 	mvngt	r0, #0
   102e8:	d3a00000 	movle	r0, #0
   102ec:	e12fff1e 	bx	lr
   102f0:	e3a00001 	mov	r0, #1
   102f4:	e12fff1e 	bx	lr
   102f8:	e3a00000 	mov	r0, #0
   102fc:	e12fff1e 	bx	lr
   10300:	e3e00000 	mvn	r0, #0
   10304:	e12fff1e 	bx	lr

00010308 <strncasecmp>:
   10308:	e3520000 	cmp	r2, #0
   1030c:	0a00001f 	beq	10390 <strncasecmp+0x88>
   10310:	e2400001 	sub	r0, r0, #1
   10314:	e1a0c001 	mov	ip, r1
   10318:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1031c:	e2431061 	sub	r1, r3, #97	; 0x61
   10320:	e3510019 	cmp	r1, #25
   10324:	92433020 	subls	r3, r3, #32
   10328:	8a00000e 	bhi	10368 <strncasecmp+0x60>
   1032c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10330:	e0dc10d1 	ldrsb	r1, [ip], #1
   10334:	e241e061 	sub	lr, r1, #97	; 0x61
   10338:	e35e0019 	cmp	lr, #25
   1033c:	92411020 	subls	r1, r1, #32
   10340:	9a000014 	bls	10398 <strncasecmp+0x90>
   10344:	e3510000 	cmp	r1, #0
   10348:	1a000012 	bne	10398 <strncasecmp+0x90>
   1034c:	e1530001 	cmp	r3, r1
   10350:	ca000022 	bgt	103e0 <strncasecmp+0xd8>
   10354:	e1510003 	cmp	r1, r3
   10358:	d3a02000 	movle	r2, #0
   1035c:	c3e02000 	mvngt	r2, #0
   10360:	e1a00002 	mov	r0, r2
   10364:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10368:	e3530000 	cmp	r3, #0
   1036c:	1affffee 	bne	1032c <strncasecmp+0x24>
   10370:	e1dc10d0 	ldrsb	r1, [ip]
   10374:	e2412061 	sub	r2, r1, #97	; 0x61
   10378:	e3520019 	cmp	r2, #25
   1037c:	92411020 	subls	r1, r1, #32
   10380:	8a00001c 	bhi	103f8 <strncasecmp+0xf0>
   10384:	e1510003 	cmp	r1, r3
   10388:	d3a02000 	movle	r2, #0
   1038c:	c3e02000 	mvngt	r2, #0
   10390:	e1a00002 	mov	r0, r2
   10394:	e12fff1e 	bx	lr
   10398:	e1530001 	cmp	r3, r1
   1039c:	ca00000f 	bgt	103e0 <strncasecmp+0xd8>
   103a0:	ba000011 	blt	103ec <strncasecmp+0xe4>
   103a4:	e2522001 	subs	r2, r2, #1
   103a8:	0affffec 	beq	10360 <strncasecmp+0x58>
   103ac:	e1f030d1 	ldrsb	r3, [r0, #1]!
   103b0:	e2431061 	sub	r1, r3, #97	; 0x61
   103b4:	e3510019 	cmp	r1, #25
   103b8:	92433020 	subls	r3, r3, #32
   103bc:	9affffdb 	bls	10330 <strncasecmp+0x28>
   103c0:	e3530000 	cmp	r3, #0
   103c4:	1affffd9 	bne	10330 <strncasecmp+0x28>
   103c8:	e1dc10d0 	ldrsb	r1, [ip]
   103cc:	e2412061 	sub	r2, r1, #97	; 0x61
   103d0:	e3520019 	cmp	r2, #25
   103d4:	92411020 	subls	r1, r1, #32
   103d8:	9affffdd 	bls	10354 <strncasecmp+0x4c>
   103dc:	eaffffda 	b	1034c <strncasecmp+0x44>
   103e0:	e3a02001 	mov	r2, #1
   103e4:	e1a00002 	mov	r0, r2
   103e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   103ec:	e3e02000 	mvn	r2, #0
   103f0:	e1a00002 	mov	r0, r2
   103f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   103f8:	e1530001 	cmp	r3, r1
   103fc:	c3a02001 	movgt	r2, #1
   10400:	daffffdf 	ble	10384 <strncasecmp+0x7c>
   10404:	eaffffe1 	b	10390 <strncasecmp+0x88>

00010408 <strcpy>:
   10408:	e1d130d0 	ldrsb	r3, [r1]
   1040c:	e1a02000 	mov	r2, r0
   10410:	e3530000 	cmp	r3, #0
   10414:	0a000003 	beq	10428 <strcpy+0x20>
   10418:	e4c23001 	strb	r3, [r2], #1
   1041c:	e1f130d1 	ldrsb	r3, [r1, #1]!
   10420:	e3530000 	cmp	r3, #0
   10424:	1afffffb 	bne	10418 <strcpy+0x10>
   10428:	e3a03000 	mov	r3, #0
   1042c:	e5c23000 	strb	r3, [r2]
   10430:	e12fff1e 	bx	lr

00010434 <strncpy>:
   10434:	e3520000 	cmp	r2, #0
   10438:	012fff1e 	bxeq	lr
   1043c:	e080c002 	add	ip, r0, r2
   10440:	e2411001 	sub	r1, r1, #1
   10444:	e1a02000 	mov	r2, r0
   10448:	ea000002 	b	10458 <strncpy+0x24>
   1044c:	e4c23001 	strb	r3, [r2], #1
   10450:	e152000c 	cmp	r2, ip
   10454:	012fff1e 	bxeq	lr
   10458:	e1f130d1 	ldrsb	r3, [r1, #1]!
   1045c:	e3530000 	cmp	r3, #0
   10460:	1afffff9 	bne	1044c <strncpy+0x18>
   10464:	e5c23000 	strb	r3, [r2]
   10468:	e12fff1e 	bx	lr

0001046c <strcat>:
   1046c:	e1d030d0 	ldrsb	r3, [r0]
   10470:	e3530000 	cmp	r3, #0
   10474:	e1a03000 	mov	r3, r0
   10478:	0a000002 	beq	10488 <strcat+0x1c>
   1047c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   10480:	e3520000 	cmp	r2, #0
   10484:	1afffffc 	bne	1047c <strcat+0x10>
   10488:	e1d120d0 	ldrsb	r2, [r1]
   1048c:	e3520000 	cmp	r2, #0
   10490:	0a000003 	beq	104a4 <strcat+0x38>
   10494:	e4c32001 	strb	r2, [r3], #1
   10498:	e1f120d1 	ldrsb	r2, [r1, #1]!
   1049c:	e3520000 	cmp	r2, #0
   104a0:	1afffffb 	bne	10494 <strcat+0x28>
   104a4:	e3a02000 	mov	r2, #0
   104a8:	e5c32000 	strb	r2, [r3]
   104ac:	e12fff1e 	bx	lr

000104b0 <strchr>:
   104b0:	e1d030d0 	ldrsb	r3, [r0]
   104b4:	e3530000 	cmp	r3, #0
   104b8:	0a000004 	beq	104d0 <strchr+0x20>
   104bc:	e1530001 	cmp	r3, r1
   104c0:	012fff1e 	bxeq	lr
   104c4:	e1f030d1 	ldrsb	r3, [r0, #1]!
   104c8:	e3530000 	cmp	r3, #0
   104cc:	1afffffa 	bne	104bc <strchr+0xc>
   104d0:	e1a00003 	mov	r0, r3
   104d4:	e12fff1e 	bx	lr

000104d8 <strstr>:
   104d8:	e1d030d0 	ldrsb	r3, [r0]
   104dc:	e3530000 	cmp	r3, #0
   104e0:	1a000003 	bne	104f4 <strstr+0x1c>
   104e4:	e1d130d0 	ldrsb	r3, [r1]
   104e8:	e3530000 	cmp	r3, #0
   104ec:	13a00000 	movne	r0, #0
   104f0:	e12fff1e 	bx	lr
   104f4:	e92d4010 	push	{r4, lr}
   104f8:	e1d140d0 	ldrsb	r4, [r1]
   104fc:	e3540000 	cmp	r4, #0
   10500:	08bd8010 	popeq	{r4, pc}
   10504:	e2402001 	sub	r2, r0, #1
   10508:	e1a0e001 	mov	lr, r1
   1050c:	e1a03004 	mov	r3, r4
   10510:	ea000002 	b	10520 <strstr+0x48>
   10514:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   10518:	e3530000 	cmp	r3, #0
   1051c:	08bd8010 	popeq	{r4, pc}
   10520:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   10524:	e15c0003 	cmp	ip, r3
   10528:	0afffff9 	beq	10514 <strstr+0x3c>
   1052c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10530:	e3530000 	cmp	r3, #0
   10534:	1afffff0 	bne	104fc <strstr+0x24>
   10538:	e1a00003 	mov	r0, r3
   1053c:	e8bd8010 	pop	{r4, pc}

00010540 <strtok_r>:
   10540:	e92d4030 	push	{r4, r5, lr}
   10544:	e2504000 	subs	r4, r0, #0
   10548:	e1a05002 	mov	r5, r2
   1054c:	0a000026 	beq	105ec <strtok_r+0xac>
   10550:	e1d4c0d0 	ldrsb	ip, [r4]
   10554:	e35c0000 	cmp	ip, #0
   10558:	0a000028 	beq	10600 <strtok_r+0xc0>
   1055c:	e1d100d0 	ldrsb	r0, [r1]
   10560:	e3500000 	cmp	r0, #0
   10564:	0a00000a 	beq	10594 <strtok_r+0x54>
   10568:	e1a0e001 	mov	lr, r1
   1056c:	e1a03000 	mov	r3, r0
   10570:	ea000002 	b	10580 <strtok_r+0x40>
   10574:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   10578:	e3530000 	cmp	r3, #0
   1057c:	0a000004 	beq	10594 <strtok_r+0x54>
   10580:	e153000c 	cmp	r3, ip
   10584:	1afffffa 	bne	10574 <strtok_r+0x34>
   10588:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
   1058c:	e3500000 	cmp	r0, #0
   10590:	1afffff4 	bne	10568 <strtok_r+0x28>
   10594:	e35c0000 	cmp	ip, #0
   10598:	11a02004 	movne	r2, r4
   1059c:	0a000017 	beq	10600 <strtok_r+0xc0>
   105a0:	e3500000 	cmp	r0, #0
   105a4:	0a00000c 	beq	105dc <strtok_r+0x9c>
   105a8:	e1a03000 	mov	r3, r0
   105ac:	e1a0e001 	mov	lr, r1
   105b0:	ea000002 	b	105c0 <strtok_r+0x80>
   105b4:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   105b8:	e3530000 	cmp	r3, #0
   105bc:	0a000006 	beq	105dc <strtok_r+0x9c>
   105c0:	e15c0003 	cmp	ip, r3
   105c4:	1afffffa 	bne	105b4 <strtok_r+0x74>
   105c8:	e3a03000 	mov	r3, #0
   105cc:	e4c23001 	strb	r3, [r2], #1
   105d0:	e5852000 	str	r2, [r5]
   105d4:	e1a00004 	mov	r0, r4
   105d8:	e8bd8030 	pop	{r4, r5, pc}
   105dc:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   105e0:	e35c0000 	cmp	ip, #0
   105e4:	1affffed 	bne	105a0 <strtok_r+0x60>
   105e8:	eafffff8 	b	105d0 <strtok_r+0x90>
   105ec:	e5924000 	ldr	r4, [r2]
   105f0:	e3540000 	cmp	r4, #0
   105f4:	1affffd5 	bne	10550 <strtok_r+0x10>
   105f8:	e1a00004 	mov	r0, r4
   105fc:	e8bd8030 	pop	{r4, r5, pc}
   10600:	e3a04000 	mov	r4, #0
   10604:	e5854000 	str	r4, [r5]
   10608:	e1a00004 	mov	r0, r4
   1060c:	e8bd8030 	pop	{r4, r5, pc}

00010610 <strtoul>:
   10610:	e3510000 	cmp	r1, #0
   10614:	e2423002 	sub	r3, r2, #2
   10618:	e1a0c000 	mov	ip, r0
   1061c:	15810000 	strne	r0, [r1]
   10620:	e3520000 	cmp	r2, #0
   10624:	13530022 	cmpne	r3, #34	; 0x22
   10628:	8a000043 	bhi	1073c <strtoul+0x12c>
   1062c:	e92d4070 	push	{r4, r5, r6, lr}
   10630:	e1a0e00c 	mov	lr, ip
   10634:	e1dc30d0 	ldrsb	r3, [ip]
   10638:	e28cc001 	add	ip, ip, #1
   1063c:	e3530020 	cmp	r3, #32
   10640:	e2430009 	sub	r0, r3, #9
   10644:	e6ef0070 	uxtb	r0, r0
   10648:	0afffff8 	beq	10630 <strtoul+0x20>
   1064c:	e3500004 	cmp	r0, #4
   10650:	9afffff6 	bls	10630 <strtoul+0x20>
   10654:	e353002b 	cmp	r3, #43	; 0x2b
   10658:	0a000027 	beq	106fc <strtoul+0xec>
   1065c:	e353002d 	cmp	r3, #45	; 0x2d
   10660:	03a06001 	moveq	r6, #1
   10664:	13a06000 	movne	r6, #0
   10668:	01de30d1 	ldrsbeq	r3, [lr, #1]
   1066c:	01a0e00c 	moveq	lr, ip
   10670:	e3530030 	cmp	r3, #48	; 0x30
   10674:	0a000025 	beq	10710 <strtoul+0x100>
   10678:	e3520000 	cmp	r2, #0
   1067c:	03a0200a 	moveq	r2, #10
   10680:	e353002f 	cmp	r3, #47	; 0x2f
   10684:	e1a0c003 	mov	ip, r3
   10688:	da000038 	ble	10770 <strtoul+0x160>
   1068c:	e3a05001 	mov	r5, #1
   10690:	e3a04000 	mov	r4, #0
   10694:	ea000007 	b	106b8 <strtoul+0xa8>
   10698:	e1500004 	cmp	r0, r4
   1069c:	e3a05000 	mov	r5, #0
   106a0:	e1a04000 	mov	r4, r0
   106a4:	3a00002a 	bcc	10754 <strtoul+0x144>
   106a8:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   106ac:	e35c002f 	cmp	ip, #47	; 0x2f
   106b0:	e1a0300c 	mov	r3, ip
   106b4:	da00002b 	ble	10768 <strtoul+0x158>
   106b8:	e2433061 	sub	r3, r3, #97	; 0x61
   106bc:	e3530019 	cmp	r3, #25
   106c0:	924cc020 	subls	ip, ip, #32
   106c4:	e35c0040 	cmp	ip, #64	; 0x40
   106c8:	c24cc007 	subgt	ip, ip, #7
   106cc:	e24cc030 	sub	ip, ip, #48	; 0x30
   106d0:	e15c0002 	cmp	ip, r2
   106d4:	e020c294 	mla	r0, r4, r2, ip
   106d8:	baffffee 	blt	10698 <strtoul+0x88>
   106dc:	e2255001 	eor	r5, r5, #1
   106e0:	e1a00004 	mov	r0, r4
   106e4:	e3510000 	cmp	r1, #0
   106e8:	e0055006 	and	r5, r5, r6
   106ec:	1581e000 	strne	lr, [r1]
   106f0:	e3550000 	cmp	r5, #0
   106f4:	12600000 	rsbne	r0, r0, #0
   106f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   106fc:	e1de30d1 	ldrsb	r3, [lr, #1]
   10700:	e3a06000 	mov	r6, #0
   10704:	e1a0e00c 	mov	lr, ip
   10708:	e3530030 	cmp	r3, #48	; 0x30
   1070c:	1affffd9 	bne	10678 <strtoul+0x68>
   10710:	e1de30d1 	ldrsb	r3, [lr, #1]
   10714:	e28ec001 	add	ip, lr, #1
   10718:	e3c30020 	bic	r0, r3, #32
   1071c:	e3500058 	cmp	r0, #88	; 0x58
   10720:	1a000007 	bne	10744 <strtoul+0x134>
   10724:	e3d23010 	bics	r3, r2, #16
   10728:	1a000012 	bne	10778 <strtoul+0x168>
   1072c:	e1de30d2 	ldrsb	r3, [lr, #2]
   10730:	e3a02010 	mov	r2, #16
   10734:	e28ee002 	add	lr, lr, #2
   10738:	eaffffd0 	b	10680 <strtoul+0x70>
   1073c:	e3a00000 	mov	r0, #0
   10740:	e12fff1e 	bx	lr
   10744:	e3520000 	cmp	r2, #0
   10748:	e1a0e00c 	mov	lr, ip
   1074c:	03a02008 	moveq	r2, #8
   10750:	eaffffca 	b	10680 <strtoul+0x70>
   10754:	e1510005 	cmp	r1, r5
   10758:	0a000008 	beq	10780 <strtoul+0x170>
   1075c:	e581e000 	str	lr, [r1]
   10760:	e3e00000 	mvn	r0, #0
   10764:	e8bd8070 	pop	{r4, r5, r6, pc}
   10768:	e3a05001 	mov	r5, #1
   1076c:	eaffffdc 	b	106e4 <strtoul+0xd4>
   10770:	e3510000 	cmp	r1, #0
   10774:	1581e000 	strne	lr, [r1]
   10778:	e3a00000 	mov	r0, #0
   1077c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10780:	e3e00000 	mvn	r0, #0
   10784:	e8bd8070 	pop	{r4, r5, r6, pc}

00010788 <strtoull>:
   10788:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1078c:	e2423002 	sub	r3, r2, #2
   10790:	e2514000 	subs	r4, r1, #0
   10794:	e1a0c000 	mov	ip, r0
   10798:	15840000 	strne	r0, [r4]
   1079c:	e3520000 	cmp	r2, #0
   107a0:	13530022 	cmpne	r3, #34	; 0x22
   107a4:	8a000050 	bhi	108ec <strtoull+0x164>
   107a8:	e1dc30d0 	ldrsb	r3, [ip]
   107ac:	e1a0e00c 	mov	lr, ip
   107b0:	e28cc001 	add	ip, ip, #1
   107b4:	e3530020 	cmp	r3, #32
   107b8:	e2430009 	sub	r0, r3, #9
   107bc:	e6ef0070 	uxtb	r0, r0
   107c0:	0afffff8 	beq	107a8 <strtoull+0x20>
   107c4:	e3500004 	cmp	r0, #4
   107c8:	9afffff6 	bls	107a8 <strtoull+0x20>
   107cc:	e353002b 	cmp	r3, #43	; 0x2b
   107d0:	0a000033 	beq	108a4 <strtoull+0x11c>
   107d4:	e353002d 	cmp	r3, #45	; 0x2d
   107d8:	03a08001 	moveq	r8, #1
   107dc:	13a08000 	movne	r8, #0
   107e0:	01de30d1 	ldrsbeq	r3, [lr, #1]
   107e4:	01a0e00c 	moveq	lr, ip
   107e8:	e3530030 	cmp	r3, #48	; 0x30
   107ec:	0a000031 	beq	108b8 <strtoull+0x130>
   107f0:	e3520000 	cmp	r2, #0
   107f4:	03a0200a 	moveq	r2, #10
   107f8:	e353002f 	cmp	r3, #47	; 0x2f
   107fc:	e1a0c003 	mov	ip, r3
   10800:	da000037 	ble	108e4 <strtoull+0x15c>
   10804:	e3a05000 	mov	r5, #0
   10808:	e3a07001 	mov	r7, #1
   1080c:	e1a09fc2 	asr	r9, r2, #31
   10810:	e1a06005 	mov	r6, r5
   10814:	ea00000b 	b	10848 <strtoull+0xc0>
   10818:	e09c0000 	adds	r0, ip, r0
   1081c:	e3a07000 	mov	r7, #0
   10820:	e0a11fcc 	adc	r1, r1, ip, asr #31
   10824:	e1500005 	cmp	r0, r5
   10828:	e1a05000 	mov	r5, r0
   1082c:	e0d13006 	sbcs	r3, r1, r6
   10830:	e1a06001 	mov	r6, r1
   10834:	3a000033 	bcc	10908 <strtoull+0x180>
   10838:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   1083c:	e35c002f 	cmp	ip, #47	; 0x2f
   10840:	e1a0300c 	mov	r3, ip
   10844:	da000035 	ble	10920 <strtoull+0x198>
   10848:	e2433061 	sub	r3, r3, #97	; 0x61
   1084c:	e3530019 	cmp	r3, #25
   10850:	924cc020 	subls	ip, ip, #32
   10854:	e35c0040 	cmp	ip, #64	; 0x40
   10858:	c24cc007 	subgt	ip, ip, #7
   1085c:	e0010692 	mul	r1, r2, r6
   10860:	e24cc030 	sub	ip, ip, #48	; 0x30
   10864:	e08a0592 	umull	r0, sl, r2, r5
   10868:	e0211995 	mla	r1, r5, r9, r1
   1086c:	e15c0002 	cmp	ip, r2
   10870:	e081100a 	add	r1, r1, sl
   10874:	baffffe7 	blt	10818 <strtoull+0x90>
   10878:	e2277001 	eor	r7, r7, #1
   1087c:	e1a00005 	mov	r0, r5
   10880:	e1a01006 	mov	r1, r6
   10884:	e3540000 	cmp	r4, #0
   10888:	e0088007 	and	r8, r8, r7
   1088c:	1584e000 	strne	lr, [r4]
   10890:	e3580000 	cmp	r8, #0
   10894:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10898:	e2700000 	rsbs	r0, r0, #0
   1089c:	e2e11000 	rsc	r1, r1, #0
   108a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108a4:	e1de30d1 	ldrsb	r3, [lr, #1]
   108a8:	e3a08000 	mov	r8, #0
   108ac:	e1a0e00c 	mov	lr, ip
   108b0:	e3530030 	cmp	r3, #48	; 0x30
   108b4:	1affffcd 	bne	107f0 <strtoull+0x68>
   108b8:	e1de30d1 	ldrsb	r3, [lr, #1]
   108bc:	e28e0001 	add	r0, lr, #1
   108c0:	e3c31020 	bic	r1, r3, #32
   108c4:	e3510058 	cmp	r1, #88	; 0x58
   108c8:	1a00000a 	bne	108f8 <strtoull+0x170>
   108cc:	e3d23010 	bics	r3, r2, #16
   108d0:	1a000005 	bne	108ec <strtoull+0x164>
   108d4:	e1de30d2 	ldrsb	r3, [lr, #2]
   108d8:	e3a02010 	mov	r2, #16
   108dc:	e28ee002 	add	lr, lr, #2
   108e0:	eaffffc4 	b	107f8 <strtoull+0x70>
   108e4:	e3540000 	cmp	r4, #0
   108e8:	1584e000 	strne	lr, [r4]
   108ec:	e3a00000 	mov	r0, #0
   108f0:	e1a01000 	mov	r1, r0
   108f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108f8:	e3520000 	cmp	r2, #0
   108fc:	e1a0e000 	mov	lr, r0
   10900:	03a02008 	moveq	r2, #8
   10904:	eaffffbb 	b	107f8 <strtoull+0x70>
   10908:	e1540007 	cmp	r4, r7
   1090c:	0a000005 	beq	10928 <strtoull+0x1a0>
   10910:	e584e000 	str	lr, [r4]
   10914:	e3e00000 	mvn	r0, #0
   10918:	e1a01007 	mov	r1, r7
   1091c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10920:	e3a07001 	mov	r7, #1
   10924:	eaffffd6 	b	10884 <strtoull+0xfc>
   10928:	e3e00000 	mvn	r0, #0
   1092c:	e1a01004 	mov	r1, r4
   10930:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010934 <atoi>:
   10934:	e3a0200a 	mov	r2, #10
   10938:	e3a01000 	mov	r1, #0
   1093c:	eaffff33 	b	10610 <strtoul>

00010940 <char2int>:
   10940:	e12fff1e 	bx	lr

00010944 <memset>:
   10944:	e3100003 	tst	r0, #3
   10948:	1a00000d 	bne	10984 <memset+0x40>
   1094c:	e3520010 	cmp	r2, #16
   10950:	3a00000b 	bcc	10984 <memset+0x40>
   10954:	e1813401 	orr	r3, r1, r1, lsl #8
   10958:	e183c803 	orr	ip, r3, r3, lsl #16
   1095c:	e1a03000 	mov	r3, r0
   10960:	e583c000 	str	ip, [r3]
   10964:	e583c004 	str	ip, [r3, #4]
   10968:	e583c008 	str	ip, [r3, #8]
   1096c:	e583c00c 	str	ip, [r3, #12]
   10970:	e2833010 	add	r3, r3, #16
   10974:	e2422010 	sub	r2, r2, #16
   10978:	e352000f 	cmp	r2, #15
   1097c:	8afffff7 	bhi	10960 <memset+0x1c>
   10980:	ea000000 	b	10988 <memset+0x44>
   10984:	e1a03000 	mov	r3, r0
   10988:	e3520000 	cmp	r2, #0
   1098c:	012fff1e 	bxeq	lr
   10990:	e4c31001 	strb	r1, [r3], #1
   10994:	e2522001 	subs	r2, r2, #1
   10998:	1afffffc 	bne	10990 <memset+0x4c>
   1099c:	e12fff1e 	bx	lr

000109a0 <memcpy>:
   109a0:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   109a4:	e352007f 	cmp	r2, #127	; 0x7f
   109a8:	9a00000b 	bls	109dc <memcpy+0x3c>
   109ac:	e3110003 	tst	r1, #3
   109b0:	1a000009 	bne	109dc <memcpy+0x3c>
   109b4:	e3100003 	tst	r0, #3
   109b8:	1a000007 	bne	109dc <memcpy+0x3c>
   109bc:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   109c0:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   109c4:	e2422020 	sub	r2, r2, #32
   109c8:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   109cc:	f5d1f040 	pld	[r1, #64]	; 0x40
   109d0:	e352001f 	cmp	r2, #31
   109d4:	8afffff9 	bhi	109c0 <memcpy+0x20>
   109d8:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   109dc:	e3520000 	cmp	r2, #0
   109e0:	0a000003 	beq	109f4 <memcpy+0x54>
   109e4:	e4d13001 	ldrb	r3, [r1], #1
   109e8:	e2522001 	subs	r2, r2, #1
   109ec:	e4c03001 	strb	r3, [r0], #1
   109f0:	1afffffb 	bne	109e4 <memcpy+0x44>
   109f4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   109f8:	e12fff1e 	bx	lr

000109fc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   109fc:	e12fff1e 	bx	lr

00010a00 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   10a00:	e92d4010 	push	{r4, lr}
   10a04:	e3a01014 	mov	r1, #20
   10a08:	e1a04000 	mov	r4, r0
   10a0c:	eb000108 	bl	10e34 <operator delete(void*, unsigned int)>
   10a10:	e1a00004 	mov	r0, r4
   10a14:	e8bd8010 	pop	{r4, pc}

00010a18 <CVirtualGPIOPin::Write(unsigned int)>:
   10a18:	e5d03004 	ldrb	r3, [r0, #4]
   10a1c:	e92d4070 	push	{r4, r5, r6, lr}
   10a20:	e3530000 	cmp	r3, #0
   10a24:	e24dd028 	sub	sp, sp, #40	; 0x28
   10a28:	e1a04000 	mov	r4, r0
   10a2c:	e1a05001 	mov	r5, r1
   10a30:	0a000013 	beq	10a84 <CVirtualGPIOPin::Write(unsigned int)+0x6c>
   10a34:	e5901008 	ldr	r1, [r0, #8]
   10a38:	e3510000 	cmp	r1, #0
   10a3c:	1a000036 	bne	10b1c <CVirtualGPIOPin::Write(unsigned int)+0x104>
   10a40:	e28d000c 	add	r0, sp, #12
   10a44:	eb0007af 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10a48:	e58d5024 	str	r5, [sp, #36]	; 0x24
   10a4c:	e3a03008 	mov	r3, #8
   10a50:	e58d3000 	str	r3, [sp]
   10a54:	e3a03082 	mov	r3, #130	; 0x82
   10a58:	e58d3020 	str	r3, [sp, #32]
   10a5c:	e3081041 	movw	r1, #32833	; 0x8041
   10a60:	e3401003 	movt	r1, #3
   10a64:	e3a03014 	mov	r3, #20
   10a68:	e08d2003 	add	r2, sp, r3
   10a6c:	e28d000c 	add	r0, sp, #12
   10a70:	eb0007ea 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10a74:	e28d000c 	add	r0, sp, #12
   10a78:	eb0007a9 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   10a7c:	e28dd028 	add	sp, sp, #40	; 0x28
   10a80:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a84:	e5903008 	ldr	r3, [r0, #8]
   10a88:	e3530001 	cmp	r3, #1
   10a8c:	8afffffa 	bhi	10a7c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10a90:	e30761bc 	movw	r6, #29116	; 0x71bc
   10a94:	e3510001 	cmp	r1, #1
   10a98:	e3406001 	movt	r6, #1
   10a9c:	93a03000 	movls	r3, #0
   10aa0:	83a03001 	movhi	r3, #1
   10aa4:	e5962000 	ldr	r2, [r6]
   10aa8:	e3520000 	cmp	r2, #0
   10aac:	03833001 	orreq	r3, r3, #1
   10ab0:	e3530000 	cmp	r3, #0
   10ab4:	1afffff0 	bne	10a7c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10ab8:	e5960004 	ldr	r0, [r6, #4]
   10abc:	e3500000 	cmp	r0, #0
   10ac0:	1a000020 	bne	10b48 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   10ac4:	e1d421b0 	ldrh	r2, [r4, #16]
   10ac8:	e1d431b2 	ldrh	r3, [r4, #18]
   10acc:	e584500c 	str	r5, [r4, #12]
   10ad0:	e0421003 	sub	r1, r2, r3
   10ad4:	e6bf1071 	sxth	r1, r1
   10ad8:	e3510000 	cmp	r1, #0
   10adc:	da000013 	ble	10b30 <CVirtualGPIOPin::Write(unsigned int)+0x118>
   10ae0:	e3550000 	cmp	r5, #0
   10ae4:	1a000006 	bne	10b04 <CVirtualGPIOPin::Write(unsigned int)+0xec>
   10ae8:	e2833001 	add	r3, r3, #1
   10aec:	e6ff3073 	uxth	r3, r3
   10af0:	e1c431b2 	strh	r3, [r4, #18]
   10af4:	e5940008 	ldr	r0, [r4, #8]
   10af8:	e5961000 	ldr	r1, [r6]
   10afc:	e1833802 	orr	r3, r3, r2, lsl #16
   10b00:	e7813100 	str	r3, [r1, r0, lsl #2]
   10b04:	e5963004 	ldr	r3, [r6, #4]
   10b08:	e3530000 	cmp	r3, #0
   10b0c:	0affffda 	beq	10a7c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10b10:	e28dd028 	add	sp, sp, #40	; 0x28
   10b14:	e8bd4070 	pop	{r4, r5, r6, lr}
   10b18:	ea00045a 	b	11c88 <LeaveCritical>
   10b1c:	e305174c 	movw	r1, #22348	; 0x574c
   10b20:	e3a0205b 	mov	r2, #91	; 0x5b
   10b24:	e3401001 	movt	r1, #1
   10b28:	e2810014 	add	r0, r1, #20
   10b2c:	eb000622 	bl	123bc <assertion_failed>
   10b30:	e3550000 	cmp	r5, #0
   10b34:	0afffff2 	beq	10b04 <CVirtualGPIOPin::Write(unsigned int)+0xec>
   10b38:	e2822001 	add	r2, r2, #1
   10b3c:	e6ff2072 	uxth	r2, r2
   10b40:	e1c421b0 	strh	r2, [r4, #16]
   10b44:	eaffffea 	b	10af4 <CVirtualGPIOPin::Write(unsigned int)+0xdc>
   10b48:	eb000423 	bl	11bdc <EnterCritical>
   10b4c:	eaffffdc 	b	10ac4 <CVirtualGPIOPin::Write(unsigned int)+0xac>

00010b50 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   10b50:	e92d4070 	push	{r4, r5, r6, lr}
   10b54:	e3a03000 	mov	r3, #0
   10b58:	e5c02004 	strb	r2, [r0, #4]
   10b5c:	e24dd020 	sub	sp, sp, #32
   10b60:	e3510001 	cmp	r1, #1
   10b64:	83822001 	orrhi	r2, r2, #1
   10b68:	e1a04000 	mov	r4, r0
   10b6c:	e59fc124 	ldr	ip, [pc, #292]	; 10c98 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   10b70:	e1520003 	cmp	r2, r3
   10b74:	e580c000 	str	ip, [r0]
   10b78:	e5801008 	str	r1, [r0, #8]
   10b7c:	e5803010 	str	r3, [r0, #16]
   10b80:	0a000002 	beq	10b90 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x40>
   10b84:	e1a00004 	mov	r0, r4
   10b88:	e28dd020 	add	sp, sp, #32
   10b8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b90:	e30751bc 	movw	r5, #29116	; 0x71bc
   10b94:	e3405001 	movt	r5, #1
   10b98:	e5950004 	ldr	r0, [r5, #4]
   10b9c:	e1500003 	cmp	r0, r3
   10ba0:	1a00000e 	bne	10be0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   10ba4:	e5956000 	ldr	r6, [r5]
   10ba8:	e3560000 	cmp	r6, #0
   10bac:	0a00000f 	beq	10bf0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   10bb0:	e5943008 	ldr	r3, [r4, #8]
   10bb4:	e3a02000 	mov	r2, #0
   10bb8:	e7862103 	str	r2, [r6, r3, lsl #2]
   10bbc:	e5953004 	ldr	r3, [r5, #4]
   10bc0:	e3530000 	cmp	r3, #0
   10bc4:	1a000024 	bne	10c5c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x10c>
   10bc8:	e1a00004 	mov	r0, r4
   10bcc:	e3a01000 	mov	r1, #0
   10bd0:	ebffff90 	bl	10a18 <CVirtualGPIOPin::Write(unsigned int)>
   10bd4:	e1a00004 	mov	r0, r4
   10bd8:	e28dd020 	add	sp, sp, #32
   10bdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   10be0:	eb0003fd 	bl	11bdc <EnterCritical>
   10be4:	e5956000 	ldr	r6, [r5]
   10be8:	e3560000 	cmp	r6, #0
   10bec:	1affffef 	bne	10bb0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   10bf0:	e3a00001 	mov	r0, #1
   10bf4:	eb0003c8 	bl	11b1c <CMemorySystem::GetCoherentPage(unsigned int)>
   10bf8:	e5850000 	str	r0, [r5]
   10bfc:	e1a01006 	mov	r1, r6
   10c00:	e28d0008 	add	r0, sp, #8
   10c04:	eb00073f 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10c08:	e5953000 	ldr	r3, [r5]
   10c0c:	e3081020 	movw	r1, #32800	; 0x8020
   10c10:	e3401004 	movt	r1, #4
   10c14:	e28d0008 	add	r0, sp, #8
   10c18:	e3833103 	orr	r3, r3, #-1073741824	; 0xc0000000
   10c1c:	e58d301c 	str	r3, [sp, #28]
   10c20:	e3a03004 	mov	r3, #4
   10c24:	e58d3000 	str	r3, [sp]
   10c28:	e3a03010 	mov	r3, #16
   10c2c:	e08d2003 	add	r2, sp, r3
   10c30:	eb00077a 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10c34:	e3500000 	cmp	r0, #0
   10c38:	0a000009 	beq	10c64 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x114>
   10c3c:	e28d0008 	add	r0, sp, #8
   10c40:	eb000737 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   10c44:	e5956000 	ldr	r6, [r5]
   10c48:	e3560000 	cmp	r6, #0
   10c4c:	1affffd7 	bne	10bb0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   10c50:	e5953004 	ldr	r3, [r5, #4]
   10c54:	e3530000 	cmp	r3, #0
   10c58:	0affffda 	beq	10bc8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   10c5c:	eb000409 	bl	11c88 <LeaveCritical>
   10c60:	eaffffd8 	b	10bc8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   10c64:	e58d0000 	str	r0, [sp]
   10c68:	e3a03010 	mov	r3, #16
   10c6c:	e08d2003 	add	r2, sp, r3
   10c70:	e1a01003 	mov	r1, r3
   10c74:	e3401004 	movt	r1, #4
   10c78:	e28d0008 	add	r0, sp, #8
   10c7c:	eb000767 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10c80:	e3500000 	cmp	r0, #0
   10c84:	05850000 	streq	r0, [r5]
   10c88:	159d301c 	ldrne	r3, [sp, #28]
   10c8c:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   10c90:	15853000 	strne	r3, [r5]
   10c94:	eaffffe8 	b	10c3c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xec>
   10c98:	00015774 	.word	0x00015774

00010c9c <CVirtualGPIOPin::Invert()>:
   10c9c:	e590100c 	ldr	r1, [r0, #12]
   10ca0:	e2211001 	eor	r1, r1, #1
   10ca4:	eaffff5b 	b	10a18 <CVirtualGPIOPin::Write(unsigned int)>

00010ca8 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   10ca8:	e30731bc 	movw	r3, #29116	; 0x71bc
   10cac:	e3a02000 	mov	r2, #0
   10cb0:	e3403001 	movt	r3, #1
   10cb4:	e5832004 	str	r2, [r3, #4]
   10cb8:	e12fff1e 	bx	lr

00010cbc <ChainBootStub(void const*, unsigned int)>:
   10cbc:	e2811003 	add	r1, r1, #3
   10cc0:	e1b01121 	lsrs	r1, r1, #2
   10cc4:	0a000007 	beq	10ce8 <ChainBootStub(void const*, unsigned int)+0x2c>
   10cc8:	e1a03000 	mov	r3, r0
   10ccc:	e0800101 	add	r0, r0, r1, lsl #2
   10cd0:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   10cd4:	e083200c 	add	r2, r3, ip
   10cd8:	e4931004 	ldr	r1, [r3], #4
   10cdc:	e1530000 	cmp	r3, r0
   10ce0:	e5821000 	str	r1, [r2]
   10ce4:	1afffffa 	bne	10cd4 <ChainBootStub(void const*, unsigned int)+0x18>
   10ce8:	e3a03000 	mov	r3, #0
   10cec:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10cf0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10cf4:	f57ff04f 	dsb	sy
   10cf8:	f57ff06f 	isb	sy
   10cfc:	e3a03902 	mov	r3, #32768	; 0x8000
   10d00:	e12fff13 	bx	r3

00010d04 <EnableChainBoot>:
   10d04:	e30731c4 	movw	r3, #29124	; 0x71c4
   10d08:	e1a0c001 	mov	ip, r1
   10d0c:	e3403001 	movt	r3, #1
   10d10:	e3001cbc 	movw	r1, #3260	; 0xcbc
   10d14:	e92d4010 	push	{r4, lr}
   10d18:	e3a02b01 	mov	r2, #1024	; 0x400
   10d1c:	e5830000 	str	r0, [r3]
   10d20:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   10d24:	e3401001 	movt	r1, #1
   10d28:	e583c004 	str	ip, [r3, #4]
   10d2c:	ebffff1b 	bl	109a0 <memcpy>
   10d30:	e3a03000 	mov	r3, #0
   10d34:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10d38:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10d3c:	f57ff04f 	dsb	sy
   10d40:	f57ff06f 	isb	sy
   10d44:	e8bd8010 	pop	{r4, pc}

00010d48 <IsChainBootEnabled>:
   10d48:	e30731c4 	movw	r3, #29124	; 0x71c4
   10d4c:	e3403001 	movt	r3, #1
   10d50:	e5930000 	ldr	r0, [r3]
   10d54:	e2500000 	subs	r0, r0, #0
   10d58:	13a00001 	movne	r0, #1
   10d5c:	e12fff1e 	bx	lr

00010d60 <DoChainBoot>:
   10d60:	e30731c4 	movw	r3, #29124	; 0x71c4
   10d64:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   10d68:	e3403001 	movt	r3, #1
   10d6c:	e1c300d0 	ldrd	r0, [r3]
   10d70:	e12fff12 	bx	r2

00010d74 <operator new(unsigned int, int)>:
   10d74:	e3d13002 	bics	r3, r1, #2
   10d78:	e1a01000 	mov	r1, r0
   10d7c:	0a000001 	beq	10d88 <operator new(unsigned int, int)+0x14>
   10d80:	e3a00000 	mov	r0, #0
   10d84:	e12fff1e 	bx	lr
   10d88:	e30731d0 	movw	r3, #29136	; 0x71d0
   10d8c:	e3403001 	movt	r3, #1
   10d90:	e5930000 	ldr	r0, [r3]
   10d94:	e280000c 	add	r0, r0, #12
   10d98:	ea000052 	b	10ee8 <CHeapAllocator::Allocate(unsigned int)>

00010d9c <operator new[](unsigned int, int)>:
   10d9c:	e3d13002 	bics	r3, r1, #2
   10da0:	e1a01000 	mov	r1, r0
   10da4:	0a000001 	beq	10db0 <operator new[](unsigned int, int)+0x14>
   10da8:	e3a00000 	mov	r0, #0
   10dac:	e12fff1e 	bx	lr
   10db0:	e30731d0 	movw	r3, #29136	; 0x71d0
   10db4:	e3403001 	movt	r3, #1
   10db8:	e5930000 	ldr	r0, [r3]
   10dbc:	e280000c 	add	r0, r0, #12
   10dc0:	ea000048 	b	10ee8 <CHeapAllocator::Allocate(unsigned int)>

00010dc4 <operator new(unsigned int, void*)>:
   10dc4:	e1a00001 	mov	r0, r1
   10dc8:	e12fff1e 	bx	lr

00010dcc <operator new[](unsigned int, void*)>:
   10dcc:	e1a00001 	mov	r0, r1
   10dd0:	e12fff1e 	bx	lr

00010dd4 <operator new(unsigned int)>:
   10dd4:	e30731d0 	movw	r3, #29136	; 0x71d0
   10dd8:	e1a01000 	mov	r1, r0
   10ddc:	e3403001 	movt	r3, #1
   10de0:	e5930000 	ldr	r0, [r3]
   10de4:	e280000c 	add	r0, r0, #12
   10de8:	ea00003e 	b	10ee8 <CHeapAllocator::Allocate(unsigned int)>

00010dec <operator new[](unsigned int)>:
   10dec:	e30731d0 	movw	r3, #29136	; 0x71d0
   10df0:	e1a01000 	mov	r1, r0
   10df4:	e3403001 	movt	r3, #1
   10df8:	e5930000 	ldr	r0, [r3]
   10dfc:	e280000c 	add	r0, r0, #12
   10e00:	ea000038 	b	10ee8 <CHeapAllocator::Allocate(unsigned int)>

00010e04 <operator delete(void*)>:
   10e04:	e30731d0 	movw	r3, #29136	; 0x71d0
   10e08:	e1a01000 	mov	r1, r0
   10e0c:	e3403001 	movt	r3, #1
   10e10:	e5930000 	ldr	r0, [r3]
   10e14:	e280000c 	add	r0, r0, #12
   10e18:	ea00009d 	b	11094 <CHeapAllocator::Free(void*)>

00010e1c <operator delete[](void*)>:
   10e1c:	e30731d0 	movw	r3, #29136	; 0x71d0
   10e20:	e1a01000 	mov	r1, r0
   10e24:	e3403001 	movt	r3, #1
   10e28:	e5930000 	ldr	r0, [r3]
   10e2c:	e280000c 	add	r0, r0, #12
   10e30:	ea000097 	b	11094 <CHeapAllocator::Free(void*)>

00010e34 <operator delete(void*, unsigned int)>:
   10e34:	e30731d0 	movw	r3, #29136	; 0x71d0
   10e38:	e1a01000 	mov	r1, r0
   10e3c:	e3403001 	movt	r3, #1
   10e40:	e5930000 	ldr	r0, [r3]
   10e44:	e280000c 	add	r0, r0, #12
   10e48:	ea000091 	b	11094 <CHeapAllocator::Free(void*)>

00010e4c <operator delete[](void*, unsigned int)>:
   10e4c:	e30731d0 	movw	r3, #29136	; 0x71d0
   10e50:	e1a01000 	mov	r1, r0
   10e54:	e3403001 	movt	r3, #1
   10e58:	e5930000 	ldr	r0, [r3]
   10e5c:	e280000c 	add	r0, r0, #12
   10e60:	ea00008b 	b	11094 <CHeapAllocator::Free(void*)>

00010e64 <CHeapAllocator::CHeapAllocator(char const*)>:
   10e64:	e92d4010 	push	{r4, lr}
   10e68:	e1a04000 	mov	r4, r0
   10e6c:	e5801000 	str	r1, [r0]
   10e70:	e3a03000 	mov	r3, #0
   10e74:	e5843004 	str	r3, [r4, #4]
   10e78:	e3a00001 	mov	r0, #1
   10e7c:	e5843008 	str	r3, [r4, #8]
   10e80:	e3a020a8 	mov	r2, #168	; 0xa8
   10e84:	e584300c 	str	r3, [r4, #12]
   10e88:	e1a01003 	mov	r1, r3
   10e8c:	e58400b8 	str	r0, [r4, #184]	; 0xb8
   10e90:	e2840010 	add	r0, r4, #16
   10e94:	ebfffeaa 	bl	10944 <memset>
   10e98:	e59f3020 	ldr	r3, [pc, #32]	; 10ec0 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   10e9c:	e1a02004 	mov	r2, r4
   10ea0:	e283001c 	add	r0, r3, #28
   10ea4:	e5b31004 	ldr	r1, [r3, #4]!
   10ea8:	e2822008 	add	r2, r2, #8
   10eac:	e1530000 	cmp	r3, r0
   10eb0:	e5821008 	str	r1, [r2, #8]
   10eb4:	1afffffa 	bne	10ea4 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   10eb8:	e1a00004 	mov	r0, r4
   10ebc:	e8bd8010 	pop	{r4, pc}
   10ec0:	00017134 	.word	0x00017134

00010ec4 <CHeapAllocator::~CHeapAllocator()>:
   10ec4:	e12fff1e 	bx	lr

00010ec8 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   10ec8:	e5801004 	str	r1, [r0, #4]
   10ecc:	e0811002 	add	r1, r1, r2
   10ed0:	e5801008 	str	r1, [r0, #8]
   10ed4:	e580300c 	str	r3, [r0, #12]
   10ed8:	e12fff1e 	bx	lr

00010edc <CHeapAllocator::GetFreeSpace() const>:
   10edc:	e9900005 	ldmib	r0, {r0, r2}
   10ee0:	e0420000 	sub	r0, r2, r0
   10ee4:	e12fff1e 	bx	lr

00010ee8 <CHeapAllocator::Allocate(unsigned int)>:
   10ee8:	e5903004 	ldr	r3, [r0, #4]
   10eec:	e3530000 	cmp	r3, #0
   10ef0:	0a000065 	beq	1108c <CHeapAllocator::Allocate(unsigned int)+0x1a4>
   10ef4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10ef8:	e1a05000 	mov	r5, r0
   10efc:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   10f00:	e1a04001 	mov	r4, r1
   10f04:	e3500000 	cmp	r0, #0
   10f08:	1a000046 	bne	11028 <CHeapAllocator::Allocate(unsigned int)+0x140>
   10f0c:	e5953010 	ldr	r3, [r5, #16]
   10f10:	e3530000 	cmp	r3, #0
   10f14:	0a000022 	beq	10fa4 <CHeapAllocator::Allocate(unsigned int)+0xbc>
   10f18:	e2852010 	add	r2, r5, #16
   10f1c:	ea000002 	b	10f2c <CHeapAllocator::Allocate(unsigned int)+0x44>
   10f20:	e5b23008 	ldr	r3, [r2, #8]!
   10f24:	e3530000 	cmp	r3, #0
   10f28:	0a00001d 	beq	10fa4 <CHeapAllocator::Allocate(unsigned int)+0xbc>
   10f2c:	e1540003 	cmp	r4, r3
   10f30:	8afffffa 	bhi	10f20 <CHeapAllocator::Allocate(unsigned int)+0x38>
   10f34:	e5926004 	ldr	r6, [r2, #4]
   10f38:	e3560000 	cmp	r6, #0
   10f3c:	01a04003 	moveq	r4, r3
   10f40:	0a000017 	beq	10fa4 <CHeapAllocator::Allocate(unsigned int)+0xbc>
   10f44:	e5961000 	ldr	r1, [r6]
   10f48:	e3043d43 	movw	r3, #19779	; 0x4d43
   10f4c:	e344324c 	movt	r3, #16972	; 0x424c
   10f50:	e1510003 	cmp	r1, r3
   10f54:	05963008 	ldreq	r3, [r6, #8]
   10f58:	05823004 	streq	r3, [r2, #4]
   10f5c:	1a000044 	bne	11074 <CHeapAllocator::Allocate(unsigned int)+0x18c>
   10f60:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10f64:	e3530000 	cmp	r3, #0
   10f68:	1a00002c 	bne	11020 <CHeapAllocator::Allocate(unsigned int)+0x138>
   10f6c:	e316003f 	tst	r6, #63	; 0x3f
   10f70:	e3a03000 	mov	r3, #0
   10f74:	e5c63008 	strb	r3, [r6, #8]
   10f78:	e2860040 	add	r0, r6, #64	; 0x40
   10f7c:	e5c63009 	strb	r3, [r6, #9]
   10f80:	e5c6300a 	strb	r3, [r6, #10]
   10f84:	e5c6300b 	strb	r3, [r6, #11]
   10f88:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   10f8c:	e305177c 	movw	r1, #22396	; 0x577c
   10f90:	e30507cc 	movw	r0, #22476	; 0x57cc
   10f94:	e3401001 	movt	r1, #1
   10f98:	e3a0208e 	mov	r2, #142	; 0x8e
   10f9c:	e3400001 	movt	r0, #1
   10fa0:	eb000505 	bl	123bc <assertion_failed>
   10fa4:	e5956004 	ldr	r6, [r5, #4]
   10fa8:	e284307f 	add	r3, r4, #127	; 0x7f
   10fac:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   10fb0:	e0863003 	add	r3, r6, r3
   10fb4:	e1560003 	cmp	r6, r3
   10fb8:	e595700c 	ldr	r7, [r5, #12]
   10fbc:	3a000006 	bcc	10fdc <CHeapAllocator::Allocate(unsigned int)+0xf4>
   10fc0:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10fc4:	e3570000 	cmp	r7, #0
   10fc8:	1a000018 	bne	11030 <CHeapAllocator::Allocate(unsigned int)+0x148>
   10fcc:	e3530000 	cmp	r3, #0
   10fd0:	1a000022 	bne	11060 <CHeapAllocator::Allocate(unsigned int)+0x178>
   10fd4:	e3a00000 	mov	r0, #0
   10fd8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10fdc:	e5952008 	ldr	r2, [r5, #8]
   10fe0:	e0422007 	sub	r2, r2, r7
   10fe4:	e1530002 	cmp	r3, r2
   10fe8:	8afffff4 	bhi	10fc0 <CHeapAllocator::Allocate(unsigned int)+0xd8>
   10fec:	e5853004 	str	r3, [r5, #4]
   10ff0:	e3a03043 	mov	r3, #67	; 0x43
   10ff4:	e5c63000 	strb	r3, [r6]
   10ff8:	e3a0304d 	mov	r3, #77	; 0x4d
   10ffc:	e5c63001 	strb	r3, [r6, #1]
   11000:	e3a0304c 	mov	r3, #76	; 0x4c
   11004:	e5c63002 	strb	r3, [r6, #2]
   11008:	e3a03042 	mov	r3, #66	; 0x42
   1100c:	e5c63003 	strb	r3, [r6, #3]
   11010:	e5864004 	str	r4, [r6, #4]
   11014:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   11018:	e3530000 	cmp	r3, #0
   1101c:	0affffd2 	beq	10f6c <CHeapAllocator::Allocate(unsigned int)+0x84>
   11020:	eb000318 	bl	11c88 <LeaveCritical>
   11024:	eaffffd0 	b	10f6c <CHeapAllocator::Allocate(unsigned int)+0x84>
   11028:	eb0002eb 	bl	11bdc <EnterCritical>
   1102c:	eaffffb6 	b	10f0c <CHeapAllocator::Allocate(unsigned int)+0x24>
   11030:	e3a02000 	mov	r2, #0
   11034:	e1530002 	cmp	r3, r2
   11038:	e585200c 	str	r2, [r5, #12]
   1103c:	1a00000a 	bne	1106c <CHeapAllocator::Allocate(unsigned int)+0x184>
   11040:	ebffe41d 	bl	a0bc <CLogger::Get()>
   11044:	e5951000 	ldr	r1, [r5]
   11048:	e30537bc 	movw	r3, #22460	; 0x57bc
   1104c:	e3403001 	movt	r3, #1
   11050:	e3a02000 	mov	r2, #0
   11054:	ebffe5f7 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11058:	e3a00000 	mov	r0, #0
   1105c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11060:	eb000308 	bl	11c88 <LeaveCritical>
   11064:	e1a00007 	mov	r0, r7
   11068:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1106c:	eb000305 	bl	11c88 <LeaveCritical>
   11070:	eafffff2 	b	11040 <CHeapAllocator::Allocate(unsigned int)+0x158>
   11074:	e305177c 	movw	r1, #22396	; 0x577c
   11078:	e3050790 	movw	r0, #22416	; 0x5790
   1107c:	e3401001 	movt	r1, #1
   11080:	e3a0205e 	mov	r2, #94	; 0x5e
   11084:	e3400001 	movt	r0, #1
   11088:	eb0004cb 	bl	123bc <assertion_failed>
   1108c:	e3a00000 	mov	r0, #0
   11090:	e12fff1e 	bx	lr

00011094 <CHeapAllocator::Free(void*)>:
   11094:	e3510000 	cmp	r1, #0
   11098:	012fff1e 	bxeq	lr
   1109c:	e92d4070 	push	{r4, r5, r6, lr}
   110a0:	e3043d43 	movw	r3, #19779	; 0x4d43
   110a4:	e5112040 	ldr	r2, [r1, #-64]	; 0xffffffc0
   110a8:	e2415040 	sub	r5, r1, #64	; 0x40
   110ac:	e344324c 	movt	r3, #16972	; 0x424c
   110b0:	e1520003 	cmp	r2, r3
   110b4:	1a00001b 	bne	11128 <CHeapAllocator::Free(void*)+0x94>
   110b8:	e5903010 	ldr	r3, [r0, #16]
   110bc:	e1a06000 	mov	r6, r0
   110c0:	e3530000 	cmp	r3, #0
   110c4:	08bd8070 	popeq	{r4, r5, r6, pc}
   110c8:	e5952004 	ldr	r2, [r5, #4]
   110cc:	e2804010 	add	r4, r0, #16
   110d0:	ea000002 	b	110e0 <CHeapAllocator::Free(void*)+0x4c>
   110d4:	e5b43008 	ldr	r3, [r4, #8]!
   110d8:	e3530000 	cmp	r3, #0
   110dc:	08bd8070 	popeq	{r4, r5, r6, pc}
   110e0:	e1530002 	cmp	r3, r2
   110e4:	1afffffa 	bne	110d4 <CHeapAllocator::Free(void*)+0x40>
   110e8:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   110ec:	e3500000 	cmp	r0, #0
   110f0:	1a000003 	bne	11104 <CHeapAllocator::Free(void*)+0x70>
   110f4:	e5943004 	ldr	r3, [r4, #4]
   110f8:	e5853008 	str	r3, [r5, #8]
   110fc:	e5845004 	str	r5, [r4, #4]
   11100:	e8bd8070 	pop	{r4, r5, r6, pc}
   11104:	eb0002b4 	bl	11bdc <EnterCritical>
   11108:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   1110c:	e5942004 	ldr	r2, [r4, #4]
   11110:	e3530000 	cmp	r3, #0
   11114:	e5852008 	str	r2, [r5, #8]
   11118:	e5845004 	str	r5, [r4, #4]
   1111c:	08bd8070 	popeq	{r4, r5, r6, pc}
   11120:	e8bd4070 	pop	{r4, r5, r6, lr}
   11124:	ea0002d7 	b	11c88 <LeaveCritical>
   11128:	e305177c 	movw	r1, #22396	; 0x577c
   1112c:	e3050790 	movw	r0, #22416	; 0x5790
   11130:	e3401001 	movt	r1, #1
   11134:	e3a020bf 	mov	r2, #191	; 0xbf
   11138:	e3400001 	movt	r0, #1
   1113c:	eb00049e 	bl	123bc <assertion_failed>

00011140 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   11140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11144:	e2515000 	subs	r5, r1, #0
   11148:	0a00001a 	beq	111b8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   1114c:	e3520000 	cmp	r2, #0
   11150:	0a00001b 	beq	111c4 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x84>
   11154:	e5151040 	ldr	r1, [r5, #-64]	; 0xffffffc0
   11158:	e3043d43 	movw	r3, #19779	; 0x4d43
   1115c:	e344324c 	movt	r3, #16972	; 0x424c
   11160:	e2457040 	sub	r7, r5, #64	; 0x40
   11164:	e1510003 	cmp	r1, r3
   11168:	1a000018 	bne	111d0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x90>
   1116c:	e5973004 	ldr	r3, [r7, #4]
   11170:	e1530002 	cmp	r3, r2
   11174:	21a04005 	movcs	r4, r5
   11178:	3a000001 	bcc	11184 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x44>
   1117c:	e1a00004 	mov	r0, r4
   11180:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11184:	e1a01002 	mov	r1, r2
   11188:	e1a06000 	mov	r6, r0
   1118c:	ebffff55 	bl	10ee8 <CHeapAllocator::Allocate(unsigned int)>
   11190:	e2504000 	subs	r4, r0, #0
   11194:	0afffff8 	beq	1117c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x3c>
   11198:	e5972004 	ldr	r2, [r7, #4]
   1119c:	e1a01005 	mov	r1, r5
   111a0:	ebfffdfe 	bl	109a0 <memcpy>
   111a4:	e1a00006 	mov	r0, r6
   111a8:	e1a01005 	mov	r1, r5
   111ac:	ebffffb8 	bl	11094 <CHeapAllocator::Free(void*)>
   111b0:	e1a00004 	mov	r0, r4
   111b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   111b8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   111bc:	e1a01002 	mov	r1, r2
   111c0:	eaffff48 	b	10ee8 <CHeapAllocator::Allocate(unsigned int)>
   111c4:	e1a04002 	mov	r4, r2
   111c8:	ebffffb1 	bl	11094 <CHeapAllocator::Free(void*)>
   111cc:	eaffffea 	b	1117c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x3c>
   111d0:	e305177c 	movw	r1, #22396	; 0x577c
   111d4:	e3050790 	movw	r0, #22416	; 0x5790
   111d8:	e3401001 	movt	r1, #1
   111dc:	e3a020a3 	mov	r2, #163	; 0xa3
   111e0:	e3400001 	movt	r0, #1
   111e4:	eb000474 	bl	123bc <assertion_failed>

000111e8 <InvalidateDataCacheL1Only>:
   111e8:	e92d0070 	push	{r4, r5, r6}
   111ec:	e3a00000 	mov	r0, #0
   111f0:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   111f4:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   111f8:	e3071fff 	movw	r1, #32767	; 0x7fff
   111fc:	e00126a0 	and	r2, r1, r0, lsr #13
   11200:	e30013ff 	movw	r1, #1023	; 0x3ff
   11204:	e00131a0 	and	r3, r1, r0, lsr #3
   11208:	e2822001 	add	r2, r2, #1
   1120c:	e2000007 	and	r0, r0, #7
   11210:	e2800004 	add	r0, r0, #4
   11214:	e16f1f13 	clz	r1, r3
   11218:	e2834001 	add	r4, r3, #1
   1121c:	e2422001 	sub	r2, r2, #1
   11220:	e1a03004 	mov	r3, r4
   11224:	e2533001 	subs	r3, r3, #1
   11228:	e1a05113 	lsl	r5, r3, r1
   1122c:	e1a06012 	lsl	r6, r2, r0
   11230:	e1855006 	orr	r5, r5, r6
   11234:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   11238:	cafffff9 	bgt	11224 <InvalidateDataCacheL1Only+0x3c>
   1123c:	e3520000 	cmp	r2, #0
   11240:	cafffff5 	bgt	1121c <InvalidateDataCacheL1Only+0x34>
   11244:	f57ff04e 	dsb	st
   11248:	f57ff06f 	isb	sy
   1124c:	e8bd0070 	pop	{r4, r5, r6}
   11250:	e12fff1e 	bx	lr

00011254 <InvalidateDataCache>:
   11254:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   11258:	f57ff05f 	dmb	sy
   1125c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   11260:	e1a03ba0 	lsr	r3, r0, #23
   11264:	e213300e 	ands	r3, r3, #14
   11268:	0a00001d 	beq	112e4 <InvalidateDataCache+0x90>
   1126c:	e3a0a000 	mov	sl, #0
   11270:	e08a20aa 	add	r2, sl, sl, lsr #1
   11274:	e1a01230 	lsr	r1, r0, r2
   11278:	e2011007 	and	r1, r1, #7
   1127c:	e3510002 	cmp	r1, #2
   11280:	ba000014 	blt	112d8 <InvalidateDataCache+0x84>
   11284:	e10f9000 	mrs	r9, CPSR
   11288:	f10c0080 	cpsid	i
   1128c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11290:	f57ff06f 	isb	sy
   11294:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   11298:	e121f009 	msr	CPSR_c, r9
   1129c:	e2012007 	and	r2, r1, #7
   112a0:	e2822004 	add	r2, r2, #4
   112a4:	e30043ff 	movw	r4, #1023	; 0x3ff
   112a8:	e01441a1 	ands	r4, r4, r1, lsr #3
   112ac:	e16f5f14 	clz	r5, r4
   112b0:	e3077fff 	movw	r7, #32767	; 0x7fff
   112b4:	e01776a1 	ands	r7, r7, r1, lsr #13
   112b8:	e1a09007 	mov	r9, r7
   112bc:	e18ab514 	orr	fp, sl, r4, lsl r5
   112c0:	e18bb219 	orr	fp, fp, r9, lsl r2
   112c4:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   112c8:	e2599001 	subs	r9, r9, #1
   112cc:	aafffffa 	bge	112bc <InvalidateDataCache+0x68>
   112d0:	e2544001 	subs	r4, r4, #1
   112d4:	aafffff7 	bge	112b8 <InvalidateDataCache+0x64>
   112d8:	e28aa002 	add	sl, sl, #2
   112dc:	e153000a 	cmp	r3, sl
   112e0:	caffffe2 	bgt	11270 <InvalidateDataCache+0x1c>
   112e4:	e3a0a000 	mov	sl, #0
   112e8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   112ec:	f57ff04e 	dsb	st
   112f0:	f57ff06f 	isb	sy
   112f4:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   112f8:	e12fff1e 	bx	lr

000112fc <CleanDataCache>:
   112fc:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   11300:	f57ff05f 	dmb	sy
   11304:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   11308:	e1a03ba0 	lsr	r3, r0, #23
   1130c:	e213300e 	ands	r3, r3, #14
   11310:	0a00001d 	beq	1138c <CleanDataCache+0x90>
   11314:	e3a0a000 	mov	sl, #0
   11318:	e08a20aa 	add	r2, sl, sl, lsr #1
   1131c:	e1a01230 	lsr	r1, r0, r2
   11320:	e2011007 	and	r1, r1, #7
   11324:	e3510002 	cmp	r1, #2
   11328:	ba000014 	blt	11380 <CleanDataCache+0x84>
   1132c:	e10f9000 	mrs	r9, CPSR
   11330:	f10c0080 	cpsid	i
   11334:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11338:	f57ff06f 	isb	sy
   1133c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   11340:	e121f009 	msr	CPSR_c, r9
   11344:	e2012007 	and	r2, r1, #7
   11348:	e2822004 	add	r2, r2, #4
   1134c:	e30043ff 	movw	r4, #1023	; 0x3ff
   11350:	e01441a1 	ands	r4, r4, r1, lsr #3
   11354:	e16f5f14 	clz	r5, r4
   11358:	e3077fff 	movw	r7, #32767	; 0x7fff
   1135c:	e01776a1 	ands	r7, r7, r1, lsr #13
   11360:	e1a09007 	mov	r9, r7
   11364:	e18ab514 	orr	fp, sl, r4, lsl r5
   11368:	e18bb219 	orr	fp, fp, r9, lsl r2
   1136c:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   11370:	e2599001 	subs	r9, r9, #1
   11374:	aafffffa 	bge	11364 <CleanDataCache+0x68>
   11378:	e2544001 	subs	r4, r4, #1
   1137c:	aafffff7 	bge	11360 <CleanDataCache+0x64>
   11380:	e28aa002 	add	sl, sl, #2
   11384:	e153000a 	cmp	r3, sl
   11388:	caffffe2 	bgt	11318 <CleanDataCache+0x1c>
   1138c:	e3a0a000 	mov	sl, #0
   11390:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11394:	f57ff04e 	dsb	st
   11398:	f57ff06f 	isb	sy
   1139c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   113a0:	e12fff1e 	bx	lr

000113a4 <CleanAndInvalidateDataCacheRange>:
   113a4:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   113a8:	e1a03823 	lsr	r3, r3, #16
   113ac:	e203300f 	and	r3, r3, #15
   113b0:	e3a02004 	mov	r2, #4
   113b4:	e1a02312 	lsl	r2, r2, r3
   113b8:	e0801001 	add	r1, r0, r1
   113bc:	e2423001 	sub	r3, r2, #1
   113c0:	e1c00003 	bic	r0, r0, r3
   113c4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   113c8:	e0800002 	add	r0, r0, r2
   113cc:	e1500001 	cmp	r0, r1
   113d0:	3afffffb 	bcc	113c4 <CleanAndInvalidateDataCacheRange+0x20>
   113d4:	f57ff04e 	dsb	st
   113d8:	e12fff1e 	bx	lr

000113dc <CExceptionHandler::CExceptionHandler()>:
   113dc:	e30731cc 	movw	r3, #29132	; 0x71cc
   113e0:	e3403001 	movt	r3, #1
   113e4:	e92d4010 	push	{r4, lr}
   113e8:	e1a04000 	mov	r4, r0
   113ec:	e5930000 	ldr	r0, [r3]
   113f0:	e3500000 	cmp	r0, #0
   113f4:	1a000018 	bne	1145c <CExceptionHandler::CExceptionHandler()+0x80>
   113f8:	e5834000 	str	r4, [r3]
   113fc:	e3011794 	movw	r1, #6036	; 0x1794
   11400:	e3401001 	movt	r1, #1
   11404:	e30126f4 	movw	r2, #5876	; 0x16f4
   11408:	e3402001 	movt	r2, #1
   1140c:	e3013744 	movw	r3, #5956	; 0x1744
   11410:	e3403001 	movt	r3, #1
   11414:	e2411004 	sub	r1, r1, #4
   11418:	e242200c 	sub	r2, r2, #12
   1141c:	e2433010 	sub	r3, r3, #16
   11420:	e1a01141 	asr	r1, r1, #2
   11424:	e1a02142 	asr	r2, r2, #2
   11428:	e2411002 	sub	r1, r1, #2
   1142c:	e1a03143 	asr	r3, r3, #2
   11430:	e2422002 	sub	r2, r2, #2
   11434:	e2433002 	sub	r3, r3, #2
   11438:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   1143c:	e5801004 	str	r1, [r0, #4]
   11440:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11444:	e580200c 	str	r2, [r0, #12]
   11448:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1144c:	e5803010 	str	r3, [r0, #16]
   11450:	eb000221 	bl	11cdc <SyncDataAndInstructionCache>
   11454:	e1a00004 	mov	r0, r4
   11458:	e8bd8010 	pop	{r4, pc}
   1145c:	e30517f8 	movw	r1, #22520	; 0x57f8
   11460:	e3050520 	movw	r0, #21792	; 0x5520
   11464:	e3401001 	movt	r1, #1
   11468:	e3a02030 	mov	r2, #48	; 0x30
   1146c:	e3400001 	movt	r0, #1
   11470:	eb0003d1 	bl	123bc <assertion_failed>

00011474 <CExceptionHandler::~CExceptionHandler()>:
   11474:	e30731cc 	movw	r3, #29132	; 0x71cc
   11478:	e3a02000 	mov	r2, #0
   1147c:	e3403001 	movt	r3, #1
   11480:	e5832000 	str	r2, [r3]
   11484:	e12fff1e 	bx	lr

00011488 <CExceptionHandler::Throw(unsigned int)>:
   11488:	e92d4010 	push	{r4, lr}
   1148c:	e24dd008 	sub	sp, sp, #8
   11490:	e1a04001 	mov	r4, r1
   11494:	ebffe308 	bl	a0bc <CLogger::Get()>
   11498:	e3072154 	movw	r2, #29012	; 0x7154
   1149c:	e3053810 	movw	r3, #22544	; 0x5810
   114a0:	e3402001 	movt	r2, #1
   114a4:	e3403001 	movt	r3, #1
   114a8:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   114ac:	e3a02000 	mov	r2, #0
   114b0:	e58d1000 	str	r1, [sp]
   114b4:	e30518bc 	movw	r1, #22716	; 0x58bc
   114b8:	e3401001 	movt	r1, #1
   114bc:	ebffe4dd 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   114c0:	e28dd008 	add	sp, sp, #8
   114c4:	e8bd8010 	pop	{r4, pc}

000114c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   114c8:	e3510002 	cmp	r1, #2
   114cc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   114d0:	e1a09001 	mov	r9, r1
   114d4:	e24dd024 	sub	sp, sp, #36	; 0x24
   114d8:	e1a04002 	mov	r4, r2
   114dc:	0a000028 	beq	11584 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   114e0:	e3510003 	cmp	r1, #3
   114e4:	13a06000 	movne	r6, #0
   114e8:	11a08006 	movne	r8, r6
   114ec:	1a000001 	bne	114f8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   114f0:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   114f4:	ee166f10 	mrc	15, 0, r6, cr6, cr0, {0}
   114f8:	e3540000 	cmp	r4, #0
   114fc:	0a000024 	beq	11594 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   11500:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   11504:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   11508:	e5945044 	ldr	r5, [r4, #68]	; 0x44
   1150c:	e203301f 	and	r3, r3, #31
   11510:	e3530011 	cmp	r3, #17
   11514:	0a000024 	beq	115ac <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   11518:	e3530012 	cmp	r3, #18
   1151c:	089400a0 	ldmeq	r4, {r5, r7}
   11520:	e30518bc 	movw	r1, #22716	; 0x58bc
   11524:	e1a00005 	mov	r0, r5
   11528:	e3401001 	movt	r1, #1
   1152c:	eb0005c3 	bl	12c40 <debug_stacktrace(unsigned int const*, char const*)>
   11530:	ebffe2e1 	bl	a0bc <CLogger::Get()>
   11534:	e58d7014 	str	r7, [sp, #20]
   11538:	e3073154 	movw	r3, #29012	; 0x7154
   1153c:	e58d5010 	str	r5, [sp, #16]
   11540:	e58d600c 	str	r6, [sp, #12]
   11544:	e3403001 	movt	r3, #1
   11548:	e5942050 	ldr	r2, [r4, #80]	; 0x50
   1154c:	e7931109 	ldr	r1, [r3, r9, lsl #2]
   11550:	e58d2004 	str	r2, [sp, #4]
   11554:	e3a02000 	mov	r2, #0
   11558:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1155c:	e58d1000 	str	r1, [sp]
   11560:	e30518bc 	movw	r1, #22716	; 0x58bc
   11564:	e58d3018 	str	r3, [sp, #24]
   11568:	e305382c 	movw	r3, #22572	; 0x582c
   1156c:	e3403001 	movt	r3, #1
   11570:	e3401001 	movt	r1, #1
   11574:	e58d8008 	str	r8, [sp, #8]
   11578:	ebffe4ae 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1157c:	e28dd024 	add	sp, sp, #36	; 0x24
   11580:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11584:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   11588:	ee166f50 	mrc	15, 0, r6, cr6, cr0, {2}
   1158c:	e3540000 	cmp	r4, #0
   11590:	1affffda 	bne	11500 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x38>
   11594:	e30517f8 	movw	r1, #22520	; 0x57f8
   11598:	e3050820 	movw	r0, #22560	; 0x5820
   1159c:	e3401001 	movt	r1, #1
   115a0:	e3a02069 	mov	r2, #105	; 0x69
   115a4:	e3400001 	movt	r0, #1
   115a8:	eb000383 	bl	123bc <assertion_failed>
   115ac:	e594700c 	ldr	r7, [r4, #12]
   115b0:	e5945008 	ldr	r5, [r4, #8]
   115b4:	eaffffd9 	b	11520 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>

000115b8 <CExceptionHandler::Get()>:
   115b8:	e30731cc 	movw	r3, #29132	; 0x71cc
   115bc:	e3403001 	movt	r3, #1
   115c0:	e5930000 	ldr	r0, [r3]
   115c4:	e3500000 	cmp	r0, #0
   115c8:	112fff1e 	bxne	lr
   115cc:	e30517f8 	movw	r1, #22520	; 0x57f8
   115d0:	e30506d4 	movw	r0, #22228	; 0x56d4
   115d4:	e3401001 	movt	r1, #1
   115d8:	e3a02087 	mov	r2, #135	; 0x87
   115dc:	e3400001 	movt	r0, #1
   115e0:	e92d4010 	push	{r4, lr}
   115e4:	eb000374 	bl	123bc <assertion_failed>

000115e8 <ExceptionHandler>:
   115e8:	e92d4070 	push	{r4, r5, r6, lr}
   115ec:	e1a04000 	mov	r4, r0
   115f0:	e1a05001 	mov	r5, r1
   115f4:	eb0002f6 	bl	121d4 <CInterruptSystem::DisableFIQ()>
   115f8:	f1080040 	cpsie	f
   115fc:	e30731cc 	movw	r3, #29132	; 0x71cc
   11600:	e3403001 	movt	r3, #1
   11604:	e5930000 	ldr	r0, [r3]
   11608:	e3500000 	cmp	r0, #0
   1160c:	0a000003 	beq	11620 <ExceptionHandler+0x38>
   11610:	e1a02005 	mov	r2, r5
   11614:	e1a01004 	mov	r1, r4
   11618:	e8bd4070 	pop	{r4, r5, r6, lr}
   1161c:	eaffffa9 	b	114c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   11620:	e30517f8 	movw	r1, #22520	; 0x57f8
   11624:	e30506d4 	movw	r0, #22228	; 0x56d4
   11628:	e3401001 	movt	r1, #1
   1162c:	e3a02087 	mov	r2, #135	; 0x87
   11630:	e3400001 	movt	r0, #1
   11634:	eb000360 	bl	123bc <assertion_failed>

00011638 <raise>:
   11638:	e30731cc 	movw	r3, #29132	; 0x71cc
   1163c:	e3403001 	movt	r3, #1
   11640:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11644:	e24dd00c 	sub	sp, sp, #12
   11648:	e5933000 	ldr	r3, [r3]
   1164c:	e3530000 	cmp	r3, #0
   11650:	0a00000d 	beq	1168c <raise+0x54>
   11654:	ebffe298 	bl	a0bc <CLogger::Get()>
   11658:	e3072154 	movw	r2, #29012	; 0x7154
   1165c:	e3053810 	movw	r3, #22544	; 0x5810
   11660:	e3402001 	movt	r2, #1
   11664:	e30518bc 	movw	r1, #22716	; 0x58bc
   11668:	e3403001 	movt	r3, #1
   1166c:	e592c010 	ldr	ip, [r2, #16]
   11670:	e3a02000 	mov	r2, #0
   11674:	e3401001 	movt	r1, #1
   11678:	e58dc000 	str	ip, [sp]
   1167c:	ebffe46d 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11680:	e3a00000 	mov	r0, #0
   11684:	e28dd00c 	add	sp, sp, #12
   11688:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1168c:	e30517f8 	movw	r1, #22520	; 0x57f8
   11690:	e30506d4 	movw	r0, #22228	; 0x56d4
   11694:	e3401001 	movt	r1, #1
   11698:	e3a02087 	mov	r2, #135	; 0x87
   1169c:	e3400001 	movt	r0, #1
   116a0:	eb000345 	bl	123bc <assertion_failed>

000116a4 <UndefinedInstructionInternal>:
   116a4:	e24dd004 	sub	sp, sp, #4
   116a8:	e24ee004 	sub	lr, lr, #4
   116ac:	e92d4000 	stmfd	sp!, {lr}
   116b0:	e14fe000 	mrs	lr, SPSR
   116b4:	e92d4000 	stmfd	sp!, {lr}
   116b8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   116bc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   116c0:	e1a0100d 	mov	r1, sp
   116c4:	f1020012 	cps	#18
   116c8:	e1a0200d 	mov	r2, sp
   116cc:	e1a0300e 	mov	r3, lr
   116d0:	f1020011 	cps	#17
   116d4:	e1a0400d 	mov	r4, sp
   116d8:	e1a0500e 	mov	r5, lr
   116dc:	f102001f 	cps	#31
   116e0:	e1a0d001 	mov	sp, r1
   116e4:	e92d003c 	push	{r2, r3, r4, r5}
   116e8:	e1a0100d 	mov	r1, sp
   116ec:	e3a00001 	mov	r0, #1
   116f0:	eaffffbc 	b	115e8 <ExceptionHandler>

000116f4 <PrefetchAbortStub>:
   116f4:	e24dd004 	sub	sp, sp, #4
   116f8:	e24ee004 	sub	lr, lr, #4
   116fc:	e92d4000 	stmfd	sp!, {lr}
   11700:	e14fe000 	mrs	lr, SPSR
   11704:	e92d4000 	stmfd	sp!, {lr}
   11708:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1170c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11710:	e1a0100d 	mov	r1, sp
   11714:	f1020012 	cps	#18
   11718:	e1a0200d 	mov	r2, sp
   1171c:	e1a0300e 	mov	r3, lr
   11720:	f1020011 	cps	#17
   11724:	e1a0400d 	mov	r4, sp
   11728:	e1a0500e 	mov	r5, lr
   1172c:	f102001f 	cps	#31
   11730:	e1a0d001 	mov	sp, r1
   11734:	e92d003c 	push	{r2, r3, r4, r5}
   11738:	e1a0100d 	mov	r1, sp
   1173c:	e3a00002 	mov	r0, #2
   11740:	eaffffa8 	b	115e8 <ExceptionHandler>

00011744 <DataAbortStub>:
   11744:	e24dd004 	sub	sp, sp, #4
   11748:	e24ee008 	sub	lr, lr, #8
   1174c:	e92d4000 	stmfd	sp!, {lr}
   11750:	e14fe000 	mrs	lr, SPSR
   11754:	e92d4000 	stmfd	sp!, {lr}
   11758:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1175c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11760:	e1a0100d 	mov	r1, sp
   11764:	f1020012 	cps	#18
   11768:	e1a0200d 	mov	r2, sp
   1176c:	e1a0300e 	mov	r3, lr
   11770:	f1020011 	cps	#17
   11774:	e1a0400d 	mov	r4, sp
   11778:	e1a0500e 	mov	r5, lr
   1177c:	f102001f 	cps	#31
   11780:	e1a0d001 	mov	sp, r1
   11784:	e92d003c 	push	{r2, r3, r4, r5}
   11788:	e1a0100d 	mov	r1, sp
   1178c:	e3a00003 	mov	r0, #3
   11790:	eaffff94 	b	115e8 <ExceptionHandler>

00011794 <UndefinedInstructionStub>:
   11794:	e92d4001 	push	{r0, lr}
   11798:	eef80a10 	vmrs	r0, fpexc
   1179c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   117a0:	0affffbf 	beq	116a4 <UndefinedInstructionInternal>
   117a4:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   117a8:	eee80a10 	vmsr	fpexc, r0
   117ac:	e8fd8001 	ldm	sp!, {r0, pc}^

000117b0 <IRQStub>:
   117b0:	e24ee004 	sub	lr, lr, #4
   117b4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   117b8:	e59f003c 	ldr	r0, [pc, #60]	; 117fc <FIQStub+0x34>
   117bc:	e580e000 	str	lr, [r0]
   117c0:	eb0002fc 	bl	123b8 <InterruptHandler>
   117c4:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

000117c8 <FIQStub>:
   117c8:	e24ee004 	sub	lr, lr, #4
   117cc:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   117d0:	e59f2028 	ldr	r2, [pc, #40]	; 11800 <FIQStub+0x38>
   117d4:	e5921000 	ldr	r1, [r2]
   117d8:	e3510000 	cmp	r1, #0
   117dc:	0a000002 	beq	117ec <FIQStub+0x24>
   117e0:	e5920004 	ldr	r0, [r2, #4]
   117e4:	e12fff31 	blx	r1
   117e8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   117ec:	e59f1010 	ldr	r1, [pc, #16]	; 11804 <FIQStub+0x3c>
   117f0:	e3a00000 	mov	r0, #0
   117f4:	e5810000 	str	r0, [r1]
   117f8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   117fc:	00017174 	.word	0x00017174
   11800:	00017168 	.word	0x00017168
   11804:	3f00b20c 	.word	0x3f00b20c

00011808 <CMemorySystem::~CMemorySystem()>:
   11808:	e30731d0 	movw	r3, #29136	; 0x71d0
   1180c:	e3403001 	movt	r3, #1
   11810:	e92d4070 	push	{r4, r5, r6, lr}
   11814:	e1a04000 	mov	r4, r0
   11818:	e5932000 	ldr	r2, [r3]
   1181c:	e1500002 	cmp	r0, r2
   11820:	0a000005 	beq	1183c <CMemorySystem::~CMemorySystem()+0x34>
   11824:	e28400c8 	add	r0, r4, #200	; 0xc8
   11828:	eb000a57 	bl	1418c <CPageAllocator::~CPageAllocator()>
   1182c:	e284000c 	add	r0, r4, #12
   11830:	ebfffda3 	bl	10ec4 <CHeapAllocator::~CHeapAllocator()>
   11834:	e1a00004 	mov	r0, r4
   11838:	e8bd8070 	pop	{r4, r5, r6, pc}
   1183c:	e5d02000 	ldrb	r2, [r0]
   11840:	e3a05000 	mov	r5, #0
   11844:	e5835000 	str	r5, [r3]
   11848:	e1520005 	cmp	r2, r5
   1184c:	0afffff4 	beq	11824 <CMemorySystem::~CMemorySystem()+0x1c>
   11850:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11854:	e3c33005 	bic	r3, r3, #5
   11858:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   1185c:	ebfffea6 	bl	112fc <CleanDataCache>
   11860:	ebfffe7b 	bl	11254 <InvalidateDataCache>
   11864:	ee085f17 	mcr	15, 0, r5, cr8, cr7, {0}
   11868:	f57ff04f 	dsb	sy
   1186c:	eaffffec 	b	11824 <CMemorySystem::~CMemorySystem()+0x1c>

00011870 <CMemorySystem::Destructor()>:
   11870:	e30731d0 	movw	r3, #29136	; 0x71d0
   11874:	e3403001 	movt	r3, #1
   11878:	e5932000 	ldr	r2, [r3]
   1187c:	e1520000 	cmp	r2, r0
   11880:	112fff1e 	bxne	lr
   11884:	e5d22000 	ldrb	r2, [r2]
   11888:	e92d4010 	push	{r4, lr}
   1188c:	e3a04000 	mov	r4, #0
   11890:	e1520004 	cmp	r2, r4
   11894:	e5834000 	str	r4, [r3]
   11898:	08bd8010 	popeq	{r4, pc}
   1189c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   118a0:	e3c33005 	bic	r3, r3, #5
   118a4:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   118a8:	ebfffe93 	bl	112fc <CleanDataCache>
   118ac:	ebfffe68 	bl	11254 <InvalidateDataCache>
   118b0:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   118b4:	f57ff04f 	dsb	sy
   118b8:	e8bd8010 	pop	{r4, pc}

000118bc <CMemorySystem::GetMemSize() const>:
   118bc:	e30731d0 	movw	r3, #29136	; 0x71d0
   118c0:	e3403001 	movt	r3, #1
   118c4:	e5933000 	ldr	r3, [r3]
   118c8:	e3530000 	cmp	r3, #0
   118cc:	0a000002 	beq	118dc <CMemorySystem::GetMemSize() const+0x20>
   118d0:	e9930009 	ldmib	r3, {r0, r3}
   118d4:	e0800003 	add	r0, r0, r3
   118d8:	e12fff1e 	bx	lr
   118dc:	e30518c4 	movw	r1, #22724	; 0x58c4
   118e0:	e3a020a0 	mov	r2, #160	; 0xa0
   118e4:	e3401001 	movt	r1, #1
   118e8:	e281000c 	add	r0, r1, #12
   118ec:	e92d4010 	push	{r4, lr}
   118f0:	eb0002b1 	bl	123bc <assertion_failed>

000118f4 <CMemorySystem::Get()>:
   118f4:	e30731d0 	movw	r3, #29136	; 0x71d0
   118f8:	e3403001 	movt	r3, #1
   118fc:	e5930000 	ldr	r0, [r3]
   11900:	e3500000 	cmp	r0, #0
   11904:	112fff1e 	bxne	lr
   11908:	e30518c4 	movw	r1, #22724	; 0x58c4
   1190c:	e3a020a6 	mov	r2, #166	; 0xa6
   11910:	e3401001 	movt	r1, #1
   11914:	e281000c 	add	r0, r1, #12
   11918:	e92d4010 	push	{r4, lr}
   1191c:	eb0002a6 	bl	123bc <assertion_failed>

00011920 <CMemorySystem::EnableMMU()>:
   11920:	e5d03000 	ldrb	r3, [r0]
   11924:	e92d4010 	push	{r4, lr}
   11928:	e3530000 	cmp	r3, #0
   1192c:	0a00001a 	beq	1199c <CMemorySystem::EnableMMU()+0x7c>
   11930:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   11934:	e3833040 	orr	r3, r3, #64	; 0x40
   11938:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   1193c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   11940:	e3130001 	tst	r3, #1
   11944:	1a000019 	bne	119b0 <CMemorySystem::EnableMMU()+0x90>
   11948:	e3a04000 	mov	r4, #0
   1194c:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   11950:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   11954:	e1500004 	cmp	r0, r4
   11958:	0a000019 	beq	119c4 <CMemorySystem::EnableMMU()+0xa4>
   1195c:	eb000096 	bl	11bbc <CPageTable::GetBaseAddress() const>
   11960:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   11964:	e3a03001 	mov	r3, #1
   11968:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   1196c:	ebfffe38 	bl	11254 <InvalidateDataCache>
   11970:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   11974:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   11978:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   1197c:	f57ff04f 	dsb	sy
   11980:	f57ff06f 	isb	sy
   11984:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11988:	e3c33002 	bic	r3, r3, #2
   1198c:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   11990:	e3833005 	orr	r3, r3, #5
   11994:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11998:	e8bd8010 	pop	{r4, pc}
   1199c:	e30518c4 	movw	r1, #22724	; 0x58c4
   119a0:	e3a020ac 	mov	r2, #172	; 0xac
   119a4:	e3401001 	movt	r1, #1
   119a8:	e281001c 	add	r0, r1, #28
   119ac:	eb000282 	bl	123bc <assertion_failed>
   119b0:	e30518c4 	movw	r1, #22724	; 0x58c4
   119b4:	e3a020ba 	mov	r2, #186	; 0xba
   119b8:	e3401001 	movt	r1, #1
   119bc:	e281002c 	add	r0, r1, #44	; 0x2c
   119c0:	eb00027d 	bl	123bc <assertion_failed>
   119c4:	e30518c4 	movw	r1, #22724	; 0x58c4
   119c8:	e3a020c0 	mov	r2, #192	; 0xc0
   119cc:	e3401001 	movt	r1, #1
   119d0:	e2810058 	add	r0, r1, #88	; 0x58
   119d4:	eb000278 	bl	123bc <assertion_failed>

000119d8 <CMemorySystem::CMemorySystem(bool)>:
   119d8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   119dc:	e1a04000 	mov	r4, r0
   119e0:	e1a03001 	mov	r3, r1
   119e4:	e3a05000 	mov	r5, #0
   119e8:	e5c03000 	strb	r3, [r0]
   119ec:	e280700c 	add	r7, r0, #12
   119f0:	e59f1120 	ldr	r1, [pc, #288]	; 11b18 <CMemorySystem::CMemorySystem(bool)+0x140>
   119f4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   119f8:	e5845004 	str	r5, [r4, #4]
   119fc:	e1a00007 	mov	r0, r7
   11a00:	e5845008 	str	r5, [r4, #8]
   11a04:	e28460c8 	add	r6, r4, #200	; 0xc8
   11a08:	ebfffd15 	bl	10e64 <CHeapAllocator::CHeapAllocator(char const*)>
   11a0c:	e1a00006 	mov	r0, r6
   11a10:	eb0009d6 	bl	14170 <CPageAllocator::CPageAllocator()>
   11a14:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   11a18:	e30731d0 	movw	r3, #29136	; 0x71d0
   11a1c:	e3403001 	movt	r3, #1
   11a20:	e5935000 	ldr	r5, [r3]
   11a24:	e3550000 	cmp	r5, #0
   11a28:	0a000002 	beq	11a38 <CMemorySystem::CMemorySystem(bool)+0x60>
   11a2c:	e1a00004 	mov	r0, r4
   11a30:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11a34:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11a38:	e5834000 	str	r4, [r3]
   11a3c:	e3a01001 	mov	r1, #1
   11a40:	e28d000c 	add	r0, sp, #12
   11a44:	eb0003af 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11a48:	e58d5000 	str	r5, [sp]
   11a4c:	e3a03014 	mov	r3, #20
   11a50:	e08d2003 	add	r2, sp, r3
   11a54:	e3a01005 	mov	r1, #5
   11a58:	e3401001 	movt	r1, #1
   11a5c:	e28d000c 	add	r0, sp, #12
   11a60:	eb0003ee 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11a64:	e3500000 	cmp	r0, #0
   11a68:	0a000016 	beq	11ac8 <CMemorySystem::CMemorySystem(bool)+0xf0>
   11a6c:	e59d3020 	ldr	r3, [sp, #32]
   11a70:	e3530000 	cmp	r3, #0
   11a74:	1a000022 	bne	11b04 <CMemorySystem::CMemorySystem(bool)+0x12c>
   11a78:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   11a7c:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   11a80:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   11a84:	e5843004 	str	r3, [r4, #4]
   11a88:	e1a00007 	mov	r0, r7
   11a8c:	e3a03701 	mov	r3, #262144	; 0x40000
   11a90:	e3a01605 	mov	r1, #5242880	; 0x500000
   11a94:	ebfffd0b 	bl	10ec8 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   11a98:	e3a02501 	mov	r2, #4194304	; 0x400000
   11a9c:	e1a01005 	mov	r1, r5
   11aa0:	e1a00006 	mov	r0, r6
   11aa4:	eb0009b9 	bl	14190 <CPageAllocator::Setup(unsigned int, unsigned int)>
   11aa8:	e5d43000 	ldrb	r3, [r4]
   11aac:	e3530000 	cmp	r3, #0
   11ab0:	1a00000a 	bne	11ae0 <CMemorySystem::CMemorySystem(bool)+0x108>
   11ab4:	e28d000c 	add	r0, sp, #12
   11ab8:	eb000399 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   11abc:	e1a00004 	mov	r0, r4
   11ac0:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11ac4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11ac8:	e58d0020 	str	r0, [sp, #32]
   11acc:	e3a03303 	mov	r3, #201326592	; 0xc000000
   11ad0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   11ad4:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   11ad8:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   11adc:	eaffffe8 	b	11a84 <CMemorySystem::CMemorySystem(bool)+0xac>
   11ae0:	e3a00004 	mov	r0, #4
   11ae4:	ebfffcba 	bl	10dd4 <operator new(unsigned int)>
   11ae8:	e5941004 	ldr	r1, [r4, #4]
   11aec:	e1a05000 	mov	r5, r0
   11af0:	eb00000c 	bl	11b28 <CPageTable::CPageTable(unsigned int)>
   11af4:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   11af8:	e1a00004 	mov	r0, r4
   11afc:	ebffff87 	bl	11920 <CMemorySystem::EnableMMU()>
   11b00:	eaffffeb 	b	11ab4 <CMemorySystem::CMemorySystem(bool)+0xdc>
   11b04:	e30518c4 	movw	r1, #22724	; 0x58c4
   11b08:	e3a0204e 	mov	r2, #78	; 0x4e
   11b0c:	e3401001 	movt	r1, #1
   11b10:	e2810074 	add	r0, r1, #116	; 0x74
   11b14:	eb000228 	bl	123bc <assertion_failed>
   11b18:	00015930 	.word	0x00015930

00011b1c <CMemorySystem::GetCoherentPage(unsigned int)>:
   11b1c:	e1a00600 	lsl	r0, r0, #12
   11b20:	e2800501 	add	r0, r0, #4194304	; 0x400000
   11b24:	e12fff1e 	bx	lr

00011b28 <CPageTable::CPageTable(unsigned int)>:
   11b28:	e3a0c9ba 	mov	ip, #3047424	; 0x2e8000
   11b2c:	e3a03000 	mov	r3, #0
   11b30:	e92d4070 	push	{r4, r5, r6, lr}
   11b34:	e1a06000 	mov	r6, r0
   11b38:	e580c000 	str	ip, [r0]
   11b3c:	e304e954 	movw	lr, #18772	; 0x4954
   11b40:	e340e001 	movt	lr, #1
   11b44:	e3000412 	movw	r0, #1042	; 0x412
   11b48:	e3400001 	movt	r0, #1
   11b4c:	e30f5ffe 	movw	r5, #65534	; 0xfffe
   11b50:	e3445003 	movt	r5, #16387	; 0x4003
   11b54:	e3004416 	movw	r4, #1046	; 0x416
   11b58:	e3404001 	movt	r4, #1
   11b5c:	e300240e 	movw	r2, #1038	; 0x40e
   11b60:	ea00000c 	b	11b98 <CPageTable::CPageTable(unsigned int)+0x70>
   11b64:	e153000e 	cmp	r3, lr
   11b68:	e300240e 	movw	r2, #1038	; 0x40e
   11b6c:	3a000008 	bcc	11b94 <CPageTable::CPageTable(unsigned int)+0x6c>
   11b70:	e3530501 	cmp	r3, #4194304	; 0x400000
   11b74:	01a02000 	moveq	r2, r0
   11b78:	0a000005 	beq	11b94 <CPageTable::CPageTable(unsigned int)+0x6c>
   11b7c:	e1530001 	cmp	r3, r1
   11b80:	e300241e 	movw	r2, #1054	; 0x41e
   11b84:	3a000002 	bcc	11b94 <CPageTable::CPageTable(unsigned int)+0x6c>
   11b88:	e1530005 	cmp	r3, r5
   11b8c:	91a02004 	movls	r2, r4
   11b90:	83a02000 	movhi	r2, #0
   11b94:	e28cc004 	add	ip, ip, #4
   11b98:	e1822003 	orr	r2, r2, r3
   11b9c:	e3730601 	cmn	r3, #1048576	; 0x100000
   11ba0:	e58c2000 	str	r2, [ip]
   11ba4:	e2833601 	add	r3, r3, #1048576	; 0x100000
   11ba8:	1affffed 	bne	11b64 <CPageTable::CPageTable(unsigned int)+0x3c>
   11bac:	ebfffdd2 	bl	112fc <CleanDataCache>
   11bb0:	e1a00006 	mov	r0, r6
   11bb4:	e8bd8070 	pop	{r4, r5, r6, pc}

00011bb8 <CPageTable::~CPageTable()>:
   11bb8:	e12fff1e 	bx	lr

00011bbc <CPageTable::GetBaseAddress() const>:
   11bbc:	e5900000 	ldr	r0, [r0]
   11bc0:	e3800059 	orr	r0, r0, #89	; 0x59
   11bc4:	e12fff1e 	bx	lr

00011bc8 <CurrentExecutionLevel>:
   11bc8:	e10f0000 	mrs	r0, CPSR
   11bcc:	e3100040 	tst	r0, #64	; 0x40
   11bd0:	07e003d0 	ubfxeq	r0, r0, #7, #1
   11bd4:	13a00002 	movne	r0, #2
   11bd8:	e12fff1e 	bx	lr

00011bdc <EnterCritical>:
   11bdc:	e2403001 	sub	r3, r0, #1
   11be0:	e3530001 	cmp	r3, #1
   11be4:	e92d4010 	push	{r4, lr}
   11be8:	8a000012 	bhi	11c38 <EnterCritical+0x5c>
   11bec:	e10f1000 	mrs	r1, CPSR
   11bf0:	e3500002 	cmp	r0, #2
   11bf4:	1a000015 	bne	11c50 <EnterCritical+0x74>
   11bf8:	f10c00c0 	cpsid	if
   11bfc:	e30731d4 	movw	r3, #29140	; 0x71d4
   11c00:	e3403001 	movt	r3, #1
   11c04:	e5932000 	ldr	r2, [r3]
   11c08:	e3520013 	cmp	r2, #19
   11c0c:	8a000017 	bhi	11c70 <EnterCritical+0x94>
   11c10:	e5932000 	ldr	r2, [r3]
   11c14:	e3500001 	cmp	r0, #1
   11c18:	e2820001 	add	r0, r2, #1
   11c1c:	e0832102 	add	r2, r3, r2, lsl #2
   11c20:	e5830000 	str	r0, [r3]
   11c24:	e5821004 	str	r1, [r2, #4]
   11c28:	1a000000 	bne	11c30 <EnterCritical+0x54>
   11c2c:	f1080040 	cpsie	f
   11c30:	f57ff05f 	dmb	sy
   11c34:	e8bd8010 	pop	{r4, pc}
   11c38:	e3051954 	movw	r1, #22868	; 0x5954
   11c3c:	e3050964 	movw	r0, #22884	; 0x5964
   11c40:	e3401001 	movt	r1, #1
   11c44:	e3a02064 	mov	r2, #100	; 0x64
   11c48:	e3400001 	movt	r0, #1
   11c4c:	eb0001da 	bl	123bc <assertion_failed>
   11c50:	e3110040 	tst	r1, #64	; 0x40
   11c54:	0affffe7 	beq	11bf8 <EnterCritical+0x1c>
   11c58:	e3051954 	movw	r1, #22868	; 0x5954
   11c5c:	e305099c 	movw	r0, #22940	; 0x599c
   11c60:	e3401001 	movt	r1, #1
   11c64:	e3a0206a 	mov	r2, #106	; 0x6a
   11c68:	e3400001 	movt	r0, #1
   11c6c:	eb0001d2 	bl	123bc <assertion_failed>
   11c70:	e3051954 	movw	r1, #22868	; 0x5954
   11c74:	e30509cc 	movw	r0, #22988	; 0x59cc
   11c78:	e3401001 	movt	r1, #1
   11c7c:	e3a0206e 	mov	r2, #110	; 0x6e
   11c80:	e3400001 	movt	r0, #1
   11c84:	eb0001cc 	bl	123bc <assertion_failed>

00011c88 <LeaveCritical>:
   11c88:	f57ff05f 	dmb	sy
   11c8c:	f10c0040 	cpsid	f
   11c90:	e30731d4 	movw	r3, #29140	; 0x71d4
   11c94:	e3403001 	movt	r3, #1
   11c98:	e5932000 	ldr	r2, [r3]
   11c9c:	e3520000 	cmp	r2, #0
   11ca0:	0a000006 	beq	11cc0 <LeaveCritical+0x38>
   11ca4:	e5932000 	ldr	r2, [r3]
   11ca8:	e2422001 	sub	r2, r2, #1
   11cac:	e5832000 	str	r2, [r3]
   11cb0:	e0833102 	add	r3, r3, r2, lsl #2
   11cb4:	e5933004 	ldr	r3, [r3, #4]
   11cb8:	e121f003 	msr	CPSR_c, r3
   11cbc:	e12fff1e 	bx	lr
   11cc0:	e3051954 	movw	r1, #22868	; 0x5954
   11cc4:	e30509f4 	movw	r0, #23028	; 0x59f4
   11cc8:	e3401001 	movt	r1, #1
   11ccc:	e3a0207f 	mov	r2, #127	; 0x7f
   11cd0:	e3400001 	movt	r0, #1
   11cd4:	e92d4010 	push	{r4, lr}
   11cd8:	eb0001b7 	bl	123bc <assertion_failed>

00011cdc <SyncDataAndInstructionCache>:
   11cdc:	e92d4010 	push	{r4, lr}
   11ce0:	ebfffd85 	bl	112fc <CleanDataCache>
   11ce4:	e3a03000 	mov	r3, #0
   11ce8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11cec:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11cf0:	f57ff04f 	dsb	sy
   11cf4:	f57ff06f 	isb	sy
   11cf8:	e8bd8010 	pop	{r4, pc}

00011cfc <CInterruptSystem::CInterruptSystem()>:
   11cfc:	e3a02000 	mov	r2, #0
   11d00:	e2403004 	sub	r3, r0, #4
   11d04:	e2801f53 	add	r1, r0, #332	; 0x14c
   11d08:	e5a32004 	str	r2, [r3, #4]!
   11d0c:	e1530001 	cmp	r3, r1
   11d10:	e5832150 	str	r2, [r3, #336]	; 0x150
   11d14:	1afffffb 	bne	11d08 <CInterruptSystem::CInterruptSystem()+0xc>
   11d18:	e3073228 	movw	r3, #29224	; 0x7228
   11d1c:	e3403001 	movt	r3, #1
   11d20:	e5830000 	str	r0, [r3]
   11d24:	e12fff1e 	bx	lr

00011d28 <CInterruptSystem::~CInterruptSystem()>:
   11d28:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11d2c:	f10c0080 	cpsid	i
   11d30:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11d34:	e3072228 	movw	r2, #29224	; 0x7228
   11d38:	e3433f00 	movt	r3, #16128	; 0x3f00
   11d3c:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
   11d40:	e3402001 	movt	r2, #1
   11d44:	e3a01000 	mov	r1, #0
   11d48:	e583120c 	str	r1, [r3, #524]	; 0x20c
   11d4c:	e3e0c000 	mvn	ip, #0
   11d50:	e583c21c 	str	ip, [r3, #540]	; 0x21c
   11d54:	e583c220 	str	ip, [r3, #544]	; 0x220
   11d58:	e583c224 	str	ip, [r3, #548]	; 0x224
   11d5c:	e58e1040 	str	r1, [lr, #64]	; 0x40
   11d60:	e5821000 	str	r1, [r2]
   11d64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011d68 <CInterruptSystem::Initialize()>:
   11d68:	e30127b0 	movw	r2, #6064	; 0x17b0
   11d6c:	e30137c8 	movw	r3, #6088	; 0x17c8
   11d70:	e3402001 	movt	r2, #1
   11d74:	e3403001 	movt	r3, #1
   11d78:	e2422018 	sub	r2, r2, #24
   11d7c:	e243301c 	sub	r3, r3, #28
   11d80:	e1a02142 	asr	r2, r2, #2
   11d84:	e1a03143 	asr	r3, r3, #2
   11d88:	e2422002 	sub	r2, r2, #2
   11d8c:	e92d4010 	push	{r4, lr}
   11d90:	e2433002 	sub	r3, r3, #2
   11d94:	e3a04000 	mov	r4, #0
   11d98:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11d9c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   11da0:	e1c421f8 	strd	r2, [r4, #24]
   11da4:	ebffffcc 	bl	11cdc <SyncDataAndInstructionCache>
   11da8:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11dac:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   11db0:	e3433f00 	movt	r3, #16128	; 0x3f00
   11db4:	e3e02000 	mvn	r2, #0
   11db8:	e583420c 	str	r4, [r3, #524]	; 0x20c
   11dbc:	e583221c 	str	r2, [r3, #540]	; 0x21c
   11dc0:	e5832220 	str	r2, [r3, #544]	; 0x220
   11dc4:	e5832224 	str	r2, [r3, #548]	; 0x224
   11dc8:	e5814040 	str	r4, [r1, #64]	; 0x40
   11dcc:	f1080080 	cpsie	i
   11dd0:	e3a00001 	mov	r0, #1
   11dd4:	e8bd8010 	pop	{r4, pc}

00011dd8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   11dd8:	e3510053 	cmp	r1, #83	; 0x53
   11ddc:	e92d4010 	push	{r4, lr}
   11de0:	8a00001d 	bhi	11e5c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x84>
   11de4:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   11de8:	e080e101 	add	lr, r0, r1, lsl #2
   11dec:	e35c0000 	cmp	ip, #0
   11df0:	1a00001f 	bne	11e74 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x9c>
   11df4:	e7802101 	str	r2, [r0, r1, lsl #2]
   11df8:	e3510047 	cmp	r1, #71	; 0x47
   11dfc:	e58e3150 	str	r3, [lr, #336]	; 0x150
   11e00:	9a000006 	bls	11e20 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   11e04:	e3510049 	cmp	r1, #73	; 0x49
   11e08:	1a00001f 	bne	11e8c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb4>
   11e0c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   11e10:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   11e14:	e3833002 	orr	r3, r3, #2
   11e18:	e5823040 	str	r3, [r2, #64]	; 0x40
   11e1c:	e8bd8010 	pop	{r4, pc}
   11e20:	e351001f 	cmp	r1, #31
   11e24:	930b3210 	movwls	r3, #45584	; 0xb210
   11e28:	93433f00 	movtls	r3, #16128	; 0x3f00
   11e2c:	9a000005 	bls	11e48 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x70>
   11e30:	e30b2218 	movw	r2, #45592	; 0xb218
   11e34:	e30b3214 	movw	r3, #45588	; 0xb214
   11e38:	e3432f00 	movt	r2, #16128	; 0x3f00
   11e3c:	e351003f 	cmp	r1, #63	; 0x3f
   11e40:	e3433f00 	movt	r3, #16128	; 0x3f00
   11e44:	81a03002 	movhi	r3, r2
   11e48:	e201101f 	and	r1, r1, #31
   11e4c:	e3a02001 	mov	r2, #1
   11e50:	e1a01112 	lsl	r1, r2, r1
   11e54:	e5831000 	str	r1, [r3]
   11e58:	e8bd8010 	pop	{r4, pc}
   11e5c:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11e60:	e3050a1c 	movw	r0, #23068	; 0x5a1c
   11e64:	e3401001 	movt	r1, #1
   11e68:	e3a02076 	mov	r2, #118	; 0x76
   11e6c:	e3400001 	movt	r0, #1
   11e70:	eb000151 	bl	123bc <assertion_failed>
   11e74:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11e78:	e3050a30 	movw	r0, #23088	; 0x5a30
   11e7c:	e3401001 	movt	r1, #1
   11e80:	e3a02077 	mov	r2, #119	; 0x77
   11e84:	e3400001 	movt	r0, #1
   11e88:	eb00014b 	bl	123bc <assertion_failed>
   11e8c:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11e90:	e3050a4c 	movw	r0, #23116	; 0x5a4c
   11e94:	e3401001 	movt	r1, #1
   11e98:	e3a020b0 	mov	r2, #176	; 0xb0
   11e9c:	e3400001 	movt	r0, #1
   11ea0:	eb000145 	bl	123bc <assertion_failed>

00011ea4 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   11ea4:	e3510053 	cmp	r1, #83	; 0x53
   11ea8:	e92d4010 	push	{r4, lr}
   11eac:	8a00001e 	bhi	11f2c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x88>
   11eb0:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   11eb4:	e0802101 	add	r2, r0, r1, lsl #2
   11eb8:	e3530000 	cmp	r3, #0
   11ebc:	0a000020 	beq	11f44 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa0>
   11ec0:	e3510047 	cmp	r1, #71	; 0x47
   11ec4:	9a000009 	bls	11ef0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   11ec8:	e3510049 	cmp	r1, #73	; 0x49
   11ecc:	1a000022 	bne	11f5c <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb8>
   11ed0:	e3a0c101 	mov	ip, #1073741824	; 0x40000000
   11ed4:	e59c3040 	ldr	r3, [ip, #64]	; 0x40
   11ed8:	e3c33002 	bic	r3, r3, #2
   11edc:	e58c3040 	str	r3, [ip, #64]	; 0x40
   11ee0:	e3a03000 	mov	r3, #0
   11ee4:	e7803101 	str	r3, [r0, r1, lsl #2]
   11ee8:	e5823150 	str	r3, [r2, #336]	; 0x150
   11eec:	e8bd8010 	pop	{r4, pc}
   11ef0:	e351001f 	cmp	r1, #31
   11ef4:	930b321c 	movwls	r3, #45596	; 0xb21c
   11ef8:	93433f00 	movtls	r3, #16128	; 0x3f00
   11efc:	9a000005 	bls	11f18 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   11f00:	e30bc224 	movw	ip, #45604	; 0xb224
   11f04:	e30b3220 	movw	r3, #45600	; 0xb220
   11f08:	e343cf00 	movt	ip, #16128	; 0x3f00
   11f0c:	e351003f 	cmp	r1, #63	; 0x3f
   11f10:	e3433f00 	movt	r3, #16128	; 0x3f00
   11f14:	81a0300c 	movhi	r3, ip
   11f18:	e201e01f 	and	lr, r1, #31
   11f1c:	e3a0c001 	mov	ip, #1
   11f20:	e1a0ce1c 	lsl	ip, ip, lr
   11f24:	e583c000 	str	ip, [r3]
   11f28:	eaffffec 	b	11ee0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   11f2c:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11f30:	e3050a1c 	movw	r0, #23068	; 0x5a1c
   11f34:	e3401001 	movt	r1, #1
   11f38:	e3a02081 	mov	r2, #129	; 0x81
   11f3c:	e3400001 	movt	r0, #1
   11f40:	eb00011d 	bl	123bc <assertion_failed>
   11f44:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11f48:	e3050a6c 	movw	r0, #23148	; 0x5a6c
   11f4c:	e3401001 	movt	r1, #1
   11f50:	e3a02082 	mov	r2, #130	; 0x82
   11f54:	e3400001 	movt	r0, #1
   11f58:	eb000117 	bl	123bc <assertion_failed>
   11f5c:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11f60:	e3050a4c 	movw	r0, #23116	; 0x5a4c
   11f64:	e3401001 	movt	r1, #1
   11f68:	e3a020c8 	mov	r2, #200	; 0xc8
   11f6c:	e3400001 	movt	r0, #1
   11f70:	eb000111 	bl	123bc <assertion_failed>

00011f74 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   11f74:	e3510047 	cmp	r1, #71	; 0x47
   11f78:	e92d4010 	push	{r4, lr}
   11f7c:	8a00000d 	bhi	11fb8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x44>
   11f80:	e3520000 	cmp	r2, #0
   11f84:	0a000011 	beq	11fd0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x5c>
   11f88:	e3070168 	movw	r0, #29032	; 0x7168
   11f8c:	e3400001 	movt	r0, #1
   11f90:	e590c000 	ldr	ip, [r0]
   11f94:	e35c0000 	cmp	ip, #0
   11f98:	1a000012 	bne	11fe8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x74>
   11f9c:	e5802000 	str	r2, [r0]
   11fa0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   11fa4:	e3432f00 	movt	r2, #16128	; 0x3f00
   11fa8:	e3811080 	orr	r1, r1, #128	; 0x80
   11fac:	e5803004 	str	r3, [r0, #4]
   11fb0:	e582120c 	str	r1, [r2, #524]	; 0x20c
   11fb4:	e8bd8010 	pop	{r4, pc}
   11fb8:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11fbc:	e3050a88 	movw	r0, #23176	; 0x5a88
   11fc0:	e3401001 	movt	r1, #1
   11fc4:	e3a0208f 	mov	r2, #143	; 0x8f
   11fc8:	e3400001 	movt	r0, #1
   11fcc:	eb0000fa 	bl	123bc <assertion_failed>
   11fd0:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11fd4:	e3050abc 	movw	r0, #23228	; 0x5abc
   11fd8:	e3401001 	movt	r1, #1
   11fdc:	e3a02090 	mov	r2, #144	; 0x90
   11fe0:	e3400001 	movt	r0, #1
   11fe4:	eb0000f4 	bl	123bc <assertion_failed>
   11fe8:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   11fec:	e3050a9c 	movw	r0, #23196	; 0x5a9c
   11ff0:	e3401001 	movt	r1, #1
   11ff4:	e3a02091 	mov	r2, #145	; 0x91
   11ff8:	e3400001 	movt	r0, #1
   11ffc:	eb0000ee 	bl	123bc <assertion_failed>

00012000 <CInterruptSystem::DisconnectFIQ()>:
   12000:	e3073168 	movw	r3, #29032	; 0x7168
   12004:	e3403001 	movt	r3, #1
   12008:	e5932000 	ldr	r2, [r3]
   1200c:	e3520000 	cmp	r2, #0
   12010:	0a00000c 	beq	12048 <CInterruptSystem::DisconnectFIQ()+0x48>
   12014:	e3a01a0b 	mov	r1, #45056	; 0xb000
   12018:	e3a02000 	mov	r2, #0
   1201c:	e3431f00 	movt	r1, #16128	; 0x3f00
   12020:	e581220c 	str	r2, [r1, #524]	; 0x20c
   12024:	e5c32000 	strb	r2, [r3]
   12028:	e5c32001 	strb	r2, [r3, #1]
   1202c:	e5c32002 	strb	r2, [r3, #2]
   12030:	e5c32003 	strb	r2, [r3, #3]
   12034:	e5c32004 	strb	r2, [r3, #4]
   12038:	e5c32005 	strb	r2, [r3, #5]
   1203c:	e5c32006 	strb	r2, [r3, #6]
   12040:	e5c32007 	strb	r2, [r3, #7]
   12044:	e12fff1e 	bx	lr
   12048:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   1204c:	e3050ab4 	movw	r0, #23220	; 0x5ab4
   12050:	e3401001 	movt	r1, #1
   12054:	e3a0209b 	mov	r2, #155	; 0x9b
   12058:	e3400001 	movt	r0, #1
   1205c:	e92d4010 	push	{r4, lr}
   12060:	eb0000d5 	bl	123bc <assertion_failed>

00012064 <CInterruptSystem::EnableIRQ(unsigned int)>:
   12064:	e3500053 	cmp	r0, #83	; 0x53
   12068:	e92d4010 	push	{r4, lr}
   1206c:	8a000017 	bhi	120d0 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   12070:	e3500047 	cmp	r0, #71	; 0x47
   12074:	8a00000e 	bhi	120b4 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   12078:	e350001f 	cmp	r0, #31
   1207c:	930b3210 	movwls	r3, #45584	; 0xb210
   12080:	93433f00 	movtls	r3, #16128	; 0x3f00
   12084:	9a000005 	bls	120a0 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   12088:	e30b2218 	movw	r2, #45592	; 0xb218
   1208c:	e30b3214 	movw	r3, #45588	; 0xb214
   12090:	e3432f00 	movt	r2, #16128	; 0x3f00
   12094:	e350003f 	cmp	r0, #63	; 0x3f
   12098:	e3433f00 	movt	r3, #16128	; 0x3f00
   1209c:	81a03002 	movhi	r3, r2
   120a0:	e200001f 	and	r0, r0, #31
   120a4:	e3a02001 	mov	r2, #1
   120a8:	e1a00012 	lsl	r0, r2, r0
   120ac:	e5830000 	str	r0, [r3]
   120b0:	e8bd8010 	pop	{r4, pc}
   120b4:	e3500049 	cmp	r0, #73	; 0x49
   120b8:	1a00000a 	bne	120e8 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   120bc:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   120c0:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   120c4:	e3833002 	orr	r3, r3, #2
   120c8:	e5823040 	str	r3, [r2, #64]	; 0x40
   120cc:	e8bd8010 	pop	{r4, pc}
   120d0:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   120d4:	e3050a1c 	movw	r0, #23068	; 0x5a1c
   120d8:	e3401001 	movt	r1, #1
   120dc:	e3a020a7 	mov	r2, #167	; 0xa7
   120e0:	e3400001 	movt	r0, #1
   120e4:	eb0000b4 	bl	123bc <assertion_failed>
   120e8:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   120ec:	e3050a4c 	movw	r0, #23116	; 0x5a4c
   120f0:	e3401001 	movt	r1, #1
   120f4:	e3a020b0 	mov	r2, #176	; 0xb0
   120f8:	e3400001 	movt	r0, #1
   120fc:	eb0000ae 	bl	123bc <assertion_failed>

00012100 <CInterruptSystem::DisableIRQ(unsigned int)>:
   12100:	e3500053 	cmp	r0, #83	; 0x53
   12104:	e92d4010 	push	{r4, lr}
   12108:	8a000017 	bhi	1216c <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   1210c:	e3500047 	cmp	r0, #71	; 0x47
   12110:	8a00000e 	bhi	12150 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   12114:	e350001f 	cmp	r0, #31
   12118:	930b321c 	movwls	r3, #45596	; 0xb21c
   1211c:	93433f00 	movtls	r3, #16128	; 0x3f00
   12120:	9a000005 	bls	1213c <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   12124:	e30b2224 	movw	r2, #45604	; 0xb224
   12128:	e30b3220 	movw	r3, #45600	; 0xb220
   1212c:	e3432f00 	movt	r2, #16128	; 0x3f00
   12130:	e350003f 	cmp	r0, #63	; 0x3f
   12134:	e3433f00 	movt	r3, #16128	; 0x3f00
   12138:	81a03002 	movhi	r3, r2
   1213c:	e200001f 	and	r0, r0, #31
   12140:	e3a02001 	mov	r2, #1
   12144:	e1a00012 	lsl	r0, r2, r0
   12148:	e5830000 	str	r0, [r3]
   1214c:	e8bd8010 	pop	{r4, pc}
   12150:	e3500049 	cmp	r0, #73	; 0x49
   12154:	1a00000a 	bne	12184 <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   12158:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   1215c:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   12160:	e3c33002 	bic	r3, r3, #2
   12164:	e5823040 	str	r3, [r2, #64]	; 0x40
   12168:	e8bd8010 	pop	{r4, pc}
   1216c:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   12170:	e3050a1c 	movw	r0, #23068	; 0x5a1c
   12174:	e3401001 	movt	r1, #1
   12178:	e3a020bf 	mov	r2, #191	; 0xbf
   1217c:	e3400001 	movt	r0, #1
   12180:	eb00008d 	bl	123bc <assertion_failed>
   12184:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   12188:	e3050a4c 	movw	r0, #23116	; 0x5a4c
   1218c:	e3401001 	movt	r1, #1
   12190:	e3a020c8 	mov	r2, #200	; 0xc8
   12194:	e3400001 	movt	r0, #1
   12198:	eb000087 	bl	123bc <assertion_failed>

0001219c <CInterruptSystem::EnableFIQ(unsigned int)>:
   1219c:	e3500047 	cmp	r0, #71	; 0x47
   121a0:	8a000004 	bhi	121b8 <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   121a4:	e3a03a0b 	mov	r3, #45056	; 0xb000
   121a8:	e3800080 	orr	r0, r0, #128	; 0x80
   121ac:	e3433f00 	movt	r3, #16128	; 0x3f00
   121b0:	e583020c 	str	r0, [r3, #524]	; 0x20c
   121b4:	e12fff1e 	bx	lr
   121b8:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   121bc:	e3050a88 	movw	r0, #23176	; 0x5a88
   121c0:	e3401001 	movt	r1, #1
   121c4:	e3a020d7 	mov	r2, #215	; 0xd7
   121c8:	e3400001 	movt	r0, #1
   121cc:	e92d4010 	push	{r4, lr}
   121d0:	eb000079 	bl	123bc <assertion_failed>

000121d4 <CInterruptSystem::DisableFIQ()>:
   121d4:	e3a03a0b 	mov	r3, #45056	; 0xb000
   121d8:	e3a02000 	mov	r2, #0
   121dc:	e3433f00 	movt	r3, #16128	; 0x3f00
   121e0:	e583220c 	str	r2, [r3, #524]	; 0x20c
   121e4:	e12fff1e 	bx	lr

000121e8 <CInterruptSystem::Get()>:
   121e8:	e3073228 	movw	r3, #29224	; 0x7228
   121ec:	e3403001 	movt	r3, #1
   121f0:	e5930000 	ldr	r0, [r3]
   121f4:	e3500000 	cmp	r0, #0
   121f8:	112fff1e 	bxne	lr
   121fc:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   12200:	e30506d4 	movw	r0, #22228	; 0x56d4
   12204:	e3401001 	movt	r1, #1
   12208:	e3a020e9 	mov	r2, #233	; 0xe9
   1220c:	e3400001 	movt	r0, #1
   12210:	e92d4010 	push	{r4, lr}
   12214:	eb000068 	bl	123bc <assertion_failed>

00012218 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   12218:	e3510053 	cmp	r1, #83	; 0x53
   1221c:	e92d4010 	push	{r4, lr}
   12220:	8a00000b 	bhi	12254 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   12224:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   12228:	e0803101 	add	r3, r0, r1, lsl #2
   1222c:	e3540000 	cmp	r4, #0
   12230:	0a000003 	beq	12244 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   12234:	e5930150 	ldr	r0, [r3, #336]	; 0x150
   12238:	e12fff34 	blx	r4
   1223c:	e3a00001 	mov	r0, #1
   12240:	e8bd8010 	pop	{r4, pc}
   12244:	e1a00001 	mov	r0, r1
   12248:	ebffffac 	bl	12100 <CInterruptSystem::DisableIRQ(unsigned int)>
   1224c:	e1a00004 	mov	r0, r4
   12250:	e8bd8010 	pop	{r4, pc}
   12254:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   12258:	e3050a1c 	movw	r0, #23068	; 0x5a1c
   1225c:	e3401001 	movt	r1, #1
   12260:	e3a020ef 	mov	r2, #239	; 0xef
   12264:	e3400001 	movt	r0, #1
   12268:	eb000053 	bl	123bc <assertion_failed>

0001226c <CInterruptSystem::InterruptHandler()>:
   1226c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12270:	e3077228 	movw	r7, #29224	; 0x7228
   12274:	e3407001 	movt	r7, #1
   12278:	e24dd010 	sub	sp, sp, #16
   1227c:	e5972000 	ldr	r2, [r7]
   12280:	e3520000 	cmp	r2, #0
   12284:	0a00003a 	beq	12374 <CInterruptSystem::InterruptHandler()+0x108>
   12288:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   1228c:	e5916060 	ldr	r6, [r1, #96]	; 0x60
   12290:	e3c63e1f 	bic	r3, r6, #496	; 0x1f0
   12294:	e3c33002 	bic	r3, r3, #2
   12298:	e3530000 	cmp	r3, #0
   1229c:	1a00003a 	bne	1238c <CInterruptSystem::InterruptHandler()+0x120>
   122a0:	e2166002 	ands	r6, r6, #2
   122a4:	1a000025 	bne	12340 <CInterruptSystem::InterruptHandler()+0xd4>
   122a8:	e3a03a0b 	mov	r3, #45056	; 0xb000
   122ac:	e28d8008 	add	r8, sp, #8
   122b0:	e3433f00 	movt	r3, #16128	; 0x3f00
   122b4:	e5934204 	ldr	r4, [r3, #516]	; 0x204
   122b8:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   122bc:	e3540000 	cmp	r4, #0
   122c0:	e58d2008 	str	r2, [sp, #8]
   122c4:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   122c8:	e6ef3073 	uxtb	r3, r3
   122cc:	e58d300c 	str	r3, [sp, #12]
   122d0:	1a000005 	bne	122ec <CInterruptSystem::InterruptHandler()+0x80>
   122d4:	e2866020 	add	r6, r6, #32
   122d8:	e3560060 	cmp	r6, #96	; 0x60
   122dc:	0a000033 	beq	123b0 <CInterruptSystem::InterruptHandler()+0x144>
   122e0:	e4984004 	ldr	r4, [r8], #4
   122e4:	e3540000 	cmp	r4, #0
   122e8:	0afffff9 	beq	122d4 <CInterruptSystem::InterruptHandler()+0x68>
   122ec:	e1a05006 	mov	r5, r6
   122f0:	ea000002 	b	12300 <CInterruptSystem::InterruptHandler()+0x94>
   122f4:	e1b040a4 	lsrs	r4, r4, #1
   122f8:	e2855001 	add	r5, r5, #1
   122fc:	0afffff4 	beq	122d4 <CInterruptSystem::InterruptHandler()+0x68>
   12300:	e3140001 	tst	r4, #1
   12304:	0afffffa 	beq	122f4 <CInterruptSystem::InterruptHandler()+0x88>
   12308:	e5973000 	ldr	r3, [r7]
   1230c:	e3550053 	cmp	r5, #83	; 0x53
   12310:	8a000011 	bhi	1235c <CInterruptSystem::InterruptHandler()+0xf0>
   12314:	e7932105 	ldr	r2, [r3, r5, lsl #2]
   12318:	e3520000 	cmp	r2, #0
   1231c:	0a000004 	beq	12334 <CInterruptSystem::InterruptHandler()+0xc8>
   12320:	e2855054 	add	r5, r5, #84	; 0x54
   12324:	e7930105 	ldr	r0, [r3, r5, lsl #2]
   12328:	e28dd010 	add	sp, sp, #16
   1232c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12330:	e12fff12 	bx	r2
   12334:	e1a00005 	mov	r0, r5
   12338:	ebffff70 	bl	12100 <CInterruptSystem::DisableIRQ(unsigned int)>
   1233c:	eaffffec 	b	122f4 <CInterruptSystem::InterruptHandler()+0x88>
   12340:	e5923124 	ldr	r3, [r2, #292]	; 0x124
   12344:	e3530000 	cmp	r3, #0
   12348:	0a000015 	beq	123a4 <CInterruptSystem::InterruptHandler()+0x138>
   1234c:	e5920274 	ldr	r0, [r2, #628]	; 0x274
   12350:	e28dd010 	add	sp, sp, #16
   12354:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12358:	e12fff13 	bx	r3
   1235c:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   12360:	e3050a1c 	movw	r0, #23068	; 0x5a1c
   12364:	e3401001 	movt	r1, #1
   12368:	e3a020ef 	mov	r2, #239	; 0xef
   1236c:	e3400001 	movt	r0, #1
   12370:	eb000011 	bl	123bc <assertion_failed>
   12374:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   12378:	e30506d4 	movw	r0, #22228	; 0x56d4
   1237c:	e3401001 	movt	r1, #1
   12380:	e3002102 	movw	r2, #258	; 0x102
   12384:	e3400001 	movt	r0, #1
   12388:	eb00000b 	bl	123bc <assertion_failed>
   1238c:	e3051a0c 	movw	r1, #23052	; 0x5a0c
   12390:	e3050acc 	movw	r0, #23244	; 0x5acc
   12394:	e3401001 	movt	r1, #1
   12398:	e3002106 	movw	r2, #262	; 0x106
   1239c:	e3400001 	movt	r0, #1
   123a0:	eb000005 	bl	123bc <assertion_failed>
   123a4:	e5913040 	ldr	r3, [r1, #64]	; 0x40
   123a8:	e3c33002 	bic	r3, r3, #2
   123ac:	e5813040 	str	r3, [r1, #64]	; 0x40
   123b0:	e28dd010 	add	sp, sp, #16
   123b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000123b8 <InterruptHandler>:
   123b8:	eaffffab 	b	1226c <CInterruptSystem::InterruptHandler()>

000123bc <assertion_failed>:
   123bc:	e92d4080 	push	{r7, lr}
   123c0:	e1a05000 	mov	r5, r0
   123c4:	e24dd018 	sub	sp, sp, #24
   123c8:	e1a04001 	mov	r4, r1
   123cc:	e1a06002 	mov	r6, r2
   123d0:	e1a0700d 	mov	r7, sp
   123d4:	ebffff7e 	bl	121d4 <CInterruptSystem::DisableFIQ()>
   123d8:	f1080040 	cpsie	f
   123dc:	e28d0008 	add	r0, sp, #8
   123e0:	ebffeddf 	bl	db64 <CString::CString()>
   123e4:	e3051b00 	movw	r1, #23296	; 0x5b00
   123e8:	e1a02004 	mov	r2, r4
   123ec:	e3401001 	movt	r1, #1
   123f0:	e1a03006 	mov	r3, r6
   123f4:	e28d0008 	add	r0, sp, #8
   123f8:	ebfff375 	bl	f1d4 <CString::Format(char const*, ...)>
   123fc:	e28d0008 	add	r0, sp, #8
   12400:	ebffee0e 	bl	dc40 <CString::operator char const*() const>
   12404:	e1a01000 	mov	r1, r0
   12408:	e1a00007 	mov	r0, r7
   1240c:	eb00020b 	bl	12c40 <debug_stacktrace(unsigned int const*, char const*)>
   12410:	ebffdf29 	bl	a0bc <CLogger::Get()>
   12414:	e1a04000 	mov	r4, r0
   12418:	e28d0008 	add	r0, sp, #8
   1241c:	ebffee07 	bl	dc40 <CString::operator char const*() const>
   12420:	e58d5000 	str	r5, [sp]
   12424:	e3053b08 	movw	r3, #23304	; 0x5b08
   12428:	e3403001 	movt	r3, #1
   1242c:	e1a01000 	mov	r1, r0
   12430:	e3a02000 	mov	r2, #0
   12434:	e1a00004 	mov	r0, r4
   12438:	ebffe0fe 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1243c:	eafffffe 	b	1243c <assertion_failed+0x80>

00012440 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12440:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12444:	e3a01000 	mov	r1, #0
   12448:	e92d4030 	push	{r4, r5, lr}
   1244c:	e3a02001 	mov	r2, #1
   12450:	e5c3100c 	strb	r1, [r3, #12]
   12454:	e24dd014 	sub	sp, sp, #20
   12458:	e5c3100d 	strb	r1, [r3, #13]
   1245c:	e1a05000 	mov	r5, r0
   12460:	e5c3100e 	strb	r1, [r3, #14]
   12464:	e28d0008 	add	r0, sp, #8
   12468:	e5c3100f 	strb	r1, [r3, #15]
   1246c:	e5c31010 	strb	r1, [r3, #16]
   12470:	e5c32011 	strb	r2, [r3, #17]
   12474:	e5c31012 	strb	r1, [r3, #18]
   12478:	e5c31013 	strb	r1, [r3, #19]
   1247c:	eb000121 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12480:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   12484:	e3000408 	movw	r0, #1032	; 0x408
   12488:	e58d0000 	str	r0, [sp]
   1248c:	e308100b 	movw	r1, #32779	; 0x800b
   12490:	e3401004 	movt	r1, #4
   12494:	e3003414 	movw	r3, #1044	; 0x414
   12498:	e28d0008 	add	r0, sp, #8
   1249c:	eb00015f 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   124a0:	e2504000 	subs	r4, r0, #0
   124a4:	e28d0008 	add	r0, sp, #8
   124a8:	0a000003 	beq	124bc <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x7c>
   124ac:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   124b0:	e593300c 	ldr	r3, [r3, #12]
   124b4:	e3530000 	cmp	r3, #0
   124b8:	0a000000 	beq	124c0 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x80>
   124bc:	e3a04000 	mov	r4, #0
   124c0:	eb000117 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   124c4:	e1a00004 	mov	r0, r4
   124c8:	e28dd014 	add	sp, sp, #20
   124cc:	e8bd8030 	pop	{r4, r5, pc}

000124d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   124d0:	e92d4070 	push	{r4, r5, r6, lr}
   124d4:	e24dd028 	sub	sp, sp, #40	; 0x28
   124d8:	e1a04000 	mov	r4, r0
   124dc:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   124e0:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   124e4:	e5805014 	str	r5, [r0, #20]
   124e8:	e3550000 	cmp	r5, #0
   124ec:	e580c008 	str	ip, [r0, #8]
   124f0:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   124f4:	e5dd6044 	ldrb	r6, [sp, #68]	; 0x44
   124f8:	e584000c 	str	r0, [r4, #12]
   124fc:	e3a00000 	mov	r0, #0
   12500:	e8840006 	stm	r4, {r1, r2}
   12504:	e5843010 	str	r3, [r4, #16]
   12508:	e5840018 	str	r0, [r4, #24]
   1250c:	e584001c 	str	r0, [r4, #28]
   12510:	e5840020 	str	r0, [r4, #32]
   12514:	e5840024 	str	r0, [r4, #36]	; 0x24
   12518:	1a000035 	bne	125f4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x124>
   1251c:	e1520000 	cmp	r2, r0
   12520:	11510000 	cmpne	r1, r0
   12524:	1a00001a 	bne	12594 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc4>
   12528:	e1a01005 	mov	r1, r5
   1252c:	e28d000c 	add	r0, sp, #12
   12530:	eb0000f4 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12534:	e58d5000 	str	r5, [sp]
   12538:	e3a03014 	mov	r3, #20
   1253c:	e08d2003 	add	r2, sp, r3
   12540:	e3a01003 	mov	r1, #3
   12544:	e3401004 	movt	r1, #4
   12548:	e28d000c 	add	r0, sp, #12
   1254c:	eb000133 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12550:	e3500000 	cmp	r0, #0
   12554:	0a000007 	beq	12578 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa8>
   12558:	e1cd22d0 	ldrd	r2, [sp, #32]
   1255c:	e5842000 	str	r2, [r4]
   12560:	e2422d0a 	sub	r2, r2, #640	; 0x280
   12564:	e5843004 	str	r3, [r4, #4]
   12568:	e2433e1e 	sub	r3, r3, #480	; 0x1e0
   1256c:	e3530e69 	cmp	r3, #1680	; 0x690
   12570:	93520d36 	cmpls	r2, #3456	; 0xd80
   12574:	9a000002 	bls	12584 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb4>
   12578:	e3a02d0a 	mov	r2, #640	; 0x280
   1257c:	e3a03e1e 	mov	r3, #480	; 0x1e0
   12580:	e1c420f0 	strd	r2, [r4]
   12584:	e28d000c 	add	r0, sp, #12
   12588:	eb0000e5 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   1258c:	e594c008 	ldr	ip, [r4, #8]
   12590:	e5943010 	ldr	r3, [r4, #16]
   12594:	e35c0000 	cmp	ip, #0
   12598:	1a000018 	bne	12600 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x130>
   1259c:	e5942004 	ldr	r2, [r4, #4]
   125a0:	e2866001 	add	r6, r6, #1
   125a4:	e5941000 	ldr	r1, [r4]
   125a8:	e3530008 	cmp	r3, #8
   125ac:	e0060296 	mul	r6, r6, r2
   125b0:	e5841008 	str	r1, [r4, #8]
   125b4:	e584600c 	str	r6, [r4, #12]
   125b8:	9a000015 	bls	12614 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x144>
   125bc:	e3051b20 	movw	r1, #23328	; 0x5b20
   125c0:	e3a02070 	mov	r2, #112	; 0x70
   125c4:	e3401001 	movt	r1, #1
   125c8:	e2840028 	add	r0, r4, #40	; 0x28
   125cc:	ebfff8f3 	bl	109a0 <memcpy>
   125d0:	e8940009 	ldm	r4, {r0, r3}
   125d4:	e5941008 	ldr	r1, [r4, #8]
   125d8:	e594200c 	ldr	r2, [r4, #12]
   125dc:	e5843038 	str	r3, [r4, #56]	; 0x38
   125e0:	e5943010 	ldr	r3, [r4, #16]
   125e4:	e5840034 	str	r0, [r4, #52]	; 0x34
   125e8:	e5841048 	str	r1, [r4, #72]	; 0x48
   125ec:	e584204c 	str	r2, [r4, #76]	; 0x4c
   125f0:	e584305c 	str	r3, [r4, #92]	; 0x5c
   125f4:	e1a00004 	mov	r0, r4
   125f8:	e28dd028 	add	sp, sp, #40	; 0x28
   125fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   12600:	e594200c 	ldr	r2, [r4, #12]
   12604:	e3520000 	cmp	r2, #0
   12608:	0affffe3 	beq	1259c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xcc>
   1260c:	e3530008 	cmp	r3, #8
   12610:	8affffe9 	bhi	125bc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xec>
   12614:	e3000414 	movw	r0, #1044	; 0x414
   12618:	ebfff9f3 	bl	10dec <operator new[](unsigned int)>
   1261c:	e5840024 	str	r0, [r4, #36]	; 0x24
   12620:	e3a02b01 	mov	r2, #1024	; 0x400
   12624:	e3a01000 	mov	r1, #0
   12628:	e2800014 	add	r0, r0, #20
   1262c:	ebfff8c4 	bl	10944 <memset>
   12630:	eaffffe1 	b	125bc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xec>

00012634 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12634:	e92d4010 	push	{r4, lr}
   12638:	e1a04000 	mov	r4, r0
   1263c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12640:	e3500000 	cmp	r0, #0
   12644:	0a000001 	beq	12650 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   12648:	e3a01014 	mov	r1, #20
   1264c:	ebfff9f8 	bl	10e34 <operator delete(void*, unsigned int)>
   12650:	e1a00004 	mov	r0, r4
   12654:	e8bd8010 	pop	{r4, pc}

00012658 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   12658:	e5903010 	ldr	r3, [r0, #16]
   1265c:	e3530008 	cmp	r3, #8
   12660:	812fff1e 	bxhi	lr
   12664:	e1a03982 	lsl	r3, r2, #19
   12668:	e1a0c5a2 	lsr	ip, r2, #11
   1266c:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   12670:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12674:	e1a02282 	lsl	r2, r2, #5
   12678:	e183318c 	orr	r3, r3, ip, lsl #3
   1267c:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   12680:	e0801101 	add	r1, r0, r1, lsl #2
   12684:	e1822003 	orr	r2, r2, r3
   12688:	e38224ff 	orr	r2, r2, #-16777216	; 0xff000000
   1268c:	e5812014 	str	r2, [r1, #20]
   12690:	e12fff1e 	bx	lr

00012694 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   12694:	e5903010 	ldr	r3, [r0, #16]
   12698:	e3530008 	cmp	r3, #8
   1269c:	95903024 	ldrls	r3, [r0, #36]	; 0x24
   126a0:	90831101 	addls	r1, r3, r1, lsl #2
   126a4:	95812014 	strls	r2, [r1, #20]
   126a8:	e12fff1e 	bx	lr

000126ac <CBcmFrameBuffer::Initialize()>:
   126ac:	e5901014 	ldr	r1, [r0, #20]
   126b0:	e92d4030 	push	{r4, r5, lr}
   126b4:	e3510000 	cmp	r1, #0
   126b8:	e24dd00c 	sub	sp, sp, #12
   126bc:	13a05000 	movne	r5, #0
   126c0:	0a000002 	beq	126d0 <CBcmFrameBuffer::Initialize()+0x24>
   126c4:	e1a00005 	mov	r0, r5
   126c8:	e28dd00c 	add	sp, sp, #12
   126cc:	e8bd8030 	pop	{r4, r5, pc}
   126d0:	e1a04000 	mov	r4, r0
   126d4:	e1a0000d 	mov	r0, sp
   126d8:	eb00008a 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   126dc:	e3a02070 	mov	r2, #112	; 0x70
   126e0:	e2841028 	add	r1, r4, #40	; 0x28
   126e4:	e1a0000d 	mov	r0, sp
   126e8:	eb000092 	bl	12938 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   126ec:	e2505000 	subs	r5, r0, #0
   126f0:	0a00001f 	beq	12774 <CBcmFrameBuffer::Initialize()+0xc8>
   126f4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   126f8:	e3530000 	cmp	r3, #0
   126fc:	0a00001b 	beq	12770 <CBcmFrameBuffer::Initialize()+0xc4>
   12700:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   12704:	e3530000 	cmp	r3, #0
   12708:	0a000018 	beq	12770 <CBcmFrameBuffer::Initialize()+0xc4>
   1270c:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   12710:	e3530000 	cmp	r3, #0
   12714:	0a000015 	beq	12770 <CBcmFrameBuffer::Initialize()+0xc4>
   12718:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1271c:	e3530000 	cmp	r3, #0
   12720:	0a000012 	beq	12770 <CBcmFrameBuffer::Initialize()+0xc4>
   12724:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   12728:	e3530000 	cmp	r3, #0
   1272c:	0a00000f 	beq	12770 <CBcmFrameBuffer::Initialize()+0xc4>
   12730:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   12734:	e3530000 	cmp	r3, #0
   12738:	0a00000c 	beq	12770 <CBcmFrameBuffer::Initialize()+0xc4>
   1273c:	e5942010 	ldr	r2, [r4, #16]
   12740:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   12744:	e5941084 	ldr	r1, [r4, #132]	; 0x84
   12748:	e3520008 	cmp	r2, #8
   1274c:	e5843018 	str	r3, [r4, #24]
   12750:	e5943094 	ldr	r3, [r4, #148]	; 0x94
   12754:	e584101c 	str	r1, [r4, #28]
   12758:	e5843020 	str	r3, [r4, #32]
   1275c:	8a000004 	bhi	12774 <CBcmFrameBuffer::Initialize()+0xc8>
   12760:	e1a00004 	mov	r0, r4
   12764:	ebffff35 	bl	12440 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   12768:	e1a05000 	mov	r5, r0
   1276c:	ea000000 	b	12774 <CBcmFrameBuffer::Initialize()+0xc8>
   12770:	e1a05003 	mov	r5, r3
   12774:	e1a0000d 	mov	r0, sp
   12778:	eb000069 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   1277c:	e1a00005 	mov	r0, r5
   12780:	e28dd00c 	add	sp, sp, #12
   12784:	e8bd8030 	pop	{r4, r5, pc}

00012788 <CBcmFrameBuffer::GetWidth() const>:
   12788:	e5900000 	ldr	r0, [r0]
   1278c:	e12fff1e 	bx	lr

00012790 <CBcmFrameBuffer::GetHeight() const>:
   12790:	e5900004 	ldr	r0, [r0, #4]
   12794:	e12fff1e 	bx	lr

00012798 <CBcmFrameBuffer::GetVirtWidth() const>:
   12798:	e5900008 	ldr	r0, [r0, #8]
   1279c:	e12fff1e 	bx	lr

000127a0 <CBcmFrameBuffer::GetVirtHeight() const>:
   127a0:	e590000c 	ldr	r0, [r0, #12]
   127a4:	e12fff1e 	bx	lr

000127a8 <CBcmFrameBuffer::GetPitch() const>:
   127a8:	e5900020 	ldr	r0, [r0, #32]
   127ac:	e12fff1e 	bx	lr

000127b0 <CBcmFrameBuffer::GetDepth() const>:
   127b0:	e5900010 	ldr	r0, [r0, #16]
   127b4:	e12fff1e 	bx	lr

000127b8 <CBcmFrameBuffer::GetBuffer() const>:
   127b8:	e5900018 	ldr	r0, [r0, #24]
   127bc:	e12fff1e 	bx	lr

000127c0 <CBcmFrameBuffer::GetSize() const>:
   127c0:	e590001c 	ldr	r0, [r0, #28]
   127c4:	e12fff1e 	bx	lr

000127c8 <CBcmFrameBuffer::UpdatePalette()>:
   127c8:	e5903010 	ldr	r3, [r0, #16]
   127cc:	e3530008 	cmp	r3, #8
   127d0:	9a000001 	bls	127dc <CBcmFrameBuffer::UpdatePalette()+0x14>
   127d4:	e3a00001 	mov	r0, #1
   127d8:	e12fff1e 	bx	lr
   127dc:	eaffff17 	b	12440 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000127e0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   127e0:	e92d4070 	push	{r4, r5, r6, lr}
   127e4:	e24dd028 	sub	sp, sp, #40	; 0x28
   127e8:	e1a05001 	mov	r5, r1
   127ec:	e28d000c 	add	r0, sp, #12
   127f0:	e3a01000 	mov	r1, #0
   127f4:	e1a06002 	mov	r6, r2
   127f8:	eb000042 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   127fc:	e58d5020 	str	r5, [sp, #32]
   12800:	e3a03008 	mov	r3, #8
   12804:	e58d3000 	str	r3, [sp]
   12808:	e3081009 	movw	r1, #32777	; 0x8009
   1280c:	e3401004 	movt	r1, #4
   12810:	e3a03014 	mov	r3, #20
   12814:	e08d2003 	add	r2, sp, r3
   12818:	e28d000c 	add	r0, sp, #12
   1281c:	e58d6024 	str	r6, [sp, #36]	; 0x24
   12820:	eb00007e 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12824:	e2504000 	subs	r4, r0, #0
   12828:	0a000006 	beq	12848 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   1282c:	e59d3020 	ldr	r3, [sp, #32]
   12830:	e1530005 	cmp	r3, r5
   12834:	13a04000 	movne	r4, #0
   12838:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   1283c:	00404006 	subeq	r4, r0, r6
   12840:	016f4f14 	clzeq	r4, r4
   12844:	01a042a4 	lsreq	r4, r4, #5
   12848:	e28d000c 	add	r0, sp, #12
   1284c:	eb000034 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   12850:	e1a00004 	mov	r0, r4
   12854:	e28dd028 	add	sp, sp, #40	; 0x28
   12858:	e8bd8070 	pop	{r4, r5, r6, pc}

0001285c <CBcmFrameBuffer::WaitForVerticalSync()>:
   1285c:	e92d4010 	push	{r4, lr}
   12860:	e24dd020 	sub	sp, sp, #32
   12864:	e3a01000 	mov	r1, #0
   12868:	e28d0008 	add	r0, sp, #8
   1286c:	eb000025 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12870:	e3a03000 	mov	r3, #0
   12874:	e308100e 	movw	r1, #32782	; 0x800e
   12878:	e58d3000 	str	r3, [sp]
   1287c:	e3a03010 	mov	r3, #16
   12880:	e3401004 	movt	r1, #4
   12884:	e28d0008 	add	r0, sp, #8
   12888:	e08d2003 	add	r2, sp, r3
   1288c:	eb000063 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12890:	e1a04000 	mov	r4, r0
   12894:	e28d0008 	add	r0, sp, #8
   12898:	eb000021 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   1289c:	e1a00004 	mov	r0, r4
   128a0:	e28dd020 	add	sp, sp, #32
   128a4:	e8bd8010 	pop	{r4, pc}

000128a8 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   128a8:	e92d4010 	push	{r4, lr}
   128ac:	e24dd020 	sub	sp, sp, #32
   128b0:	e1a04001 	mov	r4, r1
   128b4:	e28d0008 	add	r0, sp, #8
   128b8:	e3a01000 	mov	r1, #0
   128bc:	eb000011 	bl	12908 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   128c0:	e58d401c 	str	r4, [sp, #28]
   128c4:	e3a03004 	mov	r3, #4
   128c8:	e58d3000 	str	r3, [sp]
   128cc:	e308100f 	movw	r1, #32783	; 0x800f
   128d0:	e3401004 	movt	r1, #4
   128d4:	e3a03010 	mov	r3, #16
   128d8:	e08d2003 	add	r2, sp, r3
   128dc:	e28d0008 	add	r0, sp, #8
   128e0:	eb00004e 	bl	12a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   128e4:	e1a04000 	mov	r4, r0
   128e8:	e28d0008 	add	r0, sp, #8
   128ec:	eb00000c 	bl	12924 <CBcmPropertyTags::~CBcmPropertyTags()>
   128f0:	e1a00004 	mov	r0, r4
   128f4:	e28dd020 	add	sp, sp, #32
   128f8:	e8bd8010 	pop	{r4, pc}

000128fc <CBcmFrameBuffer::SetDisplay()>:
   128fc:	e12fff1e 	bx	lr

00012900 <CBcmFrameBuffer::GetNumDisplays()>:
   12900:	e3a00001 	mov	r0, #1
   12904:	e12fff1e 	bx	lr

00012908 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   12908:	e1a02001 	mov	r2, r1
   1290c:	e3a01008 	mov	r1, #8
   12910:	e92d4010 	push	{r4, lr}
   12914:	e1a04000 	mov	r4, r0
   12918:	eb000686 	bl	14338 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   1291c:	e1a00004 	mov	r0, r4
   12920:	e8bd8010 	pop	{r4, pc}

00012924 <CBcmPropertyTags::~CBcmPropertyTags()>:
   12924:	e92d4010 	push	{r4, lr}
   12928:	e1a04000 	mov	r4, r0
   1292c:	eb000684 	bl	14344 <CBcmMailBox::~CBcmMailBox()>
   12930:	e1a00004 	mov	r0, r4
   12934:	e8bd8010 	pop	{r4, pc}

00012938 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   12938:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1293c:	e2518000 	subs	r8, r1, #0
   12940:	0a000027 	beq	129e4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xac>
   12944:	e352000f 	cmp	r2, #15
   12948:	e1a04002 	mov	r4, r2
   1294c:	9a000029 	bls	129f8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc0>
   12950:	e2126003 	ands	r6, r2, #3
   12954:	e282900c 	add	r9, r2, #12
   12958:	1a00002b 	bne	12a0c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd4>
   1295c:	e1a07000 	mov	r7, r0
   12960:	e1a00006 	mov	r0, r6
   12964:	ebfffc6c 	bl	11b1c <CMemorySystem::GetCoherentPage(unsigned int)>
   12968:	e5809000 	str	r9, [r0]
   1296c:	e2809008 	add	r9, r0, #8
   12970:	e5c06004 	strb	r6, [r0, #4]
   12974:	e1a05000 	mov	r5, r0
   12978:	e5c06005 	strb	r6, [r0, #5]
   1297c:	e1a02004 	mov	r2, r4
   12980:	e5c06006 	strb	r6, [r0, #6]
   12984:	e1a01008 	mov	r1, r8
   12988:	e5c06007 	strb	r6, [r0, #7]
   1298c:	e1a00009 	mov	r0, r9
   12990:	ebfff802 	bl	109a0 <memcpy>
   12994:	e7896004 	str	r6, [r9, r4]
   12998:	f57ff04f 	dsb	sy
   1299c:	e3856103 	orr	r6, r5, #-1073741824	; 0xc0000000
   129a0:	e1a00007 	mov	r0, r7
   129a4:	e1a01006 	mov	r1, r6
   129a8:	eb000666 	bl	14348 <CBcmMailBox::WriteRead(unsigned int)>
   129ac:	e1500006 	cmp	r0, r6
   129b0:	0a000001 	beq	129bc <CBcmPropertyTags::GetTags(void*, unsigned int)+0x84>
   129b4:	e3a00000 	mov	r0, #0
   129b8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   129bc:	f57ff05f 	dmb	sy
   129c0:	e5953004 	ldr	r3, [r5, #4]
   129c4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   129c8:	1afffff9 	bne	129b4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x7c>
   129cc:	e1a02004 	mov	r2, r4
   129d0:	e1a01009 	mov	r1, r9
   129d4:	e1a00008 	mov	r0, r8
   129d8:	ebfff7f0 	bl	109a0 <memcpy>
   129dc:	e3a00001 	mov	r0, #1
   129e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   129e4:	e3051b90 	movw	r1, #23440	; 0x5b90
   129e8:	e3a0204b 	mov	r2, #75	; 0x4b
   129ec:	e3401001 	movt	r1, #1
   129f0:	e2810014 	add	r0, r1, #20
   129f4:	ebfffe70 	bl	123bc <assertion_failed>
   129f8:	e3051b90 	movw	r1, #23440	; 0x5b90
   129fc:	e3a0204c 	mov	r2, #76	; 0x4c
   12a00:	e3401001 	movt	r1, #1
   12a04:	e2810020 	add	r0, r1, #32
   12a08:	ebfffe6b 	bl	123bc <assertion_failed>
   12a0c:	e3051b90 	movw	r1, #23440	; 0x5b90
   12a10:	e3a0204e 	mov	r2, #78	; 0x4e
   12a14:	e3401001 	movt	r1, #1
   12a18:	e281004c 	add	r0, r1, #76	; 0x4c
   12a1c:	ebfffe66 	bl	123bc <assertion_failed>

00012a20 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   12a20:	e92d4010 	push	{r4, lr}
   12a24:	e2524000 	subs	r4, r2, #0
   12a28:	0a000012 	beq	12a78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x58>
   12a2c:	e353000f 	cmp	r3, #15
   12a30:	e1a02003 	mov	r2, r3
   12a34:	9a000014 	bls	12a8c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x6c>
   12a38:	e59d3008 	ldr	r3, [sp, #8]
   12a3c:	e242c00c 	sub	ip, r2, #12
   12a40:	e5841000 	str	r1, [r4]
   12a44:	e1a01004 	mov	r1, r4
   12a48:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   12a4c:	e584c004 	str	ip, [r4, #4]
   12a50:	e5843008 	str	r3, [r4, #8]
   12a54:	ebffffb7 	bl	12938 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12a58:	e3500000 	cmp	r0, #0
   12a5c:	08bd8010 	popeq	{r4, pc}
   12a60:	e5940008 	ldr	r0, [r4, #8]
   12a64:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   12a68:	e5840008 	str	r0, [r4, #8]
   12a6c:	e2500000 	subs	r0, r0, #0
   12a70:	13a00001 	movne	r0, #1
   12a74:	e8bd8010 	pop	{r4, pc}
   12a78:	e3051b90 	movw	r1, #23440	; 0x5b90
   12a7c:	e3a02033 	mov	r2, #51	; 0x33
   12a80:	e3401001 	movt	r1, #1
   12a84:	e2810064 	add	r0, r1, #100	; 0x64
   12a88:	ebfffe4b 	bl	123bc <assertion_failed>
   12a8c:	e3051b90 	movw	r1, #23440	; 0x5b90
   12a90:	e3a02034 	mov	r2, #52	; 0x34
   12a94:	e3401001 	movt	r1, #1
   12a98:	e2810070 	add	r0, r1, #112	; 0x70
   12a9c:	ebfffe46 	bl	123bc <assertion_failed>

00012aa0 <CCharGenerator::CCharGenerator()>:
   12aa0:	e3a03008 	mov	r3, #8
   12aa4:	e5803000 	str	r3, [r0]
   12aa8:	e12fff1e 	bx	lr

00012aac <CCharGenerator::~CCharGenerator()>:
   12aac:	e12fff1e 	bx	lr

00012ab0 <CCharGenerator::GetCharWidth() const>:
   12ab0:	e5900000 	ldr	r0, [r0]
   12ab4:	e12fff1e 	bx	lr

00012ab8 <CCharGenerator::GetCharHeight() const>:
   12ab8:	e3a00013 	mov	r0, #19
   12abc:	e12fff1e 	bx	lr

00012ac0 <CCharGenerator::GetUnderline() const>:
   12ac0:	e3a00010 	mov	r0, #16
   12ac4:	e12fff1e 	bx	lr

00012ac8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   12ac8:	e6ef1071 	uxtb	r1, r1
   12acc:	e2411021 	sub	r1, r1, #33	; 0x21
   12ad0:	e35100de 	cmp	r1, #222	; 0xde
   12ad4:	8a00000d 	bhi	12b10 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   12ad8:	e5900000 	ldr	r0, [r0]
   12adc:	e1500002 	cmp	r0, r2
   12ae0:	9a00000c 	bls	12b18 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   12ae4:	e353000f 	cmp	r3, #15
   12ae8:	8a000008 	bhi	12b10 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   12aec:	e3050c54 	movw	r0, #23636	; 0x5c54
   12af0:	e3a0c080 	mov	ip, #128	; 0x80
   12af4:	e3400001 	movt	r0, #1
   12af8:	e0801201 	add	r1, r0, r1, lsl #4
   12afc:	e7d13003 	ldrb	r3, [r1, r3]
   12b00:	e013325c 	ands	r3, r3, ip, asr r2
   12b04:	13a00001 	movne	r0, #1
   12b08:	03a00000 	moveq	r0, #0
   12b0c:	e12fff1e 	bx	lr
   12b10:	e3a00000 	mov	r0, #0
   12b14:	e12fff1e 	bx	lr
   12b18:	e3051c28 	movw	r1, #23592	; 0x5c28
   12b1c:	e3050c3c 	movw	r0, #23612	; 0x5c3c
   12b20:	e3401001 	movt	r1, #1
   12b24:	e3a0204e 	mov	r2, #78	; 0x4e
   12b28:	e3400001 	movt	r0, #1
   12b2c:	e92d4010 	push	{r4, lr}
   12b30:	ebfffe21 	bl	123bc <assertion_failed>

00012b34 <debug_hexdump(void const*, unsigned int, char const*)>:
   12b34:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b38:	e3520000 	cmp	r2, #0
   12b3c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   12b40:	e3067ad8 	movw	r7, #27352	; 0x6ad8
   12b44:	e3407001 	movt	r7, #1
   12b48:	e1a05001 	mov	r5, r1
   12b4c:	11a07002 	movne	r7, r2
   12b50:	e1a04000 	mov	r4, r0
   12b54:	ebffdd58 	bl	a0bc <CLogger::Get()>
   12b58:	e58d4004 	str	r4, [sp, #4]
   12b5c:	e3063a44 	movw	r3, #27204	; 0x6a44
   12b60:	e3403001 	movt	r3, #1
   12b64:	e3a02004 	mov	r2, #4
   12b68:	e58d5000 	str	r5, [sp]
   12b6c:	e1a01007 	mov	r1, r7
   12b70:	ebffdf30 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b74:	e3550000 	cmp	r5, #0
   12b78:	0a00002e 	beq	12c38 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
   12b7c:	e3068a6c 	movw	r8, #27244	; 0x6a6c
   12b80:	e205900f 	and	r9, r5, #15
   12b84:	e3408001 	movt	r8, #1
   12b88:	ea000001 	b	12b94 <debug_hexdump(void const*, unsigned int, char const*)+0x60>
   12b8c:	e2555010 	subs	r5, r5, #16
   12b90:	0a000028 	beq	12c38 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
   12b94:	ebffdd48 	bl	a0bc <CLogger::Get()>
   12b98:	e5d4b00f 	ldrb	fp, [r4, #15]
   12b9c:	e5d4c00e 	ldrb	ip, [r4, #14]
   12ba0:	e5d4200d 	ldrb	r2, [r4, #13]
   12ba4:	e5d4300c 	ldrb	r3, [r4, #12]
   12ba8:	e5d4a00b 	ldrb	sl, [r4, #11]
   12bac:	e5d4100a 	ldrb	r1, [r4, #10]
   12bb0:	e5d46009 	ldrb	r6, [r4, #9]
   12bb4:	e5d4e008 	ldrb	lr, [r4, #8]
   12bb8:	e58db040 	str	fp, [sp, #64]	; 0x40
   12bbc:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
   12bc0:	e5d4c006 	ldrb	ip, [r4, #6]
   12bc4:	e5d4b007 	ldrb	fp, [r4, #7]
   12bc8:	e58d2038 	str	r2, [sp, #56]	; 0x38
   12bcc:	e58d3034 	str	r3, [sp, #52]	; 0x34
   12bd0:	e5d43005 	ldrb	r3, [r4, #5]
   12bd4:	e5d42004 	ldrb	r2, [r4, #4]
   12bd8:	e58da030 	str	sl, [sp, #48]	; 0x30
   12bdc:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   12be0:	e5d41003 	ldrb	r1, [r4, #3]
   12be4:	e5d4a002 	ldrb	sl, [r4, #2]
   12be8:	e58d6028 	str	r6, [sp, #40]	; 0x28
   12bec:	e58de024 	str	lr, [sp, #36]	; 0x24
   12bf0:	e5d4e000 	ldrb	lr, [r4]
   12bf4:	e5d46001 	ldrb	r6, [r4, #1]
   12bf8:	e58dc01c 	str	ip, [sp, #28]
   12bfc:	e6ffc074 	uxth	ip, r4
   12c00:	e58d3018 	str	r3, [sp, #24]
   12c04:	e1a03008 	mov	r3, r8
   12c08:	e58d2014 	str	r2, [sp, #20]
   12c0c:	e3a02004 	mov	r2, #4
   12c10:	e58d1010 	str	r1, [sp, #16]
   12c14:	e1a01007 	mov	r1, r7
   12c18:	e58db020 	str	fp, [sp, #32]
   12c1c:	e2844010 	add	r4, r4, #16
   12c20:	e58da00c 	str	sl, [sp, #12]
   12c24:	e58d6008 	str	r6, [sp, #8]
   12c28:	e88d5000 	stm	sp, {ip, lr}
   12c2c:	ebffdf01 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12c30:	e1590005 	cmp	r9, r5
   12c34:	1affffd4 	bne	12b8c <debug_hexdump(void const*, unsigned int, char const*)+0x58>
   12c38:	e28dd04c 	add	sp, sp, #76	; 0x4c
   12c3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012c40 <debug_stacktrace(unsigned int const*, char const*)>:
   12c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12c44:	e3510000 	cmp	r1, #0
   12c48:	e3067ad8 	movw	r7, #27352	; 0x6ad8
   12c4c:	e3046954 	movw	r6, #18772	; 0x4954
   12c50:	e3407001 	movt	r7, #1
   12c54:	e3068ac4 	movw	r8, #27332	; 0x6ac4
   12c58:	e3406001 	movt	r6, #1
   12c5c:	e24dd008 	sub	sp, sp, #8
   12c60:	e3408001 	movt	r8, #1
   12c64:	11a07001 	movne	r7, r1
   12c68:	e2405004 	sub	r5, r0, #4
   12c6c:	e3a04000 	mov	r4, #0
   12c70:	ea000002 	b	12c80 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   12c74:	e2844001 	add	r4, r4, #1
   12c78:	e3540040 	cmp	r4, #64	; 0x40
   12c7c:	0a000011 	beq	12cc8 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   12c80:	e5b53004 	ldr	r3, [r5, #4]!
   12c84:	e3530902 	cmp	r3, #32768	; 0x8000
   12c88:	3afffff9 	bcc	12c74 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12c8c:	e1530006 	cmp	r3, r6
   12c90:	2afffff7 	bcs	12c74 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12c94:	e3130003 	tst	r3, #3
   12c98:	1afffff5 	bne	12c74 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12c9c:	ebffdd06 	bl	a0bc <CLogger::Get()>
   12ca0:	e5952000 	ldr	r2, [r5]
   12ca4:	e1a03008 	mov	r3, r8
   12ca8:	e58d4000 	str	r4, [sp]
   12cac:	e1a01007 	mov	r1, r7
   12cb0:	e58d2004 	str	r2, [sp, #4]
   12cb4:	e2844001 	add	r4, r4, #1
   12cb8:	e3a02004 	mov	r2, #4
   12cbc:	ebffdedd 	bl	a838 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12cc0:	e3540040 	cmp	r4, #64	; 0x40
   12cc4:	1affffed 	bne	12c80 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   12cc8:	e28dd008 	add	sp, sp, #8
   12ccc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00012cd0 <DelayLoop>:
   12cd0:	e1a01001 	mov	r1, r1
   12cd4:	e1a02002 	mov	r2, r2
   12cd8:	e2500001 	subs	r0, r0, #1
   12cdc:	8afffffb 	bhi	12cd0 <DelayLoop>
   12ce0:	e1a0f00e 	mov	pc, lr

00012ce4 <CDevice::Read(void*, unsigned int)>:
   12ce4:	e3e00000 	mvn	r0, #0
   12ce8:	e12fff1e 	bx	lr

00012cec <CDevice::Seek(unsigned long long)>:
   12cec:	e3e00000 	mvn	r0, #0
   12cf0:	e3e01000 	mvn	r1, #0
   12cf4:	e12fff1e 	bx	lr

00012cf8 <CDevice::GetSize() const>:
   12cf8:	e3e00000 	mvn	r0, #0
   12cfc:	e3e01000 	mvn	r1, #0
   12d00:	e12fff1e 	bx	lr

00012d04 <CDevice::RemoveDevice()>:
   12d04:	e3a00000 	mov	r0, #0
   12d08:	e12fff1e 	bx	lr

00012d0c <CDevice::~CDevice()>:
   12d0c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12d10:	e1a06000 	mov	r6, r0
   12d14:	e59f3080 	ldr	r3, [pc, #128]	; 12d9c <CDevice::~CDevice()+0x90>
   12d18:	e1a07000 	mov	r7, r0
   12d1c:	e4863004 	str	r3, [r6], #4
   12d20:	ea000008 	b	12d48 <CDevice::~CDevice()+0x3c>
   12d24:	e5901004 	ldr	r1, [r0, #4]
   12d28:	e1a00007 	mov	r0, r7
   12d2c:	e12fff33 	blx	r3
   12d30:	e1a01004 	mov	r1, r4
   12d34:	e1a00006 	mov	r0, r6
   12d38:	eb0004ac 	bl	13ff0 <CPtrList::Remove(TPtrListElement*)>
   12d3c:	e3a01008 	mov	r1, #8
   12d40:	e1a00005 	mov	r0, r5
   12d44:	ebfff83a 	bl	10e34 <operator delete(void*, unsigned int)>
   12d48:	e1a00006 	mov	r0, r6
   12d4c:	eb000401 	bl	13d58 <CPtrList::GetFirst()>
   12d50:	e2504000 	subs	r4, r0, #0
   12d54:	0a00000c 	beq	12d8c <CDevice::~CDevice()+0x80>
   12d58:	e1a01004 	mov	r1, r4
   12d5c:	e1a00006 	mov	r0, r6
   12d60:	eb000414 	bl	13db8 <CPtrList::GetPtr(TPtrListElement*)>
   12d64:	e5903000 	ldr	r3, [r0]
   12d68:	e1a05000 	mov	r5, r0
   12d6c:	e3530000 	cmp	r3, #0
   12d70:	1affffeb 	bne	12d24 <CDevice::~CDevice()+0x18>
   12d74:	e3061ae0 	movw	r1, #27360	; 0x6ae0
   12d78:	e3060aec 	movw	r0, #27372	; 0x6aec
   12d7c:	e3401001 	movt	r1, #1
   12d80:	e3a02028 	mov	r2, #40	; 0x28
   12d84:	e3400001 	movt	r0, #1
   12d88:	ebfffd8b 	bl	123bc <assertion_failed>
   12d8c:	e1a00006 	mov	r0, r6
   12d90:	eb0003e6 	bl	13d30 <CPtrList::~CPtrList()>
   12d94:	e1a00007 	mov	r0, r7
   12d98:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12d9c:	00016b28 	.word	0x00016b28

00012da0 <CDevice::~CDevice()>:
   12da0:	e92d4010 	push	{r4, lr}
   12da4:	e1a04000 	mov	r4, r0
   12da8:	ebffffd7 	bl	12d0c <CDevice::~CDevice()>
   12dac:	e1a00004 	mov	r0, r4
   12db0:	e3a01008 	mov	r1, #8
   12db4:	ebfff81e 	bl	10e34 <operator delete(void*, unsigned int)>
   12db8:	e1a00004 	mov	r0, r4
   12dbc:	e8bd8010 	pop	{r4, pc}

00012dc0 <CDevice::CDevice()>:
   12dc0:	e59f3014 	ldr	r3, [pc, #20]	; 12ddc <CDevice::CDevice()+0x1c>
   12dc4:	e92d4010 	push	{r4, lr}
   12dc8:	e1a04000 	mov	r4, r0
   12dcc:	e4803004 	str	r3, [r0], #4
   12dd0:	eb0003d3 	bl	13d24 <CPtrList::CPtrList()>
   12dd4:	e1a00004 	mov	r0, r4
   12dd8:	e8bd8010 	pop	{r4, pc}
   12ddc:	00016b28 	.word	0x00016b28

00012de0 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   12de0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12de4:	e2516000 	subs	r6, r1, #0
   12de8:	0a000012 	beq	12e38 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x58>
   12dec:	e1a04000 	mov	r4, r0
   12df0:	e3a00008 	mov	r0, #8
   12df4:	e1a07002 	mov	r7, r2
   12df8:	ebfff7f5 	bl	10dd4 <operator new(unsigned int)>
   12dfc:	e1a05000 	mov	r5, r0
   12e00:	e2844004 	add	r4, r4, #4
   12e04:	e1a00004 	mov	r0, r4
   12e08:	e1c560f0 	strd	r6, [r5]
   12e0c:	eb0003d1 	bl	13d58 <CPtrList::GetFirst()>
   12e10:	e2501000 	subs	r1, r0, #0
   12e14:	e1a02005 	mov	r2, r5
   12e18:	e1a00004 	mov	r0, r4
   12e1c:	0a000002 	beq	12e2c <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x4c>
   12e20:	eb0003fa 	bl	13e10 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   12e24:	e1a00005 	mov	r0, r5
   12e28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12e2c:	eb000433 	bl	13f00 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   12e30:	e1a00005 	mov	r0, r5
   12e34:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12e38:	e3061ae0 	movw	r1, #27360	; 0x6ae0
   12e3c:	e3050abc 	movw	r0, #23228	; 0x5abc
   12e40:	e3401001 	movt	r1, #1
   12e44:	e3a0204d 	mov	r2, #77	; 0x4d
   12e48:	e3400001 	movt	r0, #1
   12e4c:	ebfffd5a 	bl	123bc <assertion_failed>

00012e50 <CDevice::UnregisterRemovedHandler(void*)>:
   12e50:	e92d4070 	push	{r4, r5, r6, lr}
   12e54:	e2515000 	subs	r5, r1, #0
   12e58:	0a00000a 	beq	12e88 <CDevice::UnregisterRemovedHandler(void*)+0x38>
   12e5c:	e2804004 	add	r4, r0, #4
   12e60:	e1a00004 	mov	r0, r4
   12e64:	eb0004ab 	bl	14118 <CPtrList::Find(void*)>
   12e68:	e2501000 	subs	r1, r0, #0
   12e6c:	0a00000b 	beq	12ea0 <CDevice::UnregisterRemovedHandler(void*)+0x50>
   12e70:	e1a00004 	mov	r0, r4
   12e74:	eb00045d 	bl	13ff0 <CPtrList::Remove(TPtrListElement*)>
   12e78:	e1a00005 	mov	r0, r5
   12e7c:	e3a01008 	mov	r1, #8
   12e80:	e8bd4070 	pop	{r4, r5, r6, lr}
   12e84:	eafff7ea 	b	10e34 <operator delete(void*, unsigned int)>
   12e88:	e3061ae0 	movw	r1, #27360	; 0x6ae0
   12e8c:	e3060b04 	movw	r0, #27396	; 0x6b04
   12e90:	e3401001 	movt	r1, #1
   12e94:	e3a02064 	mov	r2, #100	; 0x64
   12e98:	e3400001 	movt	r0, #1
   12e9c:	ebfffd46 	bl	123bc <assertion_failed>
   12ea0:	e3061ae0 	movw	r1, #27360	; 0x6ae0
   12ea4:	e3060b10 	movw	r0, #27408	; 0x6b10
   12ea8:	e3401001 	movt	r1, #1
   12eac:	e3a02067 	mov	r2, #103	; 0x67
   12eb0:	e3400001 	movt	r0, #1
   12eb4:	ebfffd40 	bl	123bc <assertion_failed>

00012eb8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   12eb8:	e92d4070 	push	{r4, r5, r6, lr}
   12ebc:	e1a06001 	mov	r6, r1
   12ec0:	e1a04000 	mov	r4, r0
   12ec4:	e1a05002 	mov	r5, r2
   12ec8:	ebffe093 	bl	b11c <CMachineInfo::Get()>
   12ecc:	e1a01006 	mov	r1, r6
   12ed0:	ebffe03f 	bl	afd4 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   12ed4:	e584500c 	str	r5, [r4, #12]
   12ed8:	e3500080 	cmp	r0, #128	; 0x80
   12edc:	e5840000 	str	r0, [r4]
   12ee0:	e3a05000 	mov	r5, #0
   12ee4:	e5845004 	str	r5, [r4, #4]
   12ee8:	e5845008 	str	r5, [r4, #8]
   12eec:	e5c45010 	strb	r5, [r4, #16]
   12ef0:	e5845014 	str	r5, [r4, #20]
   12ef4:	e5845018 	str	r5, [r4, #24]
   12ef8:	e5c4501c 	strb	r5, [r4, #28]
   12efc:	0a00001e 	beq	12f7c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc4>
   12f00:	e350000b 	cmp	r0, #11
   12f04:	8a000021 	bhi	12f90 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xd8>
   12f08:	e1a01005 	mov	r1, r5
   12f0c:	e3a0003f 	mov	r0, #63	; 0x3f
   12f10:	ebfff7a1 	bl	10d9c <operator new[](unsigned int, int)>
   12f14:	e5840004 	str	r0, [r4, #4]
   12f18:	e3a02a07 	mov	r2, #28672	; 0x7000
   12f1c:	e3432f00 	movt	r2, #16128	; 0x3f00
   12f20:	e280001f 	add	r0, r0, #31
   12f24:	e3c0301f 	bic	r3, r0, #31
   12f28:	e3a00001 	mov	r0, #1
   12f2c:	e5941000 	ldr	r1, [r4]
   12f30:	e5843008 	str	r3, [r4, #8]
   12f34:	e5835018 	str	r5, [r3, #24]
   12f38:	e583501c 	str	r5, [r3, #28]
   12f3c:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   12f40:	e1833110 	orr	r3, r3, r0, lsl r1
   12f44:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   12f48:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   12f4c:	ebfff427 	bl	fff0 <CTimer::SimpleusDelay(unsigned int)>
   12f50:	e5942000 	ldr	r2, [r4]
   12f54:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   12f58:	e282283f 	add	r2, r2, #4128768	; 0x3f0000
   12f5c:	e2822070 	add	r2, r2, #112	; 0x70
   12f60:	e1a02402 	lsl	r2, r2, #8
   12f64:	e5823000 	str	r3, [r2]
   12f68:	e5923000 	ldr	r3, [r2]
   12f6c:	e3530000 	cmp	r3, #0
   12f70:	bafffffc 	blt	12f68 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xb0>
   12f74:	e1a00004 	mov	r0, r4
   12f78:	e8bd8070 	pop	{r4, r5, r6, pc}
   12f7c:	e3061b44 	movw	r1, #27460	; 0x6b44
   12f80:	e3a02039 	mov	r2, #57	; 0x39
   12f84:	e3401001 	movt	r1, #1
   12f88:	e2810010 	add	r0, r1, #16
   12f8c:	ebfffd0a 	bl	123bc <assertion_failed>
   12f90:	e3061b44 	movw	r1, #27460	; 0x6b44
   12f94:	e3a0203a 	mov	r2, #58	; 0x3a
   12f98:	e3401001 	movt	r1, #1
   12f9c:	e2810030 	add	r0, r1, #48	; 0x30
   12fa0:	ebfffd05 	bl	123bc <assertion_failed>

00012fa4 <CDMAChannel::~CDMAChannel()>:
   12fa4:	e5903000 	ldr	r3, [r0]
   12fa8:	e92d4010 	push	{r4, lr}
   12fac:	e353000b 	cmp	r3, #11
   12fb0:	8a00002c 	bhi	13068 <CDMAChannel::~CDMAChannel()+0xc4>
   12fb4:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12fb8:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   12fbc:	e2833070 	add	r3, r3, #112	; 0x70
   12fc0:	e1a04000 	mov	r4, r0
   12fc4:	e1a03403 	lsl	r3, r3, #8
   12fc8:	e5832000 	str	r2, [r3]
   12fcc:	e5901000 	ldr	r1, [r0]
   12fd0:	e281283f 	add	r2, r1, #4128768	; 0x3f0000
   12fd4:	e2822070 	add	r2, r2, #112	; 0x70
   12fd8:	e1a02402 	lsl	r2, r2, #8
   12fdc:	e5923000 	ldr	r3, [r2]
   12fe0:	e3530000 	cmp	r3, #0
   12fe4:	bafffffc 	blt	12fdc <CDMAChannel::~CDMAChannel()+0x38>
   12fe8:	e594000c 	ldr	r0, [r4, #12]
   12fec:	e3a03a07 	mov	r3, #28672	; 0x7000
   12ff0:	e3433f00 	movt	r3, #16128	; 0x3f00
   12ff4:	e3a0c001 	mov	ip, #1
   12ff8:	e3500000 	cmp	r0, #0
   12ffc:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   13000:	e1c2211c 	bic	r2, r2, ip, lsl r1
   13004:	e3a01000 	mov	r1, #0
   13008:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   1300c:	e5841014 	str	r1, [r4, #20]
   13010:	0a000009 	beq	1303c <CDMAChannel::~CDMAChannel()+0x98>
   13014:	e5d43010 	ldrb	r3, [r4, #16]
   13018:	e1530001 	cmp	r3, r1
   1301c:	0a000004 	beq	13034 <CDMAChannel::~CDMAChannel()+0x90>
   13020:	e5941000 	ldr	r1, [r4]
   13024:	e351000c 	cmp	r1, #12
   13028:	8a000013 	bhi	1307c <CDMAChannel::~CDMAChannel()+0xd8>
   1302c:	e2811010 	add	r1, r1, #16
   13030:	ebfffb9b 	bl	11ea4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13034:	e3a03000 	mov	r3, #0
   13038:	e584300c 	str	r3, [r4, #12]
   1303c:	ebffe036 	bl	b11c <CMachineInfo::Get()>
   13040:	e5941000 	ldr	r1, [r4]
   13044:	ebffe013 	bl	b098 <CMachineInfo::FreeDMAChannel(unsigned int)>
   13048:	e5940004 	ldr	r0, [r4, #4]
   1304c:	e3a03000 	mov	r3, #0
   13050:	e5843008 	str	r3, [r4, #8]
   13054:	e1500003 	cmp	r0, r3
   13058:	0a000000 	beq	13060 <CDMAChannel::~CDMAChannel()+0xbc>
   1305c:	ebfff76e 	bl	10e1c <operator delete[](void*)>
   13060:	e1a00004 	mov	r0, r4
   13064:	e8bd8010 	pop	{r4, pc}
   13068:	e3061b44 	movw	r1, #27460	; 0x6b44
   1306c:	e3a02062 	mov	r2, #98	; 0x62
   13070:	e3401001 	movt	r1, #1
   13074:	e2810030 	add	r0, r1, #48	; 0x30
   13078:	ebfffccf 	bl	123bc <assertion_failed>
   1307c:	e3061b44 	movw	r1, #27460	; 0x6b44
   13080:	e3a02074 	mov	r2, #116	; 0x74
   13084:	e3401001 	movt	r1, #1
   13088:	e281004c 	add	r0, r1, #76	; 0x4c
   1308c:	ebfffcca 	bl	123bc <assertion_failed>

00013090 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   13090:	e92d4070 	push	{r4, r5, r6, lr}
   13094:	e2515000 	subs	r5, r1, #0
   13098:	e59de010 	ldr	lr, [sp, #16]
   1309c:	e5dd6014 	ldrb	r6, [sp, #20]
   130a0:	0a000034 	beq	13178 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xe8>
   130a4:	e3520000 	cmp	r2, #0
   130a8:	0a000037 	beq	1318c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xfc>
   130ac:	e3530000 	cmp	r3, #0
   130b0:	e1a04003 	mov	r4, r3
   130b4:	0a000039 	beq	131a0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x110>
   130b8:	e35e000f 	cmp	lr, #15
   130bc:	8a00003c 	bhi	131b4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x124>
   130c0:	e590c008 	ldr	ip, [r0, #8]
   130c4:	e35c0000 	cmp	ip, #0
   130c8:	0a00003e 	beq	131c8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x138>
   130cc:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   130d0:	8a000041 	bhi	131dc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x14c>
   130d4:	e5903000 	ldr	r3, [r0]
   130d8:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   130dc:	e2833070 	add	r3, r3, #112	; 0x70
   130e0:	e1a03403 	lsl	r3, r3, #8
   130e4:	e5933020 	ldr	r3, [r3, #32]
   130e8:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   130ec:	e7e03e53 	ubfx	r3, r3, #28, #1
   130f0:	e3540801 	cmp	r4, #65536	; 0x10000
   130f4:	33833001 	orrcc	r3, r3, #1
   130f8:	e3530000 	cmp	r3, #0
   130fc:	0a00003b 	beq	131f0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x160>
   13100:	e58c400c 	str	r4, [ip, #12]
   13104:	e3a03000 	mov	r3, #0
   13108:	e1a0e60e 	lsl	lr, lr, #12
   1310c:	e3560000 	cmp	r6, #0
   13110:	e5cc3010 	strb	r3, [ip, #16]
   13114:	e38eee33 	orr	lr, lr, #816	; 0x330
   13118:	e5cc3011 	strb	r3, [ip, #17]
   1311c:	e5cc3012 	strb	r3, [ip, #18]
   13120:	e5cc3013 	strb	r3, [ip, #19]
   13124:	e5cc3014 	strb	r3, [ip, #20]
   13128:	e5cc3015 	strb	r3, [ip, #21]
   1312c:	e5cc3016 	strb	r3, [ip, #22]
   13130:	e5cc3017 	strb	r3, [ip, #23]
   13134:	e3823103 	orr	r3, r2, #-1073741824	; 0xc0000000
   13138:	e58c3004 	str	r3, [ip, #4]
   1313c:	e3853103 	orr	r3, r5, #-1073741824	; 0xc0000000
   13140:	e58ce000 	str	lr, [ip]
   13144:	e58c3008 	str	r3, [ip, #8]
   13148:	1a000001 	bne	13154 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xc4>
   1314c:	e5806020 	str	r6, [r0, #32]
   13150:	e8bd8070 	pop	{r4, r5, r6, pc}
   13154:	e5805020 	str	r5, [r0, #32]
   13158:	e1a01004 	mov	r1, r4
   1315c:	e5804024 	str	r4, [r0, #36]	; 0x24
   13160:	e1a00002 	mov	r0, r2
   13164:	ebfff88e 	bl	113a4 <CleanAndInvalidateDataCacheRange>
   13168:	e1a01004 	mov	r1, r4
   1316c:	e1a00005 	mov	r0, r5
   13170:	e8bd4070 	pop	{r4, r5, r6, lr}
   13174:	eafff88a 	b	113a4 <CleanAndInvalidateDataCacheRange>
   13178:	e3061b44 	movw	r1, #27460	; 0x6b44
   1317c:	e3a0208f 	mov	r2, #143	; 0x8f
   13180:	e3401001 	movt	r1, #1
   13184:	e2810060 	add	r0, r1, #96	; 0x60
   13188:	ebfffc8b 	bl	123bc <assertion_failed>
   1318c:	e3061b44 	movw	r1, #27460	; 0x6b44
   13190:	e3a02090 	mov	r2, #144	; 0x90
   13194:	e3401001 	movt	r1, #1
   13198:	e2810074 	add	r0, r1, #116	; 0x74
   1319c:	ebfffc86 	bl	123bc <assertion_failed>
   131a0:	e3061b44 	movw	r1, #27460	; 0x6b44
   131a4:	e3a02091 	mov	r2, #145	; 0x91
   131a8:	e3401001 	movt	r1, #1
   131ac:	e2810084 	add	r0, r1, #132	; 0x84
   131b0:	ebfffc81 	bl	123bc <assertion_failed>
   131b4:	e3061b44 	movw	r1, #27460	; 0x6b44
   131b8:	e3a02092 	mov	r2, #146	; 0x92
   131bc:	e3401001 	movt	r1, #1
   131c0:	e2810090 	add	r0, r1, #144	; 0x90
   131c4:	ebfffc7c 	bl	123bc <assertion_failed>
   131c8:	e3061b44 	movw	r1, #27460	; 0x6b44
   131cc:	e3a02094 	mov	r2, #148	; 0x94
   131d0:	e3401001 	movt	r1, #1
   131d4:	e28100a4 	add	r0, r1, #164	; 0xa4
   131d8:	ebfffc77 	bl	123bc <assertion_failed>
   131dc:	e3061b44 	movw	r1, #27460	; 0x6b44
   131e0:	e3a02095 	mov	r2, #149	; 0x95
   131e4:	e3401001 	movt	r1, #1
   131e8:	e28100bc 	add	r0, r1, #188	; 0xbc
   131ec:	ebfffc72 	bl	123bc <assertion_failed>
   131f0:	e3061b44 	movw	r1, #27460	; 0x6b44
   131f4:	e3a02096 	mov	r2, #150	; 0x96
   131f8:	e3401001 	movt	r1, #1
   131fc:	e28100d4 	add	r0, r1, #212	; 0xd4
   13200:	ebfffc6d 	bl	123bc <assertion_failed>

00013204 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   13204:	e251c000 	subs	ip, r1, #0
   13208:	e92d4010 	push	{r4, lr}
   1320c:	e5dde008 	ldrb	lr, [sp, #8]
   13210:	0a00002a 	beq	132c0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xbc>
   13214:	e3530000 	cmp	r3, #0
   13218:	e1a01003 	mov	r1, r3
   1321c:	0a00002c 	beq	132d4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xd0>
   13220:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   13224:	8a00002f 	bhi	132e8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xe4>
   13228:	e5903000 	ldr	r3, [r0]
   1322c:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13230:	e2833070 	add	r3, r3, #112	; 0x70
   13234:	e1a03403 	lsl	r3, r3, #8
   13238:	e5933020 	ldr	r3, [r3, #32]
   1323c:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   13240:	e7e03e53 	ubfx	r3, r3, #28, #1
   13244:	e3510801 	cmp	r1, #65536	; 0x10000
   13248:	33833001 	orrcc	r3, r3, #1
   1324c:	e3530000 	cmp	r3, #0
   13250:	0a000033 	beq	13324 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x120>
   13254:	e3d234ff 	bics	r3, r2, #-16777216	; 0xff000000
   13258:	0a000027 	beq	132fc <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xf8>
   1325c:	e5902008 	ldr	r2, [r0, #8]
   13260:	e283347e 	add	r3, r3, #2113929216	; 0x7e000000
   13264:	e3520000 	cmp	r2, #0
   13268:	0a000028 	beq	13310 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x10c>
   1326c:	e5823004 	str	r3, [r2, #4]
   13270:	e3003438 	movw	r3, #1080	; 0x438
   13274:	e183e80e 	orr	lr, r3, lr, lsl #16
   13278:	e38c3103 	orr	r3, ip, #-1073741824	; 0xc0000000
   1327c:	e5823008 	str	r3, [r2, #8]
   13280:	e3a03000 	mov	r3, #0
   13284:	e582e000 	str	lr, [r2]
   13288:	e582100c 	str	r1, [r2, #12]
   1328c:	e5c23010 	strb	r3, [r2, #16]
   13290:	e5c23011 	strb	r3, [r2, #17]
   13294:	e5c23012 	strb	r3, [r2, #18]
   13298:	e5c23013 	strb	r3, [r2, #19]
   1329c:	e5c23014 	strb	r3, [r2, #20]
   132a0:	e5c23015 	strb	r3, [r2, #21]
   132a4:	e5c23016 	strb	r3, [r2, #22]
   132a8:	e5c23017 	strb	r3, [r2, #23]
   132ac:	e8bd4010 	pop	{r4, lr}
   132b0:	e580c020 	str	ip, [r0, #32]
   132b4:	e5801024 	str	r1, [r0, #36]	; 0x24
   132b8:	e1a0000c 	mov	r0, ip
   132bc:	eafff838 	b	113a4 <CleanAndInvalidateDataCacheRange>
   132c0:	e3061b44 	movw	r1, #27460	; 0x6b44
   132c4:	e3a020bd 	mov	r2, #189	; 0xbd
   132c8:	e3401001 	movt	r1, #1
   132cc:	e2810060 	add	r0, r1, #96	; 0x60
   132d0:	ebfffc39 	bl	123bc <assertion_failed>
   132d4:	e3061b44 	movw	r1, #27460	; 0x6b44
   132d8:	e3a020be 	mov	r2, #190	; 0xbe
   132dc:	e3401001 	movt	r1, #1
   132e0:	e2810084 	add	r0, r1, #132	; 0x84
   132e4:	ebfffc34 	bl	123bc <assertion_failed>
   132e8:	e3061b44 	movw	r1, #27460	; 0x6b44
   132ec:	e3a020bf 	mov	r2, #191	; 0xbf
   132f0:	e3401001 	movt	r1, #1
   132f4:	e28100bc 	add	r0, r1, #188	; 0xbc
   132f8:	ebfffc2f 	bl	123bc <assertion_failed>
   132fc:	e3061b44 	movw	r1, #27460	; 0x6b44
   13300:	e3a020c4 	mov	r2, #196	; 0xc4
   13304:	e3401001 	movt	r1, #1
   13308:	e2810f4b 	add	r0, r1, #300	; 0x12c
   1330c:	ebfffc2a 	bl	123bc <assertion_failed>
   13310:	e3061b44 	movw	r1, #27460	; 0x6b44
   13314:	e3a020c7 	mov	r2, #199	; 0xc7
   13318:	e3401001 	movt	r1, #1
   1331c:	e28100a4 	add	r0, r1, #164	; 0xa4
   13320:	ebfffc25 	bl	123bc <assertion_failed>
   13324:	e3061b44 	movw	r1, #27460	; 0x6b44
   13328:	e3a020c0 	mov	r2, #192	; 0xc0
   1332c:	e3401001 	movt	r1, #1
   13330:	e28100d4 	add	r0, r1, #212	; 0xd4
   13334:	ebfffc20 	bl	123bc <assertion_failed>

00013338 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   13338:	e3520000 	cmp	r2, #0
   1333c:	e92d4010 	push	{r4, lr}
   13340:	e5dd4008 	ldrb	r4, [sp, #8]
   13344:	0a00002a 	beq	133f4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xbc>
   13348:	e3530000 	cmp	r3, #0
   1334c:	e1a0c001 	mov	ip, r1
   13350:	e1a01003 	mov	r1, r3
   13354:	0a00002b 	beq	13408 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xd0>
   13358:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   1335c:	8a00002e 	bhi	1341c <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xe4>
   13360:	e5903000 	ldr	r3, [r0]
   13364:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13368:	e2833070 	add	r3, r3, #112	; 0x70
   1336c:	e1a03403 	lsl	r3, r3, #8
   13370:	e5933020 	ldr	r3, [r3, #32]
   13374:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   13378:	e7e03e53 	ubfx	r3, r3, #28, #1
   1337c:	e3510801 	cmp	r1, #65536	; 0x10000
   13380:	33833001 	orrcc	r3, r3, #1
   13384:	e3530000 	cmp	r3, #0
   13388:	0a000032 	beq	13458 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x120>
   1338c:	e3dce4ff 	bics	lr, ip, #-16777216	; 0xff000000
   13390:	0a000026 	beq	13430 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xf8>
   13394:	e590c008 	ldr	ip, [r0, #8]
   13398:	e28ee47e 	add	lr, lr, #2113929216	; 0x7e000000
   1339c:	e35c0000 	cmp	ip, #0
   133a0:	0a000027 	beq	13444 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x10c>
   133a4:	e58ce008 	str	lr, [ip, #8]
   133a8:	e3823103 	orr	r3, r2, #-1073741824	; 0xc0000000
   133ac:	e1a04804 	lsl	r4, r4, #16
   133b0:	e58c3004 	str	r3, [ip, #4]
   133b4:	e3844fd2 	orr	r4, r4, #840	; 0x348
   133b8:	e58c4000 	str	r4, [ip]
   133bc:	e3a03000 	mov	r3, #0
   133c0:	e58c100c 	str	r1, [ip, #12]
   133c4:	e5cc3010 	strb	r3, [ip, #16]
   133c8:	e5cc3011 	strb	r3, [ip, #17]
   133cc:	e5cc3012 	strb	r3, [ip, #18]
   133d0:	e5cc3013 	strb	r3, [ip, #19]
   133d4:	e5cc3014 	strb	r3, [ip, #20]
   133d8:	e5cc3015 	strb	r3, [ip, #21]
   133dc:	e5cc3016 	strb	r3, [ip, #22]
   133e0:	e5cc3017 	strb	r3, [ip, #23]
   133e4:	e8bd4010 	pop	{r4, lr}
   133e8:	e5803020 	str	r3, [r0, #32]
   133ec:	e1a00002 	mov	r0, r2
   133f0:	eafff7eb 	b	113a4 <CleanAndInvalidateDataCacheRange>
   133f4:	e3061b44 	movw	r1, #27460	; 0x6b44
   133f8:	e3a020e5 	mov	r2, #229	; 0xe5
   133fc:	e3401001 	movt	r1, #1
   13400:	e2810074 	add	r0, r1, #116	; 0x74
   13404:	ebfffbec 	bl	123bc <assertion_failed>
   13408:	e3061b44 	movw	r1, #27460	; 0x6b44
   1340c:	e3a020e6 	mov	r2, #230	; 0xe6
   13410:	e3401001 	movt	r1, #1
   13414:	e2810084 	add	r0, r1, #132	; 0x84
   13418:	ebfffbe7 	bl	123bc <assertion_failed>
   1341c:	e3061b44 	movw	r1, #27460	; 0x6b44
   13420:	e3a020e7 	mov	r2, #231	; 0xe7
   13424:	e3401001 	movt	r1, #1
   13428:	e28100bc 	add	r0, r1, #188	; 0xbc
   1342c:	ebfffbe2 	bl	123bc <assertion_failed>
   13430:	e3061b44 	movw	r1, #27460	; 0x6b44
   13434:	e3a020ec 	mov	r2, #236	; 0xec
   13438:	e3401001 	movt	r1, #1
   1343c:	e2810f4b 	add	r0, r1, #300	; 0x12c
   13440:	ebfffbdd 	bl	123bc <assertion_failed>
   13444:	e3061b44 	movw	r1, #27460	; 0x6b44
   13448:	e3a020ef 	mov	r2, #239	; 0xef
   1344c:	e3401001 	movt	r1, #1
   13450:	e28100a4 	add	r0, r1, #164	; 0xa4
   13454:	ebfffbd8 	bl	123bc <assertion_failed>
   13458:	e3061b44 	movw	r1, #27460	; 0x6b44
   1345c:	e3a020e8 	mov	r2, #232	; 0xe8
   13460:	e3401001 	movt	r1, #1
   13464:	e28100d4 	add	r0, r1, #212	; 0xd4
   13468:	ebfffbd3 	bl	123bc <assertion_failed>

0001346c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   1346c:	e3510000 	cmp	r1, #0
   13470:	e92d4070 	push	{r4, r5, r6, lr}
   13474:	e59de010 	ldr	lr, [sp, #16]
   13478:	e59d6014 	ldr	r6, [sp, #20]
   1347c:	e59d4018 	ldr	r4, [sp, #24]
   13480:	0a000033 	beq	13554 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   13484:	e3520000 	cmp	r2, #0
   13488:	e1a05000 	mov	r5, r0
   1348c:	e1a00002 	mov	r0, r2
   13490:	0a000034 	beq	13568 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   13494:	e3530000 	cmp	r3, #0
   13498:	0a000037 	beq	1357c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   1349c:	e3530801 	cmp	r3, #65536	; 0x10000
   134a0:	2a00003a 	bcs	13590 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x124>
   134a4:	e35e0000 	cmp	lr, #0
   134a8:	0a00003d 	beq	135a4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   134ac:	e35e0901 	cmp	lr, #16384	; 0x4000
   134b0:	2a000040 	bcs	135b8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x14c>
   134b4:	e3560801 	cmp	r6, #65536	; 0x10000
   134b8:	2a000020 	bcs	13540 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
   134bc:	e354000f 	cmp	r4, #15
   134c0:	8a000041 	bhi	135cc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x160>
   134c4:	e595c000 	ldr	ip, [r5]
   134c8:	e28cc83f 	add	ip, ip, #4128768	; 0x3f0000
   134cc:	e28cc070 	add	ip, ip, #112	; 0x70
   134d0:	e1a0c40c 	lsl	ip, ip, #8
   134d4:	e59c2020 	ldr	r2, [ip, #32]
   134d8:	e3120201 	tst	r2, #268435456	; 0x10000000
   134dc:	1a00003f 	bne	135e0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x174>
   134e0:	e5952008 	ldr	r2, [r5, #8]
   134e4:	e3520000 	cmp	r2, #0
   134e8:	0a000041 	beq	135f4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x188>
   134ec:	e381c103 	orr	ip, r1, #-1073741824	; 0xc0000000
   134f0:	e582c008 	str	ip, [r2, #8]
   134f4:	e24ec001 	sub	ip, lr, #1
   134f8:	e1a01806 	lsl	r1, r6, #16
   134fc:	e5821010 	str	r1, [r2, #16]
   13500:	e001039e 	mul	r1, lr, r3
   13504:	e183380c 	orr	r3, r3, ip, lsl #16
   13508:	e582300c 	str	r3, [r2, #12]
   1350c:	e3003332 	movw	r3, #818	; 0x332
   13510:	e1834604 	orr	r4, r3, r4, lsl #12
   13514:	e3803103 	orr	r3, r0, #-1073741824	; 0xc0000000
   13518:	e5823004 	str	r3, [r2, #4]
   1351c:	e3a03000 	mov	r3, #0
   13520:	e5824000 	str	r4, [r2]
   13524:	e5c23014 	strb	r3, [r2, #20]
   13528:	e5c23015 	strb	r3, [r2, #21]
   1352c:	e5c23016 	strb	r3, [r2, #22]
   13530:	e5c23017 	strb	r3, [r2, #23]
   13534:	e5853020 	str	r3, [r5, #32]
   13538:	e8bd4070 	pop	{r4, r5, r6, lr}
   1353c:	eafff798 	b	113a4 <CleanAndInvalidateDataCacheRange>
   13540:	e3061b44 	movw	r1, #27460	; 0x6b44
   13544:	e3002115 	movw	r2, #277	; 0x115
   13548:	e3401001 	movt	r1, #1
   1354c:	e2810e19 	add	r0, r1, #400	; 0x190
   13550:	ebfffb99 	bl	123bc <assertion_failed>
   13554:	e3061b44 	movw	r1, #27460	; 0x6b44
   13558:	e300210f 	movw	r2, #271	; 0x10f
   1355c:	e3401001 	movt	r1, #1
   13560:	e2810060 	add	r0, r1, #96	; 0x60
   13564:	ebfffb94 	bl	123bc <assertion_failed>
   13568:	e3061b44 	movw	r1, #27460	; 0x6b44
   1356c:	e3a02e11 	mov	r2, #272	; 0x110
   13570:	e3401001 	movt	r1, #1
   13574:	e2810074 	add	r0, r1, #116	; 0x74
   13578:	ebfffb8f 	bl	123bc <assertion_failed>
   1357c:	e3061b44 	movw	r1, #27460	; 0x6b44
   13580:	e3002111 	movw	r2, #273	; 0x111
   13584:	e3401001 	movt	r1, #1
   13588:	e2810f4f 	add	r0, r1, #316	; 0x13c
   1358c:	ebfffb8a 	bl	123bc <assertion_failed>
   13590:	e3061b44 	movw	r1, #27460	; 0x6b44
   13594:	e3002112 	movw	r2, #274	; 0x112
   13598:	e3401001 	movt	r1, #1
   1359c:	e2810e15 	add	r0, r1, #336	; 0x150
   135a0:	ebfffb85 	bl	123bc <assertion_failed>
   135a4:	e3061b44 	movw	r1, #27460	; 0x6b44
   135a8:	e3002113 	movw	r2, #275	; 0x113
   135ac:	e3401001 	movt	r1, #1
   135b0:	e2810f5a 	add	r0, r1, #360	; 0x168
   135b4:	ebfffb80 	bl	123bc <assertion_failed>
   135b8:	e3061b44 	movw	r1, #27460	; 0x6b44
   135bc:	e3a02f45 	mov	r2, #276	; 0x114
   135c0:	e3401001 	movt	r1, #1
   135c4:	e2810f5e 	add	r0, r1, #376	; 0x178
   135c8:	ebfffb7b 	bl	123bc <assertion_failed>
   135cc:	e3061b44 	movw	r1, #27460	; 0x6b44
   135d0:	e3002116 	movw	r2, #278	; 0x116
   135d4:	e3401001 	movt	r1, #1
   135d8:	e2810090 	add	r0, r1, #144	; 0x90
   135dc:	ebfffb76 	bl	123bc <assertion_failed>
   135e0:	e3061b44 	movw	r1, #27460	; 0x6b44
   135e4:	e3a02f46 	mov	r2, #280	; 0x118
   135e8:	e3401001 	movt	r1, #1
   135ec:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   135f0:	ebfffb71 	bl	123bc <assertion_failed>
   135f4:	e3061b44 	movw	r1, #27460	; 0x6b44
   135f8:	e300211a 	movw	r2, #282	; 0x11a
   135fc:	e3401001 	movt	r1, #1
   13600:	e28100a4 	add	r0, r1, #164	; 0xa4
   13604:	ebfffb6c 	bl	123bc <assertion_failed>

00013608 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   13608:	e5903000 	ldr	r3, [r0]
   1360c:	e92d4070 	push	{r4, r5, r6, lr}
   13610:	e353000c 	cmp	r3, #12
   13614:	8a000015 	bhi	13670 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   13618:	e1a04000 	mov	r4, r0
   1361c:	e590000c 	ldr	r0, [r0, #12]
   13620:	e3500000 	cmp	r0, #0
   13624:	0a000016 	beq	13684 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   13628:	e1a06002 	mov	r6, r2
   1362c:	e1a05001 	mov	r5, r1
   13630:	e5d42010 	ldrb	r2, [r4, #16]
   13634:	e3520000 	cmp	r2, #0
   13638:	0a000004 	beq	13650 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   1363c:	e5845014 	str	r5, [r4, #20]
   13640:	e3550000 	cmp	r5, #0
   13644:	0a000013 	beq	13698 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   13648:	e5846018 	str	r6, [r4, #24]
   1364c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13650:	e30329c8 	movw	r2, #14792	; 0x39c8
   13654:	e2831010 	add	r1, r3, #16
   13658:	e3402001 	movt	r2, #1
   1365c:	e1a03004 	mov	r3, r4
   13660:	ebfff9dc 	bl	11dd8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13664:	e3a03001 	mov	r3, #1
   13668:	e5c43010 	strb	r3, [r4, #16]
   1366c:	eafffff2 	b	1363c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   13670:	e3061b44 	movw	r1, #27460	; 0x6b44
   13674:	e3002139 	movw	r2, #313	; 0x139
   13678:	e3401001 	movt	r1, #1
   1367c:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   13680:	ebfffb4d 	bl	123bc <assertion_failed>
   13684:	e3061b44 	movw	r1, #27460	; 0x6b44
   13688:	e300213a 	movw	r2, #314	; 0x13a
   1368c:	e3401001 	movt	r1, #1
   13690:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   13694:	ebfffb48 	bl	123bc <assertion_failed>
   13698:	e3061b44 	movw	r1, #27460	; 0x6b44
   1369c:	e3a02f51 	mov	r2, #324	; 0x144
   136a0:	e3401001 	movt	r1, #1
   136a4:	e2810f85 	add	r0, r1, #532	; 0x214
   136a8:	ebfffb43 	bl	123bc <assertion_failed>

000136ac <CDMAChannel::Start()>:
   136ac:	e5902000 	ldr	r2, [r0]
   136b0:	e92d4010 	push	{r4, lr}
   136b4:	e352000b 	cmp	r2, #11
   136b8:	8a00002c 	bhi	13770 <CDMAChannel::Start()+0xc4>
   136bc:	e1a04000 	mov	r4, r0
   136c0:	e5900008 	ldr	r0, [r0, #8]
   136c4:	e3500000 	cmp	r0, #0
   136c8:	0a00002d 	beq	13784 <CDMAChannel::Start()+0xd8>
   136cc:	e5943014 	ldr	r3, [r4, #20]
   136d0:	e3530000 	cmp	r3, #0
   136d4:	0a000008 	beq	136fc <CDMAChannel::Start()+0x50>
   136d8:	e594300c 	ldr	r3, [r4, #12]
   136dc:	e3530000 	cmp	r3, #0
   136e0:	0a000036 	beq	137c0 <CDMAChannel::Start()+0x114>
   136e4:	e5d43010 	ldrb	r3, [r4, #16]
   136e8:	e3530000 	cmp	r3, #0
   136ec:	0a00001a 	beq	1375c <CDMAChannel::Start()+0xb0>
   136f0:	e5903000 	ldr	r3, [r0]
   136f4:	e3833001 	orr	r3, r3, #1
   136f8:	e5803000 	str	r3, [r0]
   136fc:	e282383f 	add	r3, r2, #4128768	; 0x3f0000
   13700:	e2833070 	add	r3, r3, #112	; 0x70
   13704:	e1a03403 	lsl	r3, r3, #8
   13708:	e5931000 	ldr	r1, [r3]
   1370c:	e3110004 	tst	r1, #4
   13710:	1a000020 	bne	13798 <CDMAChannel::Start()+0xec>
   13714:	e3a01a07 	mov	r1, #28672	; 0x7000
   13718:	e3a0c001 	mov	ip, #1
   1371c:	e3431f00 	movt	r1, #16128	; 0x3f00
   13720:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   13724:	e011221c 	ands	r2, r1, ip, lsl r2
   13728:	1a00001f 	bne	137ac <CDMAChannel::Start()+0x100>
   1372c:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
   13730:	e3a01020 	mov	r1, #32
   13734:	e5832004 	str	r2, [r3, #4]
   13738:	ebfff719 	bl	113a4 <CleanAndInvalidateDataCacheRange>
   1373c:	e5943000 	ldr	r3, [r4]
   13740:	e3a02001 	mov	r2, #1
   13744:	e34120f1 	movt	r2, #4337	; 0x10f1
   13748:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   1374c:	e2833070 	add	r3, r3, #112	; 0x70
   13750:	e1a03403 	lsl	r3, r3, #8
   13754:	e5832000 	str	r2, [r3]
   13758:	e8bd8010 	pop	{r4, pc}
   1375c:	e3061b44 	movw	r1, #27460	; 0x6b44
   13760:	e300215a 	movw	r2, #346	; 0x15a
   13764:	e3401001 	movt	r1, #1
   13768:	e2810e23 	add	r0, r1, #560	; 0x230
   1376c:	ebfffb12 	bl	123bc <assertion_failed>
   13770:	e3061b44 	movw	r1, #27460	; 0x6b44
   13774:	e3a02f55 	mov	r2, #340	; 0x154
   13778:	e3401001 	movt	r1, #1
   1377c:	e2810030 	add	r0, r1, #48	; 0x30
   13780:	ebfffb0d 	bl	123bc <assertion_failed>
   13784:	e3061b44 	movw	r1, #27460	; 0x6b44
   13788:	e3002155 	movw	r2, #341	; 0x155
   1378c:	e3401001 	movt	r1, #1
   13790:	e28100a4 	add	r0, r1, #164	; 0xa4
   13794:	ebfffb08 	bl	123bc <assertion_failed>
   13798:	e3061b44 	movw	r1, #27460	; 0x6b44
   1379c:	e3a02e16 	mov	r2, #352	; 0x160
   137a0:	e3401001 	movt	r1, #1
   137a4:	e2810d09 	add	r0, r1, #576	; 0x240
   137a8:	ebfffb03 	bl	123bc <assertion_failed>
   137ac:	e3061b44 	movw	r1, #27460	; 0x6b44
   137b0:	e3002161 	movw	r2, #353	; 0x161
   137b4:	e3401001 	movt	r1, #1
   137b8:	e2810f9d 	add	r0, r1, #628	; 0x274
   137bc:	ebfffafe 	bl	123bc <assertion_failed>
   137c0:	e3061b44 	movw	r1, #27460	; 0x6b44
   137c4:	e3002159 	movw	r2, #345	; 0x159
   137c8:	e3401001 	movt	r1, #1
   137cc:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   137d0:	ebfffaf9 	bl	123bc <assertion_failed>

000137d4 <CDMAChannel::Wait()>:
   137d4:	e5902000 	ldr	r2, [r0]
   137d8:	e92d4010 	push	{r4, lr}
   137dc:	e352000b 	cmp	r2, #11
   137e0:	8a000014 	bhi	13838 <CDMAChannel::Wait()+0x64>
   137e4:	e5903014 	ldr	r3, [r0, #20]
   137e8:	e1a04000 	mov	r4, r0
   137ec:	e3530000 	cmp	r3, #0
   137f0:	0282283f 	addeq	r2, r2, #4128768	; 0x3f0000
   137f4:	02822070 	addeq	r2, r2, #112	; 0x70
   137f8:	01a02402 	lsleq	r2, r2, #8
   137fc:	1a000012 	bne	1384c <CDMAChannel::Wait()+0x78>
   13800:	e5923000 	ldr	r3, [r2]
   13804:	e3130001 	tst	r3, #1
   13808:	1afffffc 	bne	13800 <CDMAChannel::Wait()+0x2c>
   1380c:	e5942020 	ldr	r2, [r4, #32]
   13810:	e2233c01 	eor	r3, r3, #256	; 0x100
   13814:	e7e00453 	ubfx	r0, r3, #8, #1
   13818:	e5c4001c 	strb	r0, [r4, #28]
   1381c:	e3520000 	cmp	r2, #0
   13820:	08bd8010 	popeq	{r4, pc}
   13824:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   13828:	e1a00002 	mov	r0, r2
   1382c:	ebfff6dc 	bl	113a4 <CleanAndInvalidateDataCacheRange>
   13830:	e5d4001c 	ldrb	r0, [r4, #28]
   13834:	e8bd8010 	pop	{r4, pc}
   13838:	e3061b44 	movw	r1, #27460	; 0x6b44
   1383c:	e3a02f5e 	mov	r2, #376	; 0x178
   13840:	e3401001 	movt	r1, #1
   13844:	e2810030 	add	r0, r1, #48	; 0x30
   13848:	ebfffadb 	bl	123bc <assertion_failed>
   1384c:	e3061b44 	movw	r1, #27460	; 0x6b44
   13850:	e3002179 	movw	r2, #377	; 0x179
   13854:	e3401001 	movt	r1, #1
   13858:	e2810faa 	add	r0, r1, #680	; 0x2a8
   1385c:	ebfffad6 	bl	123bc <assertion_failed>

00013860 <CDMAChannel::GetStatus()>:
   13860:	e5903000 	ldr	r3, [r0]
   13864:	e92d4010 	push	{r4, lr}
   13868:	e353000b 	cmp	r3, #11
   1386c:	8a000007 	bhi	13890 <CDMAChannel::GetStatus()+0x30>
   13870:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13874:	e2833070 	add	r3, r3, #112	; 0x70
   13878:	e1a03403 	lsl	r3, r3, #8
   1387c:	e5933000 	ldr	r3, [r3]
   13880:	e3130001 	tst	r3, #1
   13884:	1a000006 	bne	138a4 <CDMAChannel::GetStatus()+0x44>
   13888:	e5d0001c 	ldrb	r0, [r0, #28]
   1388c:	e8bd8010 	pop	{r4, pc}
   13890:	e3061b44 	movw	r1, #27460	; 0x6b44
   13894:	e3a02f66 	mov	r2, #408	; 0x198
   13898:	e3401001 	movt	r1, #1
   1389c:	e2810030 	add	r0, r1, #48	; 0x30
   138a0:	ebfffac5 	bl	123bc <assertion_failed>
   138a4:	e3061b44 	movw	r1, #27460	; 0x6b44
   138a8:	e3002199 	movw	r2, #409	; 0x199
   138ac:	e3401001 	movt	r1, #1
   138b0:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   138b4:	ebfffac0 	bl	123bc <assertion_failed>

000138b8 <CDMAChannel::InterruptHandler()>:
   138b8:	e92d4010 	push	{r4, lr}
   138bc:	e1a04000 	mov	r4, r0
   138c0:	e5900020 	ldr	r0, [r0, #32]
   138c4:	e3500000 	cmp	r0, #0
   138c8:	1a000020 	bne	13950 <CDMAChannel::InterruptHandler()+0x98>
   138cc:	e5941000 	ldr	r1, [r4]
   138d0:	e351000b 	cmp	r1, #11
   138d4:	8a000022 	bhi	13964 <CDMAChannel::InterruptHandler()+0xac>
   138d8:	e3a02a07 	mov	r2, #28672	; 0x7000
   138dc:	e3a03001 	mov	r3, #1
   138e0:	e3432f00 	movt	r2, #16128	; 0x3f00
   138e4:	e1a03113 	lsl	r3, r3, r1
   138e8:	e5921fe0 	ldr	r1, [r2, #4064]	; 0xfe0
   138ec:	e1130001 	tst	r3, r1
   138f0:	0a000020 	beq	13978 <CDMAChannel::InterruptHandler()+0xc0>
   138f4:	e5823fe0 	str	r3, [r2, #4064]	; 0xfe0
   138f8:	e5943000 	ldr	r3, [r4]
   138fc:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13900:	e2833070 	add	r3, r3, #112	; 0x70
   13904:	e1a03403 	lsl	r3, r3, #8
   13908:	e5931000 	ldr	r1, [r3]
   1390c:	e3110004 	tst	r1, #4
   13910:	0a00001d 	beq	1398c <CDMAChannel::InterruptHandler()+0xd4>
   13914:	e3110001 	tst	r1, #1
   13918:	1a000020 	bne	139a0 <CDMAChannel::InterruptHandler()+0xe8>
   1391c:	e594e014 	ldr	lr, [r4, #20]
   13920:	e2211c01 	eor	r1, r1, #256	; 0x100
   13924:	e7e01451 	ubfx	r1, r1, #8, #1
   13928:	e3a02004 	mov	r2, #4
   1392c:	e5832000 	str	r2, [r3]
   13930:	e35e0000 	cmp	lr, #0
   13934:	e5c4101c 	strb	r1, [r4, #28]
   13938:	0a00001d 	beq	139b4 <CDMAChannel::InterruptHandler()+0xfc>
   1393c:	e5942018 	ldr	r2, [r4, #24]
   13940:	e1a0300e 	mov	r3, lr
   13944:	e5940000 	ldr	r0, [r4]
   13948:	e8bd4010 	pop	{r4, lr}
   1394c:	e12fff13 	bx	r3
   13950:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   13954:	ebfff692 	bl	113a4 <CleanAndInvalidateDataCacheRange>
   13958:	e5941000 	ldr	r1, [r4]
   1395c:	e351000b 	cmp	r1, #11
   13960:	9affffdc 	bls	138d8 <CDMAChannel::InterruptHandler()+0x20>
   13964:	e3061b44 	movw	r1, #27460	; 0x6b44
   13968:	e30021a7 	movw	r2, #423	; 0x1a7
   1396c:	e3401001 	movt	r1, #1
   13970:	e2810030 	add	r0, r1, #48	; 0x30
   13974:	ebfffa90 	bl	123bc <assertion_failed>
   13978:	e3061b44 	movw	r1, #27460	; 0x6b44
   1397c:	e30021ad 	movw	r2, #429	; 0x1ad
   13980:	e3401001 	movt	r1, #1
   13984:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   13988:	ebfffa8b 	bl	123bc <assertion_failed>
   1398c:	e3061b44 	movw	r1, #27460	; 0x6b44
   13990:	e30021b1 	movw	r2, #433	; 0x1b1
   13994:	e3401001 	movt	r1, #1
   13998:	e2810e31 	add	r0, r1, #784	; 0x310
   1399c:	ebfffa86 	bl	123bc <assertion_failed>
   139a0:	e3061b44 	movw	r1, #27460	; 0x6b44
   139a4:	e30021b2 	movw	r2, #434	; 0x1b2
   139a8:	e3401001 	movt	r1, #1
   139ac:	e2810e32 	add	r0, r1, #800	; 0x320
   139b0:	ebfffa81 	bl	123bc <assertion_failed>
   139b4:	e3061b44 	movw	r1, #27460	; 0x6b44
   139b8:	e30021b9 	movw	r2, #441	; 0x1b9
   139bc:	e3401001 	movt	r1, #1
   139c0:	e2810f85 	add	r0, r1, #532	; 0x214
   139c4:	ebfffa7c 	bl	123bc <assertion_failed>

000139c8 <CDMAChannel::InterruptStub(void*)>:
   139c8:	e3500000 	cmp	r0, #0
   139cc:	0a000000 	beq	139d4 <CDMAChannel::InterruptStub(void*)+0xc>
   139d0:	eaffffb8 	b	138b8 <CDMAChannel::InterruptHandler()>
   139d4:	e3061b44 	movw	r1, #27460	; 0x6b44
   139d8:	e3a02d07 	mov	r2, #448	; 0x1c0
   139dc:	e3401001 	movt	r1, #1
   139e0:	e2810fcd 	add	r0, r1, #820	; 0x334
   139e4:	e92d4010 	push	{r4, lr}
   139e8:	ebfffa73 	bl	123bc <assertion_failed>

000139ec <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   139ec:	e5801000 	str	r1, [r0]
   139f0:	e1a03000 	mov	r3, r0
   139f4:	e28010dc 	add	r1, r0, #220	; 0xdc
   139f8:	e3a02000 	mov	r2, #0
   139fc:	e5e32004 	strb	r2, [r3, #4]!
   13a00:	e5a32004 	str	r2, [r3, #4]!
   13a04:	e1530001 	cmp	r3, r1
   13a08:	1afffffc 	bne	13a00 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x14>
   13a0c:	e12fff1e 	bx	lr

00013a10 <CGPIOManager::~CGPIOManager()>:
   13a10:	e92d4010 	push	{r4, lr}
   13a14:	e2803004 	add	r3, r0, #4
   13a18:	e1a04000 	mov	r4, r0
   13a1c:	e28010dc 	add	r1, r0, #220	; 0xdc
   13a20:	ea000001 	b	13a2c <CGPIOManager::~CGPIOManager()+0x1c>
   13a24:	e1530001 	cmp	r3, r1
   13a28:	0a000008 	beq	13a50 <CGPIOManager::~CGPIOManager()+0x40>
   13a2c:	e5b32004 	ldr	r2, [r3, #4]!
   13a30:	e3520000 	cmp	r2, #0
   13a34:	0afffffa 	beq	13a24 <CGPIOManager::~CGPIOManager()+0x14>
   13a38:	e3061e84 	movw	r1, #28292	; 0x6e84
   13a3c:	e3060e94 	movw	r0, #28308	; 0x6e94
   13a40:	e3401001 	movt	r1, #1
   13a44:	e3a0202c 	mov	r2, #44	; 0x2c
   13a48:	e3400001 	movt	r0, #1
   13a4c:	ebfffa5a 	bl	123bc <assertion_failed>
   13a50:	e5d43004 	ldrb	r3, [r4, #4]
   13a54:	e3530000 	cmp	r3, #0
   13a58:	0a000004 	beq	13a70 <CGPIOManager::~CGPIOManager()+0x60>
   13a5c:	e5940000 	ldr	r0, [r4]
   13a60:	e3500000 	cmp	r0, #0
   13a64:	0a000003 	beq	13a78 <CGPIOManager::~CGPIOManager()+0x68>
   13a68:	e3a01034 	mov	r1, #52	; 0x34
   13a6c:	ebfff90c 	bl	11ea4 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13a70:	e1a00004 	mov	r0, r4
   13a74:	e8bd8010 	pop	{r4, pc}
   13a78:	e3061e84 	movw	r1, #28292	; 0x6e84
   13a7c:	e3060ea8 	movw	r0, #28328	; 0x6ea8
   13a80:	e3401001 	movt	r1, #1
   13a84:	e3a02032 	mov	r2, #50	; 0x32
   13a88:	e3400001 	movt	r0, #1
   13a8c:	ebfffa4a 	bl	123bc <assertion_failed>

00013a90 <CGPIOManager::Initialize()>:
   13a90:	e5d03004 	ldrb	r3, [r0, #4]
   13a94:	e92d4010 	push	{r4, lr}
   13a98:	e3530000 	cmp	r3, #0
   13a9c:	1a00000b 	bne	13ad0 <CGPIOManager::Initialize()+0x40>
   13aa0:	e1a04000 	mov	r4, r0
   13aa4:	e5900000 	ldr	r0, [r0]
   13aa8:	e3500000 	cmp	r0, #0
   13aac:	0a00000d 	beq	13ae8 <CGPIOManager::Initialize()+0x58>
   13ab0:	e3032cfc 	movw	r2, #15612	; 0x3cfc
   13ab4:	e1a03004 	mov	r3, r4
   13ab8:	e3402001 	movt	r2, #1
   13abc:	e3a01034 	mov	r1, #52	; 0x34
   13ac0:	ebfff8c4 	bl	11dd8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13ac4:	e3a00001 	mov	r0, #1
   13ac8:	e5c40004 	strb	r0, [r4, #4]
   13acc:	e8bd8010 	pop	{r4, pc}
   13ad0:	e3061e84 	movw	r1, #28292	; 0x6e84
   13ad4:	e3060ebc 	movw	r0, #28348	; 0x6ebc
   13ad8:	e3401001 	movt	r1, #1
   13adc:	e3a0203b 	mov	r2, #59	; 0x3b
   13ae0:	e3400001 	movt	r0, #1
   13ae4:	ebfffa34 	bl	123bc <assertion_failed>
   13ae8:	e3061e84 	movw	r1, #28292	; 0x6e84
   13aec:	e3060ea8 	movw	r0, #28328	; 0x6ea8
   13af0:	e3401001 	movt	r1, #1
   13af4:	e3a0203c 	mov	r2, #60	; 0x3c
   13af8:	e3400001 	movt	r0, #1
   13afc:	ebfffa2e 	bl	123bc <assertion_failed>

00013b00 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   13b00:	e5d03004 	ldrb	r3, [r0, #4]
   13b04:	e92d4010 	push	{r4, lr}
   13b08:	e3530000 	cmp	r3, #0
   13b0c:	0a00000a 	beq	13b3c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   13b10:	e3510000 	cmp	r1, #0
   13b14:	0a00000e 	beq	13b54 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   13b18:	e5913004 	ldr	r3, [r1, #4]
   13b1c:	e3530035 	cmp	r3, #53	; 0x35
   13b20:	8a000011 	bhi	13b6c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   13b24:	e0800103 	add	r0, r0, r3, lsl #2
   13b28:	e5903008 	ldr	r3, [r0, #8]
   13b2c:	e3530000 	cmp	r3, #0
   13b30:	1a000013 	bne	13b84 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   13b34:	e5801008 	str	r1, [r0, #8]
   13b38:	e8bd8010 	pop	{r4, pc}
   13b3c:	e3061e84 	movw	r1, #28292	; 0x6e84
   13b40:	e3060ed0 	movw	r0, #28368	; 0x6ed0
   13b44:	e3401001 	movt	r1, #1
   13b48:	e3a02045 	mov	r2, #69	; 0x45
   13b4c:	e3400001 	movt	r0, #1
   13b50:	ebfffa19 	bl	123bc <assertion_failed>
   13b54:	e3061e84 	movw	r1, #28292	; 0x6e84
   13b58:	e3060ee0 	movw	r0, #28384	; 0x6ee0
   13b5c:	e3401001 	movt	r1, #1
   13b60:	e3a02047 	mov	r2, #71	; 0x47
   13b64:	e3400001 	movt	r0, #1
   13b68:	ebfffa13 	bl	123bc <assertion_failed>
   13b6c:	e3061e84 	movw	r1, #28292	; 0x6e84
   13b70:	e3060eec 	movw	r0, #28396	; 0x6eec
   13b74:	e3401001 	movt	r1, #1
   13b78:	e3a02049 	mov	r2, #73	; 0x49
   13b7c:	e3400001 	movt	r0, #1
   13b80:	ebfffa0d 	bl	123bc <assertion_failed>
   13b84:	e3061e84 	movw	r1, #28292	; 0x6e84
   13b88:	e3060e94 	movw	r0, #28308	; 0x6e94
   13b8c:	e3401001 	movt	r1, #1
   13b90:	e3a0204b 	mov	r2, #75	; 0x4b
   13b94:	e3400001 	movt	r0, #1
   13b98:	ebfffa07 	bl	123bc <assertion_failed>

00013b9c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   13b9c:	e5d03004 	ldrb	r3, [r0, #4]
   13ba0:	e92d4010 	push	{r4, lr}
   13ba4:	e3530000 	cmp	r3, #0
   13ba8:	0a00000b 	beq	13bdc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   13bac:	e3510000 	cmp	r1, #0
   13bb0:	0a00000f 	beq	13bf4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   13bb4:	e5913004 	ldr	r3, [r1, #4]
   13bb8:	e3530035 	cmp	r3, #53	; 0x35
   13bbc:	8a000012 	bhi	13c0c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   13bc0:	e0800103 	add	r0, r0, r3, lsl #2
   13bc4:	e5903008 	ldr	r3, [r0, #8]
   13bc8:	e3530000 	cmp	r3, #0
   13bcc:	0a000014 	beq	13c24 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   13bd0:	e3a03000 	mov	r3, #0
   13bd4:	e5803008 	str	r3, [r0, #8]
   13bd8:	e8bd8010 	pop	{r4, pc}
   13bdc:	e3061e84 	movw	r1, #28292	; 0x6e84
   13be0:	e3060ed0 	movw	r0, #28368	; 0x6ed0
   13be4:	e3401001 	movt	r1, #1
   13be8:	e3a02052 	mov	r2, #82	; 0x52
   13bec:	e3400001 	movt	r0, #1
   13bf0:	ebfff9f1 	bl	123bc <assertion_failed>
   13bf4:	e3061e84 	movw	r1, #28292	; 0x6e84
   13bf8:	e3060ee0 	movw	r0, #28384	; 0x6ee0
   13bfc:	e3401001 	movt	r1, #1
   13c00:	e3a02054 	mov	r2, #84	; 0x54
   13c04:	e3400001 	movt	r0, #1
   13c08:	ebfff9eb 	bl	123bc <assertion_failed>
   13c0c:	e3061e84 	movw	r1, #28292	; 0x6e84
   13c10:	e3060eec 	movw	r0, #28396	; 0x6eec
   13c14:	e3401001 	movt	r1, #1
   13c18:	e3a02056 	mov	r2, #86	; 0x56
   13c1c:	e3400001 	movt	r0, #1
   13c20:	ebfff9e5 	bl	123bc <assertion_failed>
   13c24:	e3061e84 	movw	r1, #28292	; 0x6e84
   13c28:	e3060f00 	movw	r0, #28416	; 0x6f00
   13c2c:	e3401001 	movt	r1, #1
   13c30:	e3a02058 	mov	r2, #88	; 0x58
   13c34:	e3400001 	movt	r0, #1
   13c38:	ebfff9df 	bl	123bc <assertion_failed>

00013c3c <CGPIOManager::InterruptHandler()>:
   13c3c:	e5d03004 	ldrb	r3, [r0, #4]
   13c40:	e92d4070 	push	{r4, r5, r6, lr}
   13c44:	e3530000 	cmp	r3, #0
   13c48:	0a000025 	beq	13ce4 <CGPIOManager::InterruptHandler()+0xa8>
   13c4c:	e3a02000 	mov	r2, #0
   13c50:	e1a04002 	mov	r4, r2
   13c54:	e3432f20 	movt	r2, #16160	; 0x3f20
   13c58:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   13c5c:	ea000005 	b	13c78 <CGPIOManager::InterruptHandler()+0x3c>
   13c60:	e2844001 	add	r4, r4, #1
   13c64:	e314001f 	tst	r4, #31
   13c68:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   13c6c:	11a030a3 	lsrne	r3, r3, #1
   13c70:	e3540036 	cmp	r4, #54	; 0x36
   13c74:	08bd8070 	popeq	{r4, r5, r6, pc}
   13c78:	e3130001 	tst	r3, #1
   13c7c:	0afffff7 	beq	13c60 <CGPIOManager::InterruptHandler()+0x24>
   13c80:	e2843002 	add	r3, r4, #2
   13c84:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   13c88:	e3550000 	cmp	r5, #0
   13c8c:	0a000009 	beq	13cb8 <CGPIOManager::InterruptHandler()+0x7c>
   13c90:	e1a00005 	mov	r0, r5
   13c94:	ebffd6c6 	bl	97b4 <CGPIOPin::InterruptHandler()>
   13c98:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   13c9c:	e3530000 	cmp	r3, #0
   13ca0:	13a03040 	movne	r3, #64	; 0x40
   13ca4:	1595100c 	ldrne	r1, [r5, #12]
   13ca8:	15952008 	ldrne	r2, [r5, #8]
   13cac:	13433f20 	movtne	r3, #16160	; 0x3f20
   13cb0:	17821003 	strne	r1, [r2, r3]
   13cb4:	e8bd8070 	pop	{r4, r5, r6, pc}
   13cb8:	e1a00004 	mov	r0, r4
   13cbc:	ebffd6db 	bl	9830 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   13cc0:	e3a03010 	mov	r3, #16
   13cc4:	e204101f 	and	r1, r4, #31
   13cc8:	e3403fc8 	movt	r3, #4040	; 0xfc8
   13ccc:	e3a02001 	mov	r2, #1
   13cd0:	e08332a4 	add	r3, r3, r4, lsr #5
   13cd4:	e1a02112 	lsl	r2, r2, r1
   13cd8:	e1a03103 	lsl	r3, r3, #2
   13cdc:	e5832000 	str	r2, [r3]
   13ce0:	e8bd8070 	pop	{r4, r5, r6, pc}
   13ce4:	e3061e84 	movw	r1, #28292	; 0x6e84
   13ce8:	e3060ed0 	movw	r0, #28368	; 0x6ed0
   13cec:	e3401001 	movt	r1, #1
   13cf0:	e3a0205e 	mov	r2, #94	; 0x5e
   13cf4:	e3400001 	movt	r0, #1
   13cf8:	ebfff9af 	bl	123bc <assertion_failed>

00013cfc <CGPIOManager::InterruptStub(void*)>:
   13cfc:	e3500000 	cmp	r0, #0
   13d00:	0a000000 	beq	13d08 <CGPIOManager::InterruptStub(void*)+0xc>
   13d04:	eaffffcc 	b	13c3c <CGPIOManager::InterruptHandler()>
   13d08:	e3061e84 	movw	r1, #28292	; 0x6e84
   13d0c:	e3060f14 	movw	r0, #28436	; 0x6f14
   13d10:	e3401001 	movt	r1, #1
   13d14:	e3a0208e 	mov	r2, #142	; 0x8e
   13d18:	e3400001 	movt	r0, #1
   13d1c:	e92d4010 	push	{r4, lr}
   13d20:	ebfff9a5 	bl	123bc <assertion_failed>

00013d24 <CPtrList::CPtrList()>:
   13d24:	e3a02000 	mov	r2, #0
   13d28:	e5802000 	str	r2, [r0]
   13d2c:	e12fff1e 	bx	lr

00013d30 <CPtrList::~CPtrList()>:
   13d30:	e5903000 	ldr	r3, [r0]
   13d34:	e3530000 	cmp	r3, #0
   13d38:	012fff1e 	bxeq	lr
   13d3c:	e3061f20 	movw	r1, #28448	; 0x6f20
   13d40:	e3060f2c 	movw	r0, #28460	; 0x6f2c
   13d44:	e3401001 	movt	r1, #1
   13d48:	e3a0202a 	mov	r2, #42	; 0x2a
   13d4c:	e3400001 	movt	r0, #1
   13d50:	e92d4010 	push	{r4, lr}
   13d54:	ebfff998 	bl	123bc <assertion_failed>

00013d58 <CPtrList::GetFirst()>:
   13d58:	e5900000 	ldr	r0, [r0]
   13d5c:	e12fff1e 	bx	lr

00013d60 <CPtrList::GetNext(TPtrListElement*)>:
   13d60:	e3510000 	cmp	r1, #0
   13d64:	e92d4010 	push	{r4, lr}
   13d68:	0a000006 	beq	13d88 <CPtrList::GetNext(TPtrListElement*)+0x28>
   13d6c:	e5912000 	ldr	r2, [r1]
   13d70:	e3043d43 	movw	r3, #19779	; 0x4d43
   13d74:	e345304c 	movt	r3, #20556	; 0x504c
   13d78:	e1520003 	cmp	r2, r3
   13d7c:	1a000007 	bne	13da0 <CPtrList::GetNext(TPtrListElement*)+0x40>
   13d80:	e5910008 	ldr	r0, [r1, #8]
   13d84:	e8bd8010 	pop	{r4, pc}
   13d88:	e3061f20 	movw	r1, #28448	; 0x6f20
   13d8c:	e3060b10 	movw	r0, #27408	; 0x6b10
   13d90:	e3401001 	movt	r1, #1
   13d94:	e3a02034 	mov	r2, #52	; 0x34
   13d98:	e3400001 	movt	r0, #1
   13d9c:	ebfff986 	bl	123bc <assertion_failed>
   13da0:	e3061f20 	movw	r1, #28448	; 0x6f20
   13da4:	e3060f3c 	movw	r0, #28476	; 0x6f3c
   13da8:	e3401001 	movt	r1, #1
   13dac:	e3a02035 	mov	r2, #53	; 0x35
   13db0:	e3400001 	movt	r0, #1
   13db4:	ebfff980 	bl	123bc <assertion_failed>

00013db8 <CPtrList::GetPtr(TPtrListElement*)>:
   13db8:	e3510000 	cmp	r1, #0
   13dbc:	e92d4010 	push	{r4, lr}
   13dc0:	0a000006 	beq	13de0 <CPtrList::GetPtr(TPtrListElement*)+0x28>
   13dc4:	e5912000 	ldr	r2, [r1]
   13dc8:	e3043d43 	movw	r3, #19779	; 0x4d43
   13dcc:	e345304c 	movt	r3, #20556	; 0x504c
   13dd0:	e1520003 	cmp	r2, r3
   13dd4:	1a000007 	bne	13df8 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   13dd8:	e591000c 	ldr	r0, [r1, #12]
   13ddc:	e8bd8010 	pop	{r4, pc}
   13de0:	e3061f20 	movw	r1, #28448	; 0x6f20
   13de4:	e3060b10 	movw	r0, #27408	; 0x6b10
   13de8:	e3401001 	movt	r1, #1
   13dec:	e3a0203c 	mov	r2, #60	; 0x3c
   13df0:	e3400001 	movt	r0, #1
   13df4:	ebfff970 	bl	123bc <assertion_failed>
   13df8:	e3061f20 	movw	r1, #28448	; 0x6f20
   13dfc:	e3060f3c 	movw	r0, #28476	; 0x6f3c
   13e00:	e3401001 	movt	r1, #1
   13e04:	e3a0203d 	mov	r2, #61	; 0x3d
   13e08:	e3400001 	movt	r0, #1
   13e0c:	ebfff96a 	bl	123bc <assertion_failed>

00013e10 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13e10:	e92d4070 	push	{r4, r5, r6, lr}
   13e14:	e1a05000 	mov	r5, r0
   13e18:	e3a00010 	mov	r0, #16
   13e1c:	e1a06002 	mov	r6, r2
   13e20:	e1a04001 	mov	r4, r1
   13e24:	ebfff3ea 	bl	10dd4 <operator new(unsigned int)>
   13e28:	e5952000 	ldr	r2, [r5]
   13e2c:	e3043d43 	movw	r3, #19779	; 0x4d43
   13e30:	e345304c 	movt	r3, #20556	; 0x504c
   13e34:	e5803000 	str	r3, [r0]
   13e38:	e3520000 	cmp	r2, #0
   13e3c:	e580600c 	str	r6, [r0, #12]
   13e40:	0a000016 	beq	13ea0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   13e44:	e3540000 	cmp	r4, #0
   13e48:	0a00001a 	beq	13eb8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   13e4c:	e5941000 	ldr	r1, [r4]
   13e50:	e1510003 	cmp	r1, r3
   13e54:	1a00001d 	bne	13ed0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   13e58:	e1520004 	cmp	r2, r4
   13e5c:	0a000009 	beq	13e88 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   13e60:	e5943004 	ldr	r3, [r4, #4]
   13e64:	e3530000 	cmp	r3, #0
   13e68:	e9800018 	stmib	r0, {r3, r4}
   13e6c:	0a000003 	beq	13e80 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   13e70:	e5932000 	ldr	r2, [r3]
   13e74:	e1520001 	cmp	r2, r1
   13e78:	05830008 	streq	r0, [r3, #8]
   13e7c:	1a000019 	bne	13ee8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   13e80:	e5840004 	str	r0, [r4, #4]
   13e84:	e8bd8070 	pop	{r4, r5, r6, pc}
   13e88:	e5820004 	str	r0, [r2, #4]
   13e8c:	e3a03000 	mov	r3, #0
   13e90:	e5803004 	str	r3, [r0, #4]
   13e94:	e5802008 	str	r2, [r0, #8]
   13e98:	e5850000 	str	r0, [r5]
   13e9c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13ea0:	e3061f20 	movw	r1, #28448	; 0x6f20
   13ea4:	e3060f60 	movw	r0, #28512	; 0x6f60
   13ea8:	e3401001 	movt	r1, #1
   13eac:	e3a0204c 	mov	r2, #76	; 0x4c
   13eb0:	e3400001 	movt	r0, #1
   13eb4:	ebfff940 	bl	123bc <assertion_failed>
   13eb8:	e3061f20 	movw	r1, #28448	; 0x6f20
   13ebc:	e3060f70 	movw	r0, #28528	; 0x6f70
   13ec0:	e3401001 	movt	r1, #1
   13ec4:	e3a0204d 	mov	r2, #77	; 0x4d
   13ec8:	e3400001 	movt	r0, #1
   13ecc:	ebfff93a 	bl	123bc <assertion_failed>
   13ed0:	e3061f20 	movw	r1, #28448	; 0x6f20
   13ed4:	e3060f7c 	movw	r0, #28540	; 0x6f7c
   13ed8:	e3401001 	movt	r1, #1
   13edc:	e3a0204e 	mov	r2, #78	; 0x4e
   13ee0:	e3400001 	movt	r0, #1
   13ee4:	ebfff934 	bl	123bc <assertion_failed>
   13ee8:	e3061f20 	movw	r1, #28448	; 0x6f20
   13eec:	e3060fa0 	movw	r0, #28576	; 0x6fa0
   13ef0:	e3401001 	movt	r1, #1
   13ef4:	e3a02060 	mov	r2, #96	; 0x60
   13ef8:	e3400001 	movt	r0, #1
   13efc:	ebfff92e 	bl	123bc <assertion_failed>

00013f00 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   13f00:	e92d4070 	push	{r4, r5, r6, lr}
   13f04:	e1a04001 	mov	r4, r1
   13f08:	e1a05000 	mov	r5, r0
   13f0c:	e3a00010 	mov	r0, #16
   13f10:	e1a06002 	mov	r6, r2
   13f14:	ebfff3ae 	bl	10dd4 <operator new(unsigned int)>
   13f18:	e580600c 	str	r6, [r0, #12]
   13f1c:	e3043d43 	movw	r3, #19779	; 0x4d43
   13f20:	e345304c 	movt	r3, #20556	; 0x504c
   13f24:	e3540000 	cmp	r4, #0
   13f28:	e5803000 	str	r3, [r0]
   13f2c:	0a000010 	beq	13f74 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   13f30:	e5952000 	ldr	r2, [r5]
   13f34:	e3520000 	cmp	r2, #0
   13f38:	0a000014 	beq	13f90 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   13f3c:	e5942000 	ldr	r2, [r4]
   13f40:	e1520003 	cmp	r2, r3
   13f44:	1a000017 	bne	13fa8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   13f48:	e5943008 	ldr	r3, [r4, #8]
   13f4c:	e5804004 	str	r4, [r0, #4]
   13f50:	e5803008 	str	r3, [r0, #8]
   13f54:	e3530000 	cmp	r3, #0
   13f58:	0a000003 	beq	13f6c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   13f5c:	e5931000 	ldr	r1, [r3]
   13f60:	e1510002 	cmp	r1, r2
   13f64:	05830004 	streq	r0, [r3, #4]
   13f68:	1a000014 	bne	13fc0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   13f6c:	e5840008 	str	r0, [r4, #8]
   13f70:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f74:	e5953000 	ldr	r3, [r5]
   13f78:	e3530000 	cmp	r3, #0
   13f7c:	1a000015 	bne	13fd8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   13f80:	e5803004 	str	r3, [r0, #4]
   13f84:	e5803008 	str	r3, [r0, #8]
   13f88:	e5850000 	str	r0, [r5]
   13f8c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f90:	e3061f20 	movw	r1, #28448	; 0x6f20
   13f94:	e3060f60 	movw	r0, #28512	; 0x6f60
   13f98:	e3401001 	movt	r1, #1
   13f9c:	e3a0207d 	mov	r2, #125	; 0x7d
   13fa0:	e3400001 	movt	r0, #1
   13fa4:	ebfff904 	bl	123bc <assertion_failed>
   13fa8:	e3061f20 	movw	r1, #28448	; 0x6f20
   13fac:	e3060fc8 	movw	r0, #28616	; 0x6fc8
   13fb0:	e3401001 	movt	r1, #1
   13fb4:	e3a0207e 	mov	r2, #126	; 0x7e
   13fb8:	e3400001 	movt	r0, #1
   13fbc:	ebfff8fe 	bl	123bc <assertion_failed>
   13fc0:	e3061f20 	movw	r1, #28448	; 0x6f20
   13fc4:	e3060fec 	movw	r0, #28652	; 0x6fec
   13fc8:	e3401001 	movt	r1, #1
   13fcc:	e3a02085 	mov	r2, #133	; 0x85
   13fd0:	e3400001 	movt	r0, #1
   13fd4:	ebfff8f8 	bl	123bc <assertion_failed>
   13fd8:	e3061f20 	movw	r1, #28448	; 0x6f20
   13fdc:	e3060f2c 	movw	r0, #28460	; 0x6f2c
   13fe0:	e3401001 	movt	r1, #1
   13fe4:	e3a02074 	mov	r2, #116	; 0x74
   13fe8:	e3400001 	movt	r0, #1
   13fec:	ebfff8f2 	bl	123bc <assertion_failed>

00013ff0 <CPtrList::Remove(TPtrListElement*)>:
   13ff0:	e2513000 	subs	r3, r1, #0
   13ff4:	e92d4010 	push	{r4, lr}
   13ff8:	0a00002e 	beq	140b8 <CPtrList::Remove(TPtrListElement*)+0xc8>
   13ffc:	e5931000 	ldr	r1, [r3]
   14000:	e3042d43 	movw	r2, #19779	; 0x4d43
   14004:	e345204c 	movt	r2, #20556	; 0x504c
   14008:	e1510002 	cmp	r1, r2
   1400c:	1a00002f 	bne	140d0 <CPtrList::Remove(TPtrListElement*)+0xe0>
   14010:	e5902000 	ldr	r2, [r0]
   14014:	e1520003 	cmp	r2, r3
   14018:	0a000011 	beq	14064 <CPtrList::Remove(TPtrListElement*)+0x74>
   1401c:	e5932004 	ldr	r2, [r3, #4]
   14020:	e3520000 	cmp	r2, #0
   14024:	0a00002f 	beq	140e8 <CPtrList::Remove(TPtrListElement*)+0xf8>
   14028:	e5920000 	ldr	r0, [r2]
   1402c:	e1500001 	cmp	r0, r1
   14030:	1a00001a 	bne	140a0 <CPtrList::Remove(TPtrListElement*)+0xb0>
   14034:	e5931008 	ldr	r1, [r3, #8]
   14038:	e5821008 	str	r1, [r2, #8]
   1403c:	e3510000 	cmp	r1, #0
   14040:	0a000003 	beq	14054 <CPtrList::Remove(TPtrListElement*)+0x64>
   14044:	e591c000 	ldr	ip, [r1]
   14048:	e15c0000 	cmp	ip, r0
   1404c:	05812004 	streq	r2, [r1, #4]
   14050:	1a00002a 	bne	14100 <CPtrList::Remove(TPtrListElement*)+0x110>
   14054:	e8bd4010 	pop	{r4, lr}
   14058:	e3a01010 	mov	r1, #16
   1405c:	e1a00003 	mov	r0, r3
   14060:	eafff373 	b	10e34 <operator delete(void*, unsigned int)>
   14064:	e5922008 	ldr	r2, [r2, #8]
   14068:	e5802000 	str	r2, [r0]
   1406c:	e3520000 	cmp	r2, #0
   14070:	0afffff7 	beq	14054 <CPtrList::Remove(TPtrListElement*)+0x64>
   14074:	e5920000 	ldr	r0, [r2]
   14078:	e1500001 	cmp	r0, r1
   1407c:	03a01000 	moveq	r1, #0
   14080:	05821004 	streq	r1, [r2, #4]
   14084:	0afffff2 	beq	14054 <CPtrList::Remove(TPtrListElement*)+0x64>
   14088:	e3061f20 	movw	r1, #28448	; 0x6f20
   1408c:	e3070018 	movw	r0, #28696	; 0x7018
   14090:	e3401001 	movt	r1, #1
   14094:	e3a02098 	mov	r2, #152	; 0x98
   14098:	e3400001 	movt	r0, #1
   1409c:	ebfff8c6 	bl	123bc <assertion_failed>
   140a0:	e3061f20 	movw	r1, #28448	; 0x6f20
   140a4:	e307005c 	movw	r0, #28764	; 0x705c
   140a8:	e3401001 	movt	r1, #1
   140ac:	e3a0209f 	mov	r2, #159	; 0x9f
   140b0:	e3400001 	movt	r0, #1
   140b4:	ebfff8c0 	bl	123bc <assertion_failed>
   140b8:	e3061f20 	movw	r1, #28448	; 0x6f20
   140bc:	e3060b10 	movw	r0, #27408	; 0x6b10
   140c0:	e3401001 	movt	r1, #1
   140c4:	e3a0208f 	mov	r2, #143	; 0x8f
   140c8:	e3400001 	movt	r0, #1
   140cc:	ebfff8ba 	bl	123bc <assertion_failed>
   140d0:	e3061f20 	movw	r1, #28448	; 0x6f20
   140d4:	e3060f3c 	movw	r0, #28476	; 0x6f3c
   140d8:	e3401001 	movt	r1, #1
   140dc:	e3a02090 	mov	r2, #144	; 0x90
   140e0:	e3400001 	movt	r0, #1
   140e4:	ebfff8b4 	bl	123bc <assertion_failed>
   140e8:	e3061f20 	movw	r1, #28448	; 0x6f20
   140ec:	e3070044 	movw	r0, #28740	; 0x7044
   140f0:	e3401001 	movt	r1, #1
   140f4:	e3a0209e 	mov	r2, #158	; 0x9e
   140f8:	e3400001 	movt	r0, #1
   140fc:	ebfff8ae 	bl	123bc <assertion_failed>
   14100:	e3061f20 	movw	r1, #28448	; 0x6f20
   14104:	e3070018 	movw	r0, #28696	; 0x7018
   14108:	e3401001 	movt	r1, #1
   1410c:	e3a020a4 	mov	r2, #164	; 0xa4
   14110:	e3400001 	movt	r0, #1
   14114:	ebfff8a8 	bl	123bc <assertion_failed>

00014118 <CPtrList::Find(void*)>:
   14118:	e5900000 	ldr	r0, [r0]
   1411c:	e3500000 	cmp	r0, #0
   14120:	012fff1e 	bxeq	lr
   14124:	e3042d43 	movw	r2, #19779	; 0x4d43
   14128:	e345204c 	movt	r2, #20556	; 0x504c
   1412c:	ea000005 	b	14148 <CPtrList::Find(void*)+0x30>
   14130:	e590300c 	ldr	r3, [r0, #12]
   14134:	e1530001 	cmp	r3, r1
   14138:	012fff1e 	bxeq	lr
   1413c:	e5900008 	ldr	r0, [r0, #8]
   14140:	e3500000 	cmp	r0, #0
   14144:	012fff1e 	bxeq	lr
   14148:	e5903000 	ldr	r3, [r0]
   1414c:	e1530002 	cmp	r3, r2
   14150:	0afffff6 	beq	14130 <CPtrList::Find(void*)+0x18>
   14154:	e3061f20 	movw	r1, #28448	; 0x6f20
   14158:	e3060f3c 	movw	r0, #28476	; 0x6f3c
   1415c:	e3401001 	movt	r1, #1
   14160:	e3a020b3 	mov	r2, #179	; 0xb3
   14164:	e3400001 	movt	r0, #1
   14168:	e92d4010 	push	{r4, lr}
   1416c:	ebfff892 	bl	123bc <assertion_failed>

00014170 <CPageAllocator::CPageAllocator()>:
   14170:	e3a02000 	mov	r2, #0
   14174:	e3a01001 	mov	r1, #1
   14178:	e5802000 	str	r2, [r0]
   1417c:	e5802004 	str	r2, [r0, #4]
   14180:	e5802008 	str	r2, [r0, #8]
   14184:	e580100c 	str	r1, [r0, #12]
   14188:	e12fff1e 	bx	lr

0001418c <CPageAllocator::~CPageAllocator()>:
   1418c:	e12fff1e 	bx	lr

00014190 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   14190:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14194:	e28db000 	add	fp, sp, #0
   14198:	e24dd014 	sub	sp, sp, #20
   1419c:	e50b0008 	str	r0, [fp, #-8]
   141a0:	e50b100c 	str	r1, [fp, #-12]
   141a4:	e50b2010 	str	r2, [fp, #-16]
   141a8:	e51b300c 	ldr	r3, [fp, #-12]
   141ac:	e2833eff 	add	r3, r3, #4080	; 0xff0
   141b0:	e283300f 	add	r3, r3, #15
   141b4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   141b8:	e3c3300f 	bic	r3, r3, #15
   141bc:	e1a02003 	mov	r2, r3
   141c0:	e51b3008 	ldr	r3, [fp, #-8]
   141c4:	e5832000 	str	r2, [r3]
   141c8:	e51b200c 	ldr	r2, [fp, #-12]
   141cc:	e51b3010 	ldr	r3, [fp, #-16]
   141d0:	e0823003 	add	r3, r2, r3
   141d4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   141d8:	e3c3300f 	bic	r3, r3, #15
   141dc:	e1a02003 	mov	r2, r3
   141e0:	e51b3008 	ldr	r3, [fp, #-8]
   141e4:	e5832004 	str	r2, [r3, #4]
   141e8:	e320f000 	nop	{0}
   141ec:	e28bd000 	add	sp, fp, #0
   141f0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   141f4:	e12fff1e 	bx	lr

000141f8 <CPageAllocator::GetFreeSpace() const>:
   141f8:	e8900005 	ldm	r0, {r0, r2}
   141fc:	e0420000 	sub	r0, r2, r0
   14200:	e12fff1e 	bx	lr

00014204 <CPageAllocator::Allocate()>:
   14204:	e5903000 	ldr	r3, [r0]
   14208:	e92d4070 	push	{r4, r5, r6, lr}
   1420c:	e3530000 	cmp	r3, #0
   14210:	0a000024 	beq	142a8 <CPageAllocator::Allocate()+0xa4>
   14214:	e1a04000 	mov	r4, r0
   14218:	e590000c 	ldr	r0, [r0, #12]
   1421c:	e3500000 	cmp	r0, #0
   14220:	1a000010 	bne	14268 <CPageAllocator::Allocate()+0x64>
   14224:	e5945008 	ldr	r5, [r4, #8]
   14228:	e3550000 	cmp	r5, #0
   1422c:	0a000011 	beq	14278 <CPageAllocator::Allocate()+0x74>
   14230:	e5952000 	ldr	r2, [r5]
   14234:	e3043d43 	movw	r3, #19779	; 0x4d43
   14238:	e3453047 	movt	r3, #20551	; 0x5047
   1423c:	e1520003 	cmp	r2, r3
   14240:	1a00001d 	bne	142bc <CPageAllocator::Allocate()+0xb8>
   14244:	e5952004 	ldr	r2, [r5, #4]
   14248:	e3a03000 	mov	r3, #0
   1424c:	e5842008 	str	r2, [r4, #8]
   14250:	e5853000 	str	r3, [r5]
   14254:	e594300c 	ldr	r3, [r4, #12]
   14258:	e3530000 	cmp	r3, #0
   1425c:	1a00000e 	bne	1429c <CPageAllocator::Allocate()+0x98>
   14260:	e1a00005 	mov	r0, r5
   14264:	e8bd8070 	pop	{r4, r5, r6, pc}
   14268:	ebfff65b 	bl	11bdc <EnterCritical>
   1426c:	e5945008 	ldr	r5, [r4, #8]
   14270:	e3550000 	cmp	r5, #0
   14274:	1affffed 	bne	14230 <CPageAllocator::Allocate()+0x2c>
   14278:	e5942000 	ldr	r2, [r4]
   1427c:	e5941004 	ldr	r1, [r4, #4]
   14280:	e2823a01 	add	r3, r2, #4096	; 0x1000
   14284:	e1530001 	cmp	r3, r1
   14288:	e5843000 	str	r3, [r4]
   1428c:	91a05002 	movls	r5, r2
   14290:	e594300c 	ldr	r3, [r4, #12]
   14294:	e3530000 	cmp	r3, #0
   14298:	0afffff0 	beq	14260 <CPageAllocator::Allocate()+0x5c>
   1429c:	ebfff679 	bl	11c88 <LeaveCritical>
   142a0:	e1a00005 	mov	r0, r5
   142a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   142a8:	e3071088 	movw	r1, #28808	; 0x7088
   142ac:	e3a02036 	mov	r2, #54	; 0x36
   142b0:	e3401001 	movt	r1, #1
   142b4:	e2810014 	add	r0, r1, #20
   142b8:	ebfff83f 	bl	123bc <assertion_failed>
   142bc:	e3071088 	movw	r1, #28808	; 0x7088
   142c0:	e3a02044 	mov	r2, #68	; 0x44
   142c4:	e3401001 	movt	r1, #1
   142c8:	e2810024 	add	r0, r1, #36	; 0x24
   142cc:	ebfff83a 	bl	123bc <assertion_failed>

000142d0 <CPageAllocator::Free(void*)>:
   142d0:	e92d4070 	push	{r4, r5, r6, lr}
   142d4:	e2514000 	subs	r4, r1, #0
   142d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   142dc:	e1a05000 	mov	r5, r0
   142e0:	e590000c 	ldr	r0, [r0, #12]
   142e4:	e3500000 	cmp	r0, #0
   142e8:	1a000006 	bne	14308 <CPageAllocator::Free(void*)+0x38>
   142ec:	e5952008 	ldr	r2, [r5, #8]
   142f0:	e3043d43 	movw	r3, #19779	; 0x4d43
   142f4:	e3453047 	movt	r3, #20551	; 0x5047
   142f8:	e5843000 	str	r3, [r4]
   142fc:	e5842004 	str	r2, [r4, #4]
   14300:	e5854008 	str	r4, [r5, #8]
   14304:	e8bd8070 	pop	{r4, r5, r6, pc}
   14308:	ebfff633 	bl	11bdc <EnterCritical>
   1430c:	e595100c 	ldr	r1, [r5, #12]
   14310:	e3043d43 	movw	r3, #19779	; 0x4d43
   14314:	e5952008 	ldr	r2, [r5, #8]
   14318:	e3453047 	movt	r3, #20551	; 0x5047
   1431c:	e3510000 	cmp	r1, #0
   14320:	e5843000 	str	r3, [r4]
   14324:	e5842004 	str	r2, [r4, #4]
   14328:	e5854008 	str	r4, [r5, #8]
   1432c:	08bd8070 	popeq	{r4, r5, r6, pc}
   14330:	e8bd4070 	pop	{r4, r5, r6, lr}
   14334:	eafff653 	b	11c88 <LeaveCritical>

00014338 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   14338:	e5801000 	str	r1, [r0]
   1433c:	e5c02004 	strb	r2, [r0, #4]
   14340:	e12fff1e 	bx	lr

00014344 <CBcmMailBox::~CBcmMailBox()>:
   14344:	e12fff1e 	bx	lr

00014348 <CBcmMailBox::WriteRead(unsigned int)>:
   14348:	e5d03004 	ldrb	r3, [r0, #4]
   1434c:	e92d4070 	push	{r4, r5, r6, lr}
   14350:	e3530000 	cmp	r3, #0
   14354:	e24dd008 	sub	sp, sp, #8
   14358:	e1a05000 	mov	r5, r0
   1435c:	e1a06001 	mov	r6, r1
   14360:	1a000004 	bne	14378 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   14364:	e307322c 	movw	r3, #29228	; 0x722c
   14368:	e3403001 	movt	r3, #1
   1436c:	e5930000 	ldr	r0, [r3]
   14370:	e3500000 	cmp	r0, #0
   14374:	1a000029 	bne	14420 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   14378:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1437c:	e3434f00 	movt	r4, #16128	; 0x3f00
   14380:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   14384:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14388:	1a000005 	bne	143a4 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   1438c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   14390:	e3a00014 	mov	r0, #20
   14394:	ebffef06 	bl	ffb4 <CTimer::SimpleMsDelay(unsigned int)>
   14398:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1439c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   143a0:	0afffff9 	beq	1438c <CBcmMailBox::WriteRead(unsigned int)+0x44>
   143a4:	e3a00a0b 	mov	r0, #45056	; 0xb000
   143a8:	e3430f00 	movt	r0, #16128	; 0x3f00
   143ac:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   143b0:	e3530000 	cmp	r3, #0
   143b4:	bafffffc 	blt	143ac <CBcmMailBox::WriteRead(unsigned int)+0x64>
   143b8:	e316000f 	tst	r6, #15
   143bc:	1a00001e 	bne	1443c <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   143c0:	e5953000 	ldr	r3, [r5]
   143c4:	e3a02a0b 	mov	r2, #45056	; 0xb000
   143c8:	e3432f00 	movt	r2, #16128	; 0x3f00
   143cc:	e1866003 	orr	r6, r6, r3
   143d0:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   143d4:	e5950000 	ldr	r0, [r5]
   143d8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   143dc:	e3130101 	tst	r3, #1073741824	; 0x40000000
   143e0:	1afffffc 	bne	143d8 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   143e4:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   143e8:	e203100f 	and	r1, r3, #15
   143ec:	e1510000 	cmp	r1, r0
   143f0:	1afffff8 	bne	143d8 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   143f4:	e5d52004 	ldrb	r2, [r5, #4]
   143f8:	e3c3000f 	bic	r0, r3, #15
   143fc:	e3520000 	cmp	r2, #0
   14400:	1a000004 	bne	14418 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   14404:	e307322c 	movw	r3, #29228	; 0x722c
   14408:	e3403001 	movt	r3, #1
   1440c:	e5933000 	ldr	r3, [r3]
   14410:	e3530000 	cmp	r3, #0
   14414:	1a000003 	bne	14428 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   14418:	e28dd008 	add	sp, sp, #8
   1441c:	e8bd8070 	pop	{r4, r5, r6, pc}
   14420:	ebfff5ed 	bl	11bdc <EnterCritical>
   14424:	eaffffd3 	b	14378 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   14428:	e58d0004 	str	r0, [sp, #4]
   1442c:	ebfff615 	bl	11c88 <LeaveCritical>
   14430:	e59d0004 	ldr	r0, [sp, #4]
   14434:	e28dd008 	add	sp, sp, #8
   14438:	e8bd8070 	pop	{r4, r5, r6, pc}
   1443c:	e30710d0 	movw	r1, #28880	; 0x70d0
   14440:	e30700e0 	movw	r0, #28896	; 0x70e0
   14444:	e3401001 	movt	r1, #1
   14448:	e3a02062 	mov	r2, #98	; 0x62
   1444c:	e3400001 	movt	r0, #1
   14450:	ebfff7d9 	bl	123bc <assertion_failed>

00014454 <CBcmMailBox::Flush()>:
   14454:	e92d4010 	push	{r4, lr}
   14458:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1445c:	e3434f00 	movt	r4, #16128	; 0x3f00
   14460:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   14464:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14468:	18bd8010 	popne	{r4, pc}
   1446c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   14470:	e3a00014 	mov	r0, #20
   14474:	ebffeece 	bl	ffb4 <CTimer::SimpleMsDelay(unsigned int)>
   14478:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1447c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14480:	0afffff9 	beq	1446c <CBcmMailBox::Flush()+0x18>
   14484:	e8bd8010 	pop	{r4, pc}

00014488 <CBcmMailBox::Read()>:
   14488:	e5901000 	ldr	r1, [r0]
   1448c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   14490:	e3432f00 	movt	r2, #16128	; 0x3f00
   14494:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   14498:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1449c:	1afffffc 	bne	14494 <CBcmMailBox::Read()+0xc>
   144a0:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   144a4:	e200300f 	and	r3, r0, #15
   144a8:	e1530001 	cmp	r3, r1
   144ac:	1afffff8 	bne	14494 <CBcmMailBox::Read()+0xc>
   144b0:	e3c0000f 	bic	r0, r0, #15
   144b4:	e12fff1e 	bx	lr

000144b8 <CBcmMailBox::Write(unsigned int)>:
   144b8:	e3a02a0b 	mov	r2, #45056	; 0xb000
   144bc:	e3432f00 	movt	r2, #16128	; 0x3f00
   144c0:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   144c4:	e3530000 	cmp	r3, #0
   144c8:	bafffffc 	blt	144c0 <CBcmMailBox::Write(unsigned int)+0x8>
   144cc:	e311000f 	tst	r1, #15
   144d0:	1a000003 	bne	144e4 <CBcmMailBox::Write(unsigned int)+0x2c>
   144d4:	e5903000 	ldr	r3, [r0]
   144d8:	e1811003 	orr	r1, r1, r3
   144dc:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   144e0:	e12fff1e 	bx	lr
   144e4:	e30710d0 	movw	r1, #28880	; 0x70d0
   144e8:	e30700e0 	movw	r0, #28896	; 0x70e0
   144ec:	e3401001 	movt	r1, #1
   144f0:	e3a02062 	mov	r2, #98	; 0x62
   144f4:	e3400001 	movt	r0, #1
   144f8:	e92d4010 	push	{r4, lr}
   144fc:	ebfff7ae 	bl	123bc <assertion_failed>

00014500 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   14500:	e307322c 	movw	r3, #29228	; 0x722c
   14504:	e3a02000 	mov	r2, #0
   14508:	e3403001 	movt	r3, #1
   1450c:	e5832000 	str	r2, [r3]
   14510:	e12fff1e 	bx	lr

00014514 <__aeabi_ldivmod>:
   14514:	b97b      	cbnz	r3, 14536 <__aeabi_ldivmod+0x22>
   14516:	b972      	cbnz	r2, 14536 <__aeabi_ldivmod+0x22>
   14518:	2900      	cmp	r1, #0
   1451a:	bfbe      	ittt	lt
   1451c:	2000      	movlt	r0, #0
   1451e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   14522:	e006      	blt.n	14532 <__aeabi_ldivmod+0x1e>
   14524:	bf08      	it	eq
   14526:	2800      	cmpeq	r0, #0
   14528:	bf1c      	itt	ne
   1452a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1452e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14532:	f000 ba0d 	b.w	14950 <__aeabi_idiv0>
   14536:	f1ad 0c08 	sub.w	ip, sp, #8
   1453a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1453e:	2900      	cmp	r1, #0
   14540:	db09      	blt.n	14556 <__aeabi_ldivmod+0x42>
   14542:	2b00      	cmp	r3, #0
   14544:	db1a      	blt.n	1457c <__aeabi_ldivmod+0x68>
   14546:	f000 f84d 	bl	145e4 <__udivmoddi4>
   1454a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1454e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14552:	b004      	add	sp, #16
   14554:	4770      	bx	lr
   14556:	4240      	negs	r0, r0
   14558:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1455c:	2b00      	cmp	r3, #0
   1455e:	db1b      	blt.n	14598 <__aeabi_ldivmod+0x84>
   14560:	f000 f840 	bl	145e4 <__udivmoddi4>
   14564:	f8dd e004 	ldr.w	lr, [sp, #4]
   14568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1456c:	b004      	add	sp, #16
   1456e:	4240      	negs	r0, r0
   14570:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14574:	4252      	negs	r2, r2
   14576:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1457a:	4770      	bx	lr
   1457c:	4252      	negs	r2, r2
   1457e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14582:	f000 f82f 	bl	145e4 <__udivmoddi4>
   14586:	f8dd e004 	ldr.w	lr, [sp, #4]
   1458a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1458e:	b004      	add	sp, #16
   14590:	4240      	negs	r0, r0
   14592:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14596:	4770      	bx	lr
   14598:	4252      	negs	r2, r2
   1459a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1459e:	f000 f821 	bl	145e4 <__udivmoddi4>
   145a2:	f8dd e004 	ldr.w	lr, [sp, #4]
   145a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   145aa:	b004      	add	sp, #16
   145ac:	4252      	negs	r2, r2
   145ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   145b2:	4770      	bx	lr

000145b4 <__aeabi_uldivmod>:
   145b4:	b953      	cbnz	r3, 145cc <__aeabi_uldivmod+0x18>
   145b6:	b94a      	cbnz	r2, 145cc <__aeabi_uldivmod+0x18>
   145b8:	2900      	cmp	r1, #0
   145ba:	bf08      	it	eq
   145bc:	2800      	cmpeq	r0, #0
   145be:	bf1c      	itt	ne
   145c0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   145c4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   145c8:	f000 b9c2 	b.w	14950 <__aeabi_idiv0>
   145cc:	f1ad 0c08 	sub.w	ip, sp, #8
   145d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   145d4:	f000 f806 	bl	145e4 <__udivmoddi4>
   145d8:	f8dd e004 	ldr.w	lr, [sp, #4]
   145dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   145e0:	b004      	add	sp, #16
   145e2:	4770      	bx	lr

000145e4 <__udivmoddi4>:
   145e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145e8:	460d      	mov	r5, r1
   145ea:	9e09      	ldr	r6, [sp, #36]	; 0x24
   145ec:	4604      	mov	r4, r0
   145ee:	460f      	mov	r7, r1
   145f0:	2b00      	cmp	r3, #0
   145f2:	d154      	bne.n	1469e <__udivmoddi4+0xba>
   145f4:	4694      	mov	ip, r2
   145f6:	428a      	cmp	r2, r1
   145f8:	d971      	bls.n	146de <__udivmoddi4+0xfa>
   145fa:	fab2 f382 	clz	r3, r2
   145fe:	b143      	cbz	r3, 14612 <__udivmoddi4+0x2e>
   14600:	f1c3 0120 	rsb	r1, r3, #32
   14604:	409f      	lsls	r7, r3
   14606:	fa02 fc03 	lsl.w	ip, r2, r3
   1460a:	fa20 f101 	lsr.w	r1, r0, r1
   1460e:	430f      	orrs	r7, r1
   14610:	409c      	lsls	r4, r3
   14612:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   14616:	fa1f f58c 	uxth.w	r5, ip
   1461a:	0c22      	lsrs	r2, r4, #16
   1461c:	fbb7 f1fe 	udiv	r1, r7, lr
   14620:	fb0e 7711 	mls	r7, lr, r1, r7
   14624:	fb01 f005 	mul.w	r0, r1, r5
   14628:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1462c:	4290      	cmp	r0, r2
   1462e:	d90f      	bls.n	14650 <__udivmoddi4+0x6c>
   14630:	eb1c 0202 	adds.w	r2, ip, r2
   14634:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   14638:	bf34      	ite	cc
   1463a:	2701      	movcc	r7, #1
   1463c:	2700      	movcs	r7, #0
   1463e:	4290      	cmp	r0, r2
   14640:	bf94      	ite	ls
   14642:	2700      	movls	r7, #0
   14644:	f007 0701 	andhi.w	r7, r7, #1
   14648:	2f00      	cmp	r7, #0
   1464a:	f040 8177 	bne.w	1493c <__udivmoddi4+0x358>
   1464e:	4641      	mov	r1, r8
   14650:	1a12      	subs	r2, r2, r0
   14652:	b2a4      	uxth	r4, r4
   14654:	fbb2 f0fe 	udiv	r0, r2, lr
   14658:	fb0e 2210 	mls	r2, lr, r0, r2
   1465c:	fb00 f505 	mul.w	r5, r0, r5
   14660:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   14664:	42a5      	cmp	r5, r4
   14666:	d90f      	bls.n	14688 <__udivmoddi4+0xa4>
   14668:	eb1c 0404 	adds.w	r4, ip, r4
   1466c:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
   14670:	bf34      	ite	cc
   14672:	2201      	movcc	r2, #1
   14674:	2200      	movcs	r2, #0
   14676:	42a5      	cmp	r5, r4
   14678:	bf94      	ite	ls
   1467a:	2200      	movls	r2, #0
   1467c:	f002 0201 	andhi.w	r2, r2, #1
   14680:	2a00      	cmp	r2, #0
   14682:	f040 8158 	bne.w	14936 <__udivmoddi4+0x352>
   14686:	4638      	mov	r0, r7
   14688:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1468c:	1b64      	subs	r4, r4, r5
   1468e:	2100      	movs	r1, #0
   14690:	b11e      	cbz	r6, 1469a <__udivmoddi4+0xb6>
   14692:	40dc      	lsrs	r4, r3
   14694:	2300      	movs	r3, #0
   14696:	e9c6 4300 	strd	r4, r3, [r6]
   1469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1469e:	428b      	cmp	r3, r1
   146a0:	d908      	bls.n	146b4 <__udivmoddi4+0xd0>
   146a2:	2e00      	cmp	r6, #0
   146a4:	f000 812e 	beq.w	14904 <__udivmoddi4+0x320>
   146a8:	2100      	movs	r1, #0
   146aa:	6030      	str	r0, [r6, #0]
   146ac:	6075      	str	r5, [r6, #4]
   146ae:	4608      	mov	r0, r1
   146b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146b4:	fab3 f183 	clz	r1, r3
   146b8:	2900      	cmp	r1, #0
   146ba:	d15a      	bne.n	14772 <__udivmoddi4+0x18e>
   146bc:	42ab      	cmp	r3, r5
   146be:	bf28      	it	cs
   146c0:	4282      	cmpcs	r2, r0
   146c2:	bf88      	it	hi
   146c4:	4608      	movhi	r0, r1
   146c6:	d805      	bhi.n	146d4 <__udivmoddi4+0xf0>
   146c8:	1aa5      	subs	r5, r4, r2
   146ca:	eb67 0303 	sbc.w	r3, r7, r3
   146ce:	2001      	movs	r0, #1
   146d0:	461f      	mov	r7, r3
   146d2:	462c      	mov	r4, r5
   146d4:	2e00      	cmp	r6, #0
   146d6:	d0e0      	beq.n	1469a <__udivmoddi4+0xb6>
   146d8:	e9c6 4700 	strd	r4, r7, [r6]
   146dc:	e7dd      	b.n	1469a <__udivmoddi4+0xb6>
   146de:	b902      	cbnz	r2, 146e2 <__udivmoddi4+0xfe>
   146e0:	deff      	udf	#255	; 0xff
   146e2:	fab2 f382 	clz	r3, r2
   146e6:	2b00      	cmp	r3, #0
   146e8:	f040 80bb 	bne.w	14862 <__udivmoddi4+0x27e>
   146ec:	1a8d      	subs	r5, r1, r2
   146ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   146f2:	b297      	uxth	r7, r2
   146f4:	2101      	movs	r1, #1
   146f6:	fbb5 f2fe 	udiv	r2, r5, lr
   146fa:	fb0e 5012 	mls	r0, lr, r2, r5
   146fe:	0c25      	lsrs	r5, r4, #16
   14700:	fb07 f802 	mul.w	r8, r7, r2
   14704:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   14708:	45a8      	cmp	r8, r5
   1470a:	d911      	bls.n	14730 <__udivmoddi4+0x14c>
   1470c:	eb1c 0505 	adds.w	r5, ip, r5
   14710:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   14714:	bf2c      	ite	cs
   14716:	2001      	movcs	r0, #1
   14718:	2000      	movcc	r0, #0
   1471a:	f080 0001 	eor.w	r0, r0, #1
   1471e:	45a8      	cmp	r8, r5
   14720:	bf94      	ite	ls
   14722:	2000      	movls	r0, #0
   14724:	f000 0001 	andhi.w	r0, r0, #1
   14728:	2800      	cmp	r0, #0
   1472a:	f040 810d 	bne.w	14948 <__udivmoddi4+0x364>
   1472e:	464a      	mov	r2, r9
   14730:	eba5 0508 	sub.w	r5, r5, r8
   14734:	b2a4      	uxth	r4, r4
   14736:	fbb5 f0fe 	udiv	r0, r5, lr
   1473a:	fb0e 5510 	mls	r5, lr, r0, r5
   1473e:	fb00 f707 	mul.w	r7, r0, r7
   14742:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   14746:	42a7      	cmp	r7, r4
   14748:	d90f      	bls.n	1476a <__udivmoddi4+0x186>
   1474a:	eb1c 0404 	adds.w	r4, ip, r4
   1474e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   14752:	bf34      	ite	cc
   14754:	2501      	movcc	r5, #1
   14756:	2500      	movcs	r5, #0
   14758:	42a7      	cmp	r7, r4
   1475a:	bf94      	ite	ls
   1475c:	2500      	movls	r5, #0
   1475e:	f005 0501 	andhi.w	r5, r5, #1
   14762:	2d00      	cmp	r5, #0
   14764:	f040 80ed 	bne.w	14942 <__udivmoddi4+0x35e>
   14768:	4670      	mov	r0, lr
   1476a:	1be4      	subs	r4, r4, r7
   1476c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   14770:	e78e      	b.n	14690 <__udivmoddi4+0xac>
   14772:	f1c1 0c20 	rsb	ip, r1, #32
   14776:	408b      	lsls	r3, r1
   14778:	fa05 f701 	lsl.w	r7, r5, r1
   1477c:	fa22 f40c 	lsr.w	r4, r2, ip
   14780:	4323      	orrs	r3, r4
   14782:	fa20 f40c 	lsr.w	r4, r0, ip
   14786:	fa25 f90c 	lsr.w	r9, r5, ip
   1478a:	4327      	orrs	r7, r4
   1478c:	0c1c      	lsrs	r4, r3, #16
   1478e:	fa00 fe01 	lsl.w	lr, r0, r1
   14792:	fa1f f883 	uxth.w	r8, r3
   14796:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1479a:	408a      	lsls	r2, r1
   1479c:	fbb9 f0f4 	udiv	r0, r9, r4
   147a0:	fb04 9510 	mls	r5, r4, r0, r9
   147a4:	fb00 f908 	mul.w	r9, r0, r8
   147a8:	ea4a 4505 	orr.w	r5, sl, r5, lsl #16
   147ac:	45a9      	cmp	r9, r5
   147ae:	d914      	bls.n	147da <__udivmoddi4+0x1f6>
   147b0:	195d      	adds	r5, r3, r5
   147b2:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
   147b6:	bf2c      	ite	cs
   147b8:	f04f 0a01 	movcs.w	sl, #1
   147bc:	f04f 0a00 	movcc.w	sl, #0
   147c0:	f08a 0a01 	eor.w	sl, sl, #1
   147c4:	45a9      	cmp	r9, r5
   147c6:	bf94      	ite	ls
   147c8:	f04f 0a00 	movls.w	sl, #0
   147cc:	f00a 0a01 	andhi.w	sl, sl, #1
   147d0:	f1ba 0f00 	cmp.w	sl, #0
   147d4:	f040 80a7 	bne.w	14926 <__udivmoddi4+0x342>
   147d8:	4658      	mov	r0, fp
   147da:	eba5 0509 	sub.w	r5, r5, r9
   147de:	b2bf      	uxth	r7, r7
   147e0:	fbb5 f9f4 	udiv	r9, r5, r4
   147e4:	fb04 5519 	mls	r5, r4, r9, r5
   147e8:	fb09 f808 	mul.w	r8, r9, r8
   147ec:	ea47 4405 	orr.w	r4, r7, r5, lsl #16
   147f0:	45a0      	cmp	r8, r4
   147f2:	d90e      	bls.n	14812 <__udivmoddi4+0x22e>
   147f4:	191c      	adds	r4, r3, r4
   147f6:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
   147fa:	bf34      	ite	cc
   147fc:	2501      	movcc	r5, #1
   147fe:	2500      	movcs	r5, #0
   14800:	45a0      	cmp	r8, r4
   14802:	bf94      	ite	ls
   14804:	2500      	movls	r5, #0
   14806:	f005 0501 	andhi.w	r5, r5, #1
   1480a:	2d00      	cmp	r5, #0
   1480c:	f040 8084 	bne.w	14918 <__udivmoddi4+0x334>
   14810:	46b9      	mov	r9, r7
   14812:	ea49 4000 	orr.w	r0, r9, r0, lsl #16
   14816:	eba4 0408 	sub.w	r4, r4, r8
   1481a:	fba0 8502 	umull	r8, r5, r0, r2
   1481e:	4647      	mov	r7, r8
   14820:	46a9      	mov	r9, r5
   14822:	42ac      	cmp	r4, r5
   14824:	d371      	bcc.n	1490a <__udivmoddi4+0x326>
   14826:	bf0c      	ite	eq
   14828:	f04f 0a01 	moveq.w	sl, #1
   1482c:	f04f 0a00 	movne.w	sl, #0
   14830:	45c6      	cmp	lr, r8
   14832:	bf2c      	ite	cs
   14834:	f04f 0a00 	movcs.w	sl, #0
   14838:	f00a 0a01 	andcc.w	sl, sl, #1
   1483c:	f1ba 0f00 	cmp.w	sl, #0
   14840:	d163      	bne.n	1490a <__udivmoddi4+0x326>
   14842:	2e00      	cmp	r6, #0
   14844:	d075      	beq.n	14932 <__udivmoddi4+0x34e>
   14846:	ebbe 0307 	subs.w	r3, lr, r7
   1484a:	eb64 0409 	sbc.w	r4, r4, r9
   1484e:	fa23 f201 	lsr.w	r2, r3, r1
   14852:	fa04 f30c 	lsl.w	r3, r4, ip
   14856:	4313      	orrs	r3, r2
   14858:	40cc      	lsrs	r4, r1
   1485a:	2100      	movs	r1, #0
   1485c:	e9c6 3400 	strd	r3, r4, [r6]
   14860:	e71b      	b.n	1469a <__udivmoddi4+0xb6>
   14862:	fa02 fc03 	lsl.w	ip, r2, r3
   14866:	f1c3 0220 	rsb	r2, r3, #32
   1486a:	4099      	lsls	r1, r3
   1486c:	40d5      	lsrs	r5, r2
   1486e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   14872:	fa20 f202 	lsr.w	r2, r0, r2
   14876:	fa1f f78c 	uxth.w	r7, ip
   1487a:	430a      	orrs	r2, r1
   1487c:	409c      	lsls	r4, r3
   1487e:	fbb5 f1fe 	udiv	r1, r5, lr
   14882:	0c10      	lsrs	r0, r2, #16
   14884:	fb0e 5511 	mls	r5, lr, r1, r5
   14888:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
   1488c:	fb01 f007 	mul.w	r0, r1, r7
   14890:	42a8      	cmp	r0, r5
   14892:	d914      	bls.n	148be <__udivmoddi4+0x2da>
   14894:	eb1c 0505 	adds.w	r5, ip, r5
   14898:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1489c:	bf2c      	ite	cs
   1489e:	f04f 0801 	movcs.w	r8, #1
   148a2:	f04f 0800 	movcc.w	r8, #0
   148a6:	f088 0801 	eor.w	r8, r8, #1
   148aa:	42a8      	cmp	r0, r5
   148ac:	bf94      	ite	ls
   148ae:	f04f 0800 	movls.w	r8, #0
   148b2:	f008 0801 	andhi.w	r8, r8, #1
   148b6:	f1b8 0f00 	cmp.w	r8, #0
   148ba:	d137      	bne.n	1492c <__udivmoddi4+0x348>
   148bc:	4649      	mov	r1, r9
   148be:	1a28      	subs	r0, r5, r0
   148c0:	b295      	uxth	r5, r2
   148c2:	fbb0 f2fe 	udiv	r2, r0, lr
   148c6:	fb0e 0012 	mls	r0, lr, r2, r0
   148ca:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   148ce:	fb02 f007 	mul.w	r0, r2, r7
   148d2:	42a8      	cmp	r0, r5
   148d4:	d912      	bls.n	148fc <__udivmoddi4+0x318>
   148d6:	eb1c 0505 	adds.w	r5, ip, r5
   148da:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   148de:	bf34      	ite	cc
   148e0:	f04f 0801 	movcc.w	r8, #1
   148e4:	f04f 0800 	movcs.w	r8, #0
   148e8:	42a8      	cmp	r0, r5
   148ea:	bf94      	ite	ls
   148ec:	f04f 0800 	movls.w	r8, #0
   148f0:	f008 0801 	andhi.w	r8, r8, #1
   148f4:	f1b8 0f00 	cmp.w	r8, #0
   148f8:	d112      	bne.n	14920 <__udivmoddi4+0x33c>
   148fa:	464a      	mov	r2, r9
   148fc:	1a2d      	subs	r5, r5, r0
   148fe:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   14902:	e6f8      	b.n	146f6 <__udivmoddi4+0x112>
   14904:	4631      	mov	r1, r6
   14906:	4630      	mov	r0, r6
   14908:	e6c7      	b.n	1469a <__udivmoddi4+0xb6>
   1490a:	ebb8 0702 	subs.w	r7, r8, r2
   1490e:	eb65 0203 	sbc.w	r2, r5, r3
   14912:	3801      	subs	r0, #1
   14914:	4691      	mov	r9, r2
   14916:	e794      	b.n	14842 <__udivmoddi4+0x25e>
   14918:	f1a9 0902 	sub.w	r9, r9, #2
   1491c:	441c      	add	r4, r3
   1491e:	e778      	b.n	14812 <__udivmoddi4+0x22e>
   14920:	3a02      	subs	r2, #2
   14922:	4465      	add	r5, ip
   14924:	e7ea      	b.n	148fc <__udivmoddi4+0x318>
   14926:	3802      	subs	r0, #2
   14928:	441d      	add	r5, r3
   1492a:	e756      	b.n	147da <__udivmoddi4+0x1f6>
   1492c:	3902      	subs	r1, #2
   1492e:	4465      	add	r5, ip
   14930:	e7c5      	b.n	148be <__udivmoddi4+0x2da>
   14932:	4631      	mov	r1, r6
   14934:	e6b1      	b.n	1469a <__udivmoddi4+0xb6>
   14936:	4464      	add	r4, ip
   14938:	3802      	subs	r0, #2
   1493a:	e6a5      	b.n	14688 <__udivmoddi4+0xa4>
   1493c:	3902      	subs	r1, #2
   1493e:	4462      	add	r2, ip
   14940:	e686      	b.n	14650 <__udivmoddi4+0x6c>
   14942:	4464      	add	r4, ip
   14944:	3802      	subs	r0, #2
   14946:	e710      	b.n	1476a <__udivmoddi4+0x186>
   14948:	3a02      	subs	r2, #2
   1494a:	4465      	add	r5, ip
   1494c:	e6f0      	b.n	14730 <__udivmoddi4+0x14c>
   1494e:	bf00      	nop

00014950 <__aeabi_idiv0>:
   14950:	4770      	bx	lr
   14952:	bf00      	nop
