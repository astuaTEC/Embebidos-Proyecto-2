
kernel7.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea001c6d 	b	f21c <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8074:	e24ddd76 	sub	sp, sp, #7552	; 0x1d80
    8078:	e24dd01c 	sub	sp, sp, #28
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000009 	bl	80ac <CKernel::CKernel()>
    8084:	e28d0004 	add	r0, sp, #4
    8088:	eb00003f 	bl	818c <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000003 	beq	80a4 <main+0x34>
    8094:	e28d0004 	add	r0, sp, #4
    8098:	eb000099 	bl	8304 <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000000 	beq	80a8 <main+0x38>
    80a4:	eb001c4e 	bl	f1e4 <halt>
    80a8:	eb001c52 	bl	f1f8 <reboot>

000080ac <CKernel::CKernel()>:
    80ac:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    80b0:	e1a04000 	mov	r4, r0
    80b4:	e3a01000 	mov	r1, #0
    80b8:	e24dd014 	sub	sp, sp, #20
    80bc:	e284600c 	add	r6, r4, #12
    80c0:	e1a05001 	mov	r5, r1
    80c4:	e2849e89 	add	r9, r4, #2192	; 0x890
    80c8:	eb0000e5 	bl	8464 <CActLED::CActLED(bool)>
    80cc:	e1a00006 	mov	r0, r6
    80d0:	eb0006a2 	bl	9b60 <CKernelOptions::CKernelOptions()>
    80d4:	e2890004 	add	r0, r9, #4
    80d8:	eb00015f 	bl	865c <CDeviceNameService::CDeviceNameService()>
    80dc:	e1a00006 	mov	r0, r6
    80e0:	eb0005f3 	bl	98b4 <CKernelOptions::GetWidth() const>
    80e4:	e1a01000 	mov	r1, r0
    80e8:	e1a00006 	mov	r0, r6
    80ec:	e58d100c 	str	r1, [sp, #12]
    80f0:	eb0005f1 	bl	98bc <CKernelOptions::GetHeight() const>
    80f4:	e1a03005 	mov	r3, r5
    80f8:	e1a02000 	mov	r2, r0
    80fc:	e59d100c 	ldr	r1, [sp, #12]
    8100:	e58d5000 	str	r5, [sp]
    8104:	e289000c 	add	r0, r9, #12
    8108:	eb000c74 	bl	b2e0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    810c:	e2840e92 	add	r0, r4, #2336	; 0x920
    8110:	e1a03005 	mov	r3, r5
    8114:	e1a02005 	mov	r2, r5
    8118:	e1a01005 	mov	r1, r5
    811c:	e2848c1a 	add	r8, r4, #6656	; 0x1a00
    8120:	e280000c 	add	r0, r0, #12
    8124:	eb0012a2 	bl	cbb4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8128:	e2887018 	add	r7, r8, #24
    812c:	e2880014 	add	r0, r8, #20
    8130:	eb00249d 	bl	113ac <CExceptionHandler::CExceptionHandler()>
    8134:	e1a00007 	mov	r0, r7
    8138:	eb0026e3 	bl	11ccc <CInterruptSystem::CInterruptSystem()>
    813c:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    8140:	e1a01007 	mov	r1, r7
    8144:	e2800018 	add	r0, r0, #24
    8148:	eb001c71 	bl	f314 <CTimer::CTimer(CInterruptSystem*)>
    814c:	e1a00006 	mov	r0, r6
    8150:	eb0005de 	bl	98d0 <CKernelOptions::GetLogLevel() const>
    8154:	e1a01000 	mov	r1, r0
    8158:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    815c:	e1a02005 	mov	r2, r5
    8160:	e3a03001 	mov	r3, #1
    8164:	e2800018 	add	r0, r0, #24
    8168:	eb00078f 	bl	9fac <CLogger::CLogger(unsigned int, CTimer*, bool)>
    816c:	e1a00004 	mov	r0, r4
    8170:	e3a03f7d 	mov	r3, #500	; 0x1f4
    8174:	e3a020c8 	mov	r2, #200	; 0xc8
    8178:	e3a01005 	mov	r1, #5
    817c:	eb00010b 	bl	85b0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8180:	e1a00004 	mov	r0, r4
    8184:	e28dd014 	add	sp, sp, #20
    8188:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}

0000818c <CKernel::Initialize()>:
    818c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8190:	e2806e89 	add	r6, r0, #2192	; 0x890
    8194:	e286500c 	add	r5, r6, #12
    8198:	e1a04000 	mov	r4, r0
    819c:	e24dd00c 	sub	sp, sp, #12
    81a0:	e1a00005 	mov	r0, r5
    81a4:	eb000fe5 	bl	c140 <CScreenDevice::Initialize()>
    81a8:	e3500000 	cmp	r0, #0
    81ac:	1a000002 	bne	81bc <CKernel::Initialize()+0x30>
    81b0:	e3a00000 	mov	r0, #0
    81b4:	e28dd00c 	add	sp, sp, #12
    81b8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    81bc:	e3a07000 	mov	r7, #0
    81c0:	e2840e92 	add	r0, r4, #2336	; 0x920
    81c4:	e3a03001 	mov	r3, #1
    81c8:	e3a02008 	mov	r2, #8
    81cc:	e59f1070 	ldr	r1, [pc, #112]	; 8244 <CKernel::Initialize()+0xb8>
    81d0:	e280000c 	add	r0, r0, #12
    81d4:	e58d7000 	str	r7, [sp]
    81d8:	eb0012e3 	bl	cd6c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
    81dc:	e1500007 	cmp	r0, r7
    81e0:	0afffff2 	beq	81b0 <CKernel::Initialize()+0x24>
    81e4:	e284000c 	add	r0, r4, #12
    81e8:	eb0005b5 	bl	98c4 <CKernelOptions::GetLogDevice() const>
    81ec:	e1a02007 	mov	r2, r7
    81f0:	e1a01000 	mov	r1, r0
    81f4:	e2860004 	add	r0, r6, #4
    81f8:	eb0001b1 	bl	88c4 <CDeviceNameService::GetDevice(char const*, bool)>
    81fc:	e1a01000 	mov	r1, r0
    8200:	e2840d72 	add	r0, r4, #7296	; 0x1c80
    8204:	e1510007 	cmp	r1, r7
    8208:	01a01005 	moveq	r1, r5
    820c:	e2800018 	add	r0, r0, #24
    8210:	eb000988 	bl	a838 <CLogger::Initialize(CDevice*)>
    8214:	e1500007 	cmp	r0, r7
    8218:	0affffe4 	beq	81b0 <CKernel::Initialize()+0x24>
    821c:	e2840c1a 	add	r0, r4, #6656	; 0x1a00
    8220:	e2800018 	add	r0, r0, #24
    8224:	eb0026c3 	bl	11d38 <CInterruptSystem::Initialize()>
    8228:	e1500007 	cmp	r0, r7
    822c:	0affffdf 	beq	81b0 <CKernel::Initialize()+0x24>
    8230:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    8234:	e2800018 	add	r0, r0, #24
    8238:	e28dd00c 	add	sp, sp, #12
    823c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
    8240:	ea001eec 	b	fdf8 <CTimer::Initialize()>
    8244:	0001c200 	.word	0x0001c200

00008248 <clearBuffer(void*, unsigned int)>:
    8248:	e3510000 	cmp	r1, #0
    824c:	012fff1e 	bxeq	lr
    8250:	e3a03000 	mov	r3, #0
    8254:	e0801001 	add	r1, r0, r1
    8258:	e4c03001 	strb	r3, [r0], #1
    825c:	e1500001 	cmp	r0, r1
    8260:	1afffffc 	bne	8258 <clearBuffer(void*, unsigned int)+0x10>
    8264:	e12fff1e 	bx	lr

00008268 <my_strlen(char const*)>:
    8268:	e1d030d0 	ldrsb	r3, [r0]
    826c:	e3530000 	cmp	r3, #0
    8270:	0a000006 	beq	8290 <my_strlen(char const*)+0x28>
    8274:	e1a03000 	mov	r3, r0
    8278:	e2601001 	rsb	r1, r0, #1
    827c:	e0830001 	add	r0, r3, r1
    8280:	e1f320d1 	ldrsb	r2, [r3, #1]!
    8284:	e3520000 	cmp	r2, #0
    8288:	1afffffb 	bne	827c <my_strlen(char const*)+0x14>
    828c:	e12fff1e 	bx	lr
    8290:	e1a00003 	mov	r0, r3
    8294:	e12fff1e 	bx	lr

00008298 <CKernel::~CKernel()>:
    8298:	e92d4070 	push	{r4, r5, r6, lr}
    829c:	e1a04000 	mov	r4, r0
    82a0:	e2800d72 	add	r0, r0, #7296	; 0x1c80
    82a4:	e2800018 	add	r0, r0, #24
    82a8:	eb000757 	bl	a00c <CLogger::~CLogger()>
    82ac:	e2840d71 	add	r0, r4, #7232	; 0x1c40
    82b0:	e2845c1a 	add	r5, r4, #6656	; 0x1a00
    82b4:	e2800018 	add	r0, r0, #24
    82b8:	eb001c37 	bl	f39c <CTimer::~CTimer()>
    82bc:	e2850018 	add	r0, r5, #24
    82c0:	eb00268c 	bl	11cf8 <CInterruptSystem::~CInterruptSystem()>
    82c4:	e2850014 	add	r0, r5, #20
    82c8:	eb00245d 	bl	11444 <CExceptionHandler::~CExceptionHandler()>
    82cc:	e2840e92 	add	r0, r4, #2336	; 0x920
    82d0:	e2845e89 	add	r5, r4, #2192	; 0x890
    82d4:	e280000c 	add	r0, r0, #12
    82d8:	eb0015b1 	bl	d9a4 <CSerialDevice::~CSerialDevice()>
    82dc:	e285000c 	add	r0, r5, #12
    82e0:	eb000b8c 	bl	b118 <CScreenDevice::~CScreenDevice()>
    82e4:	e2850004 	add	r0, r5, #4
    82e8:	eb0000ec 	bl	86a0 <CDeviceNameService::~CDeviceNameService()>
    82ec:	e284000c 	add	r0, r4, #12
    82f0:	eb00056a 	bl	98a0 <CKernelOptions::~CKernelOptions()>
    82f4:	e1a00004 	mov	r0, r4
    82f8:	eb00008f 	bl	853c <CActLED::~CActLED()>
    82fc:	e1a00004 	mov	r0, r4
    8300:	e8bd8070 	pop	{r4, r5, r6, pc}

00008304 <CKernel::Run()>:
    8304:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8308:	e1a06000 	mov	r6, r0
    830c:	e2800d72 	add	r0, r0, #7296	; 0x1c80
    8310:	e3a02003 	mov	r2, #3
    8314:	e59f3124 	ldr	r3, [pc, #292]	; 8440 <CKernel::Run()+0x13c>
    8318:	e59f1124 	ldr	r1, [pc, #292]	; 8444 <CKernel::Run()+0x140>
    831c:	e24dd044 	sub	sp, sp, #68	; 0x44
    8320:	e2800018 	add	r0, r0, #24
    8324:	e3a04001 	mov	r4, #1
    8328:	e3a05000 	mov	r5, #0
    832c:	eb000935 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8330:	e2867e92 	add	r7, r6, #2336	; 0x920
    8334:	e59f910c 	ldr	r9, [pc, #268]	; 8448 <CKernel::Run()+0x144>
    8338:	e2866e89 	add	r6, r6, #2192	; 0x890
    833c:	e59f8108 	ldr	r8, [pc, #264]	; 844c <CKernel::Run()+0x148>
    8340:	e59fb108 	ldr	fp, [pc, #264]	; 8450 <CKernel::Run()+0x14c>
    8344:	e287700c 	add	r7, r7, #12
    8348:	e286600c 	add	r6, r6, #12
    834c:	e1a0300d 	mov	r3, sp
    8350:	e4c35001 	strb	r5, [r3], #1
    8354:	e28d2040 	add	r2, sp, #64	; 0x40
    8358:	e1530002 	cmp	r3, r2
    835c:	1afffffb 	bne	8350 <CKernel::Run()+0x4c>
    8360:	e3a0203f 	mov	r2, #63	; 0x3f
    8364:	e1a0100d 	mov	r1, sp
    8368:	e1a00007 	mov	r0, r7
    836c:	eb0011ac 	bl	ca24 <CSerialDevice::Read(void*, unsigned int)>
    8370:	e3500000 	cmp	r0, #0
    8374:	0a000017 	beq	83d8 <CKernel::Run()+0xd4>
    8378:	e2803040 	add	r3, r0, #64	; 0x40
    837c:	e08d0003 	add	r0, sp, r3
    8380:	e3540000 	cmp	r4, #0
    8384:	e5405040 	strb	r5, [r0, #-64]	; 0xffffffc0
    8388:	0a000015 	beq	83e4 <CKernel::Run()+0xe0>
    838c:	e3a04061 	mov	r4, #97	; 0x61
    8390:	e3a02000 	mov	r2, #0
    8394:	e59f30b8 	ldr	r3, [pc, #184]	; 8454 <CKernel::Run()+0x150>
    8398:	ea000000 	b	83a0 <CKernel::Run()+0x9c>
    839c:	e1f340d1 	ldrsb	r4, [r3, #1]!
    83a0:	e3540000 	cmp	r4, #0
    83a4:	e2822001 	add	r2, r2, #1
    83a8:	1afffffb 	bne	839c <CKernel::Run()+0x98>
    83ac:	e1a01009 	mov	r1, r9
    83b0:	e1a00006 	mov	r0, r6
    83b4:	eb001135 	bl	c890 <CScreenDevice::Write(void const*, unsigned int)>
    83b8:	e3a02040 	mov	r2, #64	; 0x40
    83bc:	e1a0100d 	mov	r1, sp
    83c0:	e1a00006 	mov	r0, r6
    83c4:	eb001131 	bl	c890 <CScreenDevice::Write(void const*, unsigned int)>
    83c8:	e3a02001 	mov	r2, #1
    83cc:	e1a01008 	mov	r1, r8
    83d0:	e1a00006 	mov	r0, r6
    83d4:	eb00112d 	bl	c890 <CScreenDevice::Write(void const*, unsigned int)>
    83d8:	e3a00f7d 	mov	r0, #500	; 0x1f4
    83dc:	eb001ee8 	bl	ff84 <CTimer::SimpleMsDelay(unsigned int)>
    83e0:	eaffffd9 	b	834c <CKernel::Run()+0x48>
    83e4:	e3a0a05b 	mov	sl, #91	; 0x5b
    83e8:	e1a02004 	mov	r2, r4
    83ec:	e59f1064 	ldr	r1, [pc, #100]	; 8458 <CKernel::Run()+0x154>
    83f0:	ea000000 	b	83f8 <CKernel::Run()+0xf4>
    83f4:	e1f1a0d1 	ldrsb	sl, [r1, #1]!
    83f8:	e35a0000 	cmp	sl, #0
    83fc:	e2822001 	add	r2, r2, #1
    8400:	1afffffb 	bne	83f4 <CKernel::Run()+0xf0>
    8404:	e1a0100b 	mov	r1, fp
    8408:	e1a00006 	mov	r0, r6
    840c:	eb00111f 	bl	c890 <CScreenDevice::Write(void const*, unsigned int)>
    8410:	e3a0105b 	mov	r1, #91	; 0x5b
    8414:	e1a0200a 	mov	r2, sl
    8418:	e59f303c 	ldr	r3, [pc, #60]	; 845c <CKernel::Run()+0x158>
    841c:	ea000000 	b	8424 <CKernel::Run()+0x120>
    8420:	e1f310d1 	ldrsb	r1, [r3, #1]!
    8424:	e3510000 	cmp	r1, #0
    8428:	e2822001 	add	r2, r2, #1
    842c:	1afffffb 	bne	8420 <CKernel::Run()+0x11c>
    8430:	e1a00006 	mov	r0, r6
    8434:	e59f1024 	ldr	r1, [pc, #36]	; 8460 <CKernel::Run()+0x15c>
    8438:	eb001114 	bl	c890 <CScreenDevice::Write(void const*, unsigned int)>
    843c:	eaffffd2 	b	838c <CKernel::Run()+0x88>
    8440:	00014924 	.word	0x00014924
    8444:	00014964 	.word	0x00014964
    8448:	00014954 	.word	0x00014954
    844c:	00014960 	.word	0x00014960
    8450:	00014948 	.word	0x00014948
    8454:	00014955 	.word	0x00014955
    8458:	00014949 	.word	0x00014949
    845c:	00014951 	.word	0x00014951
    8460:	00014950 	.word	0x00014950

00008464 <CActLED::CActLED(bool)>:
    8464:	e3073138 	movw	r3, #28984	; 0x7138
    8468:	e3403001 	movt	r3, #1
    846c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8470:	e1a06001 	mov	r6, r1
    8474:	e5830000 	str	r0, [r3]
    8478:	e3a03000 	mov	r3, #0
    847c:	e5803000 	str	r3, [r0]
    8480:	e1a05000 	mov	r5, r0
    8484:	e5803004 	str	r3, [r0, #4]
    8488:	eb000b17 	bl	b0ec <CMachineInfo::Get()>
    848c:	eb000a2c 	bl	ad44 <CMachineInfo::GetActLEDInfo() const>
    8490:	e2107080 	ands	r7, r0, #128	; 0x80
    8494:	e1a04000 	mov	r4, r0
    8498:	0a000015 	beq	84f4 <CActLED::CActLED(bool)+0x90>
    849c:	e3a00014 	mov	r0, #20
    84a0:	eb00223f 	bl	10da4 <operator new(unsigned int)>
    84a4:	e1a02006 	mov	r2, r6
    84a8:	e204103f 	and	r1, r4, #63	; 0x3f
    84ac:	e1a07000 	mov	r7, r0
    84b0:	eb00219a 	bl	10b20 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
    84b4:	e5956000 	ldr	r6, [r5]
    84b8:	e2144040 	ands	r4, r4, #64	; 0x40
    84bc:	e5857004 	str	r7, [r5, #4]
    84c0:	03a03001 	moveq	r3, #1
    84c4:	13a03000 	movne	r3, #0
    84c8:	e3560000 	cmp	r6, #0
    84cc:	e5c53008 	strb	r3, [r5, #8]
    84d0:	1a000013 	bne	8524 <CActLED::CActLED(bool)+0xc0>
    84d4:	e3570000 	cmp	r7, #0
    84d8:	0a000015 	beq	8534 <CActLED::CActLED(bool)+0xd0>
    84dc:	e2541000 	subs	r1, r4, #0
    84e0:	e1a00007 	mov	r0, r7
    84e4:	13a01001 	movne	r1, #1
    84e8:	eb00213e 	bl	109e8 <CVirtualGPIOPin::Write(unsigned int)>
    84ec:	e1a00005 	mov	r0, r5
    84f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    84f4:	e3a00028 	mov	r0, #40	; 0x28
    84f8:	eb002229 	bl	10da4 <operator new(unsigned int)>
    84fc:	e1a03007 	mov	r3, r7
    8500:	e204103f 	and	r1, r4, #63	; 0x3f
    8504:	e3a02001 	mov	r2, #1
    8508:	e1a06000 	mov	r6, r0
    850c:	eb000473 	bl	96e0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    8510:	e5856000 	str	r6, [r5]
    8514:	e2144040 	ands	r4, r4, #64	; 0x40
    8518:	03a03001 	moveq	r3, #1
    851c:	13a03000 	movne	r3, #0
    8520:	e5c53008 	strb	r3, [r5, #8]
    8524:	e2541000 	subs	r1, r4, #0
    8528:	e1a00006 	mov	r0, r6
    852c:	13a01001 	movne	r1, #1
    8530:	eb0001f6 	bl	8d10 <CGPIOPin::Write(unsigned int)>
    8534:	e1a00005 	mov	r0, r5
    8538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000853c <CActLED::~CActLED()>:
    853c:	e3073138 	movw	r3, #28984	; 0x7138
    8540:	e3a02000 	mov	r2, #0
    8544:	e3403001 	movt	r3, #1
    8548:	e5832000 	str	r2, [r3]
    854c:	e12fff1e 	bx	lr

00008550 <CActLED::On()>:
    8550:	e1a03000 	mov	r3, r0
    8554:	e5900000 	ldr	r0, [r0]
    8558:	e3500000 	cmp	r0, #0
    855c:	0a000001 	beq	8568 <CActLED::On()+0x18>
    8560:	e5d31008 	ldrb	r1, [r3, #8]
    8564:	ea0001e9 	b	8d10 <CGPIOPin::Write(unsigned int)>
    8568:	e5930004 	ldr	r0, [r3, #4]
    856c:	e3500000 	cmp	r0, #0
    8570:	012fff1e 	bxeq	lr
    8574:	e5d31008 	ldrb	r1, [r3, #8]
    8578:	ea00211a 	b	109e8 <CVirtualGPIOPin::Write(unsigned int)>

0000857c <CActLED::Off()>:
    857c:	e1a03000 	mov	r3, r0
    8580:	e5900000 	ldr	r0, [r0]
    8584:	e3500000 	cmp	r0, #0
    8588:	0a000002 	beq	8598 <CActLED::Off()+0x1c>
    858c:	e5d31008 	ldrb	r1, [r3, #8]
    8590:	e2211001 	eor	r1, r1, #1
    8594:	ea0001dd 	b	8d10 <CGPIOPin::Write(unsigned int)>
    8598:	e5930004 	ldr	r0, [r3, #4]
    859c:	e3500000 	cmp	r0, #0
    85a0:	012fff1e 	bxeq	lr
    85a4:	e5d31008 	ldrb	r1, [r3, #8]
    85a8:	e2211001 	eor	r1, r1, #1
    85ac:	ea00210d 	b	109e8 <CVirtualGPIOPin::Write(unsigned int)>

000085b0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
    85b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    85b4:	e2516000 	subs	r6, r1, #0
    85b8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    85bc:	e1a04000 	mov	r4, r0
    85c0:	e1a07002 	mov	r7, r2
    85c4:	e1a08003 	mov	r8, r3
    85c8:	e3a05001 	mov	r5, #1
    85cc:	ea00000e 	b	860c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x5c>
    85d0:	e5d41008 	ldrb	r1, [r4, #8]
    85d4:	eb0001cd 	bl	8d10 <CGPIOPin::Write(unsigned int)>
    85d8:	e1a00007 	mov	r0, r7
    85dc:	eb001e68 	bl	ff84 <CTimer::SimpleMsDelay(unsigned int)>
    85e0:	e5940000 	ldr	r0, [r4]
    85e4:	e3500000 	cmp	r0, #0
    85e8:	0a000010 	beq	8630 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x80>
    85ec:	e5d41008 	ldrb	r1, [r4, #8]
    85f0:	e2211001 	eor	r1, r1, #1
    85f4:	eb0001c5 	bl	8d10 <CGPIOPin::Write(unsigned int)>
    85f8:	e1a00008 	mov	r0, r8
    85fc:	e2855001 	add	r5, r5, #1
    8600:	eb001e5f 	bl	ff84 <CTimer::SimpleMsDelay(unsigned int)>
    8604:	e1560005 	cmp	r6, r5
    8608:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
    860c:	e5940000 	ldr	r0, [r4]
    8610:	e3500000 	cmp	r0, #0
    8614:	1affffed 	bne	85d0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
    8618:	e5940004 	ldr	r0, [r4, #4]
    861c:	e3500000 	cmp	r0, #0
    8620:	0affffec 	beq	85d8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    8624:	e5d41008 	ldrb	r1, [r4, #8]
    8628:	eb0020ee 	bl	109e8 <CVirtualGPIOPin::Write(unsigned int)>
    862c:	eaffffe9 	b	85d8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x28>
    8630:	e5940004 	ldr	r0, [r4, #4]
    8634:	e3500000 	cmp	r0, #0
    8638:	0affffee 	beq	85f8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>
    863c:	e5d41008 	ldrb	r1, [r4, #8]
    8640:	e2211001 	eor	r1, r1, #1
    8644:	eb0020e7 	bl	109e8 <CVirtualGPIOPin::Write(unsigned int)>
    8648:	eaffffea 	b	85f8 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x48>

0000864c <CActLED::Get()>:
    864c:	e3073138 	movw	r3, #28984	; 0x7138
    8650:	e3403001 	movt	r3, #1
    8654:	e5930000 	ldr	r0, [r3]
    8658:	e12fff1e 	bx	lr

0000865c <CDeviceNameService::CDeviceNameService()>:
    865c:	e307213c 	movw	r2, #28988	; 0x713c
    8660:	e3a01000 	mov	r1, #0
    8664:	e3402001 	movt	r2, #1
    8668:	e5801000 	str	r1, [r0]
    866c:	e592c000 	ldr	ip, [r2]
    8670:	e5801004 	str	r1, [r0, #4]
    8674:	e15c0001 	cmp	ip, r1
    8678:	1a000001 	bne	8684 <CDeviceNameService::CDeviceNameService()+0x28>
    867c:	e5820000 	str	r0, [r2]
    8680:	e12fff1e 	bx	lr
    8684:	e304196c 	movw	r1, #18796	; 0x496c
    8688:	e3040984 	movw	r0, #18820	; 0x4984
    868c:	e3401001 	movt	r1, #1
    8690:	e3a0201f 	mov	r2, #31
    8694:	e3400001 	movt	r0, #1
    8698:	e92d4010 	push	{r4, lr}
    869c:	eb00273a 	bl	1238c <assertion_failed>

000086a0 <CDeviceNameService::~CDeviceNameService()>:
    86a0:	e92d4070 	push	{r4, r5, r6, lr}
    86a4:	e1a05000 	mov	r5, r0
    86a8:	e5904000 	ldr	r4, [r0]
    86ac:	e3540000 	cmp	r4, #0
    86b0:	0a00000b 	beq	86e4 <CDeviceNameService::~CDeviceNameService()+0x44>
    86b4:	e1a03004 	mov	r3, r4
    86b8:	e5944000 	ldr	r4, [r4]
    86bc:	e5930004 	ldr	r0, [r3, #4]
    86c0:	e3500000 	cmp	r0, #0
    86c4:	0a000000 	beq	86cc <CDeviceNameService::~CDeviceNameService()+0x2c>
    86c8:	eb0021c7 	bl	10dec <operator delete[](void*)>
    86cc:	e5950000 	ldr	r0, [r5]
    86d0:	e3a01010 	mov	r1, #16
    86d4:	eb0021ca 	bl	10e04 <operator delete(void*, unsigned int)>
    86d8:	e5854000 	str	r4, [r5]
    86dc:	e3540000 	cmp	r4, #0
    86e0:	1afffff3 	bne	86b4 <CDeviceNameService::~CDeviceNameService()+0x14>
    86e4:	e307313c 	movw	r3, #28988	; 0x713c
    86e8:	e3a02000 	mov	r2, #0
    86ec:	e3403001 	movt	r3, #1
    86f0:	e1a00005 	mov	r0, r5
    86f4:	e5832000 	str	r2, [r3]
    86f8:	e8bd8070 	pop	{r4, r5, r6, pc}

000086fc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    86fc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8700:	e1a05000 	mov	r5, r0
    8704:	e5900004 	ldr	r0, [r0, #4]
    8708:	e1a06001 	mov	r6, r1
    870c:	e1a07002 	mov	r7, r2
    8710:	e1a08003 	mov	r8, r3
    8714:	e3500000 	cmp	r0, #0
    8718:	1a000016 	bne	8778 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x7c>
    871c:	e3a00010 	mov	r0, #16
    8720:	eb00219f 	bl	10da4 <operator new(unsigned int)>
    8724:	e3560000 	cmp	r6, #0
    8728:	e1a04000 	mov	r4, r0
    872c:	0a000013 	beq	8780 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x84>
    8730:	e1a00006 	mov	r0, r6
    8734:	eb001e82 	bl	10144 <strlen>
    8738:	e2800001 	add	r0, r0, #1
    873c:	eb00219e 	bl	10dbc <operator new[](unsigned int)>
    8740:	e5840004 	str	r0, [r4, #4]
    8744:	e1a01006 	mov	r1, r6
    8748:	eb001f22 	bl	103d8 <strcpy>
    874c:	e3570000 	cmp	r7, #0
    8750:	0a000010 	beq	8798 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
    8754:	e1c520d0 	ldrd	r2, [r5]
    8758:	e5847008 	str	r7, [r4, #8]
    875c:	e5854000 	str	r4, [r5]
    8760:	e3530000 	cmp	r3, #0
    8764:	e5842000 	str	r2, [r4]
    8768:	e5c4800c 	strb	r8, [r4, #12]
    876c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8770:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8774:	ea002537 	b	11c58 <LeaveCritical>
    8778:	eb00250b 	bl	11bac <EnterCritical>
    877c:	eaffffe6 	b	871c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
    8780:	e304196c 	movw	r1, #18796	; 0x496c
    8784:	e3040990 	movw	r0, #18832	; 0x4990
    8788:	e3401001 	movt	r1, #1
    878c:	e3a0203b 	mov	r2, #59	; 0x3b
    8790:	e3400001 	movt	r0, #1
    8794:	eb0026fc 	bl	1238c <assertion_failed>
    8798:	e304196c 	movw	r1, #18796	; 0x496c
    879c:	e304099c 	movw	r0, #18844	; 0x499c
    87a0:	e3401001 	movt	r1, #1
    87a4:	e3a02040 	mov	r2, #64	; 0x40
    87a8:	e3400001 	movt	r0, #1
    87ac:	eb0026f6 	bl	1238c <assertion_failed>

000087b0 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    87b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    87b4:	e2515000 	subs	r5, r1, #0
    87b8:	0a00003b 	beq	88ac <CDeviceNameService::RemoveDevice(char const*, bool)+0xfc>
    87bc:	e1a08000 	mov	r8, r0
    87c0:	e1a07002 	mov	r7, r2
    87c4:	e5900004 	ldr	r0, [r0, #4]
    87c8:	e3500000 	cmp	r0, #0
    87cc:	1a000019 	bne	8838 <CDeviceNameService::RemoveDevice(char const*, bool)+0x88>
    87d0:	e5984000 	ldr	r4, [r8]
    87d4:	e3540000 	cmp	r4, #0
    87d8:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    87dc:	e3a06000 	mov	r6, #0
    87e0:	ea00000b 	b	8814 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
    87e4:	e1a00005 	mov	r0, r5
    87e8:	eb001e5f 	bl	1016c <strcmp>
    87ec:	e3500000 	cmp	r0, #0
    87f0:	1a000002 	bne	8800 <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
    87f4:	e5d4300c 	ldrb	r3, [r4, #12]
    87f8:	e1530007 	cmp	r3, r7
    87fc:	0a000016 	beq	885c <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
    8800:	e5943000 	ldr	r3, [r4]
    8804:	e1a06004 	mov	r6, r4
    8808:	e3530000 	cmp	r3, #0
    880c:	0a00000d 	beq	8848 <CDeviceNameService::RemoveDevice(char const*, bool)+0x98>
    8810:	e1a04003 	mov	r4, r3
    8814:	e5941004 	ldr	r1, [r4, #4]
    8818:	e3510000 	cmp	r1, #0
    881c:	1afffff0 	bne	87e4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
    8820:	e304196c 	movw	r1, #18796	; 0x496c
    8824:	e30409ac 	movw	r0, #18860	; 0x49ac
    8828:	e3401001 	movt	r1, #1
    882c:	e3a0205e 	mov	r2, #94	; 0x5e
    8830:	e3400001 	movt	r0, #1
    8834:	eb0026d4 	bl	1238c <assertion_failed>
    8838:	eb0024db 	bl	11bac <EnterCritical>
    883c:	e5984000 	ldr	r4, [r8]
    8840:	e3540000 	cmp	r4, #0
    8844:	1affffe4 	bne	87dc <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
    8848:	e5983004 	ldr	r3, [r8, #4]
    884c:	e3530000 	cmp	r3, #0
    8850:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    8854:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8858:	ea0024fe 	b	11c58 <LeaveCritical>
    885c:	e3560000 	cmp	r6, #0
    8860:	15943000 	ldrne	r3, [r4]
    8864:	15863000 	strne	r3, [r6]
    8868:	0a00000c 	beq	88a0 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
    886c:	e5983004 	ldr	r3, [r8, #4]
    8870:	e3530000 	cmp	r3, #0
    8874:	1a000007 	bne	8898 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
    8878:	e5940004 	ldr	r0, [r4, #4]
    887c:	e3500000 	cmp	r0, #0
    8880:	0a000000 	beq	8888 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd8>
    8884:	eb002158 	bl	10dec <operator delete[](void*)>
    8888:	e1a00004 	mov	r0, r4
    888c:	e3a01010 	mov	r1, #16
    8890:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    8894:	ea00215a 	b	10e04 <operator delete(void*, unsigned int)>
    8898:	eb0024ee 	bl	11c58 <LeaveCritical>
    889c:	eafffff5 	b	8878 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc8>
    88a0:	e5943000 	ldr	r3, [r4]
    88a4:	e5883000 	str	r3, [r8]
    88a8:	eaffffef 	b	886c <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
    88ac:	e304196c 	movw	r1, #18796	; 0x496c
    88b0:	e3040990 	movw	r0, #18832	; 0x4990
    88b4:	e3401001 	movt	r1, #1
    88b8:	e3a02056 	mov	r2, #86	; 0x56
    88bc:	e3400001 	movt	r0, #1
    88c0:	eb0026b1 	bl	1238c <assertion_failed>

000088c4 <CDeviceNameService::GetDevice(char const*, bool)>:
    88c4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    88c8:	e2515000 	subs	r5, r1, #0
    88cc:	0a000025 	beq	8968 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    88d0:	e1a07000 	mov	r7, r0
    88d4:	e1a06002 	mov	r6, r2
    88d8:	e5900004 	ldr	r0, [r0, #4]
    88dc:	e3500000 	cmp	r0, #0
    88e0:	1a000016 	bne	8940 <CDeviceNameService::GetDevice(char const*, bool)+0x7c>
    88e4:	e5974000 	ldr	r4, [r7]
    88e8:	e3540000 	cmp	r4, #0
    88ec:	1a00000a 	bne	891c <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    88f0:	ea000019 	b	895c <CDeviceNameService::GetDevice(char const*, bool)+0x98>
    88f4:	e1a00005 	mov	r0, r5
    88f8:	eb001e1b 	bl	1016c <strcmp>
    88fc:	e3500000 	cmp	r0, #0
    8900:	1a000002 	bne	8910 <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
    8904:	e5d4300c 	ldrb	r3, [r4, #12]
    8908:	e1530006 	cmp	r3, r6
    890c:	0a00001b 	beq	8980 <CDeviceNameService::GetDevice(char const*, bool)+0xbc>
    8910:	e5944000 	ldr	r4, [r4]
    8914:	e3540000 	cmp	r4, #0
    8918:	0a00000c 	beq	8950 <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
    891c:	e5941004 	ldr	r1, [r4, #4]
    8920:	e3510000 	cmp	r1, #0
    8924:	1afffff2 	bne	88f4 <CDeviceNameService::GetDevice(char const*, bool)+0x30>
    8928:	e304196c 	movw	r1, #18796	; 0x496c
    892c:	e30409ac 	movw	r0, #18860	; 0x49ac
    8930:	e3401001 	movt	r1, #1
    8934:	e3a02092 	mov	r2, #146	; 0x92
    8938:	e3400001 	movt	r0, #1
    893c:	eb002692 	bl	1238c <assertion_failed>
    8940:	eb002499 	bl	11bac <EnterCritical>
    8944:	e5974000 	ldr	r4, [r7]
    8948:	e3540000 	cmp	r4, #0
    894c:	1afffff2 	bne	891c <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    8950:	e5973004 	ldr	r3, [r7, #4]
    8954:	e3530000 	cmp	r3, #0
    8958:	1a000014 	bne	89b0 <CDeviceNameService::GetDevice(char const*, bool)+0xec>
    895c:	e3a04000 	mov	r4, #0
    8960:	e1a00004 	mov	r0, r4
    8964:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8968:	e304196c 	movw	r1, #18796	; 0x496c
    896c:	e3040990 	movw	r0, #18832	; 0x4990
    8970:	e3401001 	movt	r1, #1
    8974:	e3a0208b 	mov	r2, #139	; 0x8b
    8978:	e3400001 	movt	r0, #1
    897c:	eb002682 	bl	1238c <assertion_failed>
    8980:	e5973004 	ldr	r3, [r7, #4]
    8984:	e5944008 	ldr	r4, [r4, #8]
    8988:	e3530000 	cmp	r3, #0
    898c:	1a00000a 	bne	89bc <CDeviceNameService::GetDevice(char const*, bool)+0xf8>
    8990:	e3540000 	cmp	r4, #0
    8994:	1afffff1 	bne	8960 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    8998:	e304196c 	movw	r1, #18796	; 0x496c
    899c:	e30409c0 	movw	r0, #18880	; 0x49c0
    89a0:	e3401001 	movt	r1, #1
    89a4:	e3a0209a 	mov	r2, #154	; 0x9a
    89a8:	e3400001 	movt	r0, #1
    89ac:	eb002676 	bl	1238c <assertion_failed>
    89b0:	e3a04000 	mov	r4, #0
    89b4:	eb0024a7 	bl	11c58 <LeaveCritical>
    89b8:	eaffffe8 	b	8960 <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
    89bc:	eb0024a5 	bl	11c58 <LeaveCritical>
    89c0:	eafffff2 	b	8990 <CDeviceNameService::GetDevice(char const*, bool)+0xcc>

000089c4 <CDeviceNameService::Get()>:
    89c4:	e307313c 	movw	r3, #28988	; 0x713c
    89c8:	e3403001 	movt	r3, #1
    89cc:	e5930000 	ldr	r0, [r3]
    89d0:	e3500000 	cmp	r0, #0
    89d4:	112fff1e 	bxne	lr
    89d8:	e304196c 	movw	r1, #18796	; 0x496c
    89dc:	e30409d0 	movw	r0, #18896	; 0x49d0
    89e0:	e3401001 	movt	r1, #1
    89e4:	e3a020cc 	mov	r2, #204	; 0xcc
    89e8:	e3400001 	movt	r0, #1
    89ec:	e92d4010 	push	{r4, lr}
    89f0:	eb002665 	bl	1238c <assertion_failed>

000089f4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    89f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    89f8:	e24dd010 	sub	sp, sp, #16
    89fc:	e1a04000 	mov	r4, r0
    8a00:	e1a0000d 	mov	r0, sp
    8a04:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
    8a08:	e1a06001 	mov	r6, r1
    8a0c:	e1a07002 	mov	r7, r2
    8a10:	e1a05003 	mov	r5, r3
    8a14:	eb001446 	bl	db34 <CString::CString()>
    8a18:	e30419dc 	movw	r1, #18908	; 0x49dc
    8a1c:	e1a03007 	mov	r3, r7
    8a20:	e3401001 	movt	r1, #1
    8a24:	e1a02006 	mov	r2, r6
    8a28:	e1a0000d 	mov	r0, sp
    8a2c:	eb0019dc 	bl	f1a4 <CString::Format(char const*, ...)>
    8a30:	e1a0000d 	mov	r0, sp
    8a34:	eb001475 	bl	dc10 <CString::operator char const*() const>
    8a38:	e1a01000 	mov	r1, r0
    8a3c:	e1a03008 	mov	r3, r8
    8a40:	e1a02005 	mov	r2, r5
    8a44:	e1a00004 	mov	r0, r4
    8a48:	ebffff2b 	bl	86fc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8a4c:	e1a0000d 	mov	r0, sp
    8a50:	eb001404 	bl	da68 <CString::~CString()>
    8a54:	e28dd010 	add	sp, sp, #16
    8a58:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00008a5c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    8a5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8a60:	e24dd014 	sub	sp, sp, #20
    8a64:	e1a04000 	mov	r4, r0
    8a68:	e1a0000d 	mov	r0, sp
    8a6c:	e1a06001 	mov	r6, r1
    8a70:	e1a07002 	mov	r7, r2
    8a74:	e1a05003 	mov	r5, r3
    8a78:	eb00142d 	bl	db34 <CString::CString()>
    8a7c:	e30419dc 	movw	r1, #18908	; 0x49dc
    8a80:	e1a03007 	mov	r3, r7
    8a84:	e3401001 	movt	r1, #1
    8a88:	e1a02006 	mov	r2, r6
    8a8c:	e1a0000d 	mov	r0, sp
    8a90:	eb0019c3 	bl	f1a4 <CString::Format(char const*, ...)>
    8a94:	e1a0000d 	mov	r0, sp
    8a98:	eb00145c 	bl	dc10 <CString::operator char const*() const>
    8a9c:	e1a01000 	mov	r1, r0
    8aa0:	e1a02005 	mov	r2, r5
    8aa4:	e1a00004 	mov	r0, r4
    8aa8:	ebffff40 	bl	87b0 <CDeviceNameService::RemoveDevice(char const*, bool)>
    8aac:	e1a0000d 	mov	r0, sp
    8ab0:	eb0013ec 	bl	da68 <CString::~CString()>
    8ab4:	e28dd014 	add	sp, sp, #20
    8ab8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008abc <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    8abc:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8ac0:	e24dd014 	sub	sp, sp, #20
    8ac4:	e1a04000 	mov	r4, r0
    8ac8:	e1a0000d 	mov	r0, sp
    8acc:	e1a06001 	mov	r6, r1
    8ad0:	e1a07002 	mov	r7, r2
    8ad4:	e1a05003 	mov	r5, r3
    8ad8:	eb001415 	bl	db34 <CString::CString()>
    8adc:	e30419dc 	movw	r1, #18908	; 0x49dc
    8ae0:	e1a03007 	mov	r3, r7
    8ae4:	e3401001 	movt	r1, #1
    8ae8:	e1a02006 	mov	r2, r6
    8aec:	e1a0000d 	mov	r0, sp
    8af0:	eb0019ab 	bl	f1a4 <CString::Format(char const*, ...)>
    8af4:	e1a0000d 	mov	r0, sp
    8af8:	eb001444 	bl	dc10 <CString::operator char const*() const>
    8afc:	e1a01000 	mov	r1, r0
    8b00:	e1a02005 	mov	r2, r5
    8b04:	e1a00004 	mov	r0, r4
    8b08:	ebffff6d 	bl	88c4 <CDeviceNameService::GetDevice(char const*, bool)>
    8b0c:	e1a04000 	mov	r4, r0
    8b10:	e1a0000d 	mov	r0, sp
    8b14:	eb0013d3 	bl	da68 <CString::~CString()>
    8b18:	e1a00004 	mov	r0, r4
    8b1c:	e28dd014 	add	sp, sp, #20
    8b20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008b24 <CDeviceNameService::ListDevices(CDevice*)>:
    8b24:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    8b28:	e2517000 	subs	r7, r1, #0
    8b2c:	e24dd018 	sub	sp, sp, #24
    8b30:	0a00003a 	beq	8c20 <CDeviceNameService::ListDevices(CDevice*)+0xfc>
    8b34:	e5904000 	ldr	r4, [r0]
    8b38:	e3540000 	cmp	r4, #0
    8b3c:	0a000035 	beq	8c18 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    8b40:	e30499f4 	movw	r9, #18932	; 0x49f4
    8b44:	e3a05000 	mov	r5, #0
    8b48:	e3409001 	movt	r9, #1
    8b4c:	ea00001b 	b	8bc0 <CDeviceNameService::ListDevices(CDevice*)+0x9c>
    8b50:	e5d4200c 	ldrb	r2, [r4, #12]
    8b54:	e2855001 	add	r5, r5, #1
    8b58:	e1a01009 	mov	r1, r9
    8b5c:	e28d0008 	add	r0, sp, #8
    8b60:	e3520000 	cmp	r2, #0
    8b64:	13a02062 	movne	r2, #98	; 0x62
    8b68:	03a02063 	moveq	r2, #99	; 0x63
    8b6c:	e215a003 	ands	sl, r5, #3
    8b70:	03a0c00a 	moveq	ip, #10
    8b74:	13a0c020 	movne	ip, #32
    8b78:	e58dc000 	str	ip, [sp]
    8b7c:	eb001988 	bl	f1a4 <CString::Format(char const*, ...)>
    8b80:	e5973000 	ldr	r3, [r7]
    8b84:	e28d0008 	add	r0, sp, #8
    8b88:	e593800c 	ldr	r8, [r3, #12]
    8b8c:	eb00141f 	bl	dc10 <CString::operator char const*() const>
    8b90:	e1a06000 	mov	r6, r0
    8b94:	e28d0008 	add	r0, sp, #8
    8b98:	eb001459 	bl	dd04 <CString::GetLength() const>
    8b9c:	e1a02000 	mov	r2, r0
    8ba0:	e1a01006 	mov	r1, r6
    8ba4:	e1a00007 	mov	r0, r7
    8ba8:	e12fff38 	blx	r8
    8bac:	e5944000 	ldr	r4, [r4]
    8bb0:	e28d0008 	add	r0, sp, #8
    8bb4:	eb0013ab 	bl	da68 <CString::~CString()>
    8bb8:	e3540000 	cmp	r4, #0
    8bbc:	0a00000a 	beq	8bec <CDeviceNameService::ListDevices(CDevice*)+0xc8>
    8bc0:	e28d0008 	add	r0, sp, #8
    8bc4:	eb0013da 	bl	db34 <CString::CString()>
    8bc8:	e5943004 	ldr	r3, [r4, #4]
    8bcc:	e3530000 	cmp	r3, #0
    8bd0:	1affffde 	bne	8b50 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
    8bd4:	e304196c 	movw	r1, #18796	; 0x496c
    8bd8:	e30409ac 	movw	r0, #18860	; 0x49ac
    8bdc:	e3401001 	movt	r1, #1
    8be0:	e3a020b9 	mov	r2, #185	; 0xb9
    8be4:	e3400001 	movt	r0, #1
    8be8:	eb0025e7 	bl	1238c <assertion_failed>
    8bec:	e35a0000 	cmp	sl, #0
    8bf0:	0a000008 	beq	8c18 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
    8bf4:	e5973000 	ldr	r3, [r7]
    8bf8:	e3041960 	movw	r1, #18784	; 0x4960
    8bfc:	e3401001 	movt	r1, #1
    8c00:	e3a02001 	mov	r2, #1
    8c04:	e593300c 	ldr	r3, [r3, #12]
    8c08:	e1a00007 	mov	r0, r7
    8c0c:	e28dd018 	add	sp, sp, #24
    8c10:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    8c14:	e12fff13 	bx	r3
    8c18:	e28dd018 	add	sp, sp, #24
    8c1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    8c20:	e304196c 	movw	r1, #18796	; 0x496c
    8c24:	e30409e4 	movw	r0, #18916	; 0x49e4
    8c28:	e3401001 	movt	r1, #1
    8c2c:	e3a020b0 	mov	r2, #176	; 0xb0
    8c30:	e3400001 	movt	r0, #1
    8c34:	eb0025d4 	bl	1238c <assertion_failed>

00008c38 <CGPIOPin::~CGPIOPin()>:
    8c38:	e12fff1e 	bx	lr

00008c3c <CGPIOPin::~CGPIOPin()>:
    8c3c:	e92d4010 	push	{r4, lr}
    8c40:	e3a01028 	mov	r1, #40	; 0x28
    8c44:	e1a04000 	mov	r4, r0
    8c48:	eb00206d 	bl	10e04 <operator delete(void*, unsigned int)>
    8c4c:	e1a00004 	mov	r0, r4
    8c50:	e8bd8010 	pop	{r4, pc}

00008c54 <CGPIOPin::CGPIOPin()>:
    8c54:	e59f202c 	ldr	r2, [pc, #44]	; 8c88 <CGPIOPin::CGPIOPin()+0x34>
    8c58:	e3a0c036 	mov	ip, #54	; 0x36
    8c5c:	e580c004 	str	ip, [r0, #4]
    8c60:	e3a01000 	mov	r1, #0
    8c64:	e5802000 	str	r2, [r0]
    8c68:	e3a0c00a 	mov	ip, #10
    8c6c:	e5801018 	str	r1, [r0, #24]
    8c70:	e3a02006 	mov	r2, #6
    8c74:	e5c0c010 	strb	ip, [r0, #16]
    8c78:	e580101c 	str	r1, [r0, #28]
    8c7c:	e5c02025 	strb	r2, [r0, #37]	; 0x25
    8c80:	e5c02026 	strb	r2, [r0, #38]	; 0x26
    8c84:	e12fff1e 	bx	lr
    8c88:	00014a08 	.word	0x00014a08

00008c8c <CGPIOPin::AssignPin(unsigned int)>:
    8c8c:	e5903004 	ldr	r3, [r0, #4]
    8c90:	e92d4070 	push	{r4, r5, r6, lr}
    8c94:	e3530036 	cmp	r3, #54	; 0x36
    8c98:	1a000017 	bne	8cfc <CGPIOPin::AssignPin(unsigned int)+0x70>
    8c9c:	e5801004 	str	r1, [r0, #4]
    8ca0:	e3510035 	cmp	r1, #53	; 0x35
    8ca4:	e1a05000 	mov	r5, r0
    8ca8:	e1a04001 	mov	r4, r1
    8cac:	8a000007 	bhi	8cd0 <CGPIOPin::AssignPin(unsigned int)+0x44>
    8cb0:	e1a032a4 	lsr	r3, r4, #5
    8cb4:	e3a01001 	mov	r1, #1
    8cb8:	e204401f 	and	r4, r4, #31
    8cbc:	e1a03103 	lsl	r3, r3, #2
    8cc0:	e1a04411 	lsl	r4, r1, r4
    8cc4:	e5853008 	str	r3, [r5, #8]
    8cc8:	e585400c 	str	r4, [r5, #12]
    8ccc:	e8bd8070 	pop	{r4, r5, r6, pc}
    8cd0:	eb000905 	bl	b0ec <CMachineInfo::Get()>
    8cd4:	e6ef1074 	uxtb	r1, r4
    8cd8:	eb00086e 	bl	ae98 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    8cdc:	e5850004 	str	r0, [r5, #4]
    8ce0:	e3500035 	cmp	r0, #53	; 0x35
    8ce4:	e1a04000 	mov	r4, r0
    8ce8:	9afffff0 	bls	8cb0 <CGPIOPin::AssignPin(unsigned int)+0x24>
    8cec:	e59f1018 	ldr	r1, [pc, #24]	; 8d0c <CGPIOPin::AssignPin(unsigned int)+0x80>
    8cf0:	e3a02047 	mov	r2, #71	; 0x47
    8cf4:	e2810020 	add	r0, r1, #32
    8cf8:	eb0025a3 	bl	1238c <assertion_failed>
    8cfc:	e59f1008 	ldr	r1, [pc, #8]	; 8d0c <CGPIOPin::AssignPin(unsigned int)+0x80>
    8d00:	e3a02040 	mov	r2, #64	; 0x40
    8d04:	e281000c 	add	r0, r1, #12
    8d08:	eb00259f 	bl	1238c <assertion_failed>
    8d0c:	00014a10 	.word	0x00014a10

00008d10 <CGPIOPin::Write(unsigned int)>:
    8d10:	e5903004 	ldr	r3, [r0, #4]
    8d14:	e92d4010 	push	{r4, lr}
    8d18:	e3530035 	cmp	r3, #53	; 0x35
    8d1c:	8a00000f 	bhi	8d60 <CGPIOPin::Write(unsigned int)+0x50>
    8d20:	e5d03010 	ldrb	r3, [r0, #16]
    8d24:	e3530003 	cmp	r3, #3
    8d28:	8a000010 	bhi	8d70 <CGPIOPin::Write(unsigned int)+0x60>
    8d2c:	e3510001 	cmp	r1, #1
    8d30:	8a000012 	bhi	8d80 <CGPIOPin::Write(unsigned int)+0x70>
    8d34:	e590c00c 	ldr	ip, [r0, #12]
    8d38:	e3a02028 	mov	r2, #40	; 0x28
    8d3c:	e3432f20 	movt	r2, #16160	; 0x3f20
    8d40:	e3a0301c 	mov	r3, #28
    8d44:	e3433f20 	movt	r3, #16160	; 0x3f20
    8d48:	e3510000 	cmp	r1, #0
    8d4c:	e5801014 	str	r1, [r0, #20]
    8d50:	01a03002 	moveq	r3, r2
    8d54:	e5900008 	ldr	r0, [r0, #8]
    8d58:	e783c000 	str	ip, [r3, r0]
    8d5c:	e8bd8010 	pop	{r4, pc}
    8d60:	e59f1028 	ldr	r1, [pc, #40]	; 8d90 <CGPIOPin::Write(unsigned int)+0x80>
    8d64:	e3a02091 	mov	r2, #145	; 0x91
    8d68:	e2810020 	add	r0, r1, #32
    8d6c:	eb002586 	bl	1238c <assertion_failed>
    8d70:	e59f1018 	ldr	r1, [pc, #24]	; 8d90 <CGPIOPin::Write(unsigned int)+0x80>
    8d74:	e3a02094 	mov	r2, #148	; 0x94
    8d78:	e2810034 	add	r0, r1, #52	; 0x34
    8d7c:	eb002582 	bl	1238c <assertion_failed>
    8d80:	e59f1008 	ldr	r1, [pc, #8]	; 8d90 <CGPIOPin::Write(unsigned int)+0x80>
    8d84:	e3a02098 	mov	r2, #152	; 0x98
    8d88:	e2810058 	add	r0, r1, #88	; 0x58
    8d8c:	eb00257e 	bl	1238c <assertion_failed>
    8d90:	00014a10 	.word	0x00014a10

00008d94 <CGPIOPin::Read() const>:
    8d94:	e5903004 	ldr	r3, [r0, #4]
    8d98:	e92d4010 	push	{r4, lr}
    8d9c:	e3530035 	cmp	r3, #53	; 0x35
    8da0:	8a00000d 	bhi	8ddc <CGPIOPin::Read() const+0x48>
    8da4:	e5d03010 	ldrb	r3, [r0, #16]
    8da8:	e2432002 	sub	r2, r3, #2
    8dac:	e3530000 	cmp	r3, #0
    8db0:	13520001 	cmpne	r2, #1
    8db4:	8a00000c 	bhi	8dec <CGPIOPin::Read() const+0x58>
    8db8:	e5901008 	ldr	r1, [r0, #8]
    8dbc:	e3a03034 	mov	r3, #52	; 0x34
    8dc0:	e3433f20 	movt	r3, #16160	; 0x3f20
    8dc4:	e590200c 	ldr	r2, [r0, #12]
    8dc8:	e7913003 	ldr	r3, [r1, r3]
    8dcc:	e1130002 	tst	r3, r2
    8dd0:	13a00001 	movne	r0, #1
    8dd4:	03a00000 	moveq	r0, #0
    8dd8:	e8bd8010 	pop	{r4, pc}
    8ddc:	e59f1018 	ldr	r1, [pc, #24]	; 8dfc <CGPIOPin::Read() const+0x68>
    8de0:	e3a020a4 	mov	r2, #164	; 0xa4
    8de4:	e2810020 	add	r0, r1, #32
    8de8:	eb002567 	bl	1238c <assertion_failed>
    8dec:	e59f1008 	ldr	r1, [pc, #8]	; 8dfc <CGPIOPin::Read() const+0x68>
    8df0:	e3a020a6 	mov	r2, #166	; 0xa6
    8df4:	e2810078 	add	r0, r1, #120	; 0x78
    8df8:	eb002563 	bl	1238c <assertion_failed>
    8dfc:	00014a10 	.word	0x00014a10

00008e00 <CGPIOPin::Invert()>:
    8e00:	e5d03010 	ldrb	r3, [r0, #16]
    8e04:	e92d4010 	push	{r4, lr}
    8e08:	e3530001 	cmp	r3, #1
    8e0c:	1a000011 	bne	8e58 <CGPIOPin::Invert()+0x58>
    8e10:	e5903004 	ldr	r3, [r0, #4]
    8e14:	e5902014 	ldr	r2, [r0, #20]
    8e18:	e3530035 	cmp	r3, #53	; 0x35
    8e1c:	e2221001 	eor	r1, r2, #1
    8e20:	8a000010 	bhi	8e68 <CGPIOPin::Invert()+0x68>
    8e24:	e3510001 	cmp	r1, #1
    8e28:	8a000012 	bhi	8e78 <CGPIOPin::Invert()+0x78>
    8e2c:	e5801014 	str	r1, [r0, #20]
    8e30:	e3a01028 	mov	r1, #40	; 0x28
    8e34:	e3431f20 	movt	r1, #16160	; 0x3f20
    8e38:	e3a0301c 	mov	r3, #28
    8e3c:	e590c00c 	ldr	ip, [r0, #12]
    8e40:	e3520001 	cmp	r2, #1
    8e44:	e3433f20 	movt	r3, #16160	; 0x3f20
    8e48:	01a03001 	moveq	r3, r1
    8e4c:	e5900008 	ldr	r0, [r0, #8]
    8e50:	e783c000 	str	ip, [r3, r0]
    8e54:	e8bd8010 	pop	{r4, pc}
    8e58:	e59f1028 	ldr	r1, [pc, #40]	; 8e88 <CGPIOPin::Invert()+0x88>
    8e5c:	e3a020b5 	mov	r2, #181	; 0xb5
    8e60:	e28100d4 	add	r0, r1, #212	; 0xd4
    8e64:	eb002548 	bl	1238c <assertion_failed>
    8e68:	e59f1018 	ldr	r1, [pc, #24]	; 8e88 <CGPIOPin::Invert()+0x88>
    8e6c:	e3a02091 	mov	r2, #145	; 0x91
    8e70:	e2810020 	add	r0, r1, #32
    8e74:	eb002544 	bl	1238c <assertion_failed>
    8e78:	e59f1008 	ldr	r1, [pc, #8]	; 8e88 <CGPIOPin::Invert()+0x88>
    8e7c:	e3a02098 	mov	r2, #152	; 0x98
    8e80:	e2810058 	add	r0, r1, #88	; 0x58
    8e84:	eb002540 	bl	1238c <assertion_failed>
    8e88:	00014a10 	.word	0x00014a10

00008e8c <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
    8e8c:	e1a0c000 	mov	ip, r0
    8e90:	e5d00010 	ldrb	r0, [r0, #16]
    8e94:	e92d4010 	push	{r4, lr}
    8e98:	e240e002 	sub	lr, r0, #2
    8e9c:	e3500000 	cmp	r0, #0
    8ea0:	135e0001 	cmpne	lr, #1
    8ea4:	8a000027 	bhi	8f48 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
    8ea8:	e5dc0025 	ldrb	r0, [ip, #37]	; 0x25
    8eac:	e3500006 	cmp	r0, #6
    8eb0:	1a000010 	bne	8ef8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
    8eb4:	e5dc0026 	ldrb	r0, [ip, #38]	; 0x26
    8eb8:	e3500006 	cmp	r0, #6
    8ebc:	1a000011 	bne	8f08 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
    8ec0:	e3510000 	cmp	r1, #0
    8ec4:	0a000013 	beq	8f18 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
    8ec8:	e59c001c 	ldr	r0, [ip, #28]
    8ecc:	e3500000 	cmp	r0, #0
    8ed0:	1a000014 	bne	8f28 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
    8ed4:	e59c0018 	ldr	r0, [ip, #24]
    8ed8:	e58c101c 	str	r1, [ip, #28]
    8edc:	e58c2020 	str	r2, [ip, #32]
    8ee0:	e3500000 	cmp	r0, #0
    8ee4:	e5cc3024 	strb	r3, [ip, #36]	; 0x24
    8ee8:	0a000012 	beq	8f38 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
    8eec:	e8bd4010 	pop	{r4, lr}
    8ef0:	e1a0100c 	mov	r1, ip
    8ef4:	ea002af5 	b	13ad0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
    8ef8:	e59f1058 	ldr	r1, [pc, #88]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8efc:	e3a020c0 	mov	r2, #192	; 0xc0
    8f00:	e28100f0 	add	r0, r1, #240	; 0xf0
    8f04:	eb002520 	bl	1238c <assertion_failed>
    8f08:	e59f1048 	ldr	r1, [pc, #72]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f0c:	e3a020c1 	mov	r2, #193	; 0xc1
    8f10:	e2810f45 	add	r0, r1, #276	; 0x114
    8f14:	eb00251c 	bl	1238c <assertion_failed>
    8f18:	e59f1038 	ldr	r1, [pc, #56]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f1c:	e3a020c3 	mov	r2, #195	; 0xc3
    8f20:	e2810f4f 	add	r0, r1, #316	; 0x13c
    8f24:	eb002518 	bl	1238c <assertion_failed>
    8f28:	e59f1028 	ldr	r1, [pc, #40]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f2c:	e3a020c4 	mov	r2, #196	; 0xc4
    8f30:	e2810f53 	add	r0, r1, #332	; 0x14c
    8f34:	eb002514 	bl	1238c <assertion_failed>
    8f38:	e59f1018 	ldr	r1, [pc, #24]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f3c:	e3a020cb 	mov	r2, #203	; 0xcb
    8f40:	e2810f57 	add	r0, r1, #348	; 0x15c
    8f44:	eb002510 	bl	1238c <assertion_failed>
    8f48:	e59f1008 	ldr	r1, [pc, #8]	; 8f58 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
    8f4c:	e3a020bc 	mov	r2, #188	; 0xbc
    8f50:	e2810078 	add	r0, r1, #120	; 0x78
    8f54:	eb00250c 	bl	1238c <assertion_failed>
    8f58:	00014a10 	.word	0x00014a10

00008f5c <CGPIOPin::DisconnectInterrupt()>:
    8f5c:	e5d03010 	ldrb	r3, [r0, #16]
    8f60:	e92d4010 	push	{r4, lr}
    8f64:	e2432002 	sub	r2, r3, #2
    8f68:	e3530000 	cmp	r3, #0
    8f6c:	13520001 	cmpne	r2, #1
    8f70:	8a000020 	bhi	8ff8 <CGPIOPin::DisconnectInterrupt()+0x9c>
    8f74:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    8f78:	e1a01000 	mov	r1, r0
    8f7c:	e3530006 	cmp	r3, #6
    8f80:	1a00000c 	bne	8fb8 <CGPIOPin::DisconnectInterrupt()+0x5c>
    8f84:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    8f88:	e3530006 	cmp	r3, #6
    8f8c:	1a00000d 	bne	8fc8 <CGPIOPin::DisconnectInterrupt()+0x6c>
    8f90:	e590301c 	ldr	r3, [r0, #28]
    8f94:	e3530000 	cmp	r3, #0
    8f98:	0a00000e 	beq	8fd8 <CGPIOPin::DisconnectInterrupt()+0x7c>
    8f9c:	e5900018 	ldr	r0, [r0, #24]
    8fa0:	e3a03000 	mov	r3, #0
    8fa4:	e581301c 	str	r3, [r1, #28]
    8fa8:	e1500003 	cmp	r0, r3
    8fac:	0a00000d 	beq	8fe8 <CGPIOPin::DisconnectInterrupt()+0x8c>
    8fb0:	e8bd4010 	pop	{r4, lr}
    8fb4:	ea002aec 	b	13b6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
    8fb8:	e59f1048 	ldr	r1, [pc, #72]	; 9008 <CGPIOPin::DisconnectInterrupt()+0xac>
    8fbc:	e3a020d5 	mov	r2, #213	; 0xd5
    8fc0:	e28100f0 	add	r0, r1, #240	; 0xf0
    8fc4:	eb0024f0 	bl	1238c <assertion_failed>
    8fc8:	e59f1038 	ldr	r1, [pc, #56]	; 9008 <CGPIOPin::DisconnectInterrupt()+0xac>
    8fcc:	e3a020d6 	mov	r2, #214	; 0xd6
    8fd0:	e2810f45 	add	r0, r1, #276	; 0x114
    8fd4:	eb0024ec 	bl	1238c <assertion_failed>
    8fd8:	e59f1028 	ldr	r1, [pc, #40]	; 9008 <CGPIOPin::DisconnectInterrupt()+0xac>
    8fdc:	e3a020d8 	mov	r2, #216	; 0xd8
    8fe0:	e2810f5b 	add	r0, r1, #364	; 0x16c
    8fe4:	eb0024e8 	bl	1238c <assertion_failed>
    8fe8:	e59f1018 	ldr	r1, [pc, #24]	; 9008 <CGPIOPin::DisconnectInterrupt()+0xac>
    8fec:	e3a020db 	mov	r2, #219	; 0xdb
    8ff0:	e2810f57 	add	r0, r1, #348	; 0x15c
    8ff4:	eb0024e4 	bl	1238c <assertion_failed>
    8ff8:	e59f1008 	ldr	r1, [pc, #8]	; 9008 <CGPIOPin::DisconnectInterrupt()+0xac>
    8ffc:	e3a020d1 	mov	r2, #209	; 0xd1
    9000:	e2810078 	add	r0, r1, #120	; 0x78
    9004:	eb0024e0 	bl	1238c <assertion_failed>
    9008:	00014a10 	.word	0x00014a10

0000900c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
    900c:	e5d03010 	ldrb	r3, [r0, #16]
    9010:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9014:	e2432002 	sub	r2, r3, #2
    9018:	e3530000 	cmp	r3, #0
    901c:	13520001 	cmpne	r2, #1
    9020:	8a000032 	bhi	90f0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
    9024:	e590301c 	ldr	r3, [r0, #28]
    9028:	e1a04000 	mov	r4, r0
    902c:	e3530000 	cmp	r3, #0
    9030:	0a00001e 	beq	90b0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
    9034:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9038:	e3530006 	cmp	r3, #6
    903c:	1a00001f 	bne	90c0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
    9040:	e3510005 	cmp	r1, #5
    9044:	8a000021 	bhi	90d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
    9048:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    904c:	e1530001 	cmp	r3, r1
    9050:	0a000022 	beq	90e0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
    9054:	e5903008 	ldr	r3, [r0, #8]
    9058:	e3077140 	movw	r7, #28992	; 0x7140
    905c:	e3407001 	movt	r7, #1
    9060:	e3a0604c 	mov	r6, #76	; 0x4c
    9064:	e5c01025 	strb	r1, [r0, #37]	; 0x25
    9068:	e3a0500c 	mov	r5, #12
    906c:	e5970000 	ldr	r0, [r7]
    9070:	e3436f20 	movt	r6, #16160	; 0x3f20
    9074:	e0836006 	add	r6, r3, r6
    9078:	e3500000 	cmp	r0, #0
    907c:	e0050195 	mul	r5, r5, r1
    9080:	1a000008 	bne	90a8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
    9084:	e7963005 	ldr	r3, [r6, r5]
    9088:	e594200c 	ldr	r2, [r4, #12]
    908c:	e1833002 	orr	r3, r3, r2
    9090:	e7863005 	str	r3, [r6, r5]
    9094:	e5973000 	ldr	r3, [r7]
    9098:	e3530000 	cmp	r3, #0
    909c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    90a0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    90a4:	ea0022eb 	b	11c58 <LeaveCritical>
    90a8:	eb0022bf 	bl	11bac <EnterCritical>
    90ac:	eafffff4 	b	9084 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
    90b0:	e59f1048 	ldr	r1, [pc, #72]	; 9100 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    90b4:	e3a020e4 	mov	r2, #228	; 0xe4
    90b8:	e2810f5b 	add	r0, r1, #364	; 0x16c
    90bc:	eb0024b2 	bl	1238c <assertion_failed>
    90c0:	e59f1038 	ldr	r1, [pc, #56]	; 9100 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    90c4:	e3a020e6 	mov	r2, #230	; 0xe6
    90c8:	e28100f0 	add	r0, r1, #240	; 0xf0
    90cc:	eb0024ae 	bl	1238c <assertion_failed>
    90d0:	e59f1028 	ldr	r1, [pc, #40]	; 9100 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    90d4:	e3a020e7 	mov	r2, #231	; 0xe7
    90d8:	e2810f5f 	add	r0, r1, #380	; 0x17c
    90dc:	eb0024aa 	bl	1238c <assertion_failed>
    90e0:	e59f1018 	ldr	r1, [pc, #24]	; 9100 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    90e4:	e3a020e8 	mov	r2, #232	; 0xe8
    90e8:	e2810e1a 	add	r0, r1, #416	; 0x1a0
    90ec:	eb0024a6 	bl	1238c <assertion_failed>
    90f0:	e59f1008 	ldr	r1, [pc, #8]	; 9100 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
    90f4:	e3a020e1 	mov	r2, #225	; 0xe1
    90f8:	e2810078 	add	r0, r1, #120	; 0x78
    90fc:	eb0024a2 	bl	1238c <assertion_failed>
    9100:	00014a10 	.word	0x00014a10

00009104 <CGPIOPin::DisableInterrupt()>:
    9104:	e5d03010 	ldrb	r3, [r0, #16]
    9108:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    910c:	e2432002 	sub	r2, r3, #2
    9110:	e3530000 	cmp	r3, #0
    9114:	13520001 	cmpne	r2, #1
    9118:	8a000020 	bhi	91a0 <CGPIOPin::DisableInterrupt()+0x9c>
    911c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    9120:	e1a04000 	mov	r4, r0
    9124:	e3530005 	cmp	r3, #5
    9128:	8a000018 	bhi	9190 <CGPIOPin::DisableInterrupt()+0x8c>
    912c:	e5902008 	ldr	r2, [r0, #8]
    9130:	e3077140 	movw	r7, #28992	; 0x7140
    9134:	e3407001 	movt	r7, #1
    9138:	e3a0604c 	mov	r6, #76	; 0x4c
    913c:	e3436f20 	movt	r6, #16160	; 0x3f20
    9140:	e3a0500c 	mov	r5, #12
    9144:	e5970000 	ldr	r0, [r7]
    9148:	e0826006 	add	r6, r2, r6
    914c:	e3500000 	cmp	r0, #0
    9150:	e0050395 	mul	r5, r5, r3
    9154:	1a000009 	bne	9180 <CGPIOPin::DisableInterrupt()+0x7c>
    9158:	e7963005 	ldr	r3, [r6, r5]
    915c:	e594200c 	ldr	r2, [r4, #12]
    9160:	e1c33002 	bic	r3, r3, r2
    9164:	e7863005 	str	r3, [r6, r5]
    9168:	e5973000 	ldr	r3, [r7]
    916c:	e3530000 	cmp	r3, #0
    9170:	1a000004 	bne	9188 <CGPIOPin::DisableInterrupt()+0x84>
    9174:	e3a03006 	mov	r3, #6
    9178:	e5c43025 	strb	r3, [r4, #37]	; 0x25
    917c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9180:	eb002289 	bl	11bac <EnterCritical>
    9184:	eafffff3 	b	9158 <CGPIOPin::DisableInterrupt()+0x54>
    9188:	eb0022b2 	bl	11c58 <LeaveCritical>
    918c:	eafffff8 	b	9174 <CGPIOPin::DisableInterrupt()+0x70>
    9190:	e59f1018 	ldr	r1, [pc, #24]	; 91b0 <CGPIOPin::DisableInterrupt()+0xac>
    9194:	e3a020fb 	mov	r2, #251	; 0xfb
    9198:	e2810f6f 	add	r0, r1, #444	; 0x1bc
    919c:	eb00247a 	bl	1238c <assertion_failed>
    91a0:	e59f1008 	ldr	r1, [pc, #8]	; 91b0 <CGPIOPin::DisableInterrupt()+0xac>
    91a4:	e3a020f7 	mov	r2, #247	; 0xf7
    91a8:	e2810078 	add	r0, r1, #120	; 0x78
    91ac:	eb002476 	bl	1238c <assertion_failed>
    91b0:	00014a10 	.word	0x00014a10

000091b4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
    91b4:	e5d03010 	ldrb	r3, [r0, #16]
    91b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91bc:	e2432002 	sub	r2, r3, #2
    91c0:	e3530000 	cmp	r3, #0
    91c4:	13520001 	cmpne	r2, #1
    91c8:	8a000032 	bhi	9298 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
    91cc:	e590301c 	ldr	r3, [r0, #28]
    91d0:	e1a04000 	mov	r4, r0
    91d4:	e3530000 	cmp	r3, #0
    91d8:	0a00001e 	beq	9258 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
    91dc:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    91e0:	e3530006 	cmp	r3, #6
    91e4:	1a00001f 	bne	9268 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
    91e8:	e3510005 	cmp	r1, #5
    91ec:	8a000021 	bhi	9278 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
    91f0:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    91f4:	e1530001 	cmp	r3, r1
    91f8:	0a000022 	beq	9288 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
    91fc:	e5903008 	ldr	r3, [r0, #8]
    9200:	e3077140 	movw	r7, #28992	; 0x7140
    9204:	e3407001 	movt	r7, #1
    9208:	e3a0604c 	mov	r6, #76	; 0x4c
    920c:	e5c01026 	strb	r1, [r0, #38]	; 0x26
    9210:	e3a0500c 	mov	r5, #12
    9214:	e5970000 	ldr	r0, [r7]
    9218:	e3436f20 	movt	r6, #16160	; 0x3f20
    921c:	e0836006 	add	r6, r3, r6
    9220:	e3500000 	cmp	r0, #0
    9224:	e0050195 	mul	r5, r5, r1
    9228:	1a000008 	bne	9250 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
    922c:	e7963005 	ldr	r3, [r6, r5]
    9230:	e594200c 	ldr	r2, [r4, #12]
    9234:	e1833002 	orr	r3, r3, r2
    9238:	e7863005 	str	r3, [r6, r5]
    923c:	e5973000 	ldr	r3, [r7]
    9240:	e3530000 	cmp	r3, #0
    9244:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9248:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    924c:	ea002281 	b	11c58 <LeaveCritical>
    9250:	eb002255 	bl	11bac <EnterCritical>
    9254:	eafffff4 	b	922c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
    9258:	e59f1048 	ldr	r1, [pc, #72]	; 92a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    925c:	e300210d 	movw	r2, #269	; 0x10d
    9260:	e2810f5b 	add	r0, r1, #364	; 0x16c
    9264:	eb002448 	bl	1238c <assertion_failed>
    9268:	e59f1038 	ldr	r1, [pc, #56]	; 92a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    926c:	e300210f 	movw	r2, #271	; 0x10f
    9270:	e2810f45 	add	r0, r1, #276	; 0x114
    9274:	eb002444 	bl	1238c <assertion_failed>
    9278:	e59f1028 	ldr	r1, [pc, #40]	; 92a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    927c:	e3a02e11 	mov	r2, #272	; 0x110
    9280:	e2810f5f 	add	r0, r1, #380	; 0x17c
    9284:	eb002440 	bl	1238c <assertion_failed>
    9288:	e59f1018 	ldr	r1, [pc, #24]	; 92a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    928c:	e3002111 	movw	r2, #273	; 0x111
    9290:	e2810e1e 	add	r0, r1, #480	; 0x1e0
    9294:	eb00243c 	bl	1238c <assertion_failed>
    9298:	e59f1008 	ldr	r1, [pc, #8]	; 92a8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
    929c:	e300210a 	movw	r2, #266	; 0x10a
    92a0:	e2810078 	add	r0, r1, #120	; 0x78
    92a4:	eb002438 	bl	1238c <assertion_failed>
    92a8:	00014a10 	.word	0x00014a10

000092ac <CGPIOPin::DisableInterrupt2()>:
    92ac:	e5d03010 	ldrb	r3, [r0, #16]
    92b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    92b4:	e2432002 	sub	r2, r3, #2
    92b8:	e3530000 	cmp	r3, #0
    92bc:	13520001 	cmpne	r2, #1
    92c0:	8a000020 	bhi	9348 <CGPIOPin::DisableInterrupt2()+0x9c>
    92c4:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    92c8:	e1a04000 	mov	r4, r0
    92cc:	e3530005 	cmp	r3, #5
    92d0:	8a000018 	bhi	9338 <CGPIOPin::DisableInterrupt2()+0x8c>
    92d4:	e5902008 	ldr	r2, [r0, #8]
    92d8:	e3077140 	movw	r7, #28992	; 0x7140
    92dc:	e3407001 	movt	r7, #1
    92e0:	e3a0604c 	mov	r6, #76	; 0x4c
    92e4:	e3436f20 	movt	r6, #16160	; 0x3f20
    92e8:	e3a0500c 	mov	r5, #12
    92ec:	e5970000 	ldr	r0, [r7]
    92f0:	e0826006 	add	r6, r2, r6
    92f4:	e3500000 	cmp	r0, #0
    92f8:	e0050395 	mul	r5, r5, r3
    92fc:	1a000009 	bne	9328 <CGPIOPin::DisableInterrupt2()+0x7c>
    9300:	e7963005 	ldr	r3, [r6, r5]
    9304:	e594200c 	ldr	r2, [r4, #12]
    9308:	e1c33002 	bic	r3, r3, r2
    930c:	e7863005 	str	r3, [r6, r5]
    9310:	e5973000 	ldr	r3, [r7]
    9314:	e3530000 	cmp	r3, #0
    9318:	1a000004 	bne	9330 <CGPIOPin::DisableInterrupt2()+0x84>
    931c:	e3a03006 	mov	r3, #6
    9320:	e5c43026 	strb	r3, [r4, #38]	; 0x26
    9324:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9328:	eb00221f 	bl	11bac <EnterCritical>
    932c:	eafffff3 	b	9300 <CGPIOPin::DisableInterrupt2()+0x54>
    9330:	eb002248 	bl	11c58 <LeaveCritical>
    9334:	eafffff8 	b	931c <CGPIOPin::DisableInterrupt2()+0x70>
    9338:	e59f1018 	ldr	r1, [pc, #24]	; 9358 <CGPIOPin::DisableInterrupt2()+0xac>
    933c:	e3a02f49 	mov	r2, #292	; 0x124
    9340:	e2810f7f 	add	r0, r1, #508	; 0x1fc
    9344:	eb002410 	bl	1238c <assertion_failed>
    9348:	e59f1008 	ldr	r1, [pc, #8]	; 9358 <CGPIOPin::DisableInterrupt2()+0xac>
    934c:	e3a02e12 	mov	r2, #288	; 0x120
    9350:	e2810078 	add	r0, r1, #120	; 0x78
    9354:	eb00240c 	bl	1238c <assertion_failed>
    9358:	00014a10 	.word	0x00014a10

0000935c <CGPIOPin::AcknowledgeInterrupt()>:
    935c:	e590301c 	ldr	r3, [r0, #28]
    9360:	e92d4010 	push	{r4, lr}
    9364:	e3530000 	cmp	r3, #0
    9368:	0a000008 	beq	9390 <CGPIOPin::AcknowledgeInterrupt()+0x34>
    936c:	e5d03024 	ldrb	r3, [r0, #36]	; 0x24
    9370:	e3530000 	cmp	r3, #0
    9374:	1a000009 	bne	93a0 <CGPIOPin::AcknowledgeInterrupt()+0x44>
    9378:	e590100c 	ldr	r1, [r0, #12]
    937c:	e3a03040 	mov	r3, #64	; 0x40
    9380:	e5902008 	ldr	r2, [r0, #8]
    9384:	e3433f20 	movt	r3, #16160	; 0x3f20
    9388:	e7821003 	str	r1, [r2, r3]
    938c:	e8bd8010 	pop	{r4, pc}
    9390:	e59f1018 	ldr	r1, [pc, #24]	; 93b0 <CGPIOPin::AcknowledgeInterrupt()+0x54>
    9394:	e3002133 	movw	r2, #307	; 0x133
    9398:	e2810f5b 	add	r0, r1, #364	; 0x16c
    939c:	eb0023fa 	bl	1238c <assertion_failed>
    93a0:	e59f1008 	ldr	r1, [pc, #8]	; 93b0 <CGPIOPin::AcknowledgeInterrupt()+0x54>
    93a4:	e3a02f4d 	mov	r2, #308	; 0x134
    93a8:	e2810e22 	add	r0, r1, #544	; 0x220
    93ac:	eb0023f6 	bl	1238c <assertion_failed>
    93b0:	00014a10 	.word	0x00014a10

000093b4 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
    93b4:	e1d12000 	bics	r2, r1, r0
    93b8:	13a03000 	movne	r3, #0
    93bc:	13433f20 	movtne	r3, #16160	; 0x3f20
    93c0:	15832028 	strne	r2, [r3, #40]	; 0x28
    93c4:	e0100001 	ands	r0, r0, r1
    93c8:	13a03000 	movne	r3, #0
    93cc:	13433f20 	movtne	r3, #16160	; 0x3f20
    93d0:	1583001c 	strne	r0, [r3, #28]
    93d4:	e12fff1e 	bx	lr

000093d8 <CGPIOPin::ReadAll()>:
    93d8:	e3a03000 	mov	r3, #0
    93dc:	e3433f20 	movt	r3, #16160	; 0x3f20
    93e0:	e5930034 	ldr	r0, [r3, #52]	; 0x34
    93e4:	e12fff1e 	bx	lr

000093e8 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
    93e8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    93ec:	e3074140 	movw	r4, #28992	; 0x7140
    93f0:	e3404001 	movt	r4, #1
    93f4:	e1a05000 	mov	r5, r0
    93f8:	e1a06001 	mov	r6, r1
    93fc:	e5943000 	ldr	r3, [r4]
    9400:	e3530000 	cmp	r3, #0
    9404:	1a000015 	bne	9460 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
    9408:	e5959008 	ldr	r9, [r5, #8]
    940c:	e3560002 	cmp	r6, #2
    9410:	e3a07098 	mov	r7, #152	; 0x98
    9414:	e3437f20 	movt	r7, #16160	; 0x3f20
    9418:	8a000013 	bhi	946c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x84>
    941c:	e3a08000 	mov	r8, #0
    9420:	e3a00005 	mov	r0, #5
    9424:	e3438f20 	movt	r8, #16160	; 0x3f20
    9428:	e5886094 	str	r6, [r8, #148]	; 0x94
    942c:	eb001ae3 	bl	ffc0 <CTimer::SimpleusDelay(unsigned int)>
    9430:	e595300c 	ldr	r3, [r5, #12]
    9434:	e3a00005 	mov	r0, #5
    9438:	e7893007 	str	r3, [r9, r7]
    943c:	eb001adf 	bl	ffc0 <CTimer::SimpleusDelay(unsigned int)>
    9440:	e3a03000 	mov	r3, #0
    9444:	e5883094 	str	r3, [r8, #148]	; 0x94
    9448:	e7893007 	str	r3, [r9, r7]
    944c:	e5943000 	ldr	r3, [r4]
    9450:	e3530000 	cmp	r3, #0
    9454:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    9458:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    945c:	ea0021fd 	b	11c58 <LeaveCritical>
    9460:	e1a00003 	mov	r0, r3
    9464:	eb0021d0 	bl	11bac <EnterCritical>
    9468:	eaffffe6 	b	9408 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
    946c:	e59f1008 	ldr	r1, [pc, #8]	; 947c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x94>
    9470:	e3002165 	movw	r2, #357	; 0x165
    9474:	e2810f8b 	add	r0, r1, #556	; 0x22c
    9478:	eb0023c3 	bl	1238c <assertion_failed>
    947c:	00014a10 	.word	0x00014a10

00009480 <CGPIOPin::SetAlternateFunction(unsigned int)>:
    9480:	e5902004 	ldr	r2, [r0, #4]
    9484:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9488:	e3520035 	cmp	r2, #53	; 0x35
    948c:	8a000022 	bhi	951c <CGPIOPin::SetAlternateFunction(unsigned int)+0x9c>
    9490:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    9494:	e3a04003 	mov	r4, #3
    9498:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    949c:	e1a06001 	mov	r6, r1
    94a0:	e0830293 	umull	r0, r3, r3, r2
    94a4:	e3a0100a 	mov	r1, #10
    94a8:	e3560005 	cmp	r6, #5
    94ac:	e1a03433 	lsr	r3, r3, r4
    94b0:	e283053f 	add	r0, r3, #264241152	; 0xfc00000
    94b4:	e2800702 	add	r0, r0, #524288	; 0x80000
    94b8:	e0632391 	mls	r3, r1, r3, r2
    94bc:	e1a07100 	lsl	r7, r0, #2
    94c0:	e0040394 	mul	r4, r4, r3
    94c4:	8a000018 	bhi	952c <CGPIOPin::SetAlternateFunction(unsigned int)+0xac>
    94c8:	e3075140 	movw	r5, #28992	; 0x7140
    94cc:	e3405001 	movt	r5, #1
    94d0:	e5950000 	ldr	r0, [r5]
    94d4:	e3500000 	cmp	r0, #0
    94d8:	1a00000d 	bne	9514 <CGPIOPin::SetAlternateFunction(unsigned int)+0x94>
    94dc:	e5973000 	ldr	r3, [r7]
    94e0:	e3042a00 	movw	r2, #18944	; 0x4a00
    94e4:	e3402001 	movt	r2, #1
    94e8:	e3a01007 	mov	r1, #7
    94ec:	e0822106 	add	r2, r2, r6, lsl #2
    94f0:	e1c33411 	bic	r3, r3, r1, lsl r4
    94f4:	e5922258 	ldr	r2, [r2, #600]	; 0x258
    94f8:	e1834412 	orr	r4, r3, r2, lsl r4
    94fc:	e5874000 	str	r4, [r7]
    9500:	e5953000 	ldr	r3, [r5]
    9504:	e3530000 	cmp	r3, #0
    9508:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    950c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9510:	ea0021d0 	b	11c58 <LeaveCritical>
    9514:	eb0021a4 	bl	11bac <EnterCritical>
    9518:	eaffffef 	b	94dc <CGPIOPin::SetAlternateFunction(unsigned int)+0x5c>
    951c:	e59f1018 	ldr	r1, [pc, #24]	; 953c <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    9520:	e3002181 	movw	r2, #385	; 0x181
    9524:	e2810020 	add	r0, r1, #32
    9528:	eb002397 	bl	1238c <assertion_failed>
    952c:	e59f1008 	ldr	r1, [pc, #8]	; 953c <CGPIOPin::SetAlternateFunction(unsigned int)+0xbc>
    9530:	e3002185 	movw	r2, #389	; 0x185
    9534:	e2810f8e 	add	r0, r1, #568	; 0x238
    9538:	eb002393 	bl	1238c <assertion_failed>
    953c:	00014a10 	.word	0x00014a10

00009540 <CGPIOPin::SetMode(TGPIOMode, bool)>:
    9540:	e3510009 	cmp	r1, #9
    9544:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9548:	8a000058 	bhi	96b0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x170>
    954c:	e5c01010 	strb	r1, [r0, #16]
    9550:	e1a03001 	mov	r3, r1
    9554:	e2411004 	sub	r1, r1, #4
    9558:	e1a06002 	mov	r6, r2
    955c:	e6ef2071 	uxtb	r2, r1
    9560:	e1a04000 	mov	r4, r0
    9564:	e3520005 	cmp	r2, #5
    9568:	9a00002e 	bls	9628 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>
    956c:	e3530001 	cmp	r3, #1
    9570:	13a02000 	movne	r2, #0
    9574:	02062001 	andeq	r2, r6, #1
    9578:	e3520000 	cmp	r2, #0
    957c:	1a00004f 	bne	96c0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x180>
    9580:	e5943004 	ldr	r3, [r4, #4]
    9584:	e3530035 	cmp	r3, #53	; 0x35
    9588:	8a00004f 	bhi	96cc <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>
    958c:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    9590:	e3078140 	movw	r8, #28992	; 0x7140
    9594:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    9598:	e0852395 	umull	r2, r5, r5, r3
    959c:	e3408001 	movt	r8, #1
    95a0:	e3a0200a 	mov	r2, #10
    95a4:	e1a051a5 	lsr	r5, r5, #3
    95a8:	e5980000 	ldr	r0, [r8]
    95ac:	e285753f 	add	r7, r5, #264241152	; 0xfc00000
    95b0:	e0633592 	mls	r3, r2, r5, r3
    95b4:	e2877702 	add	r7, r7, #524288	; 0x80000
    95b8:	e3500000 	cmp	r0, #0
    95bc:	e3a05003 	mov	r5, #3
    95c0:	e1a07107 	lsl	r7, r7, #2
    95c4:	e0050395 	mul	r5, r5, r3
    95c8:	1a00001f 	bne	964c <CGPIOPin::SetMode(TGPIOMode, bool)+0x10c>
    95cc:	e5d42010 	ldrb	r2, [r4, #16]
    95d0:	e3a01007 	mov	r1, #7
    95d4:	e5973000 	ldr	r3, [r7]
    95d8:	e2422001 	sub	r2, r2, #1
    95dc:	e16f2f12 	clz	r2, r2
    95e0:	e1c33511 	bic	r3, r3, r1, lsl r5
    95e4:	e1a022a2 	lsr	r2, r2, #5
    95e8:	e1835512 	orr	r5, r3, r2, lsl r5
    95ec:	e5875000 	str	r5, [r7]
    95f0:	e5983000 	ldr	r3, [r8]
    95f4:	e3530000 	cmp	r3, #0
    95f8:	1a00000f 	bne	963c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>
    95fc:	e3560000 	cmp	r6, #0
    9600:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9604:	e5d43010 	ldrb	r3, [r4, #16]
    9608:	e3530003 	cmp	r3, #3
    960c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    9610:	ea000003 	b	9624 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
    9614:	00009684 	.word	0x00009684
    9618:	00009674 	.word	0x00009674
    961c:	00009664 	.word	0x00009664
    9620:	00009654 	.word	0x00009654
    9624:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9628:	e3560000 	cmp	r6, #0
    962c:	1a000018 	bne	9694 <CGPIOPin::SetMode(TGPIOMode, bool)+0x154>
    9630:	e1a00004 	mov	r0, r4
    9634:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9638:	eaffff90 	b	9480 <CGPIOPin::SetAlternateFunction(unsigned int)>
    963c:	eb002185 	bl	11c58 <LeaveCritical>
    9640:	e3560000 	cmp	r6, #0
    9644:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    9648:	eaffffed 	b	9604 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc4>
    964c:	eb002156 	bl	11bac <EnterCritical>
    9650:	eaffffdd 	b	95cc <CGPIOPin::SetMode(TGPIOMode, bool)+0x8c>
    9654:	e1a00004 	mov	r0, r4
    9658:	e3a01001 	mov	r1, #1
    965c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9660:	eaffff60 	b	93e8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9664:	e1a00004 	mov	r0, r4
    9668:	e3a01002 	mov	r1, #2
    966c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9670:	eaffff5c 	b	93e8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9674:	e1a00004 	mov	r0, r4
    9678:	e3a01000 	mov	r1, #0
    967c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9680:	eafffda2 	b	8d10 <CGPIOPin::Write(unsigned int)>
    9684:	e1a00004 	mov	r0, r4
    9688:	e3a01000 	mov	r1, #0
    968c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    9690:	eaffff54 	b	93e8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    9694:	e3a01000 	mov	r1, #0
    9698:	ebffff52 	bl	93e8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    969c:	e5d43010 	ldrb	r3, [r4, #16]
    96a0:	e1a00004 	mov	r0, r4
    96a4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    96a8:	e2431004 	sub	r1, r3, #4
    96ac:	eaffff73 	b	9480 <CGPIOPin::SetAlternateFunction(unsigned int)>
    96b0:	e59f1024 	ldr	r1, [pc, #36]	; 96dc <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
    96b4:	e3a0204f 	mov	r2, #79	; 0x4f
    96b8:	e2810e26 	add	r0, r1, #608	; 0x260
    96bc:	eb002332 	bl	1238c <assertion_failed>
    96c0:	e3a01000 	mov	r1, #0
    96c4:	ebffff47 	bl	93e8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    96c8:	eaffffac 	b	9580 <CGPIOPin::SetMode(TGPIOMode, bool)+0x40>
    96cc:	e59f1008 	ldr	r1, [pc, #8]	; 96dc <CGPIOPin::SetMode(TGPIOMode, bool)+0x19c>
    96d0:	e3a02068 	mov	r2, #104	; 0x68
    96d4:	e2810020 	add	r0, r1, #32
    96d8:	eb00232b 	bl	1238c <assertion_failed>
    96dc:	00014a10 	.word	0x00014a10

000096e0 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
    96e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    96e4:	e3510035 	cmp	r1, #53	; 0x35
    96e8:	e5803018 	str	r3, [r0, #24]
    96ec:	e3a03000 	mov	r3, #0
    96f0:	e59f7088 	ldr	r7, [pc, #136]	; 9780 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xa0>
    96f4:	e1a05001 	mov	r5, r1
    96f8:	e580301c 	str	r3, [r0, #28]
    96fc:	e3a03006 	mov	r3, #6
    9700:	e5c03025 	strb	r3, [r0, #37]	; 0x25
    9704:	e1a04000 	mov	r4, r0
    9708:	e5c03026 	strb	r3, [r0, #38]	; 0x26
    970c:	e3a0300a 	mov	r3, #10
    9710:	e5807000 	str	r7, [r0]
    9714:	e1a06002 	mov	r6, r2
    9718:	e5801004 	str	r1, [r0, #4]
    971c:	e5c03010 	strb	r3, [r0, #16]
    9720:	8a00000b 	bhi	9754 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
    9724:	e3a02001 	mov	r2, #1
    9728:	e1a00004 	mov	r0, r4
    972c:	e1a032a5 	lsr	r3, r5, #5
    9730:	e205501f 	and	r5, r5, #31
    9734:	e1a01006 	mov	r1, r6
    9738:	e1a03103 	lsl	r3, r3, #2
    973c:	e1a05512 	lsl	r5, r2, r5
    9740:	e5843008 	str	r3, [r4, #8]
    9744:	e584500c 	str	r5, [r4, #12]
    9748:	ebffff7c 	bl	9540 <CGPIOPin::SetMode(TGPIOMode, bool)>
    974c:	e1a00004 	mov	r0, r4
    9750:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9754:	eb000664 	bl	b0ec <CMachineInfo::Get()>
    9758:	e6ef1075 	uxtb	r1, r5
    975c:	eb0005cd 	bl	ae98 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
    9760:	e5840004 	str	r0, [r4, #4]
    9764:	e3500035 	cmp	r0, #53	; 0x35
    9768:	e1a05000 	mov	r5, r0
    976c:	9affffec 	bls	9724 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
    9770:	e3a02047 	mov	r2, #71	; 0x47
    9774:	e2871008 	add	r1, r7, #8
    9778:	e2870028 	add	r0, r7, #40	; 0x28
    977c:	eb002302 	bl	1238c <assertion_failed>
    9780:	00014a08 	.word	0x00014a08

00009784 <CGPIOPin::InterruptHandler()>:
    9784:	e5d03010 	ldrb	r3, [r0, #16]
    9788:	e92d4010 	push	{r4, lr}
    978c:	e2432002 	sub	r2, r3, #2
    9790:	e3530000 	cmp	r3, #0
    9794:	13520001 	cmpne	r2, #1
    9798:	8a000013 	bhi	97ec <CGPIOPin::InterruptHandler()+0x68>
    979c:	e5d03025 	ldrb	r3, [r0, #37]	; 0x25
    97a0:	e3530005 	cmp	r3, #5
    97a4:	8a000005 	bhi	97c0 <CGPIOPin::InterruptHandler()+0x3c>
    97a8:	e590301c 	ldr	r3, [r0, #28]
    97ac:	e3530000 	cmp	r3, #0
    97b0:	0a000009 	beq	97dc <CGPIOPin::InterruptHandler()+0x58>
    97b4:	e8bd4010 	pop	{r4, lr}
    97b8:	e5900020 	ldr	r0, [r0, #32]
    97bc:	e12fff13 	bx	r3
    97c0:	e5d03026 	ldrb	r3, [r0, #38]	; 0x26
    97c4:	e3530005 	cmp	r3, #5
    97c8:	9afffff6 	bls	97a8 <CGPIOPin::InterruptHandler()+0x24>
    97cc:	e59f1028 	ldr	r1, [pc, #40]	; 97fc <CGPIOPin::InterruptHandler()+0x78>
    97d0:	e3002195 	movw	r2, #405	; 0x195
    97d4:	e2810f9e 	add	r0, r1, #632	; 0x278
    97d8:	eb0022eb 	bl	1238c <assertion_failed>
    97dc:	e59f1018 	ldr	r1, [pc, #24]	; 97fc <CGPIOPin::InterruptHandler()+0x78>
    97e0:	e3a02f66 	mov	r2, #408	; 0x198
    97e4:	e2810f5b 	add	r0, r1, #364	; 0x16c
    97e8:	eb0022e7 	bl	1238c <assertion_failed>
    97ec:	e59f1008 	ldr	r1, [pc, #8]	; 97fc <CGPIOPin::InterruptHandler()+0x78>
    97f0:	e3002192 	movw	r2, #402	; 0x192
    97f4:	e2810078 	add	r0, r1, #120	; 0x78
    97f8:	eb0022e3 	bl	1238c <assertion_failed>
    97fc:	00014a10 	.word	0x00014a10

00009800 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
    9800:	e3500035 	cmp	r0, #53	; 0x35
    9804:	e92d4070 	push	{r4, r5, r6, lr}
    9808:	8a00001a 	bhi	9878 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
    980c:	e3076140 	movw	r6, #28992	; 0x7140
    9810:	e3a04013 	mov	r4, #19
    9814:	e3406001 	movt	r6, #1
    9818:	e200501f 	and	r5, r0, #31
    981c:	e3404fc8 	movt	r4, #4040	; 0xfc8
    9820:	e3a02001 	mov	r2, #1
    9824:	e08442a0 	add	r4, r4, r0, lsr #5
    9828:	e5960000 	ldr	r0, [r6]
    982c:	e1a04104 	lsl	r4, r4, #2
    9830:	e1a05512 	lsl	r5, r2, r5
    9834:	e3500000 	cmp	r0, #0
    9838:	1a00000c 	bne	9870 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
    983c:	e1e02005 	mvn	r2, r5
    9840:	e3a0108b 	mov	r1, #139	; 0x8b
    9844:	e3431f20 	movt	r1, #16160	; 0x3f20
    9848:	e5943000 	ldr	r3, [r4]
    984c:	e0033002 	and	r3, r3, r2
    9850:	e484300c 	str	r3, [r4], #12
    9854:	e1540001 	cmp	r4, r1
    9858:	9afffffa 	bls	9848 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
    985c:	e5963000 	ldr	r3, [r6]
    9860:	e3530000 	cmp	r3, #0
    9864:	08bd8070 	popeq	{r4, r5, r6, pc}
    9868:	e8bd4070 	pop	{r4, r5, r6, lr}
    986c:	ea0020f9 	b	11c58 <LeaveCritical>
    9870:	eb0020cd 	bl	11bac <EnterCritical>
    9874:	eafffff0 	b	983c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
    9878:	e59f1008 	ldr	r1, [pc, #8]	; 9888 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
    987c:	e300219e 	movw	r2, #414	; 0x19e
    9880:	e2810fb1 	add	r0, r1, #708	; 0x2c4
    9884:	eb0022c0 	bl	1238c <assertion_failed>
    9888:	00014a10 	.word	0x00014a10

0000988c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
    988c:	e3073140 	movw	r3, #28992	; 0x7140
    9890:	e3a02001 	mov	r2, #1
    9894:	e3403001 	movt	r3, #1
    9898:	e5832000 	str	r2, [r3]
    989c:	e12fff1e 	bx	lr

000098a0 <CKernelOptions::~CKernelOptions()>:
    98a0:	e3073144 	movw	r3, #28996	; 0x7144
    98a4:	e3a02000 	mov	r2, #0
    98a8:	e3403001 	movt	r3, #1
    98ac:	e5832000 	str	r2, [r3]
    98b0:	e12fff1e 	bx	lr

000098b4 <CKernelOptions::GetWidth() const>:
    98b4:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    98b8:	e12fff1e 	bx	lr

000098bc <CKernelOptions::GetHeight() const>:
    98bc:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    98c0:	e12fff1e 	bx	lr

000098c4 <CKernelOptions::GetLogDevice() const>:
    98c4:	e2800e81 	add	r0, r0, #2064	; 0x810
    98c8:	e2800008 	add	r0, r0, #8
    98cc:	e12fff1e 	bx	lr

000098d0 <CKernelOptions::GetLogLevel() const>:
    98d0:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    98d4:	e12fff1e 	bx	lr

000098d8 <CKernelOptions::GetKeyMap() const>:
    98d8:	e2800e83 	add	r0, r0, #2096	; 0x830
    98dc:	e12fff1e 	bx	lr

000098e0 <CKernelOptions::GetUSBPowerDelay() const>:
    98e0:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    98e4:	e12fff1e 	bx	lr

000098e8 <CKernelOptions::GetUSBFullSpeed() const>:
    98e8:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    98ec:	e12fff1e 	bx	lr

000098f0 <CKernelOptions::GetUSBBoost() const>:
    98f0:	e5d00839 	ldrb	r0, [r0, #2105]	; 0x839
    98f4:	e12fff1e 	bx	lr

000098f8 <CKernelOptions::GetUSBIgnore() const>:
    98f8:	e2800e83 	add	r0, r0, #2096	; 0x830
    98fc:	e280000a 	add	r0, r0, #10
    9900:	e12fff1e 	bx	lr

00009904 <CKernelOptions::GetSoundDevice() const>:
    9904:	e2800d21 	add	r0, r0, #2112	; 0x840
    9908:	e280000e 	add	r0, r0, #14
    990c:	e12fff1e 	bx	lr

00009910 <CKernelOptions::GetSoundOption() const>:
    9910:	e5900864 	ldr	r0, [r0, #2148]	; 0x864
    9914:	e12fff1e 	bx	lr

00009918 <CKernelOptions::GetCPUSpeed() const>:
    9918:	e5d00868 	ldrb	r0, [r0, #2152]	; 0x868
    991c:	e12fff1e 	bx	lr

00009920 <CKernelOptions::GetSoCMaxTemp() const>:
    9920:	e590086c 	ldr	r0, [r0, #2156]	; 0x86c
    9924:	e12fff1e 	bx	lr

00009928 <CKernelOptions::GetGPIOFanPin() const>:
    9928:	e5900870 	ldr	r0, [r0, #2160]	; 0x870
    992c:	e12fff1e 	bx	lr

00009930 <CKernelOptions::GetTouchScreen() const>:
    9930:	e1a03000 	mov	r3, r0
    9934:	e5d00874 	ldrb	r0, [r0, #2164]	; 0x874
    9938:	e3500000 	cmp	r0, #0
    993c:	12830e87 	addne	r0, r3, #2160	; 0x870
    9940:	12800008 	addne	r0, r0, #8
    9944:	e12fff1e 	bx	lr

00009948 <CKernelOptions::Get()>:
    9948:	e3073144 	movw	r3, #28996	; 0x7144
    994c:	e3403001 	movt	r3, #1
    9950:	e5930000 	ldr	r0, [r3]
    9954:	e12fff1e 	bx	lr

00009958 <CKernelOptions::GetToken()>:
    9958:	e1a01000 	mov	r1, r0
    995c:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
    9960:	e1d030d0 	ldrsb	r3, [r0]
    9964:	e3530000 	cmp	r3, #0
    9968:	1a000005 	bne	9984 <CKernelOptions::GetToken()+0x2c>
    996c:	ea000017 	b	99d0 <CKernelOptions::GetToken()+0x78>
    9970:	e2800001 	add	r0, r0, #1
    9974:	e581080c 	str	r0, [r1, #2060]	; 0x80c
    9978:	e1d030d0 	ldrsb	r3, [r0]
    997c:	e3530000 	cmp	r3, #0
    9980:	0a000012 	beq	99d0 <CKernelOptions::GetToken()+0x78>
    9984:	e3530020 	cmp	r3, #32
    9988:	0afffff8 	beq	9970 <CKernelOptions::GetToken()+0x18>
    998c:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
    9990:	e1d320d0 	ldrsb	r2, [r3]
    9994:	e3520000 	cmp	r2, #0
    9998:	1a000005 	bne	99b4 <CKernelOptions::GetToken()+0x5c>
    999c:	e12fff1e 	bx	lr
    99a0:	e2833001 	add	r3, r3, #1
    99a4:	e581380c 	str	r3, [r1, #2060]	; 0x80c
    99a8:	e1d320d0 	ldrsb	r2, [r3]
    99ac:	e3520000 	cmp	r2, #0
    99b0:	012fff1e 	bxeq	lr
    99b4:	e3520020 	cmp	r2, #32
    99b8:	1afffff8 	bne	99a0 <CKernelOptions::GetToken()+0x48>
    99bc:	e283c001 	add	ip, r3, #1
    99c0:	e3a02000 	mov	r2, #0
    99c4:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
    99c8:	e5c32000 	strb	r2, [r3]
    99cc:	e12fff1e 	bx	lr
    99d0:	e3a00000 	mov	r0, #0
    99d4:	e12fff1e 	bx	lr

000099d8 <CKernelOptions::GetOptionValue(char*)>:
    99d8:	e1d030d0 	ldrsb	r3, [r0]
    99dc:	e3530000 	cmp	r3, #0
    99e0:	1a000003 	bne	99f4 <CKernelOptions::GetOptionValue(char*)+0x1c>
    99e4:	ea000007 	b	9a08 <CKernelOptions::GetOptionValue(char*)+0x30>
    99e8:	e1f030d1 	ldrsb	r3, [r0, #1]!
    99ec:	e3530000 	cmp	r3, #0
    99f0:	0a000004 	beq	9a08 <CKernelOptions::GetOptionValue(char*)+0x30>
    99f4:	e353003d 	cmp	r3, #61	; 0x3d
    99f8:	1afffffa 	bne	99e8 <CKernelOptions::GetOptionValue(char*)+0x10>
    99fc:	e3a03000 	mov	r3, #0
    9a00:	e4c03001 	strb	r3, [r0], #1
    9a04:	e12fff1e 	bx	lr
    9a08:	e1a00003 	mov	r0, r3
    9a0c:	e12fff1e 	bx	lr

00009a10 <CKernelOptions::GetDecimal(char*)>:
    9a10:	e3500000 	cmp	r0, #0
    9a14:	0a00001a 	beq	9a84 <CKernelOptions::GetDecimal(char*)+0x74>
    9a18:	e1d030d0 	ldrsb	r3, [r0]
    9a1c:	e3530000 	cmp	r3, #0
    9a20:	0a000017 	beq	9a84 <CKernelOptions::GetDecimal(char*)+0x74>
    9a24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9a28:	e280c001 	add	ip, r0, #1
    9a2c:	e3a01000 	mov	r1, #0
    9a30:	e3a0e00a 	mov	lr, #10
    9a34:	ea00000a 	b	9a64 <CKernelOptions::GetDecimal(char*)+0x54>
    9a38:	e242202f 	sub	r2, r2, #47	; 0x2f
    9a3c:	e16f2f12 	clz	r2, r2
    9a40:	e1a022a2 	lsr	r2, r2, #5
    9a44:	e1500001 	cmp	r0, r1
    9a48:	33822001 	orrcc	r2, r2, #1
    9a4c:	e1a01000 	mov	r1, r0
    9a50:	e3520000 	cmp	r2, #0
    9a54:	1a000008 	bne	9a7c <CKernelOptions::GetDecimal(char*)+0x6c>
    9a58:	e0dc30d1 	ldrsb	r3, [ip], #1
    9a5c:	e3530000 	cmp	r3, #0
    9a60:	049df004 	popeq	{pc}		; (ldreq pc, [sp], #4)
    9a64:	e022319e 	mla	r2, lr, r1, r3
    9a68:	e2433030 	sub	r3, r3, #48	; 0x30
    9a6c:	e6ef3073 	uxtb	r3, r3
    9a70:	e2420030 	sub	r0, r2, #48	; 0x30
    9a74:	e3530009 	cmp	r3, #9
    9a78:	9affffee 	bls	9a38 <CKernelOptions::GetDecimal(char*)+0x28>
    9a7c:	e3e00000 	mvn	r0, #0
    9a80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9a84:	e3e00000 	mvn	r0, #0
    9a88:	e12fff1e 	bx	lr

00009a8c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
    9a8c:	e3520000 	cmp	r2, #0
    9a90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9a94:	e24dd008 	sub	sp, sp, #8
    9a98:	028d7004 	addeq	r7, sp, #4
    9a9c:	0a000023 	beq	9b30 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa4>
    9aa0:	e3048da8 	movw	r8, #19880	; 0x4da8
    9aa4:	e1a06001 	mov	r6, r1
    9aa8:	e3408001 	movt	r8, #1
    9aac:	e2425001 	sub	r5, r2, #1
    9ab0:	e28d7004 	add	r7, sp, #4
    9ab4:	e3a0400a 	mov	r4, #10
    9ab8:	e1a02007 	mov	r2, r7
    9abc:	e1a01008 	mov	r1, r8
    9ac0:	eb001a92 	bl	10510 <strtok_r>
    9ac4:	e250c000 	subs	ip, r0, #0
    9ac8:	0a000021 	beq	9b54 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9acc:	e1dc00d0 	ldrsb	r0, [ip]
    9ad0:	e3500000 	cmp	r0, #0
    9ad4:	0a00001f 	beq	9b58 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xcc>
    9ad8:	e28cc001 	add	ip, ip, #1
    9adc:	e3a01000 	mov	r1, #0
    9ae0:	e0230194 	mla	r3, r4, r1, r0
    9ae4:	e2400030 	sub	r0, r0, #48	; 0x30
    9ae8:	e6ef0070 	uxtb	r0, r0
    9aec:	e2432030 	sub	r2, r3, #48	; 0x30
    9af0:	e3500009 	cmp	r0, #9
    9af4:	8a000016 	bhi	9b54 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9af8:	e243302f 	sub	r3, r3, #47	; 0x2f
    9afc:	e16f3f13 	clz	r3, r3
    9b00:	e1a032a3 	lsr	r3, r3, #5
    9b04:	e1520001 	cmp	r2, r1
    9b08:	33833001 	orrcc	r3, r3, #1
    9b0c:	e1a01002 	mov	r1, r2
    9b10:	e3530000 	cmp	r3, #0
    9b14:	1a00000e 	bne	9b54 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
    9b18:	e0dc00d1 	ldrsb	r0, [ip], #1
    9b1c:	e3500000 	cmp	r0, #0
    9b20:	1affffee 	bne	9ae0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x54>
    9b24:	e2555001 	subs	r5, r5, #1
    9b28:	e4862004 	str	r2, [r6], #4
    9b2c:	2affffe1 	bcs	9ab8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x2c>
    9b30:	e3041da8 	movw	r1, #19880	; 0x4da8
    9b34:	e1a02007 	mov	r2, r7
    9b38:	e3401001 	movt	r1, #1
    9b3c:	e3a00000 	mov	r0, #0
    9b40:	eb001a72 	bl	10510 <strtok_r>
    9b44:	e16f0f10 	clz	r0, r0
    9b48:	e1a002a0 	lsr	r0, r0, #5
    9b4c:	e28dd008 	add	sp, sp, #8
    9b50:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9b54:	e3a00000 	mov	r0, #0
    9b58:	e28dd008 	add	sp, sp, #8
    9b5c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009b60 <CKernelOptions::CKernelOptions()>:
    9b60:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b64:	e3002838 	movw	r2, #2104	; 0x838
    9b68:	e1a04000 	mov	r4, r0
    9b6c:	e2806e81 	add	r6, r0, #2064	; 0x810
    9b70:	e3a03004 	mov	r3, #4
    9b74:	e3a05000 	mov	r5, #0
    9b78:	e580382c 	str	r3, [r0, #2092]	; 0x82c
    9b7c:	e2866008 	add	r6, r6, #8
    9b80:	e5805810 	str	r5, [r0, #2064]	; 0x810
    9b84:	e3a0303c 	mov	r3, #60	; 0x3c
    9b88:	e5805814 	str	r5, [r0, #2068]	; 0x814
    9b8c:	e3041ce8 	movw	r1, #19688	; 0x4ce8
    9b90:	e5805834 	str	r5, [r0, #2100]	; 0x834
    9b94:	e24dd01c 	sub	sp, sp, #28
    9b98:	e18050b2 	strh	r5, [r0, r2]
    9b9c:	e2848e83 	add	r8, r4, #2096	; 0x830
    9ba0:	e580386c 	str	r3, [r0, #2156]	; 0x86c
    9ba4:	e5805864 	str	r5, [r0, #2148]	; 0x864
    9ba8:	e5c05868 	strb	r5, [r0, #2152]	; 0x868
    9bac:	e5805870 	str	r5, [r0, #2160]	; 0x870
    9bb0:	e1a00006 	mov	r0, r6
    9bb4:	e3401001 	movt	r1, #1
    9bb8:	e5c45874 	strb	r5, [r4, #2164]	; 0x874
    9bbc:	eb001a05 	bl	103d8 <strcpy>
    9bc0:	e3041cf0 	movw	r1, #19696	; 0x4cf0
    9bc4:	e1a00008 	mov	r0, r8
    9bc8:	e3401001 	movt	r1, #1
    9bcc:	eb001a01 	bl	103d8 <strcpy>
    9bd0:	e5c4583a 	strb	r5, [r4, #2106]	; 0x83a
    9bd4:	e3073144 	movw	r3, #28996	; 0x7144
    9bd8:	e3403001 	movt	r3, #1
    9bdc:	e1a01005 	mov	r1, r5
    9be0:	e5c4584e 	strb	r5, [r4, #2126]	; 0x84e
    9be4:	e28d0010 	add	r0, sp, #16
    9be8:	e5834000 	str	r4, [r3]
    9bec:	eb002339 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    9bf0:	e58d5000 	str	r5, [sp]
    9bf4:	e3a01001 	mov	r1, #1
    9bf8:	e3401005 	movt	r1, #5
    9bfc:	e300380c 	movw	r3, #2060	; 0x80c
    9c00:	e1a02004 	mov	r2, r4
    9c04:	e28d0010 	add	r0, sp, #16
    9c08:	eb002378 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    9c0c:	e1500005 	cmp	r0, r5
    9c10:	0a00002a 	beq	9cc0 <CKernelOptions::CKernelOptions()+0x160>
    9c14:	e5943008 	ldr	r3, [r4, #8]
    9c18:	e3530b02 	cmp	r3, #2048	; 0x800
    9c1c:	2a000027 	bcs	9cc0 <CKernelOptions::CKernelOptions()+0x160>
    9c20:	e0843003 	add	r3, r4, r3
    9c24:	e3047cfc 	movw	r7, #19708	; 0x4cfc
    9c28:	e3407001 	movt	r7, #1
    9c2c:	e3049d04 	movw	r9, #19716	; 0x4d04
    9c30:	e5c3500c 	strb	r5, [r3, #12]
    9c34:	e3045cf4 	movw	r5, #19700	; 0x4cf4
    9c38:	e3405001 	movt	r5, #1
    9c3c:	e284300c 	add	r3, r4, #12
    9c40:	e3409001 	movt	r9, #1
    9c44:	e584380c 	str	r3, [r4, #2060]	; 0x80c
    9c48:	e1a00004 	mov	r0, r4
    9c4c:	ebffff41 	bl	9958 <CKernelOptions::GetToken()>
    9c50:	e250b000 	subs	fp, r0, #0
    9c54:	0a000019 	beq	9cc0 <CKernelOptions::CKernelOptions()+0x160>
    9c58:	e1db30d0 	ldrsb	r3, [fp]
    9c5c:	e3530000 	cmp	r3, #0
    9c60:	0a00001b 	beq	9cd4 <CKernelOptions::CKernelOptions()+0x174>
    9c64:	e1a0100b 	mov	r1, fp
    9c68:	ea000002 	b	9c78 <CKernelOptions::CKernelOptions()+0x118>
    9c6c:	e1f130d1 	ldrsb	r3, [r1, #1]!
    9c70:	e3530000 	cmp	r3, #0
    9c74:	0a000016 	beq	9cd4 <CKernelOptions::CKernelOptions()+0x174>
    9c78:	e353003d 	cmp	r3, #61	; 0x3d
    9c7c:	1afffffa 	bne	9c6c <CKernelOptions::CKernelOptions()+0x10c>
    9c80:	e1a0a001 	mov	sl, r1
    9c84:	e3a03000 	mov	r3, #0
    9c88:	e4ca3001 	strb	r3, [sl], #1
    9c8c:	e1a01005 	mov	r1, r5
    9c90:	e1a0000b 	mov	r0, fp
    9c94:	eb001934 	bl	1016c <strcmp>
    9c98:	e3500000 	cmp	r0, #0
    9c9c:	1a00000e 	bne	9cdc <CKernelOptions::CKernelOptions()+0x17c>
    9ca0:	e1a0000a 	mov	r0, sl
    9ca4:	ebffff59 	bl	9a10 <CKernelOptions::GetDecimal(char*)>
    9ca8:	e3700001 	cmn	r0, #1
    9cac:	15840810 	strne	r0, [r4, #2064]	; 0x810
    9cb0:	e1a00004 	mov	r0, r4
    9cb4:	ebffff27 	bl	9958 <CKernelOptions::GetToken()>
    9cb8:	e250b000 	subs	fp, r0, #0
    9cbc:	1affffe5 	bne	9c58 <CKernelOptions::CKernelOptions()+0xf8>
    9cc0:	e28d0010 	add	r0, sp, #16
    9cc4:	eb00230a 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
    9cc8:	e1a00004 	mov	r0, r4
    9ccc:	e28dd01c 	add	sp, sp, #28
    9cd0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9cd4:	e1a0a003 	mov	sl, r3
    9cd8:	eaffffeb 	b	9c8c <CKernelOptions::CKernelOptions()+0x12c>
    9cdc:	e1a01007 	mov	r1, r7
    9ce0:	e1a0000b 	mov	r0, fp
    9ce4:	eb001920 	bl	1016c <strcmp>
    9ce8:	e3500000 	cmp	r0, #0
    9cec:	1a000004 	bne	9d04 <CKernelOptions::CKernelOptions()+0x1a4>
    9cf0:	e1a0000a 	mov	r0, sl
    9cf4:	ebffff45 	bl	9a10 <CKernelOptions::GetDecimal(char*)>
    9cf8:	e3700001 	cmn	r0, #1
    9cfc:	15840814 	strne	r0, [r4, #2068]	; 0x814
    9d00:	eaffffd0 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9d04:	e1a01009 	mov	r1, r9
    9d08:	e1a0000b 	mov	r0, fp
    9d0c:	eb001916 	bl	1016c <strcmp>
    9d10:	e2503000 	subs	r3, r0, #0
    9d14:	e58d300c 	str	r3, [sp, #12]
    9d18:	0a00000a 	beq	9d48 <CKernelOptions::CKernelOptions()+0x1e8>
    9d1c:	e3041d0c 	movw	r1, #19724	; 0x4d0c
    9d20:	e1a0000b 	mov	r0, fp
    9d24:	e3401001 	movt	r1, #1
    9d28:	eb00190f 	bl	1016c <strcmp>
    9d2c:	e3500000 	cmp	r0, #0
    9d30:	1a00000b 	bne	9d64 <CKernelOptions::CKernelOptions()+0x204>
    9d34:	e1a0000a 	mov	r0, sl
    9d38:	ebffff34 	bl	9a10 <CKernelOptions::GetDecimal(char*)>
    9d3c:	e3500004 	cmp	r0, #4
    9d40:	9584082c 	strls	r0, [r4, #2092]	; 0x82c
    9d44:	eaffffbf 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9d48:	e1a0100a 	mov	r1, sl
    9d4c:	e3a02013 	mov	r2, #19
    9d50:	e1a00006 	mov	r0, r6
    9d54:	eb0019aa 	bl	10404 <strncpy>
    9d58:	e59d300c 	ldr	r3, [sp, #12]
    9d5c:	e5c4382b 	strb	r3, [r4, #2091]	; 0x82b
    9d60:	eaffffb8 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9d64:	e3041d18 	movw	r1, #19736	; 0x4d18
    9d68:	e1a0000b 	mov	r0, fp
    9d6c:	e3401001 	movt	r1, #1
    9d70:	eb0018fd 	bl	1016c <strcmp>
    9d74:	e2503000 	subs	r3, r0, #0
    9d78:	e58d300c 	str	r3, [sp, #12]
    9d7c:	0a00000c 	beq	9db4 <CKernelOptions::CKernelOptions()+0x254>
    9d80:	e3041d20 	movw	r1, #19744	; 0x4d20
    9d84:	e1a0000b 	mov	r0, fp
    9d88:	e3401001 	movt	r1, #1
    9d8c:	eb0018f6 	bl	1016c <strcmp>
    9d90:	e3500000 	cmp	r0, #0
    9d94:	1a00000d 	bne	9dd0 <CKernelOptions::CKernelOptions()+0x270>
    9d98:	e1a0000a 	mov	r0, sl
    9d9c:	ebffff1b 	bl	9a10 <CKernelOptions::GetDecimal(char*)>
    9da0:	e24010c8 	sub	r1, r0, #200	; 0xc8
    9da4:	e3012e78 	movw	r2, #7800	; 0x1e78
    9da8:	e1510002 	cmp	r1, r2
    9dac:	95840834 	strls	r0, [r4, #2100]	; 0x834
    9db0:	eaffffa4 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9db4:	e1a0100a 	mov	r1, sl
    9db8:	e3a02002 	mov	r2, #2
    9dbc:	e1a00008 	mov	r0, r8
    9dc0:	eb00198f 	bl	10404 <strncpy>
    9dc4:	e59d300c 	ldr	r3, [sp, #12]
    9dc8:	e5c43832 	strb	r3, [r4, #2098]	; 0x832
    9dcc:	eaffff9d 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9dd0:	e3041d30 	movw	r1, #19760	; 0x4d30
    9dd4:	e1a0000b 	mov	r0, fp
    9dd8:	e3401001 	movt	r1, #1
    9ddc:	eb0018e2 	bl	1016c <strcmp>
    9de0:	e3500000 	cmp	r0, #0
    9de4:	1a000007 	bne	9e08 <CKernelOptions::CKernelOptions()+0x2a8>
    9de8:	e3041d3c 	movw	r1, #19772	; 0x4d3c
    9dec:	e1a0000a 	mov	r0, sl
    9df0:	e3401001 	movt	r1, #1
    9df4:	eb0018dc 	bl	1016c <strcmp>
    9df8:	e3500000 	cmp	r0, #0
    9dfc:	03a03001 	moveq	r3, #1
    9e00:	05c43838 	strbeq	r3, [r4, #2104]	; 0x838
    9e04:	eaffff8f 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9e08:	e3041d44 	movw	r1, #19780	; 0x4d44
    9e0c:	e1a0000b 	mov	r0, fp
    9e10:	e3401001 	movt	r1, #1
    9e14:	eb0018d4 	bl	1016c <strcmp>
    9e18:	e3500000 	cmp	r0, #0
    9e1c:	1a000007 	bne	9e40 <CKernelOptions::CKernelOptions()+0x2e0>
    9e20:	e3041d50 	movw	r1, #19792	; 0x4d50
    9e24:	e1a0000a 	mov	r0, sl
    9e28:	e3401001 	movt	r1, #1
    9e2c:	eb0018ce 	bl	1016c <strcmp>
    9e30:	e3500000 	cmp	r0, #0
    9e34:	03a03001 	moveq	r3, #1
    9e38:	05c43839 	strbeq	r3, [r4, #2105]	; 0x839
    9e3c:	eaffff81 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9e40:	e3041d58 	movw	r1, #19800	; 0x4d58
    9e44:	e1a0000b 	mov	r0, fp
    9e48:	e3401001 	movt	r1, #1
    9e4c:	eb0018c6 	bl	1016c <strcmp>
    9e50:	e2503000 	subs	r3, r0, #0
    9e54:	e58d300c 	str	r3, [sp, #12]
    9e58:	1a000007 	bne	9e7c <CKernelOptions::CKernelOptions()+0x31c>
    9e5c:	e2840e83 	add	r0, r4, #2096	; 0x830
    9e60:	e1a0100a 	mov	r1, sl
    9e64:	e280000a 	add	r0, r0, #10
    9e68:	e3a02013 	mov	r2, #19
    9e6c:	eb001964 	bl	10404 <strncpy>
    9e70:	e59d300c 	ldr	r3, [sp, #12]
    9e74:	e5c4384d 	strb	r3, [r4, #2125]	; 0x84d
    9e78:	eaffff72 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9e7c:	e3041d64 	movw	r1, #19812	; 0x4d64
    9e80:	e1a0000b 	mov	r0, fp
    9e84:	e3401001 	movt	r1, #1
    9e88:	eb0018b7 	bl	1016c <strcmp>
    9e8c:	e3500000 	cmp	r0, #0
    9e90:	1a000007 	bne	9eb4 <CKernelOptions::CKernelOptions()+0x354>
    9e94:	e2840d21 	add	r0, r4, #2112	; 0x840
    9e98:	e1a0100a 	mov	r1, sl
    9e9c:	e280000e 	add	r0, r0, #14
    9ea0:	e3a02013 	mov	r2, #19
    9ea4:	eb001956 	bl	10404 <strncpy>
    9ea8:	e3a03000 	mov	r3, #0
    9eac:	e5c43861 	strb	r3, [r4, #2145]	; 0x861
    9eb0:	eaffff64 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9eb4:	e3041d70 	movw	r1, #19824	; 0x4d70
    9eb8:	e1a0000b 	mov	r0, fp
    9ebc:	e3401001 	movt	r1, #1
    9ec0:	eb0018a9 	bl	1016c <strcmp>
    9ec4:	e3500000 	cmp	r0, #0
    9ec8:	1a000004 	bne	9ee0 <CKernelOptions::CKernelOptions()+0x380>
    9ecc:	e1a0000a 	mov	r0, sl
    9ed0:	ebfffece 	bl	9a10 <CKernelOptions::GetDecimal(char*)>
    9ed4:	e3500002 	cmp	r0, #2
    9ed8:	95840864 	strls	r0, [r4, #2148]	; 0x864
    9edc:	eaffff59 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9ee0:	e3041d7c 	movw	r1, #19836	; 0x4d7c
    9ee4:	e1a0000b 	mov	r0, fp
    9ee8:	e3401001 	movt	r1, #1
    9eec:	eb00189e 	bl	1016c <strcmp>
    9ef0:	e3500000 	cmp	r0, #0
    9ef4:	1a000007 	bne	9f18 <CKernelOptions::CKernelOptions()+0x3b8>
    9ef8:	e3041d50 	movw	r1, #19792	; 0x4d50
    9efc:	e1a0000a 	mov	r0, sl
    9f00:	e3401001 	movt	r1, #1
    9f04:	eb001898 	bl	1016c <strcmp>
    9f08:	e3500000 	cmp	r0, #0
    9f0c:	03a03001 	moveq	r3, #1
    9f10:	05c43868 	strbeq	r3, [r4, #2152]	; 0x868
    9f14:	eaffff4b 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9f18:	e3041d84 	movw	r1, #19844	; 0x4d84
    9f1c:	e1a0000b 	mov	r0, fp
    9f20:	e3401001 	movt	r1, #1
    9f24:	eb001890 	bl	1016c <strcmp>
    9f28:	e3500000 	cmp	r0, #0
    9f2c:	1a000005 	bne	9f48 <CKernelOptions::CKernelOptions()+0x3e8>
    9f30:	e1a0000a 	mov	r0, sl
    9f34:	ebfffeb5 	bl	9a10 <CKernelOptions::GetDecimal(char*)>
    9f38:	e2402028 	sub	r2, r0, #40	; 0x28
    9f3c:	e3520026 	cmp	r2, #38	; 0x26
    9f40:	9584086c 	strls	r0, [r4, #2156]	; 0x86c
    9f44:	eaffff3f 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9f48:	e3041d90 	movw	r1, #19856	; 0x4d90
    9f4c:	e1a0000b 	mov	r0, fp
    9f50:	e3401001 	movt	r1, #1
    9f54:	eb001884 	bl	1016c <strcmp>
    9f58:	e3500000 	cmp	r0, #0
    9f5c:	1a000005 	bne	9f78 <CKernelOptions::CKernelOptions()+0x418>
    9f60:	e1a0000a 	mov	r0, sl
    9f64:	ebfffea9 	bl	9a10 <CKernelOptions::GetDecimal(char*)>
    9f68:	e2402002 	sub	r2, r0, #2
    9f6c:	e3520019 	cmp	r2, #25
    9f70:	95840870 	strls	r0, [r4, #2160]	; 0x870
    9f74:	eaffff33 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9f78:	e3041d9c 	movw	r1, #19868	; 0x4d9c
    9f7c:	e1a0000b 	mov	r0, fp
    9f80:	e3401001 	movt	r1, #1
    9f84:	eb001878 	bl	1016c <strcmp>
    9f88:	e3500000 	cmp	r0, #0
    9f8c:	1affff2d 	bne	9c48 <CKernelOptions::CKernelOptions()+0xe8>
    9f90:	e2841e87 	add	r1, r4, #2160	; 0x870
    9f94:	e1a0000a 	mov	r0, sl
    9f98:	e2811008 	add	r1, r1, #8
    9f9c:	e3a02004 	mov	r2, #4
    9fa0:	ebfffeb9 	bl	9a8c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
    9fa4:	e5c40874 	strb	r0, [r4, #2164]	; 0x874
    9fa8:	eaffff26 	b	9c48 <CKernelOptions::CKernelOptions()+0xe8>

00009fac <CLogger::CLogger(unsigned int, CTimer*, bool)>:
    9fac:	e92d4010 	push	{r4, lr}
    9fb0:	e1a04000 	mov	r4, r0
    9fb4:	e5c03008 	strb	r3, [r0, #8]
    9fb8:	e3a0c000 	mov	ip, #0
    9fbc:	e580c00c 	str	ip, [r0, #12]
    9fc0:	e3a03001 	mov	r3, #1
    9fc4:	e8800006 	stm	r0, {r1, r2}
    9fc8:	e584301c 	str	r3, [r4, #28]
    9fcc:	e3a00901 	mov	r0, #16384	; 0x4000
    9fd0:	e58430f0 	str	r3, [r4, #240]	; 0xf0
    9fd4:	e584c010 	str	ip, [r4, #16]
    9fd8:	e584c014 	str	ip, [r4, #20]
    9fdc:	e584c018 	str	ip, [r4, #24]
    9fe0:	e584c0e8 	str	ip, [r4, #232]	; 0xe8
    9fe4:	e584c0ec 	str	ip, [r4, #236]	; 0xec
    9fe8:	e584c0f4 	str	ip, [r4, #244]	; 0xf4
    9fec:	e584c0f8 	str	ip, [r4, #248]	; 0xf8
    9ff0:	eb001b71 	bl	10dbc <operator new[](unsigned int)>
    9ff4:	e5840010 	str	r0, [r4, #16]
    9ff8:	e3073148 	movw	r3, #29000	; 0x7148
    9ffc:	e3403001 	movt	r3, #1
    a000:	e1a00004 	mov	r0, r4
    a004:	e5834000 	str	r4, [r3]
    a008:	e8bd8010 	pop	{r4, pc}

0000a00c <CLogger::~CLogger()>:
    a00c:	e59030ec 	ldr	r3, [r0, #236]	; 0xec
    a010:	e3072148 	movw	r2, #29000	; 0x7148
    a014:	e3402001 	movt	r2, #1
    a018:	e92d4070 	push	{r4, r5, r6, lr}
    a01c:	e3a05000 	mov	r5, #0
    a020:	e590c0e8 	ldr	ip, [r0, #232]	; 0xe8
    a024:	e1a04000 	mov	r4, r0
    a028:	e5825000 	str	r5, [r2]
    a02c:	ea00000a 	b	a05c <CLogger::~CLogger()+0x50>
    a030:	e7940102 	ldr	r0, [r4, r2, lsl #2]
    a034:	e3500000 	cmp	r0, #0
    a038:	0a000002 	beq	a048 <CLogger::~CLogger()+0x3c>
    a03c:	eb001b70 	bl	10e04 <operator delete(void*, unsigned int)>
    a040:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    a044:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
    a048:	e2833001 	add	r3, r3, #1
    a04c:	e58430ec 	str	r3, [r4, #236]	; 0xec
    a050:	e3530032 	cmp	r3, #50	; 0x32
    a054:	058450ec 	streq	r5, [r4, #236]	; 0xec
    a058:	03a03000 	moveq	r3, #0
    a05c:	e153000c 	cmp	r3, ip
    a060:	e2832008 	add	r2, r3, #8
    a064:	e3a01f42 	mov	r1, #264	; 0x108
    a068:	1afffff0 	bne	a030 <CLogger::~CLogger()+0x24>
    a06c:	e5940010 	ldr	r0, [r4, #16]
    a070:	e3500000 	cmp	r0, #0
    a074:	0a000000 	beq	a07c <CLogger::~CLogger()+0x70>
    a078:	eb001b5b 	bl	10dec <operator delete[](void*)>
    a07c:	e1a00004 	mov	r0, r4
    a080:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a084 <CLogger::SetNewTarget(CDevice*)>:
    a084:	e580100c 	str	r1, [r0, #12]
    a088:	e12fff1e 	bx	lr

0000a08c <CLogger::Get()>:
    a08c:	e92d4070 	push	{r4, r5, r6, lr}
    a090:	e3075148 	movw	r5, #29000	; 0x7148
    a094:	e3405001 	movt	r5, #1
    a098:	e5954000 	ldr	r4, [r5]
    a09c:	e3540000 	cmp	r4, #0
    a0a0:	0a000001 	beq	a0ac <CLogger::Get()+0x20>
    a0a4:	e1a00004 	mov	r0, r4
    a0a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    a0ac:	e3a000fc 	mov	r0, #252	; 0xfc
    a0b0:	eb001b3b 	bl	10da4 <operator new(unsigned int)>
    a0b4:	e1a04000 	mov	r4, r0
    a0b8:	e3a03000 	mov	r3, #0
    a0bc:	e5803000 	str	r3, [r0]
    a0c0:	e3a02001 	mov	r2, #1
    a0c4:	e5803004 	str	r3, [r0, #4]
    a0c8:	e3a00901 	mov	r0, #16384	; 0x4000
    a0cc:	e5c42008 	strb	r2, [r4, #8]
    a0d0:	e584300c 	str	r3, [r4, #12]
    a0d4:	e5843010 	str	r3, [r4, #16]
    a0d8:	e5843014 	str	r3, [r4, #20]
    a0dc:	e5843018 	str	r3, [r4, #24]
    a0e0:	e584201c 	str	r2, [r4, #28]
    a0e4:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    a0e8:	e58430ec 	str	r3, [r4, #236]	; 0xec
    a0ec:	e1c42ff0 	strd	r2, [r4, #240]	; 0xf0
    a0f0:	e58430f8 	str	r3, [r4, #248]	; 0xf8
    a0f4:	eb001b30 	bl	10dbc <operator new[](unsigned int)>
    a0f8:	e5840010 	str	r0, [r4, #16]
    a0fc:	e1a00004 	mov	r0, r4
    a100:	e5854000 	str	r4, [r5]
    a104:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a108 <CLogger::Write(char const*)>:
    a108:	e92d4070 	push	{r4, r5, r6, lr}
    a10c:	e1a04000 	mov	r4, r0
    a110:	e1a00001 	mov	r0, r1
    a114:	e1a05001 	mov	r5, r1
    a118:	eb001809 	bl	10144 <strlen>
    a11c:	e1a06000 	mov	r6, r0
    a120:	e594000c 	ldr	r0, [r4, #12]
    a124:	e3500000 	cmp	r0, #0
    a128:	0a000004 	beq	a140 <CLogger::Write(char const*)+0x38>
    a12c:	e5903000 	ldr	r3, [r0]
    a130:	e1a02006 	mov	r2, r6
    a134:	e1a01005 	mov	r1, r5
    a138:	e593300c 	ldr	r3, [r3, #12]
    a13c:	e12fff33 	blx	r3
    a140:	e594001c 	ldr	r0, [r4, #28]
    a144:	e3500000 	cmp	r0, #0
    a148:	1a000023 	bne	a1dc <CLogger::Write(char const*)+0xd4>
    a14c:	e3560000 	cmp	r6, #0
    a150:	e246c001 	sub	ip, r6, #1
    a154:	08bd8070 	popeq	{r4, r5, r6, pc}
    a158:	e1a02005 	mov	r2, r5
    a15c:	ea000003 	b	a170 <CLogger::Write(char const*)+0x68>
    a160:	e2623001 	rsb	r3, r2, #1
    a164:	e0853003 	add	r3, r5, r3
    a168:	e173000c 	cmn	r3, ip
    a16c:	0a000015 	beq	a1c8 <CLogger::Write(char const*)+0xc0>
    a170:	e0d230d1 	ldrsb	r3, [r2], #1
    a174:	e353000d 	cmp	r3, #13
    a178:	0afffff8 	beq	a160 <CLogger::Write(char const*)+0x58>
    a17c:	e1c401d0 	ldrd	r0, [r4, #16]
    a180:	e7c03001 	strb	r3, [r0, r1]
    a184:	e5943014 	ldr	r3, [r4, #20]
    a188:	e5940018 	ldr	r0, [r4, #24]
    a18c:	e2833001 	add	r3, r3, #1
    a190:	e7ed3053 	ubfx	r3, r3, #0, #14
    a194:	e1530000 	cmp	r3, r0
    a198:	e5843014 	str	r3, [r4, #20]
    a19c:	1affffef 	bne	a160 <CLogger::Write(char const*)+0x58>
    a1a0:	e5d40008 	ldrb	r0, [r4, #8]
    a1a4:	e2831001 	add	r1, r3, #1
    a1a8:	e7ed1051 	ubfx	r1, r1, #0, #14
    a1ac:	e3500000 	cmp	r0, #0
    a1b0:	0a00000e 	beq	a1f0 <CLogger::Write(char const*)+0xe8>
    a1b4:	e5841018 	str	r1, [r4, #24]
    a1b8:	e2623001 	rsb	r3, r2, #1
    a1bc:	e0853003 	add	r3, r5, r3
    a1c0:	e173000c 	cmn	r3, ip
    a1c4:	1affffe9 	bne	a170 <CLogger::Write(char const*)+0x68>
    a1c8:	e594301c 	ldr	r3, [r4, #28]
    a1cc:	e3530000 	cmp	r3, #0
    a1d0:	08bd8070 	popeq	{r4, r5, r6, pc}
    a1d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    a1d8:	ea001e9e 	b	11c58 <LeaveCritical>
    a1dc:	eb001e72 	bl	11bac <EnterCritical>
    a1e0:	e3560000 	cmp	r6, #0
    a1e4:	e246c001 	sub	ip, r6, #1
    a1e8:	1affffda 	bne	a158 <CLogger::Write(char const*)+0x50>
    a1ec:	eafffff5 	b	a1c8 <CLogger::Write(char const*)+0xc0>
    a1f0:	e2433001 	sub	r3, r3, #1
    a1f4:	e7ed3053 	ubfx	r3, r3, #0, #14
    a1f8:	e5843014 	str	r3, [r4, #20]
    a1fc:	eafffff1 	b	a1c8 <CLogger::Write(char const*)+0xc0>

0000a200 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    a200:	e92d4070 	push	{r4, r5, r6, lr}
    a204:	e1a04000 	mov	r4, r0
    a208:	e5900000 	ldr	r0, [r0]
    a20c:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    a210:	e1520000 	cmp	r2, r0
    a214:	8a000012 	bhi	a264 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
    a218:	e3520000 	cmp	r2, #0
    a21c:	e1a05003 	mov	r5, r3
    a220:	e3a03000 	mov	r3, #0
    a224:	e5cd3000 	strb	r3, [sp]
    a228:	0a00000f 	beq	a26c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    a22c:	e1a0000d 	mov	r0, sp
    a230:	eb001881 	bl	1043c <strcat>
    a234:	e59f1098 	ldr	r1, [pc, #152]	; a2d4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a238:	e1a0000d 	mov	r0, sp
    a23c:	eb00187e 	bl	1043c <strcat>
    a240:	e1a01005 	mov	r1, r5
    a244:	e1a0000d 	mov	r0, sp
    a248:	eb00187b 	bl	1043c <strcat>
    a24c:	e59f1084 	ldr	r1, [pc, #132]	; a2d8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    a250:	e1a0000d 	mov	r0, sp
    a254:	eb001878 	bl	1043c <strcat>
    a258:	e1a0100d 	mov	r1, sp
    a25c:	e1a00004 	mov	r0, r4
    a260:	ebffffa8 	bl	a108 <CLogger::Write(char const*)>
    a264:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    a268:	e8bd8070 	pop	{r4, r5, r6, pc}
    a26c:	e1a06001 	mov	r6, r1
    a270:	e3041dac 	movw	r1, #19884	; 0x4dac
    a274:	e3401001 	movt	r1, #1
    a278:	e1a0000d 	mov	r0, sp
    a27c:	eb001855 	bl	103d8 <strcpy>
    a280:	e1a01006 	mov	r1, r6
    a284:	e1a0000d 	mov	r0, sp
    a288:	eb00186b 	bl	1043c <strcat>
    a28c:	e59f1040 	ldr	r1, [pc, #64]	; a2d4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
    a290:	e1a0000d 	mov	r0, sp
    a294:	eb001868 	bl	1043c <strcat>
    a298:	e1a01005 	mov	r1, r5
    a29c:	e1a0000d 	mov	r0, sp
    a2a0:	eb001865 	bl	1043c <strcat>
    a2a4:	e59f1030 	ldr	r1, [pc, #48]	; a2dc <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
    a2a8:	e1a0000d 	mov	r0, sp
    a2ac:	eb001862 	bl	1043c <strcat>
    a2b0:	e59f1020 	ldr	r1, [pc, #32]	; a2d8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
    a2b4:	e1a0000d 	mov	r0, sp
    a2b8:	eb00185f 	bl	1043c <strcat>
    a2bc:	e1a0100d 	mov	r1, sp
    a2c0:	e1a00004 	mov	r0, r4
    a2c4:	ebffff8f 	bl	a108 <CLogger::Write(char const*)>
    a2c8:	e3a000ff 	mov	r0, #255	; 0xff
    a2cc:	eb0013c3 	bl	f1e0 <set_qemu_exit_status>
    a2d0:	eb0013c3 	bl	f1e4 <halt>
    a2d4:	00014db4 	.word	0x00014db4
    a2d8:	00014dc0 	.word	0x00014dc0
    a2dc:	00014db8 	.word	0x00014db8

0000a2e0 <CLogger::Read(void*, unsigned int, bool)>:
    a2e0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    a2e4:	e1a04000 	mov	r4, r0
    a2e8:	e590001c 	ldr	r0, [r0, #28]
    a2ec:	e1a05001 	mov	r5, r1
    a2f0:	e1a07002 	mov	r7, r2
    a2f4:	e1a08003 	mov	r8, r3
    a2f8:	e3500000 	cmp	r0, #0
    a2fc:	1a00001a 	bne	a36c <CLogger::Read(void*, unsigned int, bool)+0x8c>
    a300:	e594c018 	ldr	ip, [r4, #24]
    a304:	e5943014 	ldr	r3, [r4, #20]
    a308:	e153000c 	cmp	r3, ip
    a30c:	0a000024 	beq	a3a4 <CLogger::Read(void*, unsigned int, bool)+0xc4>
    a310:	e1a09007 	mov	r9, r7
    a314:	e3a0e000 	mov	lr, #0
    a318:	ea000006 	b	a338 <CLogger::Read(void*, unsigned int, bool)+0x58>
    a31c:	e5946010 	ldr	r6, [r4, #16]
    a320:	e19660dc 	ldrsb	r6, [r6, ip]
    a324:	e7edc051 	ubfx	ip, r1, #0, #14
    a328:	e4c56001 	strb	r6, [r5], #1
    a32c:	e5941014 	ldr	r1, [r4, #20]
    a330:	e151000c 	cmp	r1, ip
    a334:	0a00000a 	beq	a364 <CLogger::Read(void*, unsigned int, bool)+0x84>
    a338:	e15e0007 	cmp	lr, r7
    a33c:	e28c1001 	add	r1, ip, #1
    a340:	e28ee001 	add	lr, lr, #1
    a344:	1afffff4 	bne	a31c <CLogger::Read(void*, unsigned int, bool)+0x3c>
    a348:	e594301c 	ldr	r3, [r4, #28]
    a34c:	e3580000 	cmp	r8, #0
    a350:	1584c018 	strne	ip, [r4, #24]
    a354:	e3530000 	cmp	r3, #0
    a358:	1a00000e 	bne	a398 <CLogger::Read(void*, unsigned int, bool)+0xb8>
    a35c:	e1a00009 	mov	r0, r9
    a360:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a364:	e1a0900e 	mov	r9, lr
    a368:	eafffff6 	b	a348 <CLogger::Read(void*, unsigned int, bool)+0x68>
    a36c:	eb001e0e 	bl	11bac <EnterCritical>
    a370:	e594c018 	ldr	ip, [r4, #24]
    a374:	e5943014 	ldr	r3, [r4, #20]
    a378:	e153000c 	cmp	r3, ip
    a37c:	1affffe3 	bne	a310 <CLogger::Read(void*, unsigned int, bool)+0x30>
    a380:	e594301c 	ldr	r3, [r4, #28]
    a384:	e3530000 	cmp	r3, #0
    a388:	0a000005 	beq	a3a4 <CLogger::Read(void*, unsigned int, bool)+0xc4>
    a38c:	e3e09000 	mvn	r9, #0
    a390:	eb001e30 	bl	11c58 <LeaveCritical>
    a394:	eafffff0 	b	a35c <CLogger::Read(void*, unsigned int, bool)+0x7c>
    a398:	eb001e2e 	bl	11c58 <LeaveCritical>
    a39c:	e1a00009 	mov	r0, r9
    a3a0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    a3a4:	e3e09000 	mvn	r9, #0
    a3a8:	eaffffeb 	b	a35c <CLogger::Read(void*, unsigned int, bool)+0x7c>

0000a3ac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    a3ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a3b0:	e1a04000 	mov	r4, r0
    a3b4:	e24dd008 	sub	sp, sp, #8
    a3b8:	e3a00f42 	mov	r0, #264	; 0x108
    a3bc:	e1a07002 	mov	r7, r2
    a3c0:	e1a06003 	mov	r6, r3
    a3c4:	e1a08001 	mov	r8, r1
    a3c8:	eb001a75 	bl	10da4 <operator new(unsigned int)>
    a3cc:	e1a05000 	mov	r5, r0
    a3d0:	e1a01008 	mov	r1, r8
    a3d4:	e4c07001 	strb	r7, [r0], #1
    a3d8:	e3a02032 	mov	r2, #50	; 0x32
    a3dc:	e3a07000 	mov	r7, #0
    a3e0:	eb001807 	bl	10404 <strncpy>
    a3e4:	e5c57032 	strb	r7, [r5, #50]	; 0x32
    a3e8:	e3a020c8 	mov	r2, #200	; 0xc8
    a3ec:	e1a01006 	mov	r1, r6
    a3f0:	e2850033 	add	r0, r5, #51	; 0x33
    a3f4:	eb001802 	bl	10404 <strncpy>
    a3f8:	e5940004 	ldr	r0, [r4, #4]
    a3fc:	e5c570fa 	strb	r7, [r5, #250]	; 0xfa
    a400:	e1500007 	cmp	r0, r7
    a404:	0a000004 	beq	a41c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
    a408:	e28d2004 	add	r2, sp, #4
    a40c:	e1a0100d 	mov	r1, sp
    a410:	eb001458 	bl	f578 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    a414:	e1500007 	cmp	r0, r7
    a418:	1a000038 	bne	a500 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x154>
    a41c:	e3a03000 	mov	r3, #0
    a420:	e58530fc 	str	r3, [r5, #252]	; 0xfc
    a424:	e5853100 	str	r3, [r5, #256]	; 0x100
    a428:	e5853104 	str	r3, [r5, #260]	; 0x104
    a42c:	e59400f0 	ldr	r0, [r4, #240]	; 0xf0
    a430:	e3500000 	cmp	r0, #0
    a434:	1a00002e 	bne	a4f4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x148>
    a438:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    a43c:	e2831008 	add	r1, r3, #8
    a440:	e3530031 	cmp	r3, #49	; 0x31
    a444:	e7845101 	str	r5, [r4, r1, lsl #2]
    a448:	e2831001 	add	r1, r3, #1
    a44c:	0a00001c 	beq	a4c4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
    a450:	e59420ec 	ldr	r2, [r4, #236]	; 0xec
    a454:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    a458:	e1510002 	cmp	r1, r2
    a45c:	0a000007 	beq	a480 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd4>
    a460:	e3500000 	cmp	r0, #0
    a464:	1a000014 	bne	a4bc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x110>
    a468:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    a46c:	e3530000 	cmp	r3, #0
    a470:	0a000000 	beq	a478 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>
    a474:	e12fff33 	blx	r3
    a478:	e28dd008 	add	sp, sp, #8
    a47c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a480:	e2833009 	add	r3, r3, #9
    a484:	e3510031 	cmp	r1, #49	; 0x31
    a488:	e2811001 	add	r1, r1, #1
    a48c:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    a490:	03a03000 	moveq	r3, #0
    a494:	058430ec 	streq	r3, [r4, #236]	; 0xec
    a498:	1a000010 	bne	a4e0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
    a49c:	e3500000 	cmp	r0, #0
    a4a0:	1a000011 	bne	a4ec <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
    a4a4:	e3550000 	cmp	r5, #0
    a4a8:	0affffee 	beq	a468 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    a4ac:	e3a01f42 	mov	r1, #264	; 0x108
    a4b0:	e1a00005 	mov	r0, r5
    a4b4:	eb001a52 	bl	10e04 <operator delete(void*, unsigned int)>
    a4b8:	eaffffea 	b	a468 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    a4bc:	eb001de5 	bl	11c58 <LeaveCritical>
    a4c0:	eaffffe8 	b	a468 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
    a4c4:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    a4c8:	e3a01000 	mov	r1, #0
    a4cc:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    a4d0:	e1530001 	cmp	r3, r1
    a4d4:	1affffe1 	bne	a460 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb4>
    a4d8:	e5945020 	ldr	r5, [r4, #32]
    a4dc:	e3a01001 	mov	r1, #1
    a4e0:	e58410ec 	str	r1, [r4, #236]	; 0xec
    a4e4:	e3500000 	cmp	r0, #0
    a4e8:	0affffed 	beq	a4a4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    a4ec:	eb001dd9 	bl	11c58 <LeaveCritical>
    a4f0:	eaffffeb 	b	a4a4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
    a4f4:	eb001dac 	bl	11bac <EnterCritical>
    a4f8:	e59400f0 	ldr	r0, [r4, #240]	; 0xf0
    a4fc:	eaffffcd 	b	a438 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>
    a500:	e59d3004 	ldr	r3, [sp, #4]
    a504:	e3012759 	movw	r2, #5977	; 0x1759
    a508:	e34d21b7 	movt	r2, #53687	; 0xd1b7
    a50c:	e0832392 	umull	r2, r3, r2, r3
    a510:	e59d1000 	ldr	r1, [sp]
    a514:	e1a036a3 	lsr	r3, r3, #13
    a518:	e5940004 	ldr	r0, [r4, #4]
    a51c:	e58510fc 	str	r1, [r5, #252]	; 0xfc
    a520:	e5853100 	str	r3, [r5, #256]	; 0x100
    a524:	eb0013df 	bl	f4a8 <CTimer::GetTimeZone() const>
    a528:	e5850104 	str	r0, [r5, #260]	; 0x104
    a52c:	eaffffbe 	b	a42c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>

0000a530 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    a530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    a534:	e1a04000 	mov	r4, r0
    a538:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
    a53c:	e1a08001 	mov	r8, r1
    a540:	e1a06002 	mov	r6, r2
    a544:	e1a07003 	mov	r7, r3
    a548:	e3500000 	cmp	r0, #0
    a54c:	1a000021 	bne	a5d8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa8>
    a550:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
    a554:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    a558:	e15c0003 	cmp	ip, r3
    a55c:	0a000027 	beq	a600 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd0>
    a560:	e28c3008 	add	r3, ip, #8
    a564:	e35c0031 	cmp	ip, #49	; 0x31
    a568:	e28cc001 	add	ip, ip, #1
    a56c:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    a570:	03a03000 	moveq	r3, #0
    a574:	1584c0ec 	strne	ip, [r4, #236]	; 0xec
    a578:	058430ec 	streq	r3, [r4, #236]	; 0xec
    a57c:	e3500000 	cmp	r0, #0
    a580:	1a000020 	bne	a608 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd8>
    a584:	e1a01005 	mov	r1, r5
    a588:	e1a00006 	mov	r0, r6
    a58c:	e4d13001 	ldrb	r3, [r1], #1
    a590:	e5c83000 	strb	r3, [r8]
    a594:	eb00178f 	bl	103d8 <strcpy>
    a598:	e2851033 	add	r1, r5, #51	; 0x33
    a59c:	e1a00007 	mov	r0, r7
    a5a0:	eb00178c 	bl	103d8 <strcpy>
    a5a4:	e1c52fdc 	ldrd	r2, [r5, #252]	; 0xfc
    a5a8:	e59d0018 	ldr	r0, [sp, #24]
    a5ac:	e3a01f42 	mov	r1, #264	; 0x108
    a5b0:	e5802000 	str	r2, [r0]
    a5b4:	e1a00005 	mov	r0, r5
    a5b8:	e59d201c 	ldr	r2, [sp, #28]
    a5bc:	e5823000 	str	r3, [r2]
    a5c0:	e59d2020 	ldr	r2, [sp, #32]
    a5c4:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    a5c8:	e5823000 	str	r3, [r2]
    a5cc:	eb001a0c 	bl	10e04 <operator delete(void*, unsigned int)>
    a5d0:	e3a00001 	mov	r0, #1
    a5d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a5d8:	eb001d73 	bl	11bac <EnterCritical>
    a5dc:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
    a5e0:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    a5e4:	e153000c 	cmp	r3, ip
    a5e8:	159400f0 	ldrne	r0, [r4, #240]	; 0xf0
    a5ec:	1affffdb 	bne	a560 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x30>
    a5f0:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    a5f4:	e3530000 	cmp	r3, #0
    a5f8:	0a000000 	beq	a600 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xd0>
    a5fc:	eb001d95 	bl	11c58 <LeaveCritical>
    a600:	e3a00000 	mov	r0, #0
    a604:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    a608:	eb001d92 	bl	11c58 <LeaveCritical>
    a60c:	eaffffdc 	b	a584 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x54>

0000a610 <CLogger::RegisterEventNotificationHandler(void (*)())>:
    a610:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    a614:	e12fff1e 	bx	lr

0000a618 <CLogger::RegisterPanicHandler(void (*)())>:
    a618:	e58010f8 	str	r1, [r0, #248]	; 0xf8
    a61c:	e12fff1e 	bx	lr

0000a620 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    a620:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a624:	e24dd024 	sub	sp, sp, #36	; 0x24
    a628:	e1a07003 	mov	r7, r3
    a62c:	e1a04000 	mov	r4, r0
    a630:	e1a0000d 	mov	r0, sp
    a634:	e1a05002 	mov	r5, r2
    a638:	e1a06001 	mov	r6, r1
    a63c:	eb000d3c 	bl	db34 <CString::CString()>
    a640:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    a644:	e1a01007 	mov	r1, r7
    a648:	e1a0000d 	mov	r0, sp
    a64c:	eb000f8b 	bl	e480 <CString::FormatV(char const*, std::__va_list)>
    a650:	e1a0000d 	mov	r0, sp
    a654:	eb000d6d 	bl	dc10 <CString::operator char const*() const>
    a658:	e1a03000 	mov	r3, r0
    a65c:	e1a02005 	mov	r2, r5
    a660:	e1a01006 	mov	r1, r6
    a664:	e1a00004 	mov	r0, r4
    a668:	ebffff4f 	bl	a3ac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    a66c:	e5943000 	ldr	r3, [r4]
    a670:	e1550003 	cmp	r5, r3
    a674:	8a000029 	bhi	a720 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x100>
    a678:	e28d0010 	add	r0, sp, #16
    a67c:	eb000d2c 	bl	db34 <CString::CString()>
    a680:	e3550000 	cmp	r5, #0
    a684:	0a000029 	beq	a730 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x110>
    a688:	e5940004 	ldr	r0, [r4, #4]
    a68c:	e3500000 	cmp	r0, #0
    a690:	0a00000d 	beq	a6cc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a694:	eb001422 	bl	f724 <CTimer::GetTimeString()>
    a698:	e2505000 	subs	r5, r0, #0
    a69c:	0a00000a 	beq	a6cc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
    a6a0:	eb000d5a 	bl	dc10 <CString::operator char const*() const>
    a6a4:	e1a01000 	mov	r1, r0
    a6a8:	e28d0010 	add	r0, sp, #16
    a6ac:	eb000d98 	bl	dd14 <CString::Append(char const*)>
    a6b0:	e59f1140 	ldr	r1, [pc, #320]	; a7f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    a6b4:	e28d0010 	add	r0, sp, #16
    a6b8:	eb000d95 	bl	dd14 <CString::Append(char const*)>
    a6bc:	e5953000 	ldr	r3, [r5]
    a6c0:	e1a00005 	mov	r0, r5
    a6c4:	e5933004 	ldr	r3, [r3, #4]
    a6c8:	e12fff33 	blx	r3
    a6cc:	e1a01006 	mov	r1, r6
    a6d0:	e28d0010 	add	r0, sp, #16
    a6d4:	eb000d8e 	bl	dd14 <CString::Append(char const*)>
    a6d8:	e59f111c 	ldr	r1, [pc, #284]	; a7fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    a6dc:	e28d0010 	add	r0, sp, #16
    a6e0:	eb000d8b 	bl	dd14 <CString::Append(char const*)>
    a6e4:	e1a0000d 	mov	r0, sp
    a6e8:	eb000d48 	bl	dc10 <CString::operator char const*() const>
    a6ec:	e1a01000 	mov	r1, r0
    a6f0:	e28d0010 	add	r0, sp, #16
    a6f4:	eb000d86 	bl	dd14 <CString::Append(char const*)>
    a6f8:	e59f1100 	ldr	r1, [pc, #256]	; a800 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    a6fc:	e28d0010 	add	r0, sp, #16
    a700:	eb000d83 	bl	dd14 <CString::Append(char const*)>
    a704:	e28d0010 	add	r0, sp, #16
    a708:	eb000d40 	bl	dc10 <CString::operator char const*() const>
    a70c:	e1a01000 	mov	r1, r0
    a710:	e1a00004 	mov	r0, r4
    a714:	ebfffe7b 	bl	a108 <CLogger::Write(char const*)>
    a718:	e28d0010 	add	r0, sp, #16
    a71c:	eb000cd1 	bl	da68 <CString::~CString()>
    a720:	e1a0000d 	mov	r0, sp
    a724:	eb000ccf 	bl	da68 <CString::~CString()>
    a728:	e28dd024 	add	sp, sp, #36	; 0x24
    a72c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a730:	e3041dac 	movw	r1, #19884	; 0x4dac
    a734:	e28d0010 	add	r0, sp, #16
    a738:	e3401001 	movt	r1, #1
    a73c:	eb000d39 	bl	dc28 <CString::operator=(char const*)>
    a740:	e5940004 	ldr	r0, [r4, #4]
    a744:	e3500000 	cmp	r0, #0
    a748:	0a00000d 	beq	a784 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x164>
    a74c:	eb0013f4 	bl	f724 <CTimer::GetTimeString()>
    a750:	e2505000 	subs	r5, r0, #0
    a754:	0a00000a 	beq	a784 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x164>
    a758:	eb000d2c 	bl	dc10 <CString::operator char const*() const>
    a75c:	e1a01000 	mov	r1, r0
    a760:	e28d0010 	add	r0, sp, #16
    a764:	eb000d6a 	bl	dd14 <CString::Append(char const*)>
    a768:	e59f1088 	ldr	r1, [pc, #136]	; a7f8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1d8>
    a76c:	e28d0010 	add	r0, sp, #16
    a770:	eb000d67 	bl	dd14 <CString::Append(char const*)>
    a774:	e5953000 	ldr	r3, [r5]
    a778:	e1a00005 	mov	r0, r5
    a77c:	e5933004 	ldr	r3, [r3, #4]
    a780:	e12fff33 	blx	r3
    a784:	e1a01006 	mov	r1, r6
    a788:	e28d0010 	add	r0, sp, #16
    a78c:	eb000d60 	bl	dd14 <CString::Append(char const*)>
    a790:	e59f1064 	ldr	r1, [pc, #100]	; a7fc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    a794:	e28d0010 	add	r0, sp, #16
    a798:	eb000d5d 	bl	dd14 <CString::Append(char const*)>
    a79c:	e1a0000d 	mov	r0, sp
    a7a0:	eb000d1a 	bl	dc10 <CString::operator char const*() const>
    a7a4:	e1a01000 	mov	r1, r0
    a7a8:	e28d0010 	add	r0, sp, #16
    a7ac:	eb000d58 	bl	dd14 <CString::Append(char const*)>
    a7b0:	e59f104c 	ldr	r1, [pc, #76]	; a804 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e4>
    a7b4:	e28d0010 	add	r0, sp, #16
    a7b8:	eb000d55 	bl	dd14 <CString::Append(char const*)>
    a7bc:	e59f103c 	ldr	r1, [pc, #60]	; a800 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e0>
    a7c0:	e28d0010 	add	r0, sp, #16
    a7c4:	eb000d52 	bl	dd14 <CString::Append(char const*)>
    a7c8:	e28d0010 	add	r0, sp, #16
    a7cc:	eb000d0f 	bl	dc10 <CString::operator char const*() const>
    a7d0:	e1a01000 	mov	r1, r0
    a7d4:	e1a00004 	mov	r0, r4
    a7d8:	ebfffe4a 	bl	a108 <CLogger::Write(char const*)>
    a7dc:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
    a7e0:	e3530000 	cmp	r3, #0
    a7e4:	0a000000 	beq	a7ec <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1cc>
    a7e8:	e12fff33 	blx	r3
    a7ec:	e3a000ff 	mov	r0, #255	; 0xff
    a7f0:	eb00127a 	bl	f1e0 <set_qemu_exit_status>
    a7f4:	eb00127a 	bl	f1e4 <halt>
    a7f8:	00014dc4 	.word	0x00014dc4
    a7fc:	00014db4 	.word	0x00014db4
    a800:	00014dc0 	.word	0x00014dc0
    a804:	00014db8 	.word	0x00014db8

0000a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    a808:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    a80c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a810:	e24dd010 	sub	sp, sp, #16
    a814:	e28dc018 	add	ip, sp, #24
    a818:	e59d3014 	ldr	r3, [sp, #20]
    a81c:	e58dc000 	str	ip, [sp]
    a820:	e58dc00c 	str	ip, [sp, #12]
    a824:	ebffff7d 	bl	a620 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    a828:	e28dd010 	add	sp, sp, #16
    a82c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    a830:	e28dd004 	add	sp, sp, #4
    a834:	e12fff1e 	bx	lr

0000a838 <CLogger::Initialize(CDevice*)>:
    a838:	e92d4010 	push	{r4, lr}
    a83c:	e24dd008 	sub	sp, sp, #8
    a840:	e580100c 	str	r1, [r0, #12]
    a844:	e1a04000 	mov	r4, r0
    a848:	eb000227 	bl	b0ec <CMachineInfo::Get()>
    a84c:	eb000127 	bl	acf0 <CMachineInfo::GetMachineName() const>
    a850:	e58d0004 	str	r0, [sp, #4]
    a854:	e3041dac 	movw	r1, #19884	; 0x4dac
    a858:	e3401001 	movt	r1, #1
    a85c:	e3073168 	movw	r3, #29032	; 0x7168
    a860:	e3403001 	movt	r3, #1
    a864:	e1a00004 	mov	r0, r4
    a868:	e58d3000 	str	r3, [sp]
    a86c:	e3a02003 	mov	r2, #3
    a870:	e281301c 	add	r3, r1, #28
    a874:	e2811034 	add	r1, r1, #52	; 0x34
    a878:	ebffffe2 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a87c:	e3a00001 	mov	r0, #1
    a880:	e28dd008 	add	sp, sp, #8
    a884:	e8bd8010 	pop	{r4, pc}

0000a888 <CMachineInfo::CMachineInfo()>:
    a888:	e92d4810 	push	{r4, fp, lr}
    a88c:	e28db008 	add	fp, sp, #8
    a890:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    a894:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
    a898:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a89c:	e3a02000 	mov	r2, #0
    a8a0:	e5832000 	str	r2, [r3]
    a8a4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8a8:	e3a02014 	mov	r2, #20
    a8ac:	e5c32008 	strb	r2, [r3, #8]
    a8b0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8b4:	e3a02000 	mov	r2, #0
    a8b8:	e5832010 	str	r2, [r3, #16]
    a8bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8c0:	e3a02000 	mov	r2, #0
    a8c4:	e5832018 	str	r2, [r3, #24]
    a8c8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8cc:	e3a02004 	mov	r2, #4
    a8d0:	e5c32020 	strb	r2, [r3, #32]
    a8d4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8d8:	e3a02000 	mov	r2, #0
    a8dc:	e5832028 	str	r2, [r3, #40]	; 0x28
    a8e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a8e4:	e3012f35 	movw	r2, #7989	; 0x1f35
    a8e8:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
    a8ec:	e307314c 	movw	r3, #29004	; 0x714c
    a8f0:	e3403001 	movt	r3, #1
    a8f4:	e5933000 	ldr	r3, [r3]
    a8f8:	e3530000 	cmp	r3, #0
    a8fc:	0a000024 	beq	a994 <CMachineInfo::CMachineInfo()+0x10c>
    a900:	e307314c 	movw	r3, #29004	; 0x714c
    a904:	e3403001 	movt	r3, #1
    a908:	e5933000 	ldr	r3, [r3]
    a90c:	e5932000 	ldr	r2, [r3]
    a910:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a914:	e5832000 	str	r2, [r3]
    a918:	e307314c 	movw	r3, #29004	; 0x714c
    a91c:	e3403001 	movt	r3, #1
    a920:	e5933000 	ldr	r3, [r3]
    a924:	e5d32008 	ldrb	r2, [r3, #8]
    a928:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a92c:	e5c32008 	strb	r2, [r3, #8]
    a930:	e307314c 	movw	r3, #29004	; 0x714c
    a934:	e3403001 	movt	r3, #1
    a938:	e5933000 	ldr	r3, [r3]
    a93c:	e5932010 	ldr	r2, [r3, #16]
    a940:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a944:	e5832010 	str	r2, [r3, #16]
    a948:	e307314c 	movw	r3, #29004	; 0x714c
    a94c:	e3403001 	movt	r3, #1
    a950:	e5933000 	ldr	r3, [r3]
    a954:	e5932018 	ldr	r2, [r3, #24]
    a958:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a95c:	e5832018 	str	r2, [r3, #24]
    a960:	e307314c 	movw	r3, #29004	; 0x714c
    a964:	e3403001 	movt	r3, #1
    a968:	e5933000 	ldr	r3, [r3]
    a96c:	e5d32020 	ldrb	r2, [r3, #32]
    a970:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a974:	e5c32020 	strb	r2, [r3, #32]
    a978:	e307314c 	movw	r3, #29004	; 0x714c
    a97c:	e3403001 	movt	r3, #1
    a980:	e5933000 	ldr	r3, [r3]
    a984:	e5932028 	ldr	r2, [r3, #40]	; 0x28
    a988:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a98c:	e5832028 	str	r2, [r3, #40]	; 0x28
    a990:	ea0000c9 	b	acbc <CMachineInfo::CMachineInfo()+0x434>
    a994:	e307314c 	movw	r3, #29004	; 0x714c
    a998:	e3403001 	movt	r3, #1
    a99c:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
    a9a0:	e5832000 	str	r2, [r3]
    a9a4:	e24b3020 	sub	r3, fp, #32
    a9a8:	e3a01001 	mov	r1, #1
    a9ac:	e1a00003 	mov	r0, r3
    a9b0:	eb001fc8 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    a9b4:	e24b2030 	sub	r2, fp, #48	; 0x30
    a9b8:	e24b0020 	sub	r0, fp, #32
    a9bc:	e3a03000 	mov	r3, #0
    a9c0:	e58d3000 	str	r3, [sp]
    a9c4:	e3a03010 	mov	r3, #16
    a9c8:	e3a01001 	mov	r1, #1
    a9cc:	e3401006 	movt	r1, #6
    a9d0:	eb002006 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a9d4:	e1a03000 	mov	r3, r0
    a9d8:	e3530000 	cmp	r3, #0
    a9dc:	0a000003 	beq	a9f0 <CMachineInfo::CMachineInfo()+0x168>
    a9e0:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    a9e4:	e6ff2073 	uxth	r2, r3
    a9e8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a9ec:	e1c323b0 	strh	r2, [r3, #48]	; 0x30
    a9f0:	e24b2040 	sub	r2, fp, #64	; 0x40
    a9f4:	e24b0020 	sub	r0, fp, #32
    a9f8:	e3a03000 	mov	r3, #0
    a9fc:	e58d3000 	str	r3, [sp]
    aa00:	e3a03010 	mov	r3, #16
    aa04:	e3a01002 	mov	r1, #2
    aa08:	e3401001 	movt	r1, #1
    aa0c:	eb001ff7 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    aa10:	e1a03000 	mov	r3, r0
    aa14:	e2233001 	eor	r3, r3, #1
    aa18:	e6ef3073 	uxtb	r3, r3
    aa1c:	e3530000 	cmp	r3, #0
    aa20:	0a000001 	beq	aa2c <CMachineInfo::CMachineInfo()+0x1a4>
    aa24:	e3a04000 	mov	r4, #0
    aa28:	ea00009f 	b	acac <CMachineInfo::CMachineInfo()+0x424>
    aa2c:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    aa30:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa34:	e5832000 	str	r2, [r3]
    aa38:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa3c:	e5933000 	ldr	r3, [r3]
    aa40:	e2033502 	and	r3, r3, #8388608	; 0x800000
    aa44:	e3530000 	cmp	r3, #0
    aa48:	0a000061 	beq	abd4 <CMachineInfo::CMachineInfo()+0x34c>
    aa4c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aa50:	e5933000 	ldr	r3, [r3]
    aa54:	e1a03223 	lsr	r3, r3, #4
    aa58:	e6ef3073 	uxtb	r3, r3
    aa5c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    aa60:	e3a03000 	mov	r3, #0
    aa64:	e50b3010 	str	r3, [fp, #-16]
    aa68:	e51b3010 	ldr	r3, [fp, #-16]
    aa6c:	e3530011 	cmp	r3, #17
    aa70:	8a00000e 	bhi	aab0 <CMachineInfo::CMachineInfo()+0x228>
    aa74:	e3043de8 	movw	r3, #19944	; 0x4de8
    aa78:	e3403001 	movt	r3, #1
    aa7c:	e51b2010 	ldr	r2, [fp, #-16]
    aa80:	e3a0100c 	mov	r1, #12
    aa84:	e0020291 	mul	r2, r1, r2
    aa88:	e0833002 	add	r3, r3, r2
    aa8c:	e5933000 	ldr	r3, [r3]
    aa90:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    aa94:	e1520003 	cmp	r2, r3
    aa98:	0a000003 	beq	aaac <CMachineInfo::CMachineInfo()+0x224>
    aa9c:	e51b3010 	ldr	r3, [fp, #-16]
    aaa0:	e2833001 	add	r3, r3, #1
    aaa4:	e50b3010 	str	r3, [fp, #-16]
    aaa8:	eaffffee 	b	aa68 <CMachineInfo::CMachineInfo()+0x1e0>
    aaac:	e320f000 	nop	{0}
    aab0:	e51b3010 	ldr	r3, [fp, #-16]
    aab4:	e3530011 	cmp	r3, #17
    aab8:	9a000001 	bls	aac4 <CMachineInfo::CMachineInfo()+0x23c>
    aabc:	e3a04000 	mov	r4, #0
    aac0:	ea000079 	b	acac <CMachineInfo::CMachineInfo()+0x424>
    aac4:	e3043de8 	movw	r3, #19944	; 0x4de8
    aac8:	e3403001 	movt	r3, #1
    aacc:	e51b2010 	ldr	r2, [fp, #-16]
    aad0:	e3a0100c 	mov	r1, #12
    aad4:	e0020291 	mul	r2, r1, r2
    aad8:	e0833002 	add	r3, r3, r2
    aadc:	e2833004 	add	r3, r3, #4
    aae0:	e5d32000 	ldrb	r2, [r3]
    aae4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aae8:	e5c32008 	strb	r2, [r3, #8]
    aaec:	e3043de8 	movw	r3, #19944	; 0x4de8
    aaf0:	e3403001 	movt	r3, #1
    aaf4:	e51b2010 	ldr	r2, [fp, #-16]
    aaf8:	e3a0100c 	mov	r1, #12
    aafc:	e0020291 	mul	r2, r1, r2
    ab00:	e0833002 	add	r3, r3, r2
    ab04:	e2833008 	add	r3, r3, #8
    ab08:	e5932000 	ldr	r2, [r3]
    ab0c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab10:	e5832010 	str	r2, [r3, #16]
    ab14:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab18:	e5933000 	ldr	r3, [r3]
    ab1c:	e203300f 	and	r3, r3, #15
    ab20:	e2832001 	add	r2, r3, #1
    ab24:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab28:	e5832018 	str	r2, [r3, #24]
    ab2c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab30:	e5933000 	ldr	r3, [r3]
    ab34:	e1a03623 	lsr	r3, r3, #12
    ab38:	e6ef3073 	uxtb	r3, r3
    ab3c:	e203300f 	and	r3, r3, #15
    ab40:	e6ef2073 	uxtb	r2, r3
    ab44:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab48:	e5c32020 	strb	r2, [r3, #32]
    ab4c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab50:	e5933000 	ldr	r3, [r3]
    ab54:	e1a03a23 	lsr	r3, r3, #20
    ab58:	e2033007 	and	r3, r3, #7
    ab5c:	e3a02c01 	mov	r2, #256	; 0x100
    ab60:	e1a03312 	lsl	r3, r2, r3
    ab64:	e1a02003 	mov	r2, r3
    ab68:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab6c:	e5832028 	str	r2, [r3, #40]	; 0x28
    ab70:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab74:	e5d33020 	ldrb	r3, [r3, #32]
    ab78:	e3530003 	cmp	r3, #3
    ab7c:	9a000002 	bls	ab8c <CMachineInfo::CMachineInfo()+0x304>
    ab80:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab84:	e3a02004 	mov	r2, #4
    ab88:	e5c32020 	strb	r2, [r3, #32]
    ab8c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ab90:	e5d33008 	ldrb	r3, [r3, #8]
    ab94:	e3530003 	cmp	r3, #3
    ab98:	1a000042 	bne	aca8 <CMachineInfo::CMachineInfo()+0x420>
    ab9c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aba0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
    aba4:	e3530c01 	cmp	r3, #256	; 0x100
    aba8:	1a00003e 	bne	aca8 <CMachineInfo::CMachineInfo()+0x420>
    abac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abb0:	e5933018 	ldr	r3, [r3, #24]
    abb4:	e3530001 	cmp	r3, #1
    abb8:	1a000001 	bne	abc4 <CMachineInfo::CMachineInfo()+0x33c>
    abbc:	e3a02001 	mov	r2, #1
    abc0:	ea000000 	b	abc8 <CMachineInfo::CMachineInfo()+0x340>
    abc4:	e3a02002 	mov	r2, #2
    abc8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abcc:	e5c32008 	strb	r2, [r3, #8]
    abd0:	ea000034 	b	aca8 <CMachineInfo::CMachineInfo()+0x420>
    abd4:	e3a03000 	mov	r3, #0
    abd8:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    abdc:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    abe0:	e3530010 	cmp	r3, #16
    abe4:	8a00000c 	bhi	ac1c <CMachineInfo::CMachineInfo()+0x394>
    abe8:	e3043ec0 	movw	r3, #20160	; 0x4ec0
    abec:	e3403001 	movt	r3, #1
    abf0:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
    abf4:	e7932202 	ldr	r2, [r3, r2, lsl #4]
    abf8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    abfc:	e5933000 	ldr	r3, [r3]
    ac00:	e1520003 	cmp	r2, r3
    ac04:	0a000003 	beq	ac18 <CMachineInfo::CMachineInfo()+0x390>
    ac08:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac0c:	e2833001 	add	r3, r3, #1
    ac10:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    ac14:	eafffff0 	b	abdc <CMachineInfo::CMachineInfo()+0x354>
    ac18:	e320f000 	nop	{0}
    ac1c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac20:	e3530010 	cmp	r3, #16
    ac24:	9a000001 	bls	ac30 <CMachineInfo::CMachineInfo()+0x3a8>
    ac28:	e3a04000 	mov	r4, #0
    ac2c:	ea00001e 	b	acac <CMachineInfo::CMachineInfo()+0x424>
    ac30:	e3042ec0 	movw	r2, #20160	; 0x4ec0
    ac34:	e3402001 	movt	r2, #1
    ac38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac3c:	e1a03203 	lsl	r3, r3, #4
    ac40:	e0823003 	add	r3, r2, r3
    ac44:	e5d32004 	ldrb	r2, [r3, #4]
    ac48:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac4c:	e5c32008 	strb	r2, [r3, #8]
    ac50:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac54:	e3a02001 	mov	r2, #1
    ac58:	e5832010 	str	r2, [r3, #16]
    ac5c:	e3042ec0 	movw	r2, #20160	; 0x4ec0
    ac60:	e3402001 	movt	r2, #1
    ac64:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac68:	e1a03203 	lsl	r3, r3, #4
    ac6c:	e0823003 	add	r3, r2, r3
    ac70:	e5932008 	ldr	r2, [r3, #8]
    ac74:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac78:	e5832018 	str	r2, [r3, #24]
    ac7c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    ac80:	e3a02000 	mov	r2, #0
    ac84:	e5c32020 	strb	r2, [r3, #32]
    ac88:	e3042ec0 	movw	r2, #20160	; 0x4ec0
    ac8c:	e3402001 	movt	r2, #1
    ac90:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    ac94:	e1a03203 	lsl	r3, r3, #4
    ac98:	e0823003 	add	r3, r2, r3
    ac9c:	e593200c 	ldr	r2, [r3, #12]
    aca0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    aca4:	e5832028 	str	r2, [r3, #40]	; 0x28
    aca8:	e3a04001 	mov	r4, #1
    acac:	e24b3020 	sub	r3, fp, #32
    acb0:	e1a00003 	mov	r0, r3
    acb4:	eb001f0e 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
    acb8:	e3540001 	cmp	r4, #1
    acbc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    acc0:	e1a00003 	mov	r0, r3
    acc4:	e24bd008 	sub	sp, fp, #8
    acc8:	e8bd8810 	pop	{r4, fp, pc}

0000accc <CMachineInfo::~CMachineInfo()>:
    accc:	e307314c 	movw	r3, #29004	; 0x714c
    acd0:	e3403001 	movt	r3, #1
    acd4:	e5932000 	ldr	r2, [r3]
    acd8:	e1520000 	cmp	r2, r0
    acdc:	03a02000 	moveq	r2, #0
    ace0:	05832000 	streq	r2, [r3]
    ace4:	e12fff1e 	bx	lr

0000ace8 <CMachineInfo::GetMachineModel() const>:
    ace8:	e5d00008 	ldrb	r0, [r0, #8]
    acec:	e12fff1e 	bx	lr

0000acf0 <CMachineInfo::GetMachineName() const>:
    acf0:	e5d02008 	ldrb	r2, [r0, #8]
    acf4:	e3043fd0 	movw	r3, #20432	; 0x4fd0
    acf8:	e3403001 	movt	r3, #1
    acfc:	e7930102 	ldr	r0, [r3, r2, lsl #2]
    ad00:	e12fff1e 	bx	lr

0000ad04 <CMachineInfo::GetModelMajor() const>:
    ad04:	e5900010 	ldr	r0, [r0, #16]
    ad08:	e12fff1e 	bx	lr

0000ad0c <CMachineInfo::GetModelRevision() const>:
    ad0c:	e5900018 	ldr	r0, [r0, #24]
    ad10:	e12fff1e 	bx	lr

0000ad14 <CMachineInfo::GetSoCType() const>:
    ad14:	e5d00020 	ldrb	r0, [r0, #32]
    ad18:	e12fff1e 	bx	lr

0000ad1c <CMachineInfo::GetRAMSize() const>:
    ad1c:	e5900028 	ldr	r0, [r0, #40]	; 0x28
    ad20:	e12fff1e 	bx	lr

0000ad24 <CMachineInfo::GetSoCName() const>:
    ad24:	e5d02020 	ldrb	r2, [r0, #32]
    ad28:	e3043fd0 	movw	r3, #20432	; 0x4fd0
    ad2c:	e3403001 	movt	r3, #1
    ad30:	e0833102 	add	r3, r3, r2, lsl #2
    ad34:	e5930054 	ldr	r0, [r3, #84]	; 0x54
    ad38:	e12fff1e 	bx	lr

0000ad3c <CMachineInfo::GetRevisionRaw() const>:
    ad3c:	e5900000 	ldr	r0, [r0]
    ad40:	e12fff1e 	bx	lr

0000ad44 <CMachineInfo::GetActLEDInfo() const>:
    ad44:	e5d02008 	ldrb	r2, [r0, #8]
    ad48:	e3043fd0 	movw	r3, #20432	; 0x4fd0
    ad4c:	e3403001 	movt	r3, #1
    ad50:	e0833102 	add	r3, r3, r2, lsl #2
    ad54:	e5930068 	ldr	r0, [r3, #104]	; 0x68
    ad58:	e12fff1e 	bx	lr

0000ad5c <CMachineInfo::GetClockRate(unsigned int) const>:
    ad5c:	e92d4070 	push	{r4, r5, r6, lr}
    ad60:	e24dd028 	sub	sp, sp, #40	; 0x28
    ad64:	e1a04001 	mov	r4, r1
    ad68:	e1a06000 	mov	r6, r0
    ad6c:	e3a01000 	mov	r1, #0
    ad70:	e28d000c 	add	r0, sp, #12
    ad74:	eb001ed7 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    ad78:	e58d4020 	str	r4, [sp, #32]
    ad7c:	e3a03004 	mov	r3, #4
    ad80:	e58d3000 	str	r3, [sp]
    ad84:	e3a01002 	mov	r1, #2
    ad88:	e3401003 	movt	r1, #3
    ad8c:	e3a03014 	mov	r3, #20
    ad90:	e08d2003 	add	r2, sp, r3
    ad94:	e28d000c 	add	r0, sp, #12
    ad98:	eb001f14 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    ad9c:	e3500000 	cmp	r0, #0
    ada0:	0a000002 	beq	adb0 <CMachineInfo::GetClockRate(unsigned int) const+0x54>
    ada4:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    ada8:	e3550000 	cmp	r5, #0
    adac:	1a000026 	bne	ae4c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    adb0:	e58d4020 	str	r4, [sp, #32]
    adb4:	e3a03004 	mov	r3, #4
    adb8:	e58d3000 	str	r3, [sp]
    adbc:	e3a01047 	mov	r1, #71	; 0x47
    adc0:	e3401003 	movt	r1, #3
    adc4:	e3a03014 	mov	r3, #20
    adc8:	e08d2003 	add	r2, sp, r3
    adcc:	e28d000c 	add	r0, sp, #12
    add0:	eb001f06 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    add4:	e3500000 	cmp	r0, #0
    add8:	0a000002 	beq	ade8 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
    addc:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    ade0:	e3550000 	cmp	r5, #0
    ade4:	1a000018 	bne	ae4c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    ade8:	e2444001 	sub	r4, r4, #1
    adec:	e354000d 	cmp	r4, #13
    adf0:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    adf4:	ea00001f 	b	ae78 <CMachineInfo::GetClockRate(unsigned int) const+0x11c>
    adf8:	0000ae60 	.word	0x0000ae60
    adfc:	0000ae88 	.word	0x0000ae88
    ae00:	0000ae78 	.word	0x0000ae78
    ae04:	0000ae30 	.word	0x0000ae30
    ae08:	0000ae78 	.word	0x0000ae78
    ae0c:	0000ae78 	.word	0x0000ae78
    ae10:	0000ae78 	.word	0x0000ae78
    ae14:	0000ae78 	.word	0x0000ae78
    ae18:	0000ae78 	.word	0x0000ae78
    ae1c:	0000ae78 	.word	0x0000ae78
    ae20:	0000ae78 	.word	0x0000ae78
    ae24:	0000ae60 	.word	0x0000ae60
    ae28:	0000ae78 	.word	0x0000ae78
    ae2c:	0000ae6c 	.word	0x0000ae6c
    ae30:	e5962010 	ldr	r2, [r6, #16]
    ae34:	e3a03ca3 	mov	r3, #41728	; 0xa300
    ae38:	e34131e1 	movt	r3, #4577	; 0x11e1
    ae3c:	e30b5280 	movw	r5, #45696	; 0xb280
    ae40:	e3405ee6 	movt	r5, #3814	; 0xee6
    ae44:	e3520002 	cmp	r2, #2
    ae48:	81a05003 	movhi	r5, r3
    ae4c:	e28d000c 	add	r0, sp, #12
    ae50:	eb001ea7 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
    ae54:	e1a00005 	mov	r0, r5
    ae58:	e28dd028 	add	sp, sp, #40	; 0x28
    ae5c:	e8bd8070 	pop	{r4, r5, r6, pc}
    ae60:	e3a05ce1 	mov	r5, #57600	; 0xe100
    ae64:	e34055f5 	movt	r5, #1525	; 0x5f5
    ae68:	eafffff7 	b	ae4c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    ae6c:	e30658c0 	movw	r5, #26816	; 0x68c0
    ae70:	e3405478 	movt	r5, #1144	; 0x478
    ae74:	eafffff4 	b	ae4c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    ae78:	e59f1014 	ldr	r1, [pc, #20]	; ae94 <CMachineInfo::GetClockRate(unsigned int) const+0x138>
    ae7c:	e3002161 	movw	r2, #353	; 0x161
    ae80:	e2810010 	add	r0, r1, #16
    ae84:	eb001d40 	bl	1238c <assertion_failed>
    ae88:	e3a05b1b 	mov	r5, #27648	; 0x6c00
    ae8c:	e34052dc 	movt	r5, #732	; 0x2dc
    ae90:	eaffffed 	b	ae4c <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
    ae94:	0001508c 	.word	0x0001508c

0000ae98 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    ae98:	e3510036 	cmp	r1, #54	; 0x36
    ae9c:	0a000006 	beq	aebc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    aea0:	e3510037 	cmp	r1, #55	; 0x37
    aea4:	1a00000e 	bne	aee4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
    aea8:	e5d03008 	ldrb	r3, [r0, #8]
    aeac:	e3530003 	cmp	r3, #3
    aeb0:	83a00028 	movhi	r0, #40	; 0x28
    aeb4:	93a0002d 	movls	r0, #45	; 0x2d
    aeb8:	e12fff1e 	bx	lr
    aebc:	e5d03008 	ldrb	r3, [r0, #8]
    aec0:	e3530003 	cmp	r3, #3
    aec4:	9a000004 	bls	aedc <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
    aec8:	e5903010 	ldr	r3, [r0, #16]
    aecc:	e3530003 	cmp	r3, #3
    aed0:	33a0002d 	movcc	r0, #45	; 0x2d
    aed4:	23a00029 	movcs	r0, #41	; 0x29
    aed8:	e12fff1e 	bx	lr
    aedc:	e3a00028 	mov	r0, #40	; 0x28
    aee0:	e12fff1e 	bx	lr
    aee4:	e59f100c 	ldr	r1, [pc, #12]	; aef8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
    aee8:	e3a02f69 	mov	r2, #420	; 0x1a4
    aeec:	e92d4010 	push	{r4, lr}
    aef0:	e2810010 	add	r0, r1, #16
    aef4:	eb001d24 	bl	1238c <assertion_failed>
    aef8:	0001508c 	.word	0x0001508c

0000aefc <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    aefc:	e5903010 	ldr	r3, [r0, #16]
    af00:	e3530003 	cmp	r3, #3
    af04:	8a000006 	bhi	af24 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
    af08:	e3510001 	cmp	r1, #1
    af0c:	0a00000b 	beq	af40 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    af10:	e3510006 	cmp	r1, #6
    af14:	e3a00c65 	mov	r0, #25856	; 0x6500
    af18:	e3410dcd 	movt	r0, #7629	; 0x1dcd
    af1c:	13a00000 	movne	r0, #0
    af20:	e12fff1e 	bx	lr
    af24:	e3510001 	cmp	r1, #1
    af28:	0a000007 	beq	af4c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    af2c:	e3510006 	cmp	r1, #6
    af30:	e3a00d5e 	mov	r0, #6016	; 0x1780
    af34:	e3420cb4 	movt	r0, #11444	; 0x2cb4
    af38:	13a00000 	movne	r0, #0
    af3c:	e12fff1e 	bx	lr
    af40:	e3a00b3e 	mov	r0, #63488	; 0xf800
    af44:	e3400124 	movt	r0, #292	; 0x124
    af48:	e12fff1e 	bx	lr
    af4c:	e30f0980 	movw	r0, #63872	; 0xf980
    af50:	e3400337 	movt	r0, #823	; 0x337
    af54:	e12fff1e 	bx	lr

0000af58 <CMachineInfo::GetDevice(TDeviceId) const>:
    af58:	e3510000 	cmp	r1, #0
    af5c:	1a000003 	bne	af70 <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    af60:	e5d00008 	ldrb	r0, [r0, #8]
    af64:	e2500001 	subs	r0, r0, #1
    af68:	13a00001 	movne	r0, #1
    af6c:	e12fff1e 	bx	lr
    af70:	e59f100c 	ldr	r1, [pc, #12]	; af84 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
    af74:	e30021df 	movw	r2, #479	; 0x1df
    af78:	e92d4010 	push	{r4, lr}
    af7c:	e2810010 	add	r0, r1, #16
    af80:	eb001d01 	bl	1238c <assertion_failed>
    af84:	0001508c 	.word	0x0001508c

0000af88 <CMachineInfo::ArePWMChannelsSwapped() const>:
    af88:	e5d03008 	ldrb	r3, [r0, #8]
    af8c:	e2430006 	sub	r0, r3, #6
    af90:	e3500002 	cmp	r0, #2
    af94:	83530003 	cmphi	r3, #3
    af98:	83a00001 	movhi	r0, #1
    af9c:	93a00000 	movls	r0, #0
    afa0:	e12fff1e 	bx	lr

0000afa4 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    afa4:	e307314c 	movw	r3, #29004	; 0x714c
    afa8:	e1a02000 	mov	r2, r0
    afac:	e3403001 	movt	r3, #1
    afb0:	e92d4010 	push	{r4, lr}
    afb4:	e5933000 	ldr	r3, [r3]
    afb8:	ea000002 	b	afc8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x24>
    afbc:	e1530002 	cmp	r3, r2
    afc0:	0a000006 	beq	afe0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x3c>
    afc4:	e1a02003 	mov	r2, r3
    afc8:	e3530000 	cmp	r3, #0
    afcc:	1afffffa 	bne	afbc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x18>
    afd0:	e59f108c 	ldr	r1, [pc, #140]	; b064 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    afd4:	e3a02e1f 	mov	r2, #496	; 0x1f0
    afd8:	e2810014 	add	r0, r1, #20
    afdc:	eb001cea 	bl	1238c <assertion_failed>
    afe0:	e3d1000f 	bics	r0, r1, #15
    afe4:	1a00000a 	bne	b014 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
    afe8:	e351000b 	cmp	r1, #11
    afec:	8a000018 	bhi	b054 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xb0>
    aff0:	e1d323b0 	ldrh	r2, [r3, #48]	; 0x30
    aff4:	e1a00152 	asr	r0, r2, r1
    aff8:	e3100001 	tst	r0, #1
    affc:	0a00000d 	beq	b038 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>
    b000:	e3a0c001 	mov	ip, #1
    b004:	e1a00001 	mov	r0, r1
    b008:	e1c2111c 	bic	r1, r2, ip, lsl r1
    b00c:	e1c313b0 	strh	r1, [r3, #48]	; 0x30
    b010:	e8bd8010 	pop	{r4, pc}
    b014:	e1d2c3b0 	ldrh	ip, [r2, #48]	; 0x30
    b018:	e3510081 	cmp	r1, #129	; 0x81
    b01c:	03a03006 	moveq	r3, #6
    b020:	13a0300b 	movne	r3, #11
    b024:	e1a0135c 	asr	r1, ip, r3
    b028:	e3110001 	tst	r1, #1
    b02c:	1a000003 	bne	b040 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x9c>
    b030:	e2533001 	subs	r3, r3, #1
    b034:	2afffffa 	bcs	b024 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x80>
    b038:	e3a00080 	mov	r0, #128	; 0x80
    b03c:	e8bd8010 	pop	{r4, pc}
    b040:	e3a01001 	mov	r1, #1
    b044:	e1a00003 	mov	r0, r3
    b048:	e1cc3311 	bic	r3, ip, r1, lsl r3
    b04c:	e1c233b0 	strh	r3, [r2, #48]	; 0x30
    b050:	e8bd8010 	pop	{r4, pc}
    b054:	e59f1008 	ldr	r1, [pc, #8]	; b064 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
    b058:	e30021f9 	movw	r2, #505	; 0x1f9
    b05c:	e2810024 	add	r0, r1, #36	; 0x24
    b060:	eb001cc9 	bl	1238c <assertion_failed>
    b064:	0001508c 	.word	0x0001508c

0000b068 <CMachineInfo::FreeDMAChannel(unsigned int)>:
    b068:	e307314c 	movw	r3, #29004	; 0x714c
    b06c:	e3403001 	movt	r3, #1
    b070:	e92d4010 	push	{r4, lr}
    b074:	e5933000 	ldr	r3, [r3]
    b078:	ea000002 	b	b088 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
    b07c:	e1530000 	cmp	r3, r0
    b080:	0a000006 	beq	b0a0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x38>
    b084:	e1a00003 	mov	r0, r3
    b088:	e3530000 	cmp	r3, #0
    b08c:	1afffffa 	bne	b07c <CMachineInfo::FreeDMAChannel(unsigned int)+0x14>
    b090:	e59f1050 	ldr	r1, [pc, #80]	; b0e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b094:	e300221d 	movw	r2, #541	; 0x21d
    b098:	e2810014 	add	r0, r1, #20
    b09c:	eb001cba 	bl	1238c <assertion_failed>
    b0a0:	e351000b 	cmp	r1, #11
    b0a4:	8a000007 	bhi	b0c8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
    b0a8:	e1d323b0 	ldrh	r2, [r3, #48]	; 0x30
    b0ac:	e1e00152 	mvn	r0, r2, asr r1
    b0b0:	e3100001 	tst	r0, #1
    b0b4:	0a000007 	beq	b0d8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
    b0b8:	e3a00001 	mov	r0, #1
    b0bc:	e1821110 	orr	r1, r2, r0, lsl r1
    b0c0:	e1c313b0 	strh	r1, [r3, #48]	; 0x30
    b0c4:	e8bd8010 	pop	{r4, pc}
    b0c8:	e59f1018 	ldr	r1, [pc, #24]	; b0e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b0cc:	e3002225 	movw	r2, #549	; 0x225
    b0d0:	e2810024 	add	r0, r1, #36	; 0x24
    b0d4:	eb001cac 	bl	1238c <assertion_failed>
    b0d8:	e59f1008 	ldr	r1, [pc, #8]	; b0e8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
    b0dc:	e3002226 	movw	r2, #550	; 0x226
    b0e0:	e2810040 	add	r0, r1, #64	; 0x40
    b0e4:	eb001ca8 	bl	1238c <assertion_failed>
    b0e8:	0001508c 	.word	0x0001508c

0000b0ec <CMachineInfo::Get()>:
    b0ec:	e307314c 	movw	r3, #29004	; 0x714c
    b0f0:	e3403001 	movt	r3, #1
    b0f4:	e5930000 	ldr	r0, [r3]
    b0f8:	e3500000 	cmp	r0, #0
    b0fc:	112fff1e 	bxne	lr
    b100:	e59f100c 	ldr	r1, [pc, #12]	; b114 <CMachineInfo::Get()+0x28>
    b104:	e300226d 	movw	r2, #621	; 0x26d
    b108:	e92d4010 	push	{r4, lr}
    b10c:	e2810014 	add	r0, r1, #20
    b110:	eb001c9d 	bl	1238c <assertion_failed>
    b114:	0001508c 	.word	0x0001508c

0000b118 <CScreenDevice::~CScreenDevice()>:
    b118:	e5d03010 	ldrb	r3, [r0, #16]
    b11c:	e59f2088 	ldr	r2, [pc, #136]	; b1ac <CScreenDevice::~CScreenDevice()+0x94>
    b120:	e3530000 	cmp	r3, #0
    b124:	e92d4070 	push	{r4, r5, r6, lr}
    b128:	e1a04000 	mov	r4, r0
    b12c:	e5802000 	str	r2, [r0]
    b130:	0a000003 	beq	b144 <CScreenDevice::~CScreenDevice()+0x2c>
    b134:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    b138:	e3500000 	cmp	r0, #0
    b13c:	0a000000 	beq	b144 <CScreenDevice::~CScreenDevice()+0x2c>
    b140:	eb001729 	bl	10dec <operator delete[](void*)>
    b144:	e5945018 	ldr	r5, [r4, #24]
    b148:	e3a03000 	mov	r3, #0
    b14c:	e5843024 	str	r3, [r4, #36]	; 0x24
    b150:	e1550003 	cmp	r5, r3
    b154:	0a000004 	beq	b16c <CScreenDevice::~CScreenDevice()+0x54>
    b158:	e1a00005 	mov	r0, r5
    b15c:	eb001d28 	bl	12604 <CBcmFrameBuffer::~CBcmFrameBuffer()>
    b160:	e3a01098 	mov	r1, #152	; 0x98
    b164:	e1a00005 	mov	r0, r5
    b168:	eb001725 	bl	10e04 <operator delete(void*, unsigned int)>
    b16c:	e5940020 	ldr	r0, [r4, #32]
    b170:	e3a03000 	mov	r3, #0
    b174:	e5843018 	str	r3, [r4, #24]
    b178:	e1500003 	cmp	r0, r3
    b17c:	0a000000 	beq	b184 <CScreenDevice::~CScreenDevice()+0x6c>
    b180:	eb001719 	bl	10dec <operator delete[](void*)>
    b184:	e3a03000 	mov	r3, #0
    b188:	e2840064 	add	r0, r4, #100	; 0x64
    b18c:	e5843020 	str	r3, [r4, #32]
    b190:	eb001f77 	bl	12f74 <CDMAChannel::~CDMAChannel()>
    b194:	e284001c 	add	r0, r4, #28
    b198:	eb001e37 	bl	12a7c <CCharGenerator::~CCharGenerator()>
    b19c:	e1a00004 	mov	r0, r4
    b1a0:	eb001ecd 	bl	12cdc <CDevice::~CDevice()>
    b1a4:	e1a00004 	mov	r0, r4
    b1a8:	e8bd8070 	pop	{r4, r5, r6, pc}
    b1ac:	000152cc 	.word	0x000152cc

0000b1b0 <CScreenDevice::~CScreenDevice()>:
    b1b0:	e92d4010 	push	{r4, lr}
    b1b4:	e1a04000 	mov	r4, r0
    b1b8:	ebffffd6 	bl	b118 <CScreenDevice::~CScreenDevice()>
    b1bc:	e1a00004 	mov	r0, r4
    b1c0:	e3a01090 	mov	r1, #144	; 0x90
    b1c4:	eb00170e 	bl	10e04 <operator delete(void*, unsigned int)>
    b1c8:	e1a00004 	mov	r0, r4
    b1cc:	e8bd8010 	pop	{r4, pc}

0000b1d0 <CScreenDevice::InvertCursor() [clone .part.0]>:
    b1d0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    b1d4:	e280701c 	add	r7, r0, #28
    b1d8:	e5909020 	ldr	r9, [r0, #32]
    b1dc:	e1a04000 	mov	r4, r0
    b1e0:	e1a00007 	mov	r0, r7
    b1e4:	eb001e29 	bl	12a90 <CCharGenerator::GetUnderline() const>
    b1e8:	e1a08000 	mov	r8, r0
    b1ec:	e1a00007 	mov	r0, r7
    b1f0:	eb001e24 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    b1f4:	e1500008 	cmp	r0, r8
    b1f8:	9a000034 	bls	b2d0 <CScreenDevice::InvertCursor() [clone .part.0]+0x100>
    b1fc:	e1a06009 	mov	r6, r9
    b200:	e3a05000 	mov	r5, #0
    b204:	ea00000a 	b	b234 <CScreenDevice::InvertCursor() [clone .part.0]+0x64>
    b208:	e1530002 	cmp	r3, r2
    b20c:	2a000004 	bcs	b224 <CScreenDevice::InvertCursor() [clone .part.0]+0x54>
    b210:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    b214:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    b218:	e0882002 	add	r2, r8, r2
    b21c:	e1520001 	cmp	r2, r1
    b220:	3a00001c 	bcc	b298 <CScreenDevice::InvertCursor() [clone .part.0]+0xc8>
    b224:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    b228:	e1c630b0 	strh	r3, [r6]
    b22c:	e2855001 	add	r5, r5, #1
    b230:	e2866002 	add	r6, r6, #2
    b234:	e1a00007 	mov	r0, r7
    b238:	e1a09006 	mov	r9, r6
    b23c:	eb001e0f 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    b240:	e1500005 	cmp	r0, r5
    b244:	9a00001c 	bls	b2bc <CScreenDevice::InvertCursor() [clone .part.0]+0xec>
    b248:	e5d43051 	ldrb	r3, [r4, #81]	; 0x51
    b24c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    b250:	e3530000 	cmp	r3, #0
    b254:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    b258:	e0853003 	add	r3, r5, r3
    b25c:	0affffe9 	beq	b208 <CScreenDevice::InvertCursor() [clone .part.0]+0x38>
    b260:	e1530002 	cmp	r3, r2
    b264:	2afffff0 	bcs	b22c <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
    b268:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    b26c:	e5941034 	ldr	r1, [r4, #52]	; 0x34
    b270:	e0882002 	add	r2, r8, r2
    b274:	e1520001 	cmp	r2, r1
    b278:	2affffeb 	bcs	b22c <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
    b27c:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    b280:	e1d600b0 	ldrh	r0, [r6]
    b284:	e023329c 	mla	r3, ip, r2, r3
    b288:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    b28c:	e1a03083 	lsl	r3, r3, #1
    b290:	e18100b3 	strh	r0, [r1, r3]
    b294:	eaffffe4 	b	b22c <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
    b298:	e594002c 	ldr	r0, [r4, #44]	; 0x2c
    b29c:	e5941024 	ldr	r1, [r4, #36]	; 0x24
    b2a0:	e0233290 	mla	r3, r0, r2, r3
    b2a4:	e1a03083 	lsl	r3, r3, #1
    b2a8:	e19120b3 	ldrh	r2, [r1, r3]
    b2ac:	e1c620b0 	strh	r2, [r6]
    b2b0:	e1d425b2 	ldrh	r2, [r4, #82]	; 0x52
    b2b4:	e18120b3 	strh	r2, [r1, r3]
    b2b8:	eaffffdb 	b	b22c <CScreenDevice::InvertCursor() [clone .part.0]+0x5c>
    b2bc:	e1a00007 	mov	r0, r7
    b2c0:	e2888001 	add	r8, r8, #1
    b2c4:	eb001def 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    b2c8:	e1500008 	cmp	r0, r8
    b2cc:	8affffca 	bhi	b1fc <CScreenDevice::InvertCursor() [clone .part.0]+0x2c>
    b2d0:	e5d43051 	ldrb	r3, [r4, #81]	; 0x51
    b2d4:	e2233001 	eor	r3, r3, #1
    b2d8:	e5c43051 	strb	r3, [r4, #81]	; 0x51
    b2dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000b2e0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
    b2e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b2e4:	e1a04000 	mov	r4, r0
    b2e8:	e1a05001 	mov	r5, r1
    b2ec:	e1a07002 	mov	r7, r2
    b2f0:	e1a06003 	mov	r6, r3
    b2f4:	eb001ea5 	bl	12d90 <CDevice::CDevice()>
    b2f8:	e59d3018 	ldr	r3, [sp, #24]
    b2fc:	e284001c 	add	r0, r4, #28
    b300:	e5845008 	str	r5, [r4, #8]
    b304:	e3a05000 	mov	r5, #0
    b308:	e5843014 	str	r3, [r4, #20]
    b30c:	e59f305c 	ldr	r3, [pc, #92]	; b370 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x90>
    b310:	e584700c 	str	r7, [r4, #12]
    b314:	e5843000 	str	r3, [r4]
    b318:	e5c46010 	strb	r6, [r4, #16]
    b31c:	e5845018 	str	r5, [r4, #24]
    b320:	eb001dd2 	bl	12a70 <CCharGenerator::CCharGenerator()>
    b324:	e5845020 	str	r5, [r4, #32]
    b328:	e3a03001 	mov	r3, #1
    b32c:	e34f3fdf 	movt	r3, #65503	; 0xffdf
    b330:	e1a02005 	mov	r2, r5
    b334:	e5843050 	str	r3, [r4, #80]	; 0x50
    b338:	e3a01081 	mov	r1, #129	; 0x81
    b33c:	e5845024 	str	r5, [r4, #36]	; 0x24
    b340:	e2840064 	add	r0, r4, #100	; 0x64
    b344:	e584503c 	str	r5, [r4, #60]	; 0x3c
    b348:	e5845040 	str	r5, [r4, #64]	; 0x40
    b34c:	e5845048 	str	r5, [r4, #72]	; 0x48
    b350:	e584504c 	str	r5, [r4, #76]	; 0x4c
    b354:	e5845054 	str	r5, [r4, #84]	; 0x54
    b358:	e5c45060 	strb	r5, [r4, #96]	; 0x60
    b35c:	eb001ec9 	bl	12e88 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    b360:	e3a03001 	mov	r3, #1
    b364:	e1a00004 	mov	r0, r4
    b368:	e584308c 	str	r3, [r4, #140]	; 0x8c
    b36c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    b370:	000152cc 	.word	0x000152cc

0000b374 <CScreenDevice::GetWidth() const>:
    b374:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    b378:	e12fff1e 	bx	lr

0000b37c <CScreenDevice::GetHeight() const>:
    b37c:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    b380:	e12fff1e 	bx	lr

0000b384 <CScreenDevice::GetColumns() const>:
    b384:	e92d4010 	push	{r4, lr}
    b388:	e280001c 	add	r0, r0, #28
    b38c:	e5904014 	ldr	r4, [r0, #20]
    b390:	eb001dba 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    b394:	e730f014 	udiv	r0, r4, r0
    b398:	e8bd8010 	pop	{r4, pc}

0000b39c <CScreenDevice::GetRows() const>:
    b39c:	e92d4010 	push	{r4, lr}
    b3a0:	e280001c 	add	r0, r0, #28
    b3a4:	e590401c 	ldr	r4, [r0, #28]
    b3a8:	eb001db6 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    b3ac:	e730f014 	udiv	r0, r4, r0
    b3b0:	e8bd8010 	pop	{r4, pc}

0000b3b4 <CScreenDevice::GetFrameBuffer()>:
    b3b4:	e5900018 	ldr	r0, [r0, #24]
    b3b8:	e12fff1e 	bx	lr

0000b3bc <CScreenDevice::GetStatus()>:
    b3bc:	e5912028 	ldr	r2, [r1, #40]	; 0x28
    b3c0:	e591c024 	ldr	ip, [r1, #36]	; 0x24
    b3c4:	e5802004 	str	r2, [r0, #4]
    b3c8:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    b3cc:	e580c000 	str	ip, [r0]
    b3d0:	e580200c 	str	r2, [r0, #12]
    b3d4:	e5912048 	ldr	r2, [r1, #72]	; 0x48
    b3d8:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    b3dc:	e5802014 	str	r2, [r0, #20]
    b3e0:	e5d12050 	ldrb	r2, [r1, #80]	; 0x50
    b3e4:	e580c008 	str	ip, [r0, #8]
    b3e8:	e5c0201c 	strb	r2, [r0, #28]
    b3ec:	e591c044 	ldr	ip, [r1, #68]	; 0x44
    b3f0:	e5912058 	ldr	r2, [r1, #88]	; 0x58
    b3f4:	e580c010 	str	ip, [r0, #16]
    b3f8:	e5802024 	str	r2, [r0, #36]	; 0x24
    b3fc:	e591c04c 	ldr	ip, [r1, #76]	; 0x4c
    b400:	e591205c 	ldr	r2, [r1, #92]	; 0x5c
    b404:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    b408:	e580c018 	str	ip, [r0, #24]
    b40c:	e5d1e060 	ldrb	lr, [r1, #96]	; 0x60
    b410:	e1d1c5b2 	ldrh	ip, [r1, #82]	; 0x52
    b414:	e5802028 	str	r2, [r0, #40]	; 0x28
    b418:	e5912054 	ldr	r2, [r1, #84]	; 0x54
    b41c:	e5c0e02c 	strb	lr, [r0, #44]	; 0x2c
    b420:	e1c0c1be 	strh	ip, [r0, #30]
    b424:	e5802020 	str	r2, [r0, #32]
    b428:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b42c <CScreenDevice::SetStatus(TScreenStatus const&)>:
    b42c:	e5902028 	ldr	r2, [r0, #40]	; 0x28
    b430:	e5913004 	ldr	r3, [r1, #4]
    b434:	e1520003 	cmp	r2, r3
    b438:	0a000001 	beq	b444 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    b43c:	e3a00000 	mov	r0, #0
    b440:	e12fff1e 	bx	lr
    b444:	e92d4070 	push	{r4, r5, r6, lr}
    b448:	e1a05001 	mov	r5, r1
    b44c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b450:	e1a04000 	mov	r4, r0
    b454:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
    b458:	e1510003 	cmp	r1, r3
    b45c:	1a000031 	bne	b528 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b460:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
    b464:	e3500000 	cmp	r0, #0
    b468:	1a000022 	bne	b4f8 <CScreenDevice::SetStatus(TScreenStatus const&)+0xcc>
    b46c:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    b470:	e3530000 	cmp	r3, #0
    b474:	1a00002b 	bne	b528 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b478:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b47c:	e3530000 	cmp	r3, #0
    b480:	1a000028 	bne	b528 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b484:	e5951000 	ldr	r1, [r5]
    b488:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    b48c:	eb001537 	bl	10970 <memcpy>
    b490:	e595300c 	ldr	r3, [r5, #12]
    b494:	e594208c 	ldr	r2, [r4, #140]	; 0x8c
    b498:	e5951008 	ldr	r1, [r5, #8]
    b49c:	e5843040 	str	r3, [r4, #64]	; 0x40
    b4a0:	e3520000 	cmp	r2, #0
    b4a4:	e1c521d0 	ldrd	r2, [r5, #16]
    b4a8:	e584103c 	str	r1, [r4, #60]	; 0x3c
    b4ac:	e5951018 	ldr	r1, [r5, #24]
    b4b0:	e1c424f4 	strd	r2, [r4, #68]	; 0x44
    b4b4:	e5d5301c 	ldrb	r3, [r5, #28]
    b4b8:	e1d521be 	ldrh	r2, [r5, #30]
    b4bc:	e5c43050 	strb	r3, [r4, #80]	; 0x50
    b4c0:	e1d532b0 	ldrh	r3, [r5, #32]
    b4c4:	e5d50022 	ldrb	r0, [r5, #34]	; 0x22
    b4c8:	e584104c 	str	r1, [r4, #76]	; 0x4c
    b4cc:	e1c425b2 	strh	r2, [r4, #82]	; 0x52
    b4d0:	e5d51023 	ldrb	r1, [r5, #35]	; 0x23
    b4d4:	e1c435b4 	strh	r3, [r4, #84]	; 0x54
    b4d8:	e1c522d4 	ldrd	r2, [r5, #36]	; 0x24
    b4dc:	e5c40056 	strb	r0, [r4, #86]	; 0x56
    b4e0:	e5c41057 	strb	r1, [r4, #87]	; 0x57
    b4e4:	e1c425f8 	strd	r2, [r4, #88]	; 0x58
    b4e8:	1a000010 	bne	b530 <CScreenDevice::SetStatus(TScreenStatus const&)+0x104>
    b4ec:	f57ff05f 	dmb	sy
    b4f0:	e3a00001 	mov	r0, #1
    b4f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b4f8:	eb0019ab 	bl	11bac <EnterCritical>
    b4fc:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    b500:	e3530000 	cmp	r3, #0
    b504:	1a000003 	bne	b518 <CScreenDevice::SetStatus(TScreenStatus const&)+0xec>
    b508:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b50c:	e3530000 	cmp	r3, #0
    b510:	05942028 	ldreq	r2, [r4, #40]	; 0x28
    b514:	0affffda 	beq	b484 <CScreenDevice::SetStatus(TScreenStatus const&)+0x58>
    b518:	e594308c 	ldr	r3, [r4, #140]	; 0x8c
    b51c:	e3530000 	cmp	r3, #0
    b520:	0a000000 	beq	b528 <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
    b524:	eb0019cb 	bl	11c58 <LeaveCritical>
    b528:	e3a00000 	mov	r0, #0
    b52c:	e8bd8070 	pop	{r4, r5, r6, pc}
    b530:	eb0019c8 	bl	11c58 <LeaveCritical>
    b534:	eaffffec 	b	b4ec <CScreenDevice::SetStatus(TScreenStatus const&)+0xc0>

0000b538 <CScreenDevice::CarriageReturn()>:
    b538:	e3a03000 	mov	r3, #0
    b53c:	e5803048 	str	r3, [r0, #72]	; 0x48
    b540:	e12fff1e 	bx	lr

0000b544 <CScreenDevice::CursorHome()>:
    b544:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b548:	e3a02000 	mov	r2, #0
    b54c:	e1c024f8 	strd	r2, [r0, #72]	; 0x48
    b550:	e12fff1e 	bx	lr

0000b554 <CScreenDevice::CursorLeft()>:
    b554:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    b558:	e92d4070 	push	{r4, r5, r6, lr}
    b55c:	e3530000 	cmp	r3, #0
    b560:	e1a04000 	mov	r4, r0
    b564:	1a00000f 	bne	b5a8 <CScreenDevice::CursorLeft()+0x54>
    b568:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    b56c:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b570:	e1520003 	cmp	r2, r3
    b574:	98bd8070 	popls	{r4, r5, r6, pc}
    b578:	e5905030 	ldr	r5, [r0, #48]	; 0x30
    b57c:	e280601c 	add	r6, r0, #28
    b580:	e1a00006 	mov	r0, r6
    b584:	eb001d3d 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    b588:	e0455000 	sub	r5, r5, r0
    b58c:	e1a00006 	mov	r0, r6
    b590:	e5845048 	str	r5, [r4, #72]	; 0x48
    b594:	eb001d3b 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    b598:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b59c:	e0433000 	sub	r3, r3, r0
    b5a0:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b5a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    b5a8:	e280001c 	add	r0, r0, #28
    b5ac:	eb001d33 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    b5b0:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    b5b4:	e0433000 	sub	r3, r3, r0
    b5b8:	e5843048 	str	r3, [r4, #72]	; 0x48
    b5bc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000b5c0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b5c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b5c4:	e280701c 	add	r7, r0, #28
    b5c8:	e1a05000 	mov	r5, r0
    b5cc:	e1a00007 	mov	r0, r7
    b5d0:	e1a04002 	mov	r4, r2
    b5d4:	e1a06001 	mov	r6, r1
    b5d8:	e2444001 	sub	r4, r4, #1
    b5dc:	eb001d27 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    b5e0:	e1a02000 	mov	r2, r0
    b5e4:	e1a00007 	mov	r0, r7
    b5e8:	e0040492 	mul	r4, r2, r4
    b5ec:	eb001d25 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    b5f0:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    b5f4:	e1530004 	cmp	r3, r4
    b5f8:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    b5fc:	e5953040 	ldr	r3, [r5, #64]	; 0x40
    b600:	e2466001 	sub	r6, r6, #1
    b604:	e0060690 	mul	r6, r0, r6
    b608:	e1530006 	cmp	r3, r6
    b60c:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
    b610:	e5953044 	ldr	r3, [r5, #68]	; 0x44
    b614:	e1530006 	cmp	r3, r6
    b618:	85854048 	strhi	r4, [r5, #72]	; 0x48
    b61c:	8585604c 	strhi	r6, [r5, #76]	; 0x4c
    b620:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b624 <CScreenDevice::CursorUp()>:
    b624:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    b628:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b62c:	e1520003 	cmp	r2, r3
    b630:	912fff1e 	bxls	lr
    b634:	e92d4010 	push	{r4, lr}
    b638:	e1a04000 	mov	r4, r0
    b63c:	e280001c 	add	r0, r0, #28
    b640:	eb001d10 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    b644:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b648:	e0433000 	sub	r3, r3, r0
    b64c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b650:	e8bd8010 	pop	{r4, pc}

0000b654 <CScreenDevice::DeleteChars(unsigned int)>:
    b654:	e12fff1e 	bx	lr

0000b658 <CScreenDevice::DeleteLines(unsigned int)>:
    b658:	e12fff1e 	bx	lr

0000b65c <CScreenDevice::GetTextBackgroundColor()>:
    b65c:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    b660:	e3530000 	cmp	r3, #0
    b664:	11d005b2 	ldrhne	r0, [r0, #82]	; 0x52
    b668:	01d005b4 	ldrheq	r0, [r0, #84]	; 0x54
    b66c:	e12fff1e 	bx	lr

0000b670 <CScreenDevice::GetTextColor()>:
    b670:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    b674:	e3530000 	cmp	r3, #0
    b678:	11d005b4 	ldrhne	r0, [r0, #84]	; 0x54
    b67c:	01d005b2 	ldrheq	r0, [r0, #82]	; 0x52
    b680:	e12fff1e 	bx	lr

0000b684 <CScreenDevice::InsertLines(unsigned int)>:
    b684:	e12fff1e 	bx	lr

0000b688 <CScreenDevice::InsertMode(bool)>:
    b688:	e5c01057 	strb	r1, [r0, #87]	; 0x57
    b68c:	e12fff1e 	bx	lr

0000b690 <CScreenDevice::ReverseScroll()>:
    b690:	e12fff1e 	bx	lr

0000b694 <CScreenDevice::SetCursorMode(bool)>:
    b694:	e5c01050 	strb	r1, [r0, #80]	; 0x50
    b698:	e12fff1e 	bx	lr

0000b69c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    b69c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    b6a0:	e280701c 	add	r7, r0, #28
    b6a4:	e1a05000 	mov	r5, r0
    b6a8:	e1a00007 	mov	r0, r7
    b6ac:	e1a04001 	mov	r4, r1
    b6b0:	e1a06002 	mov	r6, r2
    b6b4:	e2444001 	sub	r4, r4, #1
    b6b8:	eb001cf2 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    b6bc:	e1a01000 	mov	r1, r0
    b6c0:	e1a00007 	mov	r0, r7
    b6c4:	e0040491 	mul	r4, r1, r4
    b6c8:	eb001cee 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    b6cc:	e0000096 	mul	r0, r6, r0
    b6d0:	e5951038 	ldr	r1, [r5, #56]	; 0x38
    b6d4:	e1510000 	cmp	r1, r0
    b6d8:	31a03001 	movcc	r3, r1
    b6dc:	21a03000 	movcs	r3, r0
    b6e0:	e1540003 	cmp	r4, r3
    b6e4:	33a03001 	movcc	r3, #1
    b6e8:	23a03000 	movcs	r3, #0
    b6ec:	e1510000 	cmp	r1, r0
    b6f0:	33a03000 	movcc	r3, #0
    b6f4:	e3530000 	cmp	r3, #0
    b6f8:	e3a03000 	mov	r3, #0
    b6fc:	15854040 	strne	r4, [r5, #64]	; 0x40
    b700:	05954040 	ldreq	r4, [r5, #64]	; 0x40
    b704:	15850044 	strne	r0, [r5, #68]	; 0x44
    b708:	e585404c 	str	r4, [r5, #76]	; 0x4c
    b70c:	e5853048 	str	r3, [r5, #72]	; 0x48
    b710:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000b714 <CScreenDevice::SetStandoutMode(unsigned int)>:
    b714:	e351006b 	cmp	r1, #107	; 0x6b
    b718:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    b71c:	ea00006d 	b	b8d8 <CScreenDevice::SetStandoutMode(unsigned int)+0x1c4>
    b720:	0000b8f8 	.word	0x0000b8f8
    b724:	0000b8dc 	.word	0x0000b8dc
    b728:	0000b8ec 	.word	0x0000b8ec
    b72c:	0000b8d8 	.word	0x0000b8d8
    b730:	0000b8d8 	.word	0x0000b8d8
    b734:	0000b8d8 	.word	0x0000b8d8
    b738:	0000b8d8 	.word	0x0000b8d8
    b73c:	0000ba84 	.word	0x0000ba84
    b740:	0000b8d8 	.word	0x0000b8d8
    b744:	0000b8d8 	.word	0x0000b8d8
    b748:	0000b8d8 	.word	0x0000b8d8
    b74c:	0000b8d8 	.word	0x0000b8d8
    b750:	0000b8d8 	.word	0x0000b8d8
    b754:	0000b8d8 	.word	0x0000b8d8
    b758:	0000b8d8 	.word	0x0000b8d8
    b75c:	0000b8d8 	.word	0x0000b8d8
    b760:	0000b8d8 	.word	0x0000b8d8
    b764:	0000b8d8 	.word	0x0000b8d8
    b768:	0000b8d8 	.word	0x0000b8d8
    b76c:	0000b8d8 	.word	0x0000b8d8
    b770:	0000b8d8 	.word	0x0000b8d8
    b774:	0000b8d8 	.word	0x0000b8d8
    b778:	0000b8d8 	.word	0x0000b8d8
    b77c:	0000b8d8 	.word	0x0000b8d8
    b780:	0000b8d8 	.word	0x0000b8d8
    b784:	0000b8d8 	.word	0x0000b8d8
    b788:	0000b8d8 	.word	0x0000b8d8
    b78c:	0000b8f8 	.word	0x0000b8f8
    b790:	0000b8d8 	.word	0x0000b8d8
    b794:	0000b8d8 	.word	0x0000b8d8
    b798:	0000b9d8 	.word	0x0000b9d8
    b79c:	0000b9cc 	.word	0x0000b9cc
    b7a0:	0000b9c0 	.word	0x0000b9c0
    b7a4:	0000b9b0 	.word	0x0000b9b0
    b7a8:	0000b8ec 	.word	0x0000b8ec
    b7ac:	0000b9a0 	.word	0x0000b9a0
    b7b0:	0000b994 	.word	0x0000b994
    b7b4:	0000b984 	.word	0x0000b984
    b7b8:	0000b8d8 	.word	0x0000b8d8
    b7bc:	0000b8d8 	.word	0x0000b8d8
    b7c0:	0000b978 	.word	0x0000b978
    b7c4:	0000b96c 	.word	0x0000b96c
    b7c8:	0000b960 	.word	0x0000b960
    b7cc:	0000b950 	.word	0x0000b950
    b7d0:	0000b944 	.word	0x0000b944
    b7d4:	0000b934 	.word	0x0000b934
    b7d8:	0000b928 	.word	0x0000b928
    b7dc:	0000b918 	.word	0x0000b918
    b7e0:	0000b8d8 	.word	0x0000b8d8
    b7e4:	0000b8d8 	.word	0x0000b8d8
    b7e8:	0000b8d8 	.word	0x0000b8d8
    b7ec:	0000b8d8 	.word	0x0000b8d8
    b7f0:	0000b8d8 	.word	0x0000b8d8
    b7f4:	0000b8d8 	.word	0x0000b8d8
    b7f8:	0000b8d8 	.word	0x0000b8d8
    b7fc:	0000b8d8 	.word	0x0000b8d8
    b800:	0000b8d8 	.word	0x0000b8d8
    b804:	0000b8d8 	.word	0x0000b8d8
    b808:	0000b8d8 	.word	0x0000b8d8
    b80c:	0000b8d8 	.word	0x0000b8d8
    b810:	0000b8d8 	.word	0x0000b8d8
    b814:	0000b8d8 	.word	0x0000b8d8
    b818:	0000b8d8 	.word	0x0000b8d8
    b81c:	0000b8d8 	.word	0x0000b8d8
    b820:	0000b8d8 	.word	0x0000b8d8
    b824:	0000b8d8 	.word	0x0000b8d8
    b828:	0000b8d8 	.word	0x0000b8d8
    b82c:	0000b8d8 	.word	0x0000b8d8
    b830:	0000b8d8 	.word	0x0000b8d8
    b834:	0000b8d8 	.word	0x0000b8d8
    b838:	0000b8d8 	.word	0x0000b8d8
    b83c:	0000b8d8 	.word	0x0000b8d8
    b840:	0000b8d8 	.word	0x0000b8d8
    b844:	0000b8d8 	.word	0x0000b8d8
    b848:	0000b8d8 	.word	0x0000b8d8
    b84c:	0000b8d8 	.word	0x0000b8d8
    b850:	0000b8d8 	.word	0x0000b8d8
    b854:	0000b8d8 	.word	0x0000b8d8
    b858:	0000b8d8 	.word	0x0000b8d8
    b85c:	0000b8d8 	.word	0x0000b8d8
    b860:	0000b8d8 	.word	0x0000b8d8
    b864:	0000b8d8 	.word	0x0000b8d8
    b868:	0000b8d8 	.word	0x0000b8d8
    b86c:	0000b8d8 	.word	0x0000b8d8
    b870:	0000b8d8 	.word	0x0000b8d8
    b874:	0000b8d8 	.word	0x0000b8d8
    b878:	0000b8d8 	.word	0x0000b8d8
    b87c:	0000b8d8 	.word	0x0000b8d8
    b880:	0000b8d8 	.word	0x0000b8d8
    b884:	0000b8d8 	.word	0x0000b8d8
    b888:	0000ba78 	.word	0x0000ba78
    b88c:	0000b8dc 	.word	0x0000b8dc
    b890:	0000b90c 	.word	0x0000b90c
    b894:	0000ba3c 	.word	0x0000ba3c
    b898:	0000ba30 	.word	0x0000ba30
    b89c:	0000ba24 	.word	0x0000ba24
    b8a0:	0000ba18 	.word	0x0000ba18
    b8a4:	0000ba0c 	.word	0x0000ba0c
    b8a8:	0000b8d8 	.word	0x0000b8d8
    b8ac:	0000b8d8 	.word	0x0000b8d8
    b8b0:	0000ba00 	.word	0x0000ba00
    b8b4:	0000b9f0 	.word	0x0000b9f0
    b8b8:	0000b9e4 	.word	0x0000b9e4
    b8bc:	0000ba60 	.word	0x0000ba60
    b8c0:	0000ba54 	.word	0x0000ba54
    b8c4:	0000ba48 	.word	0x0000ba48
    b8c8:	0000ba6c 	.word	0x0000ba6c
    b8cc:	0000b8d0 	.word	0x0000b8d0
    b8d0:	e3e03020 	mvn	r3, #32
    b8d4:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b8d8:	e12fff1e 	bx	lr
    b8dc:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
    b8e0:	e34f3fff 	movt	r3, #65535	; 0xffff
    b8e4:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b8e8:	e12fff1e 	bx	lr
    b8ec:	e3a03015 	mov	r3, #21
    b8f0:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b8f4:	e12fff1e 	bx	lr
    b8f8:	e3a02000 	mov	r2, #0
    b8fc:	e3e03020 	mvn	r3, #32
    b900:	e5c02056 	strb	r2, [r0, #86]	; 0x56
    b904:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b908:	e12fff1e 	bx	lr
    b90c:	e30537ca 	movw	r3, #22474	; 0x57ca
    b910:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b914:	e12fff1e 	bx	lr
    b918:	e30a3d55 	movw	r3, #44373	; 0xad55
    b91c:	e34f3fff 	movt	r3, #65535	; 0xffff
    b920:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b924:	e12fff1e 	bx	lr
    b928:	e3003555 	movw	r3, #1365	; 0x555
    b92c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b930:	e12fff1e 	bx	lr
    b934:	e30a3815 	movw	r3, #43029	; 0xa815
    b938:	e34f3fff 	movt	r3, #65535	; 0xffff
    b93c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b940:	e12fff1e 	bx	lr
    b944:	e3a03015 	mov	r3, #21
    b948:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b94c:	e12fff1e 	bx	lr
    b950:	e30a3a80 	movw	r3, #43648	; 0xaa80
    b954:	e34f3fff 	movt	r3, #65535	; 0xffff
    b958:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b95c:	e12fff1e 	bx	lr
    b960:	e3a03d15 	mov	r3, #1344	; 0x540
    b964:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b968:	e12fff1e 	bx	lr
    b96c:	e3a03b2a 	mov	r3, #43008	; 0xa800
    b970:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b974:	e12fff1e 	bx	lr
    b978:	e3a03000 	mov	r3, #0
    b97c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b980:	e12fff1e 	bx	lr
    b984:	e30a3d55 	movw	r3, #44373	; 0xad55
    b988:	e34f3fff 	movt	r3, #65535	; 0xffff
    b98c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b990:	e12fff1e 	bx	lr
    b994:	e3003555 	movw	r3, #1365	; 0x555
    b998:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b99c:	e12fff1e 	bx	lr
    b9a0:	e30a3815 	movw	r3, #43029	; 0xa815
    b9a4:	e34f3fff 	movt	r3, #65535	; 0xffff
    b9a8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9ac:	e12fff1e 	bx	lr
    b9b0:	e30a3a80 	movw	r3, #43648	; 0xaa80
    b9b4:	e34f3fff 	movt	r3, #65535	; 0xffff
    b9b8:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9bc:	e12fff1e 	bx	lr
    b9c0:	e3a03d15 	mov	r3, #1344	; 0x540
    b9c4:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9c8:	e12fff1e 	bx	lr
    b9cc:	e3a03b2a 	mov	r3, #43008	; 0xa800
    b9d0:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9d4:	e12fff1e 	bx	lr
    b9d8:	e3a03000 	mov	r3, #0
    b9dc:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b9e0:	e12fff1e 	bx	lr
    b9e4:	e30537ca 	movw	r3, #22474	; 0x57ca
    b9e8:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b9ec:	e12fff1e 	bx	lr
    b9f0:	e30f3a8a 	movw	r3, #64138	; 0xfa8a
    b9f4:	e34f3fff 	movt	r3, #65535	; 0xffff
    b9f8:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    b9fc:	e12fff1e 	bx	lr
    ba00:	e305328a 	movw	r3, #21130	; 0x528a
    ba04:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba08:	e12fff1e 	bx	lr
    ba0c:	e3e03020 	mvn	r3, #32
    ba10:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba14:	e12fff1e 	bx	lr
    ba18:	e30537df 	movw	r3, #22495	; 0x57df
    ba1c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba20:	e12fff1e 	bx	lr
    ba24:	e3e03e56 	mvn	r3, #1376	; 0x560
    ba28:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba2c:	e12fff1e 	bx	lr
    ba30:	e305329f 	movw	r3, #21151	; 0x529f
    ba34:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba38:	e12fff1e 	bx	lr
    ba3c:	e3e03035 	mvn	r3, #53	; 0x35
    ba40:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba44:	e12fff1e 	bx	lr
    ba48:	e3e03e56 	mvn	r3, #1376	; 0x560
    ba4c:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba50:	e12fff1e 	bx	lr
    ba54:	e305329f 	movw	r3, #21151	; 0x529f
    ba58:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba5c:	e12fff1e 	bx	lr
    ba60:	e3e03035 	mvn	r3, #53	; 0x35
    ba64:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba68:	e12fff1e 	bx	lr
    ba6c:	e30537df 	movw	r3, #22495	; 0x57df
    ba70:	e1c035b4 	strh	r3, [r0, #84]	; 0x54
    ba74:	e12fff1e 	bx	lr
    ba78:	e305328a 	movw	r3, #21130	; 0x528a
    ba7c:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    ba80:	e12fff1e 	bx	lr
    ba84:	e3a03001 	mov	r3, #1
    ba88:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    ba8c:	e12fff1e 	bx	lr

0000ba90 <CScreenDevice::Scroll()>:
    ba90:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ba94:	e1a05000 	mov	r5, r0
    ba98:	e24dd008 	sub	sp, sp, #8
    ba9c:	e280001c 	add	r0, r0, #28
    baa0:	eb001bf8 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    baa4:	e595c040 	ldr	ip, [r5, #64]	; 0x40
    baa8:	e1a04000 	mov	r4, r0
    baac:	e5956044 	ldr	r6, [r5, #68]	; 0x44
    bab0:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
    bab4:	e046600c 	sub	r6, r6, ip
    bab8:	e0466000 	sub	r6, r6, r0
    babc:	e1a03081 	lsl	r3, r1, #1
    bac0:	e0060693 	mul	r6, r3, r6
    bac4:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    bac8:	e0070c91 	mul	r7, r1, ip
    bacc:	e3560000 	cmp	r6, #0
    bad0:	e0827087 	add	r7, r2, r7, lsl #1
    bad4:	1a00001d 	bne	bb50 <CScreenDevice::Scroll()+0xc0>
    bad8:	e0030491 	mul	r3, r1, r4
    badc:	e1a03083 	lsl	r3, r3, #1
    bae0:	e1a0c123 	lsr	ip, r3, #2
    bae4:	e35c0000 	cmp	ip, #0
    bae8:	e24c0001 	sub	r0, ip, #1
    baec:	0a000015 	beq	bb48 <CScreenDevice::Scroll()+0xb8>
    baf0:	e1d5e5b4 	ldrh	lr, [r5, #84]	; 0x54
    baf4:	e3500002 	cmp	r0, #2
    baf8:	9a00000c 	bls	bb30 <CScreenDevice::Scroll()+0xa0>
    bafc:	eea0eb90 	vdup.32	q8, lr
    bb00:	e3c3400f 	bic	r4, r3, #15
    bb04:	e1a02223 	lsr	r2, r3, #4
    bb08:	e1a03007 	mov	r3, r7
    bb0c:	e0871004 	add	r1, r7, r4
    bb10:	f4430a8d 	vst1.32	{d16-d17}, [r3]!
    bb14:	e1530001 	cmp	r3, r1
    bb18:	1afffffc 	bne	bb10 <CScreenDevice::Scroll()+0x80>
    bb1c:	e1a03102 	lsl	r3, r2, #2
    bb20:	e15c0003 	cmp	ip, r3
    bb24:	e0877004 	add	r7, r7, r4
    bb28:	e0400003 	sub	r0, r0, r3
    bb2c:	0a000005 	beq	bb48 <CScreenDevice::Scroll()+0xb8>
    bb30:	e587e000 	str	lr, [r7]
    bb34:	e3500000 	cmp	r0, #0
    bb38:	0a000002 	beq	bb48 <CScreenDevice::Scroll()+0xb8>
    bb3c:	e587e004 	str	lr, [r7, #4]
    bb40:	e3500001 	cmp	r0, #1
    bb44:	1587e008 	strne	lr, [r7, #8]
    bb48:	e28dd008 	add	sp, sp, #8
    bb4c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    bb50:	e08cc000 	add	ip, ip, r0
    bb54:	e2858064 	add	r8, r5, #100	; 0x64
    bb58:	e3a00002 	mov	r0, #2
    bb5c:	e3a01000 	mov	r1, #0
    bb60:	e0222c93 	mla	r2, r3, ip, r2
    bb64:	e1cd00f0 	strd	r0, [sp]
    bb68:	e1a03006 	mov	r3, r6
    bb6c:	e1a01007 	mov	r1, r7
    bb70:	e3c66003 	bic	r6, r6, #3
    bb74:	e1a00008 	mov	r0, r8
    bb78:	e0877006 	add	r7, r7, r6
    bb7c:	eb001d37 	bl	13060 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    bb80:	e1a00008 	mov	r0, r8
    bb84:	eb001ebc 	bl	1367c <CDMAChannel::Start()>
    bb88:	e1a00008 	mov	r0, r8
    bb8c:	eb001f04 	bl	137a4 <CDMAChannel::Wait()>
    bb90:	e595102c 	ldr	r1, [r5, #44]	; 0x2c
    bb94:	eaffffcf 	b	bad8 <CScreenDevice::Scroll()+0x48>

0000bb98 <CScreenDevice::CursorDown()>:
    bb98:	e92d4070 	push	{r4, r5, r6, lr}
    bb9c:	e1a04000 	mov	r4, r0
    bba0:	e280501c 	add	r5, r0, #28
    bba4:	e1a00005 	mov	r0, r5
    bba8:	eb001bb6 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bbac:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bbb0:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bbb4:	e0800002 	add	r0, r0, r2
    bbb8:	e1500003 	cmp	r0, r3
    bbbc:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bbc0:	38bd8070 	popcc	{r4, r5, r6, pc}
    bbc4:	e1a00004 	mov	r0, r4
    bbc8:	ebffffb0 	bl	ba90 <CScreenDevice::Scroll()>
    bbcc:	e1a00005 	mov	r0, r5
    bbd0:	eb001bac 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bbd4:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bbd8:	e0433000 	sub	r3, r3, r0
    bbdc:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bbe0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bbe4 <CScreenDevice::NewLine()>:
    bbe4:	e92d4070 	push	{r4, r5, r6, lr}
    bbe8:	e3a03000 	mov	r3, #0
    bbec:	e5803048 	str	r3, [r0, #72]	; 0x48
    bbf0:	e1a04000 	mov	r4, r0
    bbf4:	e280501c 	add	r5, r0, #28
    bbf8:	e1a00005 	mov	r0, r5
    bbfc:	eb001ba1 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bc00:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bc04:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bc08:	e0800002 	add	r0, r0, r2
    bc0c:	e1500003 	cmp	r0, r3
    bc10:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bc14:	38bd8070 	popcc	{r4, r5, r6, pc}
    bc18:	e1a00004 	mov	r0, r4
    bc1c:	ebffff9b 	bl	ba90 <CScreenDevice::Scroll()>
    bc20:	e1a00005 	mov	r0, r5
    bc24:	eb001b97 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bc28:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bc2c:	e0433000 	sub	r3, r3, r0
    bc30:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bc34:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bc38 <CScreenDevice::CursorRight()>:
    bc38:	e92d4070 	push	{r4, r5, r6, lr}
    bc3c:	e1a04000 	mov	r4, r0
    bc40:	e280501c 	add	r5, r0, #28
    bc44:	e1a00005 	mov	r0, r5
    bc48:	eb001b8c 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    bc4c:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    bc50:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    bc54:	e0800002 	add	r0, r0, r2
    bc58:	e1500003 	cmp	r0, r3
    bc5c:	e5840048 	str	r0, [r4, #72]	; 0x48
    bc60:	38bd8070 	popcc	{r4, r5, r6, pc}
    bc64:	e3a03000 	mov	r3, #0
    bc68:	e1a00005 	mov	r0, r5
    bc6c:	e5843048 	str	r3, [r4, #72]	; 0x48
    bc70:	eb001b84 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bc74:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bc78:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bc7c:	e0800002 	add	r0, r0, r2
    bc80:	e1500003 	cmp	r0, r3
    bc84:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bc88:	38bd8070 	popcc	{r4, r5, r6, pc}
    bc8c:	e1a00004 	mov	r0, r4
    bc90:	ebffff7e 	bl	ba90 <CScreenDevice::Scroll()>
    bc94:	e1a00005 	mov	r0, r5
    bc98:	eb001b7a 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bc9c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bca0:	e0433000 	sub	r3, r3, r0
    bca4:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bca8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bcac <CScreenDevice::Tabulator()>:
    bcac:	e92d4070 	push	{r4, r5, r6, lr}
    bcb0:	e1a04000 	mov	r4, r0
    bcb4:	e280501c 	add	r5, r0, #28
    bcb8:	e1a00005 	mov	r0, r5
    bcbc:	eb001b6f 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    bcc0:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    bcc4:	e1a00180 	lsl	r0, r0, #3
    bcc8:	e0803002 	add	r3, r0, r2
    bccc:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    bcd0:	e733f013 	udiv	r3, r3, r0
    bcd4:	e0030390 	mul	r3, r0, r3
    bcd8:	e1530001 	cmp	r3, r1
    bcdc:	e5843048 	str	r3, [r4, #72]	; 0x48
    bce0:	38bd8070 	popcc	{r4, r5, r6, pc}
    bce4:	e3a03000 	mov	r3, #0
    bce8:	e1a00005 	mov	r0, r5
    bcec:	e5843048 	str	r3, [r4, #72]	; 0x48
    bcf0:	eb001b64 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bcf4:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    bcf8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    bcfc:	e0800002 	add	r0, r0, r2
    bd00:	e1500003 	cmp	r0, r3
    bd04:	e584004c 	str	r0, [r4, #76]	; 0x4c
    bd08:	38bd8070 	popcc	{r4, r5, r6, pc}
    bd0c:	e1a00004 	mov	r0, r4
    bd10:	ebffff5e 	bl	ba90 <CScreenDevice::Scroll()>
    bd14:	e1a00005 	mov	r0, r5
    bd18:	eb001b5a 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bd1c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    bd20:	e0433000 	sub	r3, r3, r0
    bd24:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bd28:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bd2c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    bd2c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd30:	e280701c 	add	r7, r0, #28
    bd34:	e24dd00c 	sub	sp, sp, #12
    bd38:	e1a06000 	mov	r6, r0
    bd3c:	e1a00007 	mov	r0, r7
    bd40:	e1a09001 	mov	r9, r1
    bd44:	e1ddb3b0 	ldrh	fp, [sp, #48]	; 0x30
    bd48:	e1a0a003 	mov	sl, r3
    bd4c:	e58d2004 	str	r2, [sp, #4]
    bd50:	e3a08000 	mov	r8, #0
    bd54:	eb001b4b 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bd58:	e1500008 	cmp	r0, r8
    bd5c:	9a000024 	bls	bdf4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc8>
    bd60:	e59d5004 	ldr	r5, [sp, #4]
    bd64:	e3a04000 	mov	r4, #0
    bd68:	ea000013 	b	bdbc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x90>
    bd6c:	eb001b49 	bl	12a98 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    bd70:	e3500000 	cmp	r0, #0
    bd74:	e1a0200b 	mov	r2, fp
    bd78:	1a000003 	bne	bd8c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x60>
    bd7c:	e5d63056 	ldrb	r3, [r6, #86]	; 0x56
    bd80:	e3530000 	cmp	r3, #0
    bd84:	11d625b2 	ldrhne	r2, [r6, #82]	; 0x52
    bd88:	01d625b4 	ldrheq	r2, [r6, #84]	; 0x54
    bd8c:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    bd90:	e2844001 	add	r4, r4, #1
    bd94:	e1530005 	cmp	r3, r5
    bd98:	9a000006 	bls	bdb8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
    bd9c:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    bda0:	e153000a 	cmp	r3, sl
    bda4:	8596302c 	ldrhi	r3, [r6, #44]	; 0x2c
    bda8:	85961024 	ldrhi	r1, [r6, #36]	; 0x24
    bdac:	80235a93 	mlahi	r3, r3, sl, r5
    bdb0:	81a03083 	lslhi	r3, r3, #1
    bdb4:	818120b3 	strhhi	r2, [r1, r3]
    bdb8:	e2855001 	add	r5, r5, #1
    bdbc:	e1a00007 	mov	r0, r7
    bdc0:	eb001b2e 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    bdc4:	e1500004 	cmp	r0, r4
    bdc8:	e1a02004 	mov	r2, r4
    bdcc:	e1a03008 	mov	r3, r8
    bdd0:	e1a01009 	mov	r1, r9
    bdd4:	e1a00007 	mov	r0, r7
    bdd8:	8affffe3 	bhi	bd6c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x40>
    bddc:	e1a00007 	mov	r0, r7
    bde0:	e2888001 	add	r8, r8, #1
    bde4:	e28aa001 	add	sl, sl, #1
    bde8:	eb001b26 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bdec:	e1500008 	cmp	r0, r8
    bdf0:	8affffda 	bhi	bd60 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
    bdf4:	e28dd00c 	add	sp, sp, #12
    bdf8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bdfc <CScreenDevice::DisplayChar(char)>:
    bdfc:	e6ef3071 	uxtb	r3, r1
    be00:	e353001f 	cmp	r3, #31
    be04:	912fff1e 	bxls	lr
    be08:	e92d4030 	push	{r4, r5, lr}
    be0c:	e1a04000 	mov	r4, r0
    be10:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
    be14:	e24dd00c 	sub	sp, sp, #12
    be18:	e1c424d8 	ldrd	r2, [r4, #72]	; 0x48
    be1c:	e3500000 	cmp	r0, #0
    be20:	e284501c 	add	r5, r4, #28
    be24:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
    be28:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
    be2c:	e58d0000 	str	r0, [sp]
    be30:	e1a00004 	mov	r0, r4
    be34:	ebffffbc 	bl	bd2c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    be38:	e1a00005 	mov	r0, r5
    be3c:	eb001b0f 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    be40:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    be44:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    be48:	e0800002 	add	r0, r0, r2
    be4c:	e1500003 	cmp	r0, r3
    be50:	e5840048 	str	r0, [r4, #72]	; 0x48
    be54:	2a000001 	bcs	be60 <CScreenDevice::DisplayChar(char)+0x64>
    be58:	e28dd00c 	add	sp, sp, #12
    be5c:	e8bd8030 	pop	{r4, r5, pc}
    be60:	e3a03000 	mov	r3, #0
    be64:	e1a00005 	mov	r0, r5
    be68:	e5843048 	str	r3, [r4, #72]	; 0x48
    be6c:	eb001b05 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    be70:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    be74:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    be78:	e0800002 	add	r0, r0, r2
    be7c:	e1500003 	cmp	r0, r3
    be80:	e584004c 	str	r0, [r4, #76]	; 0x4c
    be84:	3afffff3 	bcc	be58 <CScreenDevice::DisplayChar(char)+0x5c>
    be88:	e1a00004 	mov	r0, r4
    be8c:	ebfffeff 	bl	ba90 <CScreenDevice::Scroll()>
    be90:	e1a00005 	mov	r0, r5
    be94:	eb001afb 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    be98:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    be9c:	e0433000 	sub	r3, r3, r0
    bea0:	e584304c 	str	r3, [r4, #76]	; 0x4c
    bea4:	eaffffeb 	b	be58 <CScreenDevice::DisplayChar(char)+0x5c>

0000bea8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    bea8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    beac:	e1a06000 	mov	r6, r0
    beb0:	e1a0a001 	mov	sl, r1
    beb4:	e1a08002 	mov	r8, r2
    beb8:	e280701c 	add	r7, r0, #28
    bebc:	e3a09000 	mov	r9, #0
    bec0:	e1a00007 	mov	r0, r7
    bec4:	eb001aef 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    bec8:	e1500009 	cmp	r0, r9
    becc:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
    bed0:	e1a0500a 	mov	r5, sl
    bed4:	e3a04000 	mov	r4, #0
    bed8:	ea00000c 	b	bf10 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
    bedc:	e5963030 	ldr	r3, [r6, #48]	; 0x30
    bee0:	e1530005 	cmp	r3, r5
    bee4:	9a000008 	bls	bf0c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x64>
    bee8:	e5963034 	ldr	r3, [r6, #52]	; 0x34
    beec:	e1530008 	cmp	r3, r8
    bef0:	9a000005 	bls	bf0c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x64>
    bef4:	e596302c 	ldr	r3, [r6, #44]	; 0x2c
    bef8:	e1d615b4 	ldrh	r1, [r6, #84]	; 0x54
    befc:	e0235893 	mla	r3, r3, r8, r5
    bf00:	e5962024 	ldr	r2, [r6, #36]	; 0x24
    bf04:	e1a03083 	lsl	r3, r3, #1
    bf08:	e18210b3 	strh	r1, [r2, r3]
    bf0c:	e2855001 	add	r5, r5, #1
    bf10:	e1a00007 	mov	r0, r7
    bf14:	eb001ad9 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    bf18:	e1500004 	cmp	r0, r4
    bf1c:	e2844001 	add	r4, r4, #1
    bf20:	8affffed 	bhi	bedc <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
    bf24:	e2899001 	add	r9, r9, #1
    bf28:	e2888001 	add	r8, r8, #1
    bf2c:	eaffffe3 	b	bec0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

0000bf30 <CScreenDevice::ClearLineEnd()>:
    bf30:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bf34:	e92d4070 	push	{r4, r5, r6, lr}
    bf38:	e5904048 	ldr	r4, [r0, #72]	; 0x48
    bf3c:	e1540003 	cmp	r4, r3
    bf40:	28bd8070 	popcs	{r4, r5, r6, pc}
    bf44:	e1a05000 	mov	r5, r0
    bf48:	e280601c 	add	r6, r0, #28
    bf4c:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    bf50:	e1a01004 	mov	r1, r4
    bf54:	e1a00005 	mov	r0, r5
    bf58:	ebffffd2 	bl	bea8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bf5c:	e1a00006 	mov	r0, r6
    bf60:	eb001ac6 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    bf64:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    bf68:	e0844000 	add	r4, r4, r0
    bf6c:	e1530004 	cmp	r3, r4
    bf70:	8afffff5 	bhi	bf4c <CScreenDevice::ClearLineEnd()+0x1c>
    bf74:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bf78 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
    bf78:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    bf7c:	e280701c 	add	r7, r0, #28
    bf80:	e5906048 	ldr	r6, [r0, #72]	; 0x48
    bf84:	e1a05000 	mov	r5, r0
    bf88:	e1a00007 	mov	r0, r7
    bf8c:	e1a04001 	mov	r4, r1
    bf90:	eb001aba 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    bf94:	e0266094 	mla	r6, r4, r0, r6
    bf98:	e5950030 	ldr	r0, [r5, #48]	; 0x30
    bf9c:	e5954048 	ldr	r4, [r5, #72]	; 0x48
    bfa0:	e1560000 	cmp	r6, r0
    bfa4:	21a06000 	movcs	r6, r0
    bfa8:	e1560004 	cmp	r6, r4
    bfac:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    bfb0:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    bfb4:	e1a01004 	mov	r1, r4
    bfb8:	e1a00005 	mov	r0, r5
    bfbc:	ebffffb9 	bl	bea8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    bfc0:	e1a00007 	mov	r0, r7
    bfc4:	eb001aad 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    bfc8:	e0844000 	add	r4, r4, r0
    bfcc:	e1560004 	cmp	r6, r4
    bfd0:	8afffff6 	bhi	bfb0 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x38>
    bfd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000bfd8 <CScreenDevice::EraseChars(unsigned int)>:
    bfd8:	e3510000 	cmp	r1, #0
    bfdc:	012fff1e 	bxeq	lr
    bfe0:	eaffffe4 	b	bf78 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

0000bfe4 <CScreenDevice::ClearDisplayEnd()>:
    bfe4:	e92d4070 	push	{r4, r5, r6, lr}
    bfe8:	e1a04000 	mov	r4, r0
    bfec:	e5905048 	ldr	r5, [r0, #72]	; 0x48
    bff0:	e280601c 	add	r6, r0, #28
    bff4:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bff8:	e1550003 	cmp	r5, r3
    bffc:	2a000009 	bcs	c028 <CScreenDevice::ClearDisplayEnd()+0x44>
    c000:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c004:	e1a01005 	mov	r1, r5
    c008:	e1a00004 	mov	r0, r4
    c00c:	ebffffa5 	bl	bea8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c010:	e1a00006 	mov	r0, r6
    c014:	eb001a99 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    c018:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    c01c:	e0855000 	add	r5, r5, r0
    c020:	e1530005 	cmp	r3, r5
    c024:	8afffff5 	bhi	c000 <CScreenDevice::ClearDisplayEnd()+0x1c>
    c028:	e594504c 	ldr	r5, [r4, #76]	; 0x4c
    c02c:	e1a00006 	mov	r0, r6
    c030:	eb001a94 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c034:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    c038:	e0852000 	add	r2, r5, r0
    c03c:	e0020293 	mul	r2, r3, r2
    c040:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    c044:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    c048:	e1a030a3 	lsr	r3, r3, #1
    c04c:	e080c082 	add	ip, r0, r2, lsl #1
    c050:	e0432002 	sub	r2, r3, r2
    c054:	e3520000 	cmp	r2, #0
    c058:	e2421001 	sub	r1, r2, #1
    c05c:	08bd8070 	popeq	{r4, r5, r6, pc}
    c060:	e0800083 	add	r0, r0, r3, lsl #1
    c064:	e284e056 	add	lr, r4, #86	; 0x56
    c068:	e2843054 	add	r3, r4, #84	; 0x54
    c06c:	e15c000e 	cmp	ip, lr
    c070:	31530000 	cmpcc	r3, r0
    c074:	23a03001 	movcs	r3, #1
    c078:	33a03000 	movcc	r3, #0
    c07c:	e3510008 	cmp	r1, #8
    c080:	93a03000 	movls	r3, #0
    c084:	82033001 	andhi	r3, r3, #1
    c088:	e3530000 	cmp	r3, #0
    c08c:	0a000025 	beq	c128 <CScreenDevice::ClearDisplayEnd()+0x144>
    c090:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c094:	e1a0000c 	mov	r0, ip
    c098:	e1a0e1a2 	lsr	lr, r2, #3
    c09c:	eea03bb0 	vdup.16	q8, r3
    c0a0:	e3a03000 	mov	r3, #0
    c0a4:	e2833001 	add	r3, r3, #1
    c0a8:	e15e0003 	cmp	lr, r3
    c0ac:	f4400a4d 	vst1.16	{d16-d17}, [r0]!
    c0b0:	1afffffb 	bne	c0a4 <CScreenDevice::ClearDisplayEnd()+0xc0>
    c0b4:	e3c23007 	bic	r3, r2, #7
    c0b8:	e1520003 	cmp	r2, r3
    c0bc:	e0411003 	sub	r1, r1, r3
    c0c0:	e1a03083 	lsl	r3, r3, #1
    c0c4:	e08c2003 	add	r2, ip, r3
    c0c8:	08bd8070 	popeq	{r4, r5, r6, pc}
    c0cc:	e1d405b4 	ldrh	r0, [r4, #84]	; 0x54
    c0d0:	e3510000 	cmp	r1, #0
    c0d4:	e18c00b3 	strh	r0, [ip, r3]
    c0d8:	08bd8070 	popeq	{r4, r5, r6, pc}
    c0dc:	e1c200b2 	strh	r0, [r2, #2]
    c0e0:	e3510001 	cmp	r1, #1
    c0e4:	08bd8070 	popeq	{r4, r5, r6, pc}
    c0e8:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c0ec:	e3510002 	cmp	r1, #2
    c0f0:	e1c230b4 	strh	r3, [r2, #4]
    c0f4:	08bd8070 	popeq	{r4, r5, r6, pc}
    c0f8:	e1c230b6 	strh	r3, [r2, #6]
    c0fc:	e3510003 	cmp	r1, #3
    c100:	08bd8070 	popeq	{r4, r5, r6, pc}
    c104:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c108:	e3510004 	cmp	r1, #4
    c10c:	e1c230b8 	strh	r3, [r2, #8]
    c110:	08bd8070 	popeq	{r4, r5, r6, pc}
    c114:	e1c230ba 	strh	r3, [r2, #10]
    c118:	e3510005 	cmp	r1, #5
    c11c:	11d435b4 	ldrhne	r3, [r4, #84]	; 0x54
    c120:	11c230bc 	strhne	r3, [r2, #12]
    c124:	e8bd8070 	pop	{r4, r5, r6, pc}
    c128:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    c12c:	e2411001 	sub	r1, r1, #1
    c130:	e3710001 	cmn	r1, #1
    c134:	e0cc30b2 	strh	r3, [ip], #2
    c138:	1afffffa 	bne	c128 <CScreenDevice::ClearDisplayEnd()+0x144>
    c13c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c140 <CScreenDevice::Initialize()>:
    c140:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c144:	e1a04000 	mov	r4, r0
    c148:	e5d05010 	ldrb	r5, [r0, #16]
    c14c:	e24dd010 	sub	sp, sp, #16
    c150:	e3550000 	cmp	r5, #0
    c154:	0a000030 	beq	c21c <CScreenDevice::Initialize()+0xdc>
    c158:	e5903008 	ldr	r3, [r0, #8]
    c15c:	e284601c 	add	r6, r4, #28
    c160:	e590100c 	ldr	r1, [r0, #12]
    c164:	e5803030 	str	r3, [r0, #48]	; 0x30
    c168:	e0020391 	mul	r2, r1, r3
    c16c:	e5801034 	str	r1, [r0, #52]	; 0x34
    c170:	e580302c 	str	r3, [r0, #44]	; 0x2c
    c174:	e372010f 	cmn	r2, #-1073741821	; 0xc0000003
    c178:	e1a00082 	lsl	r0, r2, #1
    c17c:	e5840028 	str	r0, [r4, #40]	; 0x28
    c180:	23e00000 	mvncs	r0, #0
    c184:	eb00130c 	bl	10dbc <operator new[](unsigned int)>
    c188:	e5840024 	str	r0, [r4, #36]	; 0x24
    c18c:	e5945034 	ldr	r5, [r4, #52]	; 0x34
    c190:	e1a00006 	mov	r0, r6
    c194:	eb001a3b 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c198:	e1a03000 	mov	r3, r0
    c19c:	e1a00006 	mov	r0, r6
    c1a0:	e735f315 	udiv	r5, r5, r3
    c1a4:	eb001a37 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c1a8:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    c1ac:	e1a03000 	mov	r3, r0
    c1b0:	e0030593 	mul	r3, r3, r5
    c1b4:	e584204c 	str	r2, [r4, #76]	; 0x4c
    c1b8:	e3a02000 	mov	r2, #0
    c1bc:	e5843038 	str	r3, [r4, #56]	; 0x38
    c1c0:	e1a00004 	mov	r0, r4
    c1c4:	e5843044 	str	r3, [r4, #68]	; 0x44
    c1c8:	e5842048 	str	r2, [r4, #72]	; 0x48
    c1cc:	ebffff84 	bl	bfe4 <CScreenDevice::ClearDisplayEnd()>
    c1d0:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
    c1d4:	e3530000 	cmp	r3, #0
    c1d8:	1a00000c 	bne	c210 <CScreenDevice::Initialize()+0xd0>
    c1dc:	e3a05001 	mov	r5, #1
    c1e0:	ebfff1f7 	bl	89c4 <CDeviceNameService::Get()>
    c1e4:	e5942014 	ldr	r2, [r4, #20]
    c1e8:	e3a0c000 	mov	ip, #0
    c1ec:	e58dc000 	str	ip, [sp]
    c1f0:	e30512c0 	movw	r1, #21184	; 0x52c0
    c1f4:	e3401001 	movt	r1, #1
    c1f8:	e1a03004 	mov	r3, r4
    c1fc:	e2822001 	add	r2, r2, #1
    c200:	ebfff1fb 	bl	89f4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    c204:	e1a00005 	mov	r0, r5
    c208:	e28dd010 	add	sp, sp, #16
    c20c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c210:	e1a00004 	mov	r0, r4
    c214:	ebfffbed 	bl	b1d0 <CScreenDevice::InvertCursor() [clone .part.0]>
    c218:	eaffffef 	b	c1dc <CScreenDevice::Initialize()+0x9c>
    c21c:	e3a00098 	mov	r0, #152	; 0x98
    c220:	eb0012df 	bl	10da4 <operator new(unsigned int)>
    c224:	e5943014 	ldr	r3, [r4, #20]
    c228:	e1a06000 	mov	r6, r0
    c22c:	e58d500c 	str	r5, [sp, #12]
    c230:	e58d3008 	str	r3, [sp, #8]
    c234:	e3a03010 	mov	r3, #16
    c238:	e58d5004 	str	r5, [sp, #4]
    c23c:	e58d5000 	str	r5, [sp]
    c240:	e594200c 	ldr	r2, [r4, #12]
    c244:	e5941008 	ldr	r1, [r4, #8]
    c248:	eb001894 	bl	124a0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    c24c:	e5846018 	str	r6, [r4, #24]
    c250:	e1a00006 	mov	r0, r6
    c254:	eb001908 	bl	1267c <CBcmFrameBuffer::Initialize()>
    c258:	e3500000 	cmp	r0, #0
    c25c:	0affffe8 	beq	c204 <CScreenDevice::Initialize()+0xc4>
    c260:	e5940018 	ldr	r0, [r4, #24]
    c264:	eb001945 	bl	12780 <CBcmFrameBuffer::GetDepth() const>
    c268:	e3500010 	cmp	r0, #16
    c26c:	1affffe4 	bne	c204 <CScreenDevice::Initialize()+0xc4>
    c270:	e5940018 	ldr	r0, [r4, #24]
    c274:	e284601c 	add	r6, r4, #28
    c278:	eb001942 	bl	12788 <CBcmFrameBuffer::GetBuffer() const>
    c27c:	e5840024 	str	r0, [r4, #36]	; 0x24
    c280:	e5940018 	ldr	r0, [r4, #24]
    c284:	eb001941 	bl	12790 <CBcmFrameBuffer::GetSize() const>
    c288:	e5840028 	str	r0, [r4, #40]	; 0x28
    c28c:	e5940018 	ldr	r0, [r4, #24]
    c290:	eb001938 	bl	12778 <CBcmFrameBuffer::GetPitch() const>
    c294:	e584002c 	str	r0, [r4, #44]	; 0x2c
    c298:	e5940018 	ldr	r0, [r4, #24]
    c29c:	eb00192d 	bl	12758 <CBcmFrameBuffer::GetWidth() const>
    c2a0:	e5840030 	str	r0, [r4, #48]	; 0x30
    c2a4:	e5940018 	ldr	r0, [r4, #24]
    c2a8:	eb00192c 	bl	12760 <CBcmFrameBuffer::GetHeight() const>
    c2ac:	e5840034 	str	r0, [r4, #52]	; 0x34
    c2b0:	e1a00006 	mov	r0, r6
    c2b4:	eb0019f1 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    c2b8:	e1a08000 	mov	r8, r0
    c2bc:	e1a00006 	mov	r0, r6
    c2c0:	eb0019f0 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c2c4:	e1a07000 	mov	r7, r0
    c2c8:	e1a00006 	mov	r0, r6
    c2cc:	eb0019ef 	bl	12a90 <CCharGenerator::GetUnderline() const>
    c2d0:	e0477000 	sub	r7, r7, r0
    c2d4:	e0000798 	mul	r0, r8, r7
    c2d8:	e3700113 	cmn	r0, #-1073741820	; 0xc0000004
    c2dc:	91a00080 	lslls	r0, r0, #1
    c2e0:	83e00000 	mvnhi	r0, #0
    c2e4:	eb0012b4 	bl	10dbc <operator new[](unsigned int)>
    c2e8:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    c2ec:	e5840020 	str	r0, [r4, #32]
    c2f0:	e3130003 	tst	r3, #3
    c2f4:	1affffc2 	bne	c204 <CScreenDevice::Initialize()+0xc4>
    c2f8:	e1a030a3 	lsr	r3, r3, #1
    c2fc:	e584302c 	str	r3, [r4, #44]	; 0x2c
    c300:	eaffffa1 	b	c18c <CScreenDevice::Initialize()+0x4c>

0000c304 <CScreenDevice::Write(char)>:
    c304:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    c308:	e92d4070 	push	{r4, r5, r6, lr}
    c30c:	e1a04000 	mov	r4, r0
    c310:	e24dd008 	sub	sp, sp, #8
    c314:	e3530007 	cmp	r3, #7
    c318:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c31c:	ea000009 	b	c348 <CScreenDevice::Write(char)+0x44>
    c320:	0000c390 	.word	0x0000c390
    c324:	0000c340 	.word	0x0000c340
    c328:	0000c3f0 	.word	0x0000c3f0
    c32c:	0000c448 	.word	0x0000c448
    c330:	0000c524 	.word	0x0000c524
    c334:	0000c548 	.word	0x0000c548
    c338:	0000c56c 	.word	0x0000c56c
    c33c:	0000c358 	.word	0x0000c358
    c340:	e351005b 	cmp	r1, #91	; 0x5b
    c344:	0a0000cf 	beq	c688 <CScreenDevice::Write(char)+0x384>
    c348:	e3a03000 	mov	r3, #0
    c34c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c350:	e28dd008 	add	sp, sp, #8
    c354:	e8bd8070 	pop	{r4, r5, r6, pc}
    c358:	e3c13004 	bic	r3, r1, #4
    c35c:	e3530068 	cmp	r3, #104	; 0x68
    c360:	0a000090 	beq	c5a8 <CScreenDevice::Write(char)+0x2a4>
    c364:	e2411030 	sub	r1, r1, #48	; 0x30
    c368:	e6ef3071 	uxtb	r3, r1
    c36c:	e3530009 	cmp	r3, #9
    c370:	8afffff4 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c374:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c378:	e3a0200a 	mov	r2, #10
    c37c:	e0211392 	mla	r1, r2, r3, r1
    c380:	e5801058 	str	r1, [r0, #88]	; 0x58
    c384:	e3510063 	cmp	r1, #99	; 0x63
    c388:	8affffee 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c38c:	eaffffef 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c390:	e2413008 	sub	r3, r1, #8
    c394:	e3530013 	cmp	r3, #19
    c398:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c39c:	ea000093 	b	c5f0 <CScreenDevice::Write(char)+0x2ec>
    c3a0:	0000c6d0 	.word	0x0000c6d0
    c3a4:	0000c6c4 	.word	0x0000c6c4
    c3a8:	0000c6e8 	.word	0x0000c6e8
    c3ac:	0000c5f0 	.word	0x0000c5f0
    c3b0:	0000c5f0 	.word	0x0000c5f0
    c3b4:	0000c6dc 	.word	0x0000c6dc
    c3b8:	0000c5f0 	.word	0x0000c5f0
    c3bc:	0000c5f0 	.word	0x0000c5f0
    c3c0:	0000c5f0 	.word	0x0000c5f0
    c3c4:	0000c5f0 	.word	0x0000c5f0
    c3c8:	0000c5f0 	.word	0x0000c5f0
    c3cc:	0000c5f0 	.word	0x0000c5f0
    c3d0:	0000c5f0 	.word	0x0000c5f0
    c3d4:	0000c5f0 	.word	0x0000c5f0
    c3d8:	0000c5f0 	.word	0x0000c5f0
    c3dc:	0000c5f0 	.word	0x0000c5f0
    c3e0:	0000c5f0 	.word	0x0000c5f0
    c3e4:	0000c5f0 	.word	0x0000c5f0
    c3e8:	0000c5f0 	.word	0x0000c5f0
    c3ec:	0000c6b8 	.word	0x0000c6b8
    c3f0:	e241303f 	sub	r3, r1, #63	; 0x3f
    c3f4:	e3530011 	cmp	r3, #17
    c3f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c3fc:	ea0000a4 	b	c694 <CScreenDevice::Write(char)+0x390>
    c400:	0000c7cc 	.word	0x0000c7cc
    c404:	0000c694 	.word	0x0000c694
    c408:	0000c75c 	.word	0x0000c75c
    c40c:	0000c718 	.word	0x0000c718
    c410:	0000c7bc 	.word	0x0000c7bc
    c414:	0000c7ac 	.word	0x0000c7ac
    c418:	0000c694 	.word	0x0000c694
    c41c:	0000c694 	.word	0x0000c694
    c420:	0000c694 	.word	0x0000c694
    c424:	0000c794 	.word	0x0000c794
    c428:	0000c694 	.word	0x0000c694
    c42c:	0000c784 	.word	0x0000c784
    c430:	0000c7d8 	.word	0x0000c7d8
    c434:	0000c348 	.word	0x0000c348
    c438:	0000c348 	.word	0x0000c348
    c43c:	0000c694 	.word	0x0000c694
    c440:	0000c694 	.word	0x0000c694
    c444:	0000c348 	.word	0x0000c348
    c448:	e241303b 	sub	r3, r1, #59	; 0x3b
    c44c:	e3530032 	cmp	r3, #50	; 0x32
    c450:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c454:	ea00005a 	b	c5c4 <CScreenDevice::Write(char)+0x2c0>
    c458:	0000c85c 	.word	0x0000c85c
    c45c:	0000c5c4 	.word	0x0000c5c4
    c460:	0000c5c4 	.word	0x0000c5c4
    c464:	0000c5c4 	.word	0x0000c5c4
    c468:	0000c5c4 	.word	0x0000c5c4
    c46c:	0000c5c4 	.word	0x0000c5c4
    c470:	0000c5c4 	.word	0x0000c5c4
    c474:	0000c5c4 	.word	0x0000c5c4
    c478:	0000c5c4 	.word	0x0000c5c4
    c47c:	0000c5c4 	.word	0x0000c5c4
    c480:	0000c5c4 	.word	0x0000c5c4
    c484:	0000c5c4 	.word	0x0000c5c4
    c488:	0000c5c4 	.word	0x0000c5c4
    c48c:	0000c5c4 	.word	0x0000c5c4
    c490:	0000c5c4 	.word	0x0000c5c4
    c494:	0000c5c4 	.word	0x0000c5c4
    c498:	0000c5c4 	.word	0x0000c5c4
    c49c:	0000c348 	.word	0x0000c348
    c4a0:	0000c348 	.word	0x0000c348
    c4a4:	0000c5c4 	.word	0x0000c5c4
    c4a8:	0000c5c4 	.word	0x0000c5c4
    c4ac:	0000c348 	.word	0x0000c348
    c4b0:	0000c5c4 	.word	0x0000c5c4
    c4b4:	0000c5c4 	.word	0x0000c5c4
    c4b8:	0000c5c4 	.word	0x0000c5c4
    c4bc:	0000c5c4 	.word	0x0000c5c4
    c4c0:	0000c5c4 	.word	0x0000c5c4
    c4c4:	0000c5c4 	.word	0x0000c5c4
    c4c8:	0000c5c4 	.word	0x0000c5c4
    c4cc:	0000c848 	.word	0x0000c848
    c4d0:	0000c5c4 	.word	0x0000c5c4
    c4d4:	0000c5c4 	.word	0x0000c5c4
    c4d8:	0000c5c4 	.word	0x0000c5c4
    c4dc:	0000c5c4 	.word	0x0000c5c4
    c4e0:	0000c5c4 	.word	0x0000c5c4
    c4e4:	0000c5c4 	.word	0x0000c5c4
    c4e8:	0000c5c4 	.word	0x0000c5c4
    c4ec:	0000c5c4 	.word	0x0000c5c4
    c4f0:	0000c5c4 	.word	0x0000c5c4
    c4f4:	0000c5c4 	.word	0x0000c5c4
    c4f8:	0000c5c4 	.word	0x0000c5c4
    c4fc:	0000c5c4 	.word	0x0000c5c4
    c500:	0000c5c4 	.word	0x0000c5c4
    c504:	0000c5c4 	.word	0x0000c5c4
    c508:	0000c5c4 	.word	0x0000c5c4
    c50c:	0000c818 	.word	0x0000c818
    c510:	0000c5c4 	.word	0x0000c5c4
    c514:	0000c5c4 	.word	0x0000c5c4
    c518:	0000c5c4 	.word	0x0000c5c4
    c51c:	0000c818 	.word	0x0000c818
    c520:	0000c834 	.word	0x0000c834
    c524:	e2411030 	sub	r1, r1, #48	; 0x30
    c528:	e6ef3071 	uxtb	r3, r1
    c52c:	e3530009 	cmp	r3, #9
    c530:	8affff84 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c534:	e6af1071 	sxtb	r1, r1
    c538:	e3a03007 	mov	r3, #7
    c53c:	e5801058 	str	r1, [r0, #88]	; 0x58
    c540:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c544:	eaffff81 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c548:	e2411030 	sub	r1, r1, #48	; 0x30
    c54c:	e6ef3071 	uxtb	r3, r1
    c550:	e3530009 	cmp	r3, #9
    c554:	8affff7b 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c558:	e6af1071 	sxtb	r1, r1
    c55c:	e3a03006 	mov	r3, #6
    c560:	e580105c 	str	r1, [r0, #92]	; 0x5c
    c564:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c568:	eaffff78 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c56c:	e3510048 	cmp	r1, #72	; 0x48
    c570:	0a0000c0 	beq	c878 <CScreenDevice::Write(char)+0x574>
    c574:	e3510072 	cmp	r1, #114	; 0x72
    c578:	0a0000ba 	beq	c868 <CScreenDevice::Write(char)+0x564>
    c57c:	e2411030 	sub	r1, r1, #48	; 0x30
    c580:	e6ef3071 	uxtb	r3, r1
    c584:	e3530009 	cmp	r3, #9
    c588:	8affff6e 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c58c:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    c590:	e3a0200a 	mov	r2, #10
    c594:	e0211392 	mla	r1, r2, r3, r1
    c598:	e580105c 	str	r1, [r0, #92]	; 0x5c
    c59c:	e35100c7 	cmp	r1, #199	; 0xc7
    c5a0:	8affff68 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c5a4:	eaffff69 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c5a8:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c5ac:	e3530019 	cmp	r3, #25
    c5b0:	02411068 	subeq	r1, r1, #104	; 0x68
    c5b4:	016f1f11 	clzeq	r1, r1
    c5b8:	01a012a1 	lsreq	r1, r1, #5
    c5bc:	05c01050 	strbeq	r1, [r0, #80]	; 0x50
    c5c0:	eaffff60 	b	c348 <CScreenDevice::Write(char)+0x44>
    c5c4:	e2411030 	sub	r1, r1, #48	; 0x30
    c5c8:	e6ef3071 	uxtb	r3, r1
    c5cc:	e3530009 	cmp	r3, #9
    c5d0:	8affff5c 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c5d4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c5d8:	e3a0200a 	mov	r2, #10
    c5dc:	e0211392 	mla	r1, r2, r3, r1
    c5e0:	e5801058 	str	r1, [r0, #88]	; 0x58
    c5e4:	e35100c7 	cmp	r1, #199	; 0xc7
    c5e8:	8affff56 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c5ec:	eaffff57 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c5f0:	e6ef3071 	uxtb	r3, r1
    c5f4:	e353001f 	cmp	r3, #31
    c5f8:	9affff54 	bls	c350 <CScreenDevice::Write(char)+0x4c>
    c5fc:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
    c600:	e284501c 	add	r5, r4, #28
    c604:	e1c424d8 	ldrd	r2, [r4, #72]	; 0x48
    c608:	e3500000 	cmp	r0, #0
    c60c:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
    c610:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
    c614:	e58d0000 	str	r0, [sp]
    c618:	e1a00004 	mov	r0, r4
    c61c:	ebfffdc2 	bl	bd2c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c620:	e1a00005 	mov	r0, r5
    c624:	eb001915 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    c628:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    c62c:	e5942030 	ldr	r2, [r4, #48]	; 0x30
    c630:	e0803003 	add	r3, r0, r3
    c634:	e1530002 	cmp	r3, r2
    c638:	e5843048 	str	r3, [r4, #72]	; 0x48
    c63c:	3affff43 	bcc	c350 <CScreenDevice::Write(char)+0x4c>
    c640:	e3a03000 	mov	r3, #0
    c644:	e1a00005 	mov	r0, r5
    c648:	e5843048 	str	r3, [r4, #72]	; 0x48
    c64c:	eb00190d 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c650:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c654:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    c658:	e0803003 	add	r3, r0, r3
    c65c:	e1530002 	cmp	r3, r2
    c660:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c664:	3affff39 	bcc	c350 <CScreenDevice::Write(char)+0x4c>
    c668:	e1a00004 	mov	r0, r4
    c66c:	ebfffd07 	bl	ba90 <CScreenDevice::Scroll()>
    c670:	e1a00005 	mov	r0, r5
    c674:	eb001903 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c678:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c67c:	e0433000 	sub	r3, r3, r0
    c680:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c684:	eaffff31 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c688:	e3a03002 	mov	r3, #2
    c68c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c690:	eaffff2e 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c694:	e2411030 	sub	r1, r1, #48	; 0x30
    c698:	e6ef3071 	uxtb	r3, r1
    c69c:	e3530009 	cmp	r3, #9
    c6a0:	8affff28 	bhi	c348 <CScreenDevice::Write(char)+0x44>
    c6a4:	e6af1071 	sxtb	r1, r1
    c6a8:	e3a03003 	mov	r3, #3
    c6ac:	e5801058 	str	r1, [r0, #88]	; 0x58
    c6b0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c6b4:	eaffff25 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c6b8:	e3a03001 	mov	r3, #1
    c6bc:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c6c0:	eaffff22 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c6c4:	e28dd008 	add	sp, sp, #8
    c6c8:	e8bd4070 	pop	{r4, r5, r6, lr}
    c6cc:	eafffd76 	b	bcac <CScreenDevice::Tabulator()>
    c6d0:	e28dd008 	add	sp, sp, #8
    c6d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    c6d8:	eafffb9d 	b	b554 <CScreenDevice::CursorLeft()>
    c6dc:	e3a03000 	mov	r3, #0
    c6e0:	e5803048 	str	r3, [r0, #72]	; 0x48
    c6e4:	eaffff19 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c6e8:	e3a03000 	mov	r3, #0
    c6ec:	e280501c 	add	r5, r0, #28
    c6f0:	e5803048 	str	r3, [r0, #72]	; 0x48
    c6f4:	e1a00005 	mov	r0, r5
    c6f8:	eb0018e2 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c6fc:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c700:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    c704:	e0800002 	add	r0, r0, r2
    c708:	e1500003 	cmp	r0, r3
    c70c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    c710:	3affff0e 	bcc	c350 <CScreenDevice::Write(char)+0x4c>
    c714:	eaffffd3 	b	c668 <CScreenDevice::Write(char)+0x364>
    c718:	e280501c 	add	r5, r0, #28
    c71c:	e1a00005 	mov	r0, r5
    c720:	eb0018d8 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c724:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c728:	e5942044 	ldr	r2, [r4, #68]	; 0x44
    c72c:	e0803003 	add	r3, r0, r3
    c730:	e1530002 	cmp	r3, r2
    c734:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c738:	3affff02 	bcc	c348 <CScreenDevice::Write(char)+0x44>
    c73c:	e1a00004 	mov	r0, r4
    c740:	ebfffcd2 	bl	ba90 <CScreenDevice::Scroll()>
    c744:	e1a00005 	mov	r0, r5
    c748:	eb0018ce 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c74c:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c750:	e0433000 	sub	r3, r3, r0
    c754:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c758:	eafffefa 	b	c348 <CScreenDevice::Write(char)+0x44>
    c75c:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    c760:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    c764:	e1520003 	cmp	r2, r3
    c768:	9afffef6 	bls	c348 <CScreenDevice::Write(char)+0x44>
    c76c:	e280001c 	add	r0, r0, #28
    c770:	eb0018c4 	bl	12a88 <CCharGenerator::GetCharHeight() const>
    c774:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    c778:	e0433000 	sub	r3, r3, r0
    c77c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    c780:	eafffef0 	b	c348 <CScreenDevice::Write(char)+0x44>
    c784:	ebfffe16 	bl	bfe4 <CScreenDevice::ClearDisplayEnd()>
    c788:	e3a03000 	mov	r3, #0
    c78c:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c790:	eafffeee 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c794:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    c798:	e3a03000 	mov	r3, #0
    c79c:	e5803048 	str	r3, [r0, #72]	; 0x48
    c7a0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c7a4:	e580204c 	str	r2, [r0, #76]	; 0x4c
    c7a8:	eafffee8 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c7ac:	ebfffb68 	bl	b554 <CScreenDevice::CursorLeft()>
    c7b0:	e3a03000 	mov	r3, #0
    c7b4:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c7b8:	eafffee4 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c7bc:	ebfffd1d 	bl	bc38 <CScreenDevice::CursorRight()>
    c7c0:	e3a03000 	mov	r3, #0
    c7c4:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c7c8:	eafffee0 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c7cc:	e3a03004 	mov	r3, #4
    c7d0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c7d4:	eafffedd 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c7d8:	e5905048 	ldr	r5, [r0, #72]	; 0x48
    c7dc:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c7e0:	e1530005 	cmp	r3, r5
    c7e4:	9afffed7 	bls	c348 <CScreenDevice::Write(char)+0x44>
    c7e8:	e280601c 	add	r6, r0, #28
    c7ec:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    c7f0:	e1a01005 	mov	r1, r5
    c7f4:	e1a00004 	mov	r0, r4
    c7f8:	ebfffdaa 	bl	bea8 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c7fc:	e1a00006 	mov	r0, r6
    c800:	eb00189e 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    c804:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    c808:	e0855000 	add	r5, r5, r0
    c80c:	e1530005 	cmp	r3, r5
    c810:	8afffff5 	bhi	c7ec <CScreenDevice::Write(char)+0x4e8>
    c814:	eafffecb 	b	c348 <CScreenDevice::Write(char)+0x44>
    c818:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    c81c:	e3530004 	cmp	r3, #4
    c820:	02411068 	subeq	r1, r1, #104	; 0x68
    c824:	016f1f11 	clzeq	r1, r1
    c828:	01a012a1 	lsreq	r1, r1, #5
    c82c:	05c01057 	strbeq	r1, [r0, #87]	; 0x57
    c830:	eafffec4 	b	c348 <CScreenDevice::Write(char)+0x44>
    c834:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    c838:	ebfffbb5 	bl	b714 <CScreenDevice::SetStandoutMode(unsigned int)>
    c83c:	e3a03000 	mov	r3, #0
    c840:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c844:	eafffec1 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c848:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    c84c:	e3510000 	cmp	r1, #0
    c850:	0afffebc 	beq	c348 <CScreenDevice::Write(char)+0x44>
    c854:	ebfffdc7 	bl	bf78 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
    c858:	eafffeba 	b	c348 <CScreenDevice::Write(char)+0x44>
    c85c:	e3a03005 	mov	r3, #5
    c860:	e580303c 	str	r3, [r0, #60]	; 0x3c
    c864:	eafffeb9 	b	c350 <CScreenDevice::Write(char)+0x4c>
    c868:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    c86c:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    c870:	ebfffb89 	bl	b69c <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    c874:	eafffeb3 	b	c348 <CScreenDevice::Write(char)+0x44>
    c878:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    c87c:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    c880:	ebfffb4e 	bl	b5c0 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    c884:	e3a03000 	mov	r3, #0
    c888:	e584303c 	str	r3, [r4, #60]	; 0x3c
    c88c:	eafffeaf 	b	c350 <CScreenDevice::Write(char)+0x4c>

0000c890 <CScreenDevice::Write(void const*, unsigned int)>:
    c890:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c894:	e1a05000 	mov	r5, r0
    c898:	e590008c 	ldr	r0, [r0, #140]	; 0x8c
    c89c:	e1a06001 	mov	r6, r1
    c8a0:	e1a04002 	mov	r4, r2
    c8a4:	e3500000 	cmp	r0, #0
    c8a8:	1a000025 	bne	c944 <CScreenDevice::Write(void const*, unsigned int)+0xb4>
    c8ac:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    c8b0:	e3a02001 	mov	r2, #1
    c8b4:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    c8b8:	e3530000 	cmp	r3, #0
    c8bc:	1a000019 	bne	c928 <CScreenDevice::Write(void const*, unsigned int)+0x98>
    c8c0:	e3540000 	cmp	r4, #0
    c8c4:	e2447001 	sub	r7, r4, #1
    c8c8:	01a07004 	moveq	r7, r4
    c8cc:	0a00000d 	beq	c908 <CScreenDevice::Write(void const*, unsigned int)+0x78>
    c8d0:	e1a04006 	mov	r4, r6
    c8d4:	e0d410d1 	ldrsb	r1, [r4], #1
    c8d8:	e1a00005 	mov	r0, r5
    c8dc:	ebfffe88 	bl	c304 <CScreenDevice::Write(char)>
    c8e0:	e2643001 	rsb	r3, r4, #1
    c8e4:	e0863003 	add	r3, r6, r3
    c8e8:	e1730007 	cmn	r3, r7
    c8ec:	1afffff8 	bne	c8d4 <CScreenDevice::Write(void const*, unsigned int)+0x44>
    c8f0:	e2877001 	add	r7, r7, #1
    c8f4:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    c8f8:	e3530000 	cmp	r3, #0
    c8fc:	0a000001 	beq	c908 <CScreenDevice::Write(void const*, unsigned int)+0x78>
    c900:	e1a00005 	mov	r0, r5
    c904:	ebfffa31 	bl	b1d0 <CScreenDevice::InvertCursor() [clone .part.0]>
    c908:	e595308c 	ldr	r3, [r5, #140]	; 0x8c
    c90c:	e3a02000 	mov	r2, #0
    c910:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    c914:	e1530002 	cmp	r3, r2
    c918:	1a00000b 	bne	c94c <CScreenDevice::Write(void const*, unsigned int)+0xbc>
    c91c:	f57ff05f 	dmb	sy
    c920:	e1a00007 	mov	r0, r7
    c924:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    c928:	e1a00005 	mov	r0, r5
    c92c:	e2447001 	sub	r7, r4, #1
    c930:	ebfffa26 	bl	b1d0 <CScreenDevice::InvertCursor() [clone .part.0]>
    c934:	e3540000 	cmp	r4, #0
    c938:	1affffe4 	bne	c8d0 <CScreenDevice::Write(void const*, unsigned int)+0x40>
    c93c:	e1a07004 	mov	r7, r4
    c940:	eaffffeb 	b	c8f4 <CScreenDevice::Write(void const*, unsigned int)+0x64>
    c944:	eb001498 	bl	11bac <EnterCritical>
    c948:	eaffffd7 	b	c8ac <CScreenDevice::Write(void const*, unsigned int)+0x1c>
    c94c:	eb0014c1 	bl	11c58 <LeaveCritical>
    c950:	eafffff1 	b	c91c <CScreenDevice::Write(void const*, unsigned int)+0x8c>

0000c954 <CScreenDevice::InvertCursor()>:
    c954:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
    c958:	e3530000 	cmp	r3, #0
    c95c:	012fff1e 	bxeq	lr
    c960:	eafffa1a 	b	b1d0 <CScreenDevice::InvertCursor() [clone .part.0]>

0000c964 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    c964:	e590c030 	ldr	ip, [r0, #48]	; 0x30
    c968:	e15c0001 	cmp	ip, r1
    c96c:	912fff1e 	bxls	lr
    c970:	e590c034 	ldr	ip, [r0, #52]	; 0x34
    c974:	e15c0002 	cmp	ip, r2
    c978:	8590c02c 	ldrhi	ip, [r0, #44]	; 0x2c
    c97c:	85900024 	ldrhi	r0, [r0, #36]	; 0x24
    c980:	8021129c 	mlahi	r1, ip, r2, r1
    c984:	81a01081 	lslhi	r1, r1, #1
    c988:	818030b1 	strhhi	r3, [r0, r1]
    c98c:	e12fff1e 	bx	lr

0000c990 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    c990:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    c994:	e1530001 	cmp	r3, r1
    c998:	9a000002 	bls	c9a8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
    c99c:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    c9a0:	e1530002 	cmp	r3, r2
    c9a4:	8a000001 	bhi	c9b0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
    c9a8:	e1d005b4 	ldrh	r0, [r0, #84]	; 0x54
    c9ac:	e12fff1e 	bx	lr
    c9b0:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    c9b4:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    c9b8:	e021129c 	mla	r1, ip, r2, r1
    c9bc:	e1a01081 	lsl	r1, r1, #1
    c9c0:	e19300b1 	ldrh	r0, [r3, r1]
    c9c4:	e12fff1e 	bx	lr

0000c9c8 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    c9c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c9cc:	e1a06000 	mov	r6, r0
    c9d0:	e5907030 	ldr	r7, [r0, #48]	; 0x30
    c9d4:	e24dd00c 	sub	sp, sp, #12
    c9d8:	e280001c 	add	r0, r0, #28
    c9dc:	e1a05002 	mov	r5, r2
    c9e0:	e1a04001 	mov	r4, r1
    c9e4:	eb001825 	bl	12a80 <CCharGenerator::GetCharWidth() const>
    c9e8:	e30532c4 	movw	r3, #21188	; 0x52c4
    c9ec:	e2051003 	and	r1, r5, #3
    c9f0:	e3403001 	movt	r3, #1
    c9f4:	e2044003 	and	r4, r4, #3
    c9f8:	e0831001 	add	r1, r3, r1
    c9fc:	e30fca8a 	movw	ip, #64138	; 0xfa8a
    ca00:	e58dc000 	str	ip, [sp]
    ca04:	e2844001 	add	r4, r4, #1
    ca08:	e0627490 	mls	r2, r0, r4, r7
    ca0c:	e1d112d4 	ldrsb	r1, [r1, #36]	; 0x24
    ca10:	e1a00006 	mov	r0, r6
    ca14:	e3a03000 	mov	r3, #0
    ca18:	ebfffcc3 	bl	bd2c <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    ca1c:	e28dd00c 	add	sp, sp, #12
    ca20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000ca24 <CSerialDevice::Read(void*, unsigned int)>:
    ca24:	e5d03018 	ldrb	r3, [r0, #24]
    ca28:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    ca2c:	e3530000 	cmp	r3, #0
    ca30:	0a00004b 	beq	cb64 <CSerialDevice::Read(void*, unsigned int)+0x140>
    ca34:	e3510000 	cmp	r1, #0
    ca38:	e1a06001 	mov	r6, r1
    ca3c:	0a00004d 	beq	cb78 <CSerialDevice::Read(void*, unsigned int)+0x154>
    ca40:	e5905008 	ldr	r5, [r0, #8]
    ca44:	e1a04000 	mov	r4, r0
    ca48:	e1a07002 	mov	r7, r2
    ca4c:	e3550000 	cmp	r5, #0
    ca50:	0a000028 	beq	caf8 <CSerialDevice::Read(void*, unsigned int)+0xd4>
    ca54:	e2808a01 	add	r8, r0, #4096	; 0x1000
    ca58:	e59800e0 	ldr	r0, [r8, #224]	; 0xe0
    ca5c:	e3500000 	cmp	r0, #0
    ca60:	1a00003a 	bne	cb50 <CSerialDevice::Read(void*, unsigned int)+0x12c>
    ca64:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    ca68:	e3530000 	cmp	r3, #0
    ca6c:	ba000019 	blt	cad8 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    ca70:	e3570000 	cmp	r7, #0
    ca74:	0a00004a 	beq	cba4 <CSerialDevice::Read(void*, unsigned int)+0x180>
    ca78:	e3a05000 	mov	r5, #0
    ca7c:	ea00000b 	b	cab0 <CSerialDevice::Read(void*, unsigned int)+0x8c>
    ca80:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    ca84:	e2855001 	add	r5, r5, #1
    ca88:	e1570005 	cmp	r7, r5
    ca8c:	e0842003 	add	r2, r4, r3
    ca90:	e2833001 	add	r3, r3, #1
    ca94:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
    ca98:	e5d230bc 	ldrb	r3, [r2, #188]	; 0xbc
    ca9c:	e4c63001 	strb	r3, [r6], #1
    caa0:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    caa4:	e7ea3053 	ubfx	r3, r3, #0, #11
    caa8:	e58438c0 	str	r3, [r4, #2240]	; 0x8c0
    caac:	0a00000c 	beq	cae4 <CSerialDevice::Read(void*, unsigned int)+0xc0>
    cab0:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    cab4:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    cab8:	e1520003 	cmp	r2, r3
    cabc:	1affffef 	bne	ca80 <CSerialDevice::Read(void*, unsigned int)+0x5c>
    cac0:	e59830e0 	ldr	r3, [r8, #224]	; 0xe0
    cac4:	e3530000 	cmp	r3, #0
    cac8:	0a000008 	beq	caf0 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cacc:	eb001461 	bl	11c58 <LeaveCritical>
    cad0:	e1a00005 	mov	r0, r5
    cad4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cad8:	e59458c4 	ldr	r5, [r4, #2244]	; 0x8c4
    cadc:	e3a03000 	mov	r3, #0
    cae0:	e58438c4 	str	r3, [r4, #2244]	; 0x8c4
    cae4:	e59830e0 	ldr	r3, [r8, #224]	; 0xe0
    cae8:	e3530000 	cmp	r3, #0
    caec:	1afffff6 	bne	cacc <CSerialDevice::Read(void*, unsigned int)+0xa8>
    caf0:	e1a00005 	mov	r0, r5
    caf4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    caf8:	e3520000 	cmp	r2, #0
    cafc:	1a00000a 	bne	cb2c <CSerialDevice::Read(void*, unsigned int)+0x108>
    cb00:	ea000029 	b	cbac <CSerialDevice::Read(void*, unsigned int)+0x188>
    cb04:	e3130b02 	tst	r3, #2048	; 0x800
    cb08:	1a00001f 	bne	cb8c <CSerialDevice::Read(void*, unsigned int)+0x168>
    cb0c:	e3130c01 	tst	r3, #256	; 0x100
    cb10:	1a00001f 	bne	cb94 <CSerialDevice::Read(void*, unsigned int)+0x170>
    cb14:	e3130c02 	tst	r3, #512	; 0x200
    cb18:	1a00001f 	bne	cb9c <CSerialDevice::Read(void*, unsigned int)+0x178>
    cb1c:	e4c63001 	strb	r3, [r6], #1
    cb20:	e2855001 	add	r5, r5, #1
    cb24:	e1570005 	cmp	r7, r5
    cb28:	0afffff0 	beq	caf0 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cb2c:	e5943014 	ldr	r3, [r4, #20]
    cb30:	e5932018 	ldr	r2, [r3, #24]
    cb34:	e3120010 	tst	r2, #16
    cb38:	1affffec 	bne	caf0 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cb3c:	e5933000 	ldr	r3, [r3]
    cb40:	e3130b01 	tst	r3, #1024	; 0x400
    cb44:	0affffee 	beq	cb04 <CSerialDevice::Read(void*, unsigned int)+0xe0>
    cb48:	e3e05000 	mvn	r5, #0
    cb4c:	eaffffe7 	b	caf0 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cb50:	eb001415 	bl	11bac <EnterCritical>
    cb54:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    cb58:	e3530000 	cmp	r3, #0
    cb5c:	aaffffc3 	bge	ca70 <CSerialDevice::Read(void*, unsigned int)+0x4c>
    cb60:	eaffffdc 	b	cad8 <CSerialDevice::Read(void*, unsigned int)+0xb4>
    cb64:	e30512f0 	movw	r1, #21232	; 0x52f0
    cb68:	e3a02d07 	mov	r2, #448	; 0x1c0
    cb6c:	e3401001 	movt	r1, #1
    cb70:	e281000c 	add	r0, r1, #12
    cb74:	eb001604 	bl	1238c <assertion_failed>
    cb78:	e30512f0 	movw	r1, #21232	; 0x52f0
    cb7c:	e30021c3 	movw	r2, #451	; 0x1c3
    cb80:	e3401001 	movt	r1, #1
    cb84:	e2810018 	add	r0, r1, #24
    cb88:	eb0015ff 	bl	1238c <assertion_failed>
    cb8c:	e3e05001 	mvn	r5, #1
    cb90:	eaffffd6 	b	caf0 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cb94:	e3e05002 	mvn	r5, #2
    cb98:	eaffffd4 	b	caf0 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cb9c:	e3e05003 	mvn	r5, #3
    cba0:	eaffffd2 	b	caf0 <CSerialDevice::Read(void*, unsigned int)+0xcc>
    cba4:	e1a05007 	mov	r5, r7
    cba8:	eaffffcd 	b	cae4 <CSerialDevice::Read(void*, unsigned int)+0xc0>
    cbac:	e1a05002 	mov	r5, r2
    cbb0:	eaffffce 	b	caf0 <CSerialDevice::Read(void*, unsigned int)+0xcc>

0000cbb4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
    cbb4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbb8:	e1a04000 	mov	r4, r0
    cbbc:	e59f61a4 	ldr	r6, [pc, #420]	; cd68 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1b4>
    cbc0:	e1a05001 	mov	r5, r1
    cbc4:	e24dd00c 	sub	sp, sp, #12
    cbc8:	e1a08002 	mov	r8, r2
    cbcc:	e1a07003 	mov	r7, r3
    cbd0:	eb00186e 	bl	12d90 <CDevice::CDevice()>
    cbd4:	e5845008 	str	r5, [r4, #8]
    cbd8:	e284301c 	add	r3, r4, #28
    cbdc:	e5846000 	str	r6, [r4]
    cbe0:	e3a05000 	mov	r5, #0
    cbe4:	e5c4800c 	strb	r8, [r4, #12]
    cbe8:	e1a00003 	mov	r0, r3
    cbec:	e5847010 	str	r7, [r4, #16]
    cbf0:	e284b044 	add	fp, r4, #68	; 0x44
    cbf4:	e5845014 	str	r5, [r4, #20]
    cbf8:	e284a06c 	add	sl, r4, #108	; 0x6c
    cbfc:	e5c45018 	strb	r5, [r4, #24]
    cc00:	e2849094 	add	r9, r4, #148	; 0x94
    cc04:	e58d3004 	str	r3, [sp, #4]
    cc08:	ebfff011 	bl	8c54 <CGPIOPin::CGPIOPin()>
    cc0c:	e1a0000b 	mov	r0, fp
    cc10:	ebfff00f 	bl	8c54 <CGPIOPin::CGPIOPin()>
    cc14:	e1a0000a 	mov	r0, sl
    cc18:	ebfff00d 	bl	8c54 <CGPIOPin::CGPIOPin()>
    cc1c:	e1a00009 	mov	r0, r9
    cc20:	ebfff00b 	bl	8c54 <CGPIOPin::CGPIOPin()>
    cc24:	e1580005 	cmp	r8, r5
    cc28:	e2841a01 	add	r1, r4, #4096	; 0x1000
    cc2c:	e58458bc 	str	r5, [r4, #2236]	; 0x8bc
    cc30:	e3a02001 	mov	r2, #1
    cc34:	e58458c0 	str	r5, [r4, #2240]	; 0x8c0
    cc38:	13a00002 	movne	r0, #2
    cc3c:	e58458c4 	str	r5, [r4, #2244]	; 0x8c4
    cc40:	01a00002 	moveq	r0, r2
    cc44:	e58150c8 	str	r5, [r1, #200]	; 0xc8
    cc48:	e58150d4 	str	r5, [r1, #212]	; 0xd4
    cc4c:	e58150cc 	str	r5, [r1, #204]	; 0xcc
    cc50:	e58120d0 	str	r2, [r1, #208]	; 0xd0
    cc54:	e58120e4 	str	r2, [r1, #228]	; 0xe4
    cc58:	e58100e0 	str	r0, [r1, #224]	; 0xe0
    cc5c:	e5941010 	ldr	r1, [r4, #16]
    cc60:	e1510005 	cmp	r1, r5
    cc64:	1a000027 	bne	cd08 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x154>
    cc68:	e1a08207 	lsl	r8, r7, #4
    cc6c:	e246602c 	sub	r6, r6, #44	; 0x2c
    cc70:	e0861008 	add	r1, r6, r8
    cc74:	e5915048 	ldr	r5, [r1, #72]	; 0x48
    cc78:	e3550035 	cmp	r5, #53	; 0x35
    cc7c:	8a000021 	bhi	cd08 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x154>
    cc80:	e59d3004 	ldr	r3, [sp, #4]
    cc84:	e3071150 	movw	r1, #29008	; 0x7150
    cc88:	e3401001 	movt	r1, #1
    cc8c:	e5910000 	ldr	r0, [r1]
    cc90:	e3500000 	cmp	r0, #0
    cc94:	1a00002f 	bne	cd58 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1a4>
    cc98:	e5814000 	str	r4, [r1]
    cc9c:	e3570000 	cmp	r7, #0
    cca0:	e3a01a01 	mov	r1, #4096	; 0x1000
    cca4:	e3431f20 	movt	r1, #16160	; 0x3f20
    cca8:	e5841014 	str	r1, [r4, #20]
    ccac:	0a000018 	beq	cd14 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x160>
    ccb0:	e0866008 	add	r6, r6, r8
    ccb4:	e1a01005 	mov	r1, r5
    ccb8:	e1a0000a 	mov	r0, sl
    ccbc:	ebffeff2 	bl	8c8c <CGPIOPin::AssignPin(unsigned int)>
    ccc0:	e596104c 	ldr	r1, [r6, #76]	; 0x4c
    ccc4:	e3a02001 	mov	r2, #1
    ccc8:	e1a0000a 	mov	r0, sl
    cccc:	e2811004 	add	r1, r1, #4
    ccd0:	e6ef1071 	uxtb	r1, r1
    ccd4:	ebfff219 	bl	9540 <CGPIOPin::SetMode(TGPIOMode, bool)>
    ccd8:	e5961050 	ldr	r1, [r6, #80]	; 0x50
    ccdc:	e1a00009 	mov	r0, r9
    cce0:	ebffefe9 	bl	8c8c <CGPIOPin::AssignPin(unsigned int)>
    cce4:	e3a02001 	mov	r2, #1
    cce8:	e3a01004 	mov	r1, #4
    ccec:	e1a00009 	mov	r0, r9
    ccf0:	ebfff212 	bl	9540 <CGPIOPin::SetMode(TGPIOMode, bool)>
    ccf4:	e3a01002 	mov	r1, #2
    ccf8:	e1a00009 	mov	r0, r9
    ccfc:	ebfff1b9 	bl	93e8 <CGPIOPin::SetPullMode(TGPIOPullMode)>
    cd00:	e3a03001 	mov	r3, #1
    cd04:	e5c43018 	strb	r3, [r4, #24]
    cd08:	e1a00004 	mov	r0, r4
    cd0c:	e28dd00c 	add	sp, sp, #12
    cd10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd14:	e58d3004 	str	r3, [sp, #4]
    cd18:	e1a00003 	mov	r0, r3
    cd1c:	e3a01020 	mov	r1, #32
    cd20:	ebffefd9 	bl	8c8c <CGPIOPin::AssignPin(unsigned int)>
    cd24:	e59d3004 	ldr	r3, [sp, #4]
    cd28:	e3a02001 	mov	r2, #1
    cd2c:	e1a01007 	mov	r1, r7
    cd30:	e1a00003 	mov	r0, r3
    cd34:	ebfff201 	bl	9540 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cd38:	e1a0000b 	mov	r0, fp
    cd3c:	e3a01021 	mov	r1, #33	; 0x21
    cd40:	ebffefd1 	bl	8c8c <CGPIOPin::AssignPin(unsigned int)>
    cd44:	e3a02001 	mov	r2, #1
    cd48:	e1a01007 	mov	r1, r7
    cd4c:	e1a0000b 	mov	r0, fp
    cd50:	ebfff1fa 	bl	9540 <CGPIOPin::SetMode(TGPIOMode, bool)>
    cd54:	eaffffd5 	b	ccb0 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xfc>
    cd58:	e3a020b0 	mov	r2, #176	; 0xb0
    cd5c:	e1a01006 	mov	r1, r6
    cd60:	e2860058 	add	r0, r6, #88	; 0x58
    cd64:	eb001588 	bl	1238c <assertion_failed>
    cd68:	0001531c 	.word	0x0001531c

0000cd6c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
    cd6c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cd70:	e24dd00c 	sub	sp, sp, #12
    cd74:	e5d07018 	ldrb	r7, [r0, #24]
    cd78:	e5dd8030 	ldrb	r8, [sp, #48]	; 0x30
    cd7c:	e3570000 	cmp	r7, #0
    cd80:	1a000002 	bne	cd90 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x24>
    cd84:	e1a00007 	mov	r0, r7
    cd88:	e28dd00c 	add	sp, sp, #12
    cd8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd90:	e1a0a001 	mov	sl, r1
    cd94:	e1a05002 	mov	r5, r2
    cd98:	e1a06003 	mov	r6, r3
    cd9c:	e1a04000 	mov	r4, r0
    cda0:	ebfff8d1 	bl	b0ec <CMachineInfo::Get()>
    cda4:	e3a01002 	mov	r1, #2
    cda8:	ebfff7eb 	bl	ad5c <CMachineInfo::GetClockRate(unsigned int) const>
    cdac:	e3500000 	cmp	r0, #0
    cdb0:	0a000088 	beq	cfd8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x26c>
    cdb4:	e30037d4 	movw	r3, #2004	; 0x7d4
    cdb8:	e24a2f4b 	sub	r2, sl, #300	; 0x12c
    cdbc:	e340303d 	movt	r3, #61	; 0x3d
    cdc0:	e1520003 	cmp	r2, r3
    cdc4:	8a000088 	bhi	cfec <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x280>
    cdc8:	e1a0320a 	lsl	r3, sl, #4
    cdcc:	e30f2ffe 	movw	r2, #65534	; 0xfffe
    cdd0:	e739f310 	udiv	r9, r0, r3
    cdd4:	e2491001 	sub	r1, r9, #1
    cdd8:	e1510002 	cmp	r1, r2
    cddc:	8a000087 	bhi	d000 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x294>
    cde0:	e0600993 	mls	r0, r3, r9, r0
    cde4:	e1a00180 	lsl	r0, r0, #3
    cde8:	e730fa10 	udiv	r0, r0, sl
    cdec:	e200a001 	and	sl, r0, #1
    cdf0:	e08aa0a0 	add	sl, sl, r0, lsr #1
    cdf4:	e35a003f 	cmp	sl, #63	; 0x3f
    cdf8:	8a000085 	bhi	d014 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2a8>
    cdfc:	e5940008 	ldr	r0, [r4, #8]
    ce00:	e3500000 	cmp	r0, #0
    ce04:	0a000013 	beq	ce58 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xec>
    ce08:	e307b150 	movw	fp, #29008	; 0x7150
    ce0c:	e340b001 	movt	fp, #1
    ce10:	e59b3004 	ldr	r3, [fp, #4]
    ce14:	e3530000 	cmp	r3, #0
    ce18:	1a000049 	bne	cf44 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1d8>
    ce1c:	e5d4200c 	ldrb	r2, [r4, #12]
    ce20:	e58b0008 	str	r0, [fp, #8]
    ce24:	e5cb200c 	strb	r2, [fp, #12]
    ce28:	e3520000 	cmp	r2, #0
    ce2c:	1a000056 	bne	cf8c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x220>
    ce30:	e1a03002 	mov	r3, r2
    ce34:	e30d2840 	movw	r2, #55360	; 0xd840
    ce38:	e3402000 	movt	r2, #0
    ce3c:	e3a01039 	mov	r1, #57	; 0x39
    ce40:	eb0013d8 	bl	11da8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    ce44:	e59b3004 	ldr	r3, [fp, #4]
    ce48:	e3530000 	cmp	r3, #0
    ce4c:	1a000057 	bne	cfb0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x244>
    ce50:	e3a03001 	mov	r3, #1
    ce54:	e58b3004 	str	r3, [fp, #4]
    ce58:	e5943014 	ldr	r3, [r4, #20]
    ce5c:	e3a02000 	mov	r2, #0
    ce60:	e5832038 	str	r2, [r3, #56]	; 0x38
    ce64:	e30027ff 	movw	r2, #2047	; 0x7ff
    ce68:	e5943014 	ldr	r3, [r4, #20]
    ce6c:	e5832044 	str	r2, [r3, #68]	; 0x44
    ce70:	e5943014 	ldr	r3, [r4, #20]
    ce74:	e5839024 	str	r9, [r3, #36]	; 0x24
    ce78:	e2453005 	sub	r3, r5, #5
    ce7c:	e5942014 	ldr	r2, [r4, #20]
    ce80:	e3530003 	cmp	r3, #3
    ce84:	e582a028 	str	sl, [r2, #40]	; 0x28
    ce88:	8a000066 	bhi	d028 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2bc>
    ce8c:	e1a05285 	lsl	r5, r5, #5
    ce90:	e2463001 	sub	r3, r6, #1
    ce94:	e3530001 	cmp	r3, #1
    ce98:	e2455090 	sub	r5, r5, #144	; 0x90
    ce9c:	8a000048 	bhi	cfc4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x258>
    cea0:	e3560002 	cmp	r6, #2
    cea4:	03855008 	orreq	r5, r5, #8
    cea8:	e3580001 	cmp	r8, #1
    ceac:	0a000034 	beq	cf84 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x218>
    ceb0:	e3580002 	cmp	r8, #2
    ceb4:	1a00002b 	bne	cf68 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1fc>
    ceb8:	e3855006 	orr	r5, r5, #6
    cebc:	e5943008 	ldr	r3, [r4, #8]
    cec0:	e3530000 	cmp	r3, #0
    cec4:	e5943014 	ldr	r3, [r4, #20]
    cec8:	0583502c 	streq	r5, [r3, #44]	; 0x2c
    cecc:	0a00000e 	beq	cf0c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1a0>
    ced0:	e3a02009 	mov	r2, #9
    ced4:	e3a01e45 	mov	r1, #1104	; 0x450
    ced8:	e5832034 	str	r2, [r3, #52]	; 0x34
    cedc:	e3a00001 	mov	r0, #1
    cee0:	e5943014 	ldr	r3, [r4, #20]
    cee4:	e583502c 	str	r5, [r3, #44]	; 0x2c
    cee8:	e3073150 	movw	r3, #29008	; 0x7150
    ceec:	e3403001 	movt	r3, #1
    cef0:	e5942014 	ldr	r2, [r4, #20]
    cef4:	e5821038 	str	r1, [r2, #56]	; 0x38
    cef8:	e5932010 	ldr	r2, [r3, #16]
    cefc:	e5941010 	ldr	r1, [r4, #16]
    cf00:	e1822110 	orr	r2, r2, r0, lsl r1
    cf04:	e5832010 	str	r2, [r3, #16]
    cf08:	f57ff04f 	dsb	sy
    cf0c:	e5943014 	ldr	r3, [r4, #20]
    cf10:	e3002301 	movw	r2, #769	; 0x301
    cf14:	e5832030 	str	r2, [r3, #48]	; 0x30
    cf18:	ebffeea9 	bl	89c4 <CDeviceNameService::Get()>
    cf1c:	e5942010 	ldr	r2, [r4, #16]
    cf20:	e3a03000 	mov	r3, #0
    cf24:	e58d3000 	str	r3, [sp]
    cf28:	e1a03004 	mov	r3, r4
    cf2c:	e59f1108 	ldr	r1, [pc, #264]	; d03c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d0>
    cf30:	e2822001 	add	r2, r2, #1
    cf34:	ebffeeae 	bl	89f4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    cf38:	e1a00007 	mov	r0, r7
    cf3c:	e28dd00c 	add	sp, sp, #12
    cf40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf44:	e59b3008 	ldr	r3, [fp, #8]
    cf48:	e1500003 	cmp	r0, r3
    cf4c:	0a000013 	beq	cfa0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>
    cf50:	e5942010 	ldr	r2, [r4, #16]
    cf54:	e3a03000 	mov	r3, #0
    cf58:	e5c43018 	strb	r3, [r4, #24]
    cf5c:	e1a07003 	mov	r7, r3
    cf60:	e78b3102 	str	r3, [fp, r2, lsl #2]
    cf64:	eaffff86 	b	cd84 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
    cf68:	e3580000 	cmp	r8, #0
    cf6c:	0affffd2 	beq	cebc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x150>
    cf70:	e30512f0 	movw	r1, #21232	; 0x52f0
    cf74:	e3002157 	movw	r2, #343	; 0x157
    cf78:	e3401001 	movt	r1, #1
    cf7c:	e2810f43 	add	r0, r1, #268	; 0x10c
    cf80:	eb001501 	bl	1238c <assertion_failed>
    cf84:	e3855002 	orr	r5, r5, #2
    cf88:	eaffffcb 	b	cebc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x150>
    cf8c:	e30d2840 	movw	r2, #55360	; 0xd840
    cf90:	e3a01039 	mov	r1, #57	; 0x39
    cf94:	e3402000 	movt	r2, #0
    cf98:	eb0013e9 	bl	11f44 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
    cf9c:	eaffffa8 	b	ce44 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xd8>
    cfa0:	e5d4200c 	ldrb	r2, [r4, #12]
    cfa4:	e5db300c 	ldrb	r3, [fp, #12]
    cfa8:	e1520003 	cmp	r2, r3
    cfac:	1affffe7 	bne	cf50 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e4>
    cfb0:	e30512f0 	movw	r1, #21232	; 0x52f0
    cfb4:	e300212a 	movw	r2, #298	; 0x12a
    cfb8:	e3401001 	movt	r1, #1
    cfbc:	e28100e4 	add	r0, r1, #228	; 0xe4
    cfc0:	eb0014f1 	bl	1238c <assertion_failed>
    cfc4:	e30512f0 	movw	r1, #21232	; 0x52f0
    cfc8:	e3002143 	movw	r2, #323	; 0x143
    cfcc:	e3401001 	movt	r1, #1
    cfd0:	e2810e11 	add	r0, r1, #272	; 0x110
    cfd4:	eb0014ec 	bl	1238c <assertion_failed>
    cfd8:	e30512f0 	movw	r1, #21232	; 0x52f0
    cfdc:	e3a02c01 	mov	r2, #256	; 0x100
    cfe0:	e3401001 	movt	r1, #1
    cfe4:	e2810070 	add	r0, r1, #112	; 0x70
    cfe8:	eb0014e7 	bl	1238c <assertion_failed>
    cfec:	e30512f0 	movw	r1, #21232	; 0x52f0
    cff0:	e3002102 	movw	r2, #258	; 0x102
    cff4:	e3401001 	movt	r1, #1
    cff8:	e2810080 	add	r0, r1, #128	; 0x80
    cffc:	eb0014e2 	bl	1238c <assertion_failed>
    d000:	e30512f0 	movw	r1, #21232	; 0x52f0
    d004:	e3002105 	movw	r2, #261	; 0x105
    d008:	e3401001 	movt	r1, #1
    d00c:	e28100ac 	add	r0, r1, #172	; 0xac
    d010:	eb0014dd 	bl	1238c <assertion_failed>
    d014:	e30512f0 	movw	r1, #21232	; 0x52f0
    d018:	e3a02f42 	mov	r2, #264	; 0x108
    d01c:	e3401001 	movt	r1, #1
    d020:	e28100d0 	add	r0, r1, #208	; 0xd0
    d024:	eb0014d8 	bl	1238c <assertion_failed>
    d028:	e30512f0 	movw	r1, #21232	; 0x52f0
    d02c:	e300213f 	movw	r2, #319	; 0x13f
    d030:	e3401001 	movt	r1, #1
    d034:	e2810f43 	add	r0, r1, #268	; 0x10c
    d038:	eb0014d3 	bl	1238c <assertion_failed>
    d03c:	00015424 	.word	0x00015424

0000d040 <CSerialDevice::GetOptions() const>:
    d040:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d044:	e59000d0 	ldr	r0, [r0, #208]	; 0xd0
    d048:	e12fff1e 	bx	lr

0000d04c <CSerialDevice::SetOptions(unsigned int)>:
    d04c:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d050:	e58010d0 	str	r1, [r0, #208]	; 0xd0
    d054:	e12fff1e 	bx	lr

0000d058 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
    d058:	e5903008 	ldr	r3, [r0, #8]
    d05c:	e92d4010 	push	{r4, lr}
    d060:	e3530000 	cmp	r3, #0
    d064:	0a00000e 	beq	d0a4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
    d068:	e2800a01 	add	r0, r0, #4096	; 0x1000
    d06c:	e59030d4 	ldr	r3, [r0, #212]	; 0xd4
    d070:	e3530000 	cmp	r3, #0
    d074:	1a00000f 	bne	d0b8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x60>
    d078:	e3510000 	cmp	r1, #0
    d07c:	0a000012 	beq	d0cc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x74>
    d080:	e1d130d0 	ldrsb	r3, [r1]
    d084:	e3530000 	cmp	r3, #0
    d088:	0a000014 	beq	d0e0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x88>
    d08c:	e3520000 	cmp	r2, #0
    d090:	0a000017 	beq	d0f4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
    d094:	e58020dc 	str	r2, [r0, #220]	; 0xdc
    d098:	e58010d8 	str	r1, [r0, #216]	; 0xd8
    d09c:	e58010d4 	str	r1, [r0, #212]	; 0xd4
    d0a0:	e8bd8010 	pop	{r4, pc}
    d0a4:	e30512f0 	movw	r1, #21232	; 0x52f0
    d0a8:	e3a02e22 	mov	r2, #544	; 0x220
    d0ac:	e3401001 	movt	r1, #1
    d0b0:	e2810f4f 	add	r0, r1, #316	; 0x13c
    d0b4:	eb0014b4 	bl	1238c <assertion_failed>
    d0b8:	e30512f0 	movw	r1, #21232	; 0x52f0
    d0bc:	e3002221 	movw	r2, #545	; 0x221
    d0c0:	e3401001 	movt	r1, #1
    d0c4:	e2810f55 	add	r0, r1, #340	; 0x154
    d0c8:	eb0014af 	bl	1238c <assertion_failed>
    d0cc:	e30512f0 	movw	r1, #21232	; 0x52f0
    d0d0:	e3002223 	movw	r2, #547	; 0x223
    d0d4:	e3401001 	movt	r1, #1
    d0d8:	e2810f59 	add	r0, r1, #356	; 0x164
    d0dc:	eb0014aa 	bl	1238c <assertion_failed>
    d0e0:	e30512f0 	movw	r1, #21232	; 0x52f0
    d0e4:	e3a02f89 	mov	r2, #548	; 0x224
    d0e8:	e3401001 	movt	r1, #1
    d0ec:	e2810e17 	add	r0, r1, #368	; 0x170
    d0f0:	eb0014a5 	bl	1238c <assertion_failed>
    d0f4:	e30512f0 	movw	r1, #21232	; 0x52f0
    d0f8:	e3002225 	movw	r2, #549	; 0x225
    d0fc:	e3401001 	movt	r1, #1
    d100:	e2810d06 	add	r0, r1, #384	; 0x180
    d104:	eb0014a0 	bl	1238c <assertion_failed>

0000d108 <CSerialDevice::AvailableForWrite()>:
    d108:	e5d03018 	ldrb	r3, [r0, #24]
    d10c:	e92d4010 	push	{r4, lr}
    d110:	e3530000 	cmp	r3, #0
    d114:	0a000019 	beq	d180 <CSerialDevice::AvailableForWrite()+0x78>
    d118:	e5903008 	ldr	r3, [r0, #8]
    d11c:	e3530000 	cmp	r3, #0
    d120:	0a00001b 	beq	d194 <CSerialDevice::AvailableForWrite()+0x8c>
    d124:	e2804a01 	add	r4, r0, #4096	; 0x1000
    d128:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d12c:	e3500000 	cmp	r0, #0
    d130:	1a00000c 	bne	d168 <CSerialDevice::AvailableForWrite()+0x60>
    d134:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d138:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d13c:	e1520003 	cmp	r2, r3
    d140:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d144:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d148:	92834e7f 	addls	r4, r3, #2032	; 0x7f0
    d14c:	82434001 	subhi	r4, r3, #1
    d150:	9284400f 	addls	r4, r4, #15
    d154:	e3500000 	cmp	r0, #0
    d158:	e0444002 	sub	r4, r4, r2
    d15c:	1a000004 	bne	d174 <CSerialDevice::AvailableForWrite()+0x6c>
    d160:	e1a00004 	mov	r0, r4
    d164:	e8bd8010 	pop	{r4, pc}
    d168:	eb00128f 	bl	11bac <EnterCritical>
    d16c:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d170:	eaffffef 	b	d134 <CSerialDevice::AvailableForWrite()+0x2c>
    d174:	eb0012b7 	bl	11c58 <LeaveCritical>
    d178:	e1a00004 	mov	r0, r4
    d17c:	e8bd8010 	pop	{r4, pc}
    d180:	e30512f0 	movw	r1, #21232	; 0x52f0
    d184:	e300222f 	movw	r2, #559	; 0x22f
    d188:	e3401001 	movt	r1, #1
    d18c:	e281000c 	add	r0, r1, #12
    d190:	eb00147d 	bl	1238c <assertion_failed>
    d194:	e30512f0 	movw	r1, #21232	; 0x52f0
    d198:	e3a02e23 	mov	r2, #560	; 0x230
    d19c:	e3401001 	movt	r1, #1
    d1a0:	e2810f4f 	add	r0, r1, #316	; 0x13c
    d1a4:	eb001478 	bl	1238c <assertion_failed>

0000d1a8 <CSerialDevice::AvailableForRead()>:
    d1a8:	e5d03018 	ldrb	r3, [r0, #24]
    d1ac:	e92d4070 	push	{r4, r5, r6, lr}
    d1b0:	e3530000 	cmp	r3, #0
    d1b4:	0a00001a 	beq	d224 <CSerialDevice::AvailableForRead()+0x7c>
    d1b8:	e5903008 	ldr	r3, [r0, #8]
    d1bc:	e1a04000 	mov	r4, r0
    d1c0:	e3530000 	cmp	r3, #0
    d1c4:	0a00001b 	beq	d238 <CSerialDevice::AvailableForRead()+0x90>
    d1c8:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d1cc:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d1d0:	e3500000 	cmp	r0, #0
    d1d4:	1a00000c 	bne	d20c <CSerialDevice::AvailableForRead()+0x64>
    d1d8:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    d1dc:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d1e0:	e1520003 	cmp	r2, r3
    d1e4:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d1e8:	359428c0 	ldrcc	r2, [r4, #2240]	; 0x8c0
    d1ec:	259448c0 	ldrcs	r4, [r4, #2240]	; 0x8c0
    d1f0:	32834b02 	addcc	r4, r3, #2048	; 0x800
    d1f4:	30444002 	subcc	r4, r4, r2
    d1f8:	20434004 	subcs	r4, r3, r4
    d1fc:	e3500000 	cmp	r0, #0
    d200:	1a000004 	bne	d218 <CSerialDevice::AvailableForRead()+0x70>
    d204:	e1a00004 	mov	r0, r4
    d208:	e8bd8070 	pop	{r4, r5, r6, pc}
    d20c:	eb001266 	bl	11bac <EnterCritical>
    d210:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d214:	eaffffef 	b	d1d8 <CSerialDevice::AvailableForRead()+0x30>
    d218:	eb00128e 	bl	11c58 <LeaveCritical>
    d21c:	e1a00004 	mov	r0, r4
    d220:	e8bd8070 	pop	{r4, r5, r6, pc}
    d224:	e30512f0 	movw	r1, #21232	; 0x52f0
    d228:	e3002245 	movw	r2, #581	; 0x245
    d22c:	e3401001 	movt	r1, #1
    d230:	e281000c 	add	r0, r1, #12
    d234:	eb001454 	bl	1238c <assertion_failed>
    d238:	e30512f0 	movw	r1, #21232	; 0x52f0
    d23c:	e3002246 	movw	r2, #582	; 0x246
    d240:	e3401001 	movt	r1, #1
    d244:	e2810f4f 	add	r0, r1, #316	; 0x13c
    d248:	eb00144f 	bl	1238c <assertion_failed>

0000d24c <CSerialDevice::Peek()>:
    d24c:	e5d03018 	ldrb	r3, [r0, #24]
    d250:	e92d4070 	push	{r4, r5, r6, lr}
    d254:	e3530000 	cmp	r3, #0
    d258:	0a00001f 	beq	d2dc <CSerialDevice::Peek()+0x90>
    d25c:	e5903008 	ldr	r3, [r0, #8]
    d260:	e1a04000 	mov	r4, r0
    d264:	e3530000 	cmp	r3, #0
    d268:	0a000020 	beq	d2f0 <CSerialDevice::Peek()+0xa4>
    d26c:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d270:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d274:	e3500000 	cmp	r0, #0
    d278:	1a000008 	bne	d2a0 <CSerialDevice::Peek()+0x54>
    d27c:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d280:	e59428c0 	ldr	r2, [r4, #2240]	; 0x8c0
    d284:	e1520003 	cmp	r2, r3
    d288:	0a00001d 	beq	d304 <CSerialDevice::Peek()+0xb8>
    d28c:	e59408c0 	ldr	r0, [r4, #2240]	; 0x8c0
    d290:	e0844000 	add	r4, r4, r0
    d294:	e5d440bc 	ldrb	r4, [r4, #188]	; 0xbc
    d298:	e1a00004 	mov	r0, r4
    d29c:	e8bd8070 	pop	{r4, r5, r6, pc}
    d2a0:	eb001241 	bl	11bac <EnterCritical>
    d2a4:	e59428bc 	ldr	r2, [r4, #2236]	; 0x8bc
    d2a8:	e59438c0 	ldr	r3, [r4, #2240]	; 0x8c0
    d2ac:	e1520003 	cmp	r2, r3
    d2b0:	03e04000 	mvneq	r4, #0
    d2b4:	159408c0 	ldrne	r0, [r4, #2240]	; 0x8c0
    d2b8:	059530e0 	ldreq	r3, [r5, #224]	; 0xe0
    d2bc:	10844000 	addne	r4, r4, r0
    d2c0:	159530e0 	ldrne	r3, [r5, #224]	; 0xe0
    d2c4:	15d440bc 	ldrbne	r4, [r4, #188]	; 0xbc
    d2c8:	e3530000 	cmp	r3, #0
    d2cc:	0afffff1 	beq	d298 <CSerialDevice::Peek()+0x4c>
    d2d0:	eb001260 	bl	11c58 <LeaveCritical>
    d2d4:	e1a00004 	mov	r0, r4
    d2d8:	e8bd8070 	pop	{r4, r5, r6, pc}
    d2dc:	e30512f0 	movw	r1, #21232	; 0x52f0
    d2e0:	e300225b 	movw	r2, #603	; 0x25b
    d2e4:	e3401001 	movt	r1, #1
    d2e8:	e281000c 	add	r0, r1, #12
    d2ec:	eb001426 	bl	1238c <assertion_failed>
    d2f0:	e30512f0 	movw	r1, #21232	; 0x52f0
    d2f4:	e3a02f97 	mov	r2, #604	; 0x25c
    d2f8:	e3401001 	movt	r1, #1
    d2fc:	e2810f4f 	add	r0, r1, #316	; 0x13c
    d300:	eb001421 	bl	1238c <assertion_failed>
    d304:	e3e04000 	mvn	r4, #0
    d308:	eaffffe2 	b	d298 <CSerialDevice::Peek()+0x4c>

0000d30c <CSerialDevice::Flush()>:
    d30c:	e5902014 	ldr	r2, [r0, #20]
    d310:	e2822018 	add	r2, r2, #24
    d314:	e5923000 	ldr	r3, [r2]
    d318:	e3130008 	tst	r3, #8
    d31c:	1afffffc 	bne	d314 <CSerialDevice::Flush()+0x8>
    d320:	e12fff1e 	bx	lr

0000d324 <CSerialDevice::Write(unsigned char)>:
    d324:	e5903008 	ldr	r3, [r0, #8]
    d328:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d32c:	e3530000 	cmp	r3, #0
    d330:	e1a04000 	mov	r4, r0
    d334:	e1a05001 	mov	r5, r1
    d338:	0a000021 	beq	d3c4 <CSerialDevice::Write(unsigned char)+0xa0>
    d33c:	e2806a01 	add	r6, r0, #4096	; 0x1000
    d340:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
    d344:	e3500000 	cmp	r0, #0
    d348:	1a000013 	bne	d39c <CSerialDevice::Write(unsigned char)+0x78>
    d34c:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d350:	e59610cc 	ldr	r1, [r6, #204]	; 0xcc
    d354:	e2833001 	add	r3, r3, #1
    d358:	e7ea3053 	ubfx	r3, r3, #0, #11
    d35c:	e1530001 	cmp	r3, r1
    d360:	0a000020 	beq	d3e8 <CSerialDevice::Write(unsigned char)+0xc4>
    d364:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d368:	e3a07001 	mov	r7, #1
    d36c:	e0844003 	add	r4, r4, r3
    d370:	e2833001 	add	r3, r3, #1
    d374:	e58630c8 	str	r3, [r6, #200]	; 0xc8
    d378:	e5c458c8 	strb	r5, [r4, #2248]	; 0x8c8
    d37c:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d380:	e7ea3053 	ubfx	r3, r3, #0, #11
    d384:	e58630c8 	str	r3, [r6, #200]	; 0xc8
    d388:	e3500000 	cmp	r0, #0
    d38c:	0a000000 	beq	d394 <CSerialDevice::Write(unsigned char)+0x70>
    d390:	eb001230 	bl	11c58 <LeaveCritical>
    d394:	e1a00007 	mov	r0, r7
    d398:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d39c:	eb001202 	bl	11bac <EnterCritical>
    d3a0:	e59630c8 	ldr	r3, [r6, #200]	; 0xc8
    d3a4:	e59620cc 	ldr	r2, [r6, #204]	; 0xcc
    d3a8:	e59600e0 	ldr	r0, [r6, #224]	; 0xe0
    d3ac:	e2833001 	add	r3, r3, #1
    d3b0:	e7ea3053 	ubfx	r3, r3, #0, #11
    d3b4:	e1530002 	cmp	r3, r2
    d3b8:	03a07000 	moveq	r7, #0
    d3bc:	1affffe8 	bne	d364 <CSerialDevice::Write(unsigned char)+0x40>
    d3c0:	eafffff0 	b	d388 <CSerialDevice::Write(unsigned char)+0x64>
    d3c4:	e5901014 	ldr	r1, [r0, #20]
    d3c8:	e2812018 	add	r2, r1, #24
    d3cc:	e5923000 	ldr	r3, [r2]
    d3d0:	e3130020 	tst	r3, #32
    d3d4:	1afffffc 	bne	d3cc <CSerialDevice::Write(unsigned char)+0xa8>
    d3d8:	e5815000 	str	r5, [r1]
    d3dc:	e3a07001 	mov	r7, #1
    d3e0:	e1a00007 	mov	r0, r7
    d3e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d3e8:	e1a07000 	mov	r7, r0
    d3ec:	e1a00007 	mov	r0, r7
    d3f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000d3f4 <CSerialDevice::Write(void const*, unsigned int)>:
    d3f4:	e5d03018 	ldrb	r3, [r0, #24]
    d3f8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    d3fc:	e3530000 	cmp	r3, #0
    d400:	0a000089 	beq	d62c <CSerialDevice::Write(void const*, unsigned int)+0x238>
    d404:	e2804a01 	add	r4, r0, #4096	; 0x1000
    d408:	e1a06000 	mov	r6, r0
    d40c:	e1a05001 	mov	r5, r1
    d410:	e1a08002 	mov	r8, r2
    d414:	e59400e4 	ldr	r0, [r4, #228]	; 0xe4
    d418:	e3500000 	cmp	r0, #0
    d41c:	1a000077 	bne	d600 <CSerialDevice::Write(void const*, unsigned int)+0x20c>
    d420:	e3550000 	cmp	r5, #0
    d424:	0a000085 	beq	d640 <CSerialDevice::Write(void const*, unsigned int)+0x24c>
    d428:	e3580000 	cmp	r8, #0
    d42c:	0a000088 	beq	d654 <CSerialDevice::Write(void const*, unsigned int)+0x260>
    d430:	e2455001 	sub	r5, r5, #1
    d434:	e3a07000 	mov	r7, #0
    d438:	ea000002 	b	d448 <CSerialDevice::Write(void const*, unsigned int)+0x54>
    d43c:	e2877001 	add	r7, r7, #1
    d440:	e1580007 	cmp	r8, r7
    d444:	0a00001f 	beq	d4c8 <CSerialDevice::Write(void const*, unsigned int)+0xd4>
    d448:	e5963008 	ldr	r3, [r6, #8]
    d44c:	e5f59001 	ldrb	r9, [r5, #1]!
    d450:	e3530000 	cmp	r3, #0
    d454:	0a000046 	beq	d574 <CSerialDevice::Write(void const*, unsigned int)+0x180>
    d458:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d45c:	e3500000 	cmp	r0, #0
    d460:	1a00004a 	bne	d590 <CSerialDevice::Write(void const*, unsigned int)+0x19c>
    d464:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d468:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d46c:	e2833001 	add	r3, r3, #1
    d470:	e7ea3053 	ubfx	r3, r3, #0, #11
    d474:	e1520003 	cmp	r2, r3
    d478:	0a000012 	beq	d4c8 <CSerialDevice::Write(void const*, unsigned int)+0xd4>
    d47c:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d480:	e0862003 	add	r2, r6, r3
    d484:	e2833001 	add	r3, r3, #1
    d488:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    d48c:	e5c298c8 	strb	r9, [r2, #2248]	; 0x8c8
    d490:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d494:	e7ea3053 	ubfx	r3, r3, #0, #11
    d498:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    d49c:	e5d53000 	ldrb	r3, [r5]
    d4a0:	e353000a 	cmp	r3, #10
    d4a4:	1affffe4 	bne	d43c <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d4a8:	e59430d0 	ldr	r3, [r4, #208]	; 0xd0
    d4ac:	e3130001 	tst	r3, #1
    d4b0:	0affffe1 	beq	d43c <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d4b4:	e3a0100d 	mov	r1, #13
    d4b8:	e1a00006 	mov	r0, r6
    d4bc:	ebffff98 	bl	d324 <CSerialDevice::Write(unsigned char)>
    d4c0:	e3500000 	cmp	r0, #0
    d4c4:	1affffdc 	bne	d43c <CSerialDevice::Write(void const*, unsigned int)+0x48>
    d4c8:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    d4cc:	e3530000 	cmp	r3, #0
    d4d0:	1a000048 	bne	d5f8 <CSerialDevice::Write(void const*, unsigned int)+0x204>
    d4d4:	e5963008 	ldr	r3, [r6, #8]
    d4d8:	e3530000 	cmp	r3, #0
    d4dc:	0a000022 	beq	d56c <CSerialDevice::Write(void const*, unsigned int)+0x178>
    d4e0:	e59400e0 	ldr	r0, [r4, #224]	; 0xe0
    d4e4:	e3500000 	cmp	r0, #0
    d4e8:	1a000049 	bne	d614 <CSerialDevice::Write(void const*, unsigned int)+0x220>
    d4ec:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d4f0:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d4f4:	e1520003 	cmp	r2, r3
    d4f8:	0a00001b 	beq	d56c <CSerialDevice::Write(void const*, unsigned int)+0x178>
    d4fc:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d500:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d504:	e1520003 	cmp	r2, r3
    d508:	1a00000d 	bne	d544 <CSerialDevice::Write(void const*, unsigned int)+0x150>
    d50c:	ea000013 	b	d560 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    d510:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d514:	e0861003 	add	r1, r6, r3
    d518:	e2833001 	add	r3, r3, #1
    d51c:	e58430cc 	str	r3, [r4, #204]	; 0xcc
    d520:	e5d138c8 	ldrb	r3, [r1, #2248]	; 0x8c8
    d524:	e5823000 	str	r3, [r2]
    d528:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d52c:	e7ea3053 	ubfx	r3, r3, #0, #11
    d530:	e58430cc 	str	r3, [r4, #204]	; 0xcc
    d534:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d538:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d53c:	e1520003 	cmp	r2, r3
    d540:	0a000006 	beq	d560 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    d544:	e5962014 	ldr	r2, [r6, #20]
    d548:	e5923018 	ldr	r3, [r2, #24]
    d54c:	e3130020 	tst	r3, #32
    d550:	0affffee 	beq	d510 <CSerialDevice::Write(void const*, unsigned int)+0x11c>
    d554:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    d558:	e3833020 	orr	r3, r3, #32
    d55c:	e5823038 	str	r3, [r2, #56]	; 0x38
    d560:	e59430e0 	ldr	r3, [r4, #224]	; 0xe0
    d564:	e3530000 	cmp	r3, #0
    d568:	1a000026 	bne	d608 <CSerialDevice::Write(void const*, unsigned int)+0x214>
    d56c:	e1a00007 	mov	r0, r7
    d570:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d574:	e5962014 	ldr	r2, [r6, #20]
    d578:	e2821018 	add	r1, r2, #24
    d57c:	e5913000 	ldr	r3, [r1]
    d580:	e3130020 	tst	r3, #32
    d584:	1afffffc 	bne	d57c <CSerialDevice::Write(void const*, unsigned int)+0x188>
    d588:	e5829000 	str	r9, [r2]
    d58c:	eaffffc2 	b	d49c <CSerialDevice::Write(void const*, unsigned int)+0xa8>
    d590:	eb001185 	bl	11bac <EnterCritical>
    d594:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d598:	e59420cc 	ldr	r2, [r4, #204]	; 0xcc
    d59c:	e59410e0 	ldr	r1, [r4, #224]	; 0xe0
    d5a0:	e2833001 	add	r3, r3, #1
    d5a4:	e7ea3053 	ubfx	r3, r3, #0, #11
    d5a8:	e1530002 	cmp	r3, r2
    d5ac:	0a00000b 	beq	d5e0 <CSerialDevice::Write(void const*, unsigned int)+0x1ec>
    d5b0:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d5b4:	e3510000 	cmp	r1, #0
    d5b8:	e0862003 	add	r2, r6, r3
    d5bc:	e2833001 	add	r3, r3, #1
    d5c0:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    d5c4:	e5c298c8 	strb	r9, [r2, #2248]	; 0x8c8
    d5c8:	e59430c8 	ldr	r3, [r4, #200]	; 0xc8
    d5cc:	e7ea3053 	ubfx	r3, r3, #0, #11
    d5d0:	e58430c8 	str	r3, [r4, #200]	; 0xc8
    d5d4:	0affffb0 	beq	d49c <CSerialDevice::Write(void const*, unsigned int)+0xa8>
    d5d8:	eb00119e 	bl	11c58 <LeaveCritical>
    d5dc:	eaffffae 	b	d49c <CSerialDevice::Write(void const*, unsigned int)+0xa8>
    d5e0:	e3510000 	cmp	r1, #0
    d5e4:	0affffb7 	beq	d4c8 <CSerialDevice::Write(void const*, unsigned int)+0xd4>
    d5e8:	eb00119a 	bl	11c58 <LeaveCritical>
    d5ec:	e59430e4 	ldr	r3, [r4, #228]	; 0xe4
    d5f0:	e3530000 	cmp	r3, #0
    d5f4:	0affffb6 	beq	d4d4 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    d5f8:	eb001196 	bl	11c58 <LeaveCritical>
    d5fc:	eaffffb4 	b	d4d4 <CSerialDevice::Write(void const*, unsigned int)+0xe0>
    d600:	eb001169 	bl	11bac <EnterCritical>
    d604:	eaffff85 	b	d420 <CSerialDevice::Write(void const*, unsigned int)+0x2c>
    d608:	eb001192 	bl	11c58 <LeaveCritical>
    d60c:	e1a00007 	mov	r0, r7
    d610:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    d614:	eb001164 	bl	11bac <EnterCritical>
    d618:	e59420c8 	ldr	r2, [r4, #200]	; 0xc8
    d61c:	e59430cc 	ldr	r3, [r4, #204]	; 0xcc
    d620:	e1520003 	cmp	r2, r3
    d624:	1affffb4 	bne	d4fc <CSerialDevice::Write(void const*, unsigned int)+0x108>
    d628:	eaffffcc 	b	d560 <CSerialDevice::Write(void const*, unsigned int)+0x16c>
    d62c:	e30512f0 	movw	r1, #21232	; 0x52f0
    d630:	e3002176 	movw	r2, #374	; 0x176
    d634:	e3401001 	movt	r1, #1
    d638:	e281000c 	add	r0, r1, #12
    d63c:	eb001352 	bl	1238c <assertion_failed>
    d640:	e30512f0 	movw	r1, #21232	; 0x52f0
    d644:	e3002183 	movw	r2, #387	; 0x183
    d648:	e3401001 	movt	r1, #1
    d64c:	e2810018 	add	r0, r1, #24
    d650:	eb00134d 	bl	1238c <assertion_failed>
    d654:	e1a07008 	mov	r7, r8
    d658:	eaffff9a 	b	d4c8 <CSerialDevice::Write(void const*, unsigned int)+0xd4>

0000d65c <CSerialDevice::InterruptHandler()>:
    d65c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d660:	e2805a01 	add	r5, r0, #4096	; 0x1000
    d664:	e1a04000 	mov	r4, r0
    d668:	e24dd004 	sub	sp, sp, #4
    d66c:	e59500e0 	ldr	r0, [r5, #224]	; 0xe0
    d670:	e3500000 	cmp	r0, #0
    d674:	1a00006d 	bne	d830 <CSerialDevice::InterruptHandler()+0x1d4>
    d678:	e5943014 	ldr	r3, [r4, #20]
    d67c:	e5932040 	ldr	r2, [r3, #64]	; 0x40
    d680:	e5832044 	str	r2, [r3, #68]	; 0x44
    d684:	e5942014 	ldr	r2, [r4, #20]
    d688:	e5926018 	ldr	r6, [r2, #24]
    d68c:	e282e018 	add	lr, r2, #24
    d690:	e2166010 	ands	r6, r6, #16
    d694:	13a06000 	movne	r6, #0
    d698:	1a000035 	bne	d774 <CSerialDevice::InterruptHandler()+0x118>
    d69c:	e595c0d4 	ldr	ip, [r5, #212]	; 0xd4
    d6a0:	e3e0a003 	mvn	sl, #3
    d6a4:	e3e09002 	mvn	r9, #2
    d6a8:	e3e07001 	mvn	r7, #1
    d6ac:	e3e08000 	mvn	r8, #0
    d6b0:	ea000020 	b	d738 <CSerialDevice::InterruptHandler()+0xdc>
    d6b4:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d6b8:	e3530000 	cmp	r3, #0
    d6bc:	058488c4 	streq	r8, [r4, #2244]	; 0x8c4
    d6c0:	e35c0000 	cmp	ip, #0
    d6c4:	0a00000a 	beq	d6f4 <CSerialDevice::InterruptHandler()+0x98>
    d6c8:	e59500d8 	ldr	r0, [r5, #216]	; 0xd8
    d6cc:	e6af3071 	sxtb	r3, r1
    d6d0:	e1d0b0d0 	ldrsb	fp, [r0]
    d6d4:	e15b0003 	cmp	fp, r3
    d6d8:	1585c0d8 	strne	ip, [r5, #216]	; 0xd8
    d6dc:	1a000004 	bne	d6f4 <CSerialDevice::InterruptHandler()+0x98>
    d6e0:	e2803001 	add	r3, r0, #1
    d6e4:	e58530d8 	str	r3, [r5, #216]	; 0xd8
    d6e8:	e1d030d1 	ldrsb	r3, [r0, #1]
    d6ec:	e3530000 	cmp	r3, #0
    d6f0:	03a06001 	moveq	r6, #1
    d6f4:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d6f8:	e59408c0 	ldr	r0, [r4, #2240]	; 0x8c0
    d6fc:	e2833001 	add	r3, r3, #1
    d700:	e7ea3053 	ubfx	r3, r3, #0, #11
    d704:	e1530000 	cmp	r3, r0
    d708:	0a000013 	beq	d75c <CSerialDevice::InterruptHandler()+0x100>
    d70c:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d710:	e0840003 	add	r0, r4, r3
    d714:	e2833001 	add	r3, r3, #1
    d718:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
    d71c:	e5c010bc 	strb	r1, [r0, #188]	; 0xbc
    d720:	e59438bc 	ldr	r3, [r4, #2236]	; 0x8bc
    d724:	e7ea3053 	ubfx	r3, r3, #0, #11
    d728:	e58438bc 	str	r3, [r4, #2236]	; 0x8bc
    d72c:	e59e3000 	ldr	r3, [lr]
    d730:	e3130010 	tst	r3, #16
    d734:	1a00000e 	bne	d774 <CSerialDevice::InterruptHandler()+0x118>
    d738:	e5921000 	ldr	r1, [r2]
    d73c:	e3110b01 	tst	r1, #1024	; 0x400
    d740:	1affffdb 	bne	d6b4 <CSerialDevice::InterruptHandler()+0x58>
    d744:	e3110b02 	tst	r1, #2048	; 0x800
    d748:	0a00002a 	beq	d7f8 <CSerialDevice::InterruptHandler()+0x19c>
    d74c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d750:	e3530000 	cmp	r3, #0
    d754:	058478c4 	streq	r7, [r4, #2244]	; 0x8c4
    d758:	eaffffd8 	b	d6c0 <CSerialDevice::InterruptHandler()+0x64>
    d75c:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d760:	e3530000 	cmp	r3, #0
    d764:	058478c4 	streq	r7, [r4, #2244]	; 0x8c4
    d768:	e59e3000 	ldr	r3, [lr]
    d76c:	e3130010 	tst	r3, #16
    d770:	0afffff0 	beq	d738 <CSerialDevice::InterruptHandler()+0xdc>
    d774:	e59e3000 	ldr	r3, [lr]
    d778:	e3130020 	tst	r3, #32
    d77c:	0a00000d 	beq	d7b8 <CSerialDevice::InterruptHandler()+0x15c>
    d780:	ea000013 	b	d7d4 <CSerialDevice::InterruptHandler()+0x178>
    d784:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d788:	e0841003 	add	r1, r4, r3
    d78c:	e2833001 	add	r3, r3, #1
    d790:	e58530cc 	str	r3, [r5, #204]	; 0xcc
    d794:	e5d138c8 	ldrb	r3, [r1, #2248]	; 0x8c8
    d798:	e5823000 	str	r3, [r2]
    d79c:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d7a0:	e7ea3053 	ubfx	r3, r3, #0, #11
    d7a4:	e58530cc 	str	r3, [r5, #204]	; 0xcc
    d7a8:	e5942014 	ldr	r2, [r4, #20]
    d7ac:	e5923018 	ldr	r3, [r2, #24]
    d7b0:	e3130020 	tst	r3, #32
    d7b4:	1a000006 	bne	d7d4 <CSerialDevice::InterruptHandler()+0x178>
    d7b8:	e59510c8 	ldr	r1, [r5, #200]	; 0xc8
    d7bc:	e59530cc 	ldr	r3, [r5, #204]	; 0xcc
    d7c0:	e1510003 	cmp	r1, r3
    d7c4:	1affffee 	bne	d784 <CSerialDevice::InterruptHandler()+0x128>
    d7c8:	e5923038 	ldr	r3, [r2, #56]	; 0x38
    d7cc:	e3c33020 	bic	r3, r3, #32
    d7d0:	e5823038 	str	r3, [r2, #56]	; 0x38
    d7d4:	e59530e0 	ldr	r3, [r5, #224]	; 0xe0
    d7d8:	e3530000 	cmp	r3, #0
    d7dc:	1a000015 	bne	d838 <CSerialDevice::InterruptHandler()+0x1dc>
    d7e0:	e3560000 	cmp	r6, #0
    d7e4:	0a00000f 	beq	d828 <CSerialDevice::InterruptHandler()+0x1cc>
    d7e8:	e59530dc 	ldr	r3, [r5, #220]	; 0xdc
    d7ec:	e28dd004 	add	sp, sp, #4
    d7f0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7f4:	e12fff13 	bx	r3
    d7f8:	e3110c01 	tst	r1, #256	; 0x100
    d7fc:	0a000003 	beq	d810 <CSerialDevice::InterruptHandler()+0x1b4>
    d800:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d804:	e3530000 	cmp	r3, #0
    d808:	058498c4 	streq	r9, [r4, #2244]	; 0x8c4
    d80c:	eaffffab 	b	d6c0 <CSerialDevice::InterruptHandler()+0x64>
    d810:	e3110c02 	tst	r1, #512	; 0x200
    d814:	0affffa9 	beq	d6c0 <CSerialDevice::InterruptHandler()+0x64>
    d818:	e59438c4 	ldr	r3, [r4, #2244]	; 0x8c4
    d81c:	e3530000 	cmp	r3, #0
    d820:	0584a8c4 	streq	sl, [r4, #2244]	; 0x8c4
    d824:	eaffffa5 	b	d6c0 <CSerialDevice::InterruptHandler()+0x64>
    d828:	e28dd004 	add	sp, sp, #4
    d82c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d830:	eb0010dd 	bl	11bac <EnterCritical>
    d834:	eaffff8f 	b	d678 <CSerialDevice::InterruptHandler()+0x1c>
    d838:	eb001106 	bl	11c58 <LeaveCritical>
    d83c:	eaffffe7 	b	d7e0 <CSerialDevice::InterruptHandler()+0x184>

0000d840 <CSerialDevice::InterruptStub(void*)>:
    d840:	f57ff05f 	dmb	sy
    d844:	e3073150 	movw	r3, #29008	; 0x7150
    d848:	e3403001 	movt	r3, #1
    d84c:	e5932010 	ldr	r2, [r3, #16]
    d850:	e3120001 	tst	r2, #1
    d854:	012fff1e 	bxeq	lr
    d858:	e5930000 	ldr	r0, [r3]
    d85c:	e3500000 	cmp	r0, #0
    d860:	0a000000 	beq	d868 <CSerialDevice::InterruptStub(void*)+0x28>
    d864:	eaffff7c 	b	d65c <CSerialDevice::InterruptHandler()>
    d868:	e30512f0 	movw	r1, #21232	; 0x52f0
    d86c:	e300230f 	movw	r2, #783	; 0x30f
    d870:	e3401001 	movt	r1, #1
    d874:	e2810e19 	add	r0, r1, #400	; 0x190
    d878:	e92d4010 	push	{r4, lr}
    d87c:	eb0012c2 	bl	1238c <assertion_failed>

0000d880 <CSerialDevice::~CSerialDevice() [clone .part.0]>:
    d880:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d884:	e1a04000 	mov	r4, r0
    d888:	e3075150 	movw	r5, #29008	; 0x7150
    d88c:	ebffec4c 	bl	89c4 <CDeviceNameService::Get()>
    d890:	e5942010 	ldr	r2, [r4, #16]
    d894:	e3a03000 	mov	r3, #0
    d898:	e3405001 	movt	r5, #1
    d89c:	e59f10fc 	ldr	r1, [pc, #252]	; d9a0 <CSerialDevice::~CSerialDevice() [clone .part.0]+0x120>
    d8a0:	e2822001 	add	r2, r2, #1
    d8a4:	ebffec6c 	bl	8a5c <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
    d8a8:	e5953010 	ldr	r3, [r5, #16]
    d8ac:	e3a01001 	mov	r1, #1
    d8b0:	e5942010 	ldr	r2, [r4, #16]
    d8b4:	e1c33211 	bic	r3, r3, r1, lsl r2
    d8b8:	e5853010 	str	r3, [r5, #16]
    d8bc:	f57ff04f 	dsb	sy
    d8c0:	e5942008 	ldr	r2, [r4, #8]
    d8c4:	e3a03000 	mov	r3, #0
    d8c8:	e5941014 	ldr	r1, [r4, #20]
    d8cc:	e1520003 	cmp	r2, r3
    d8d0:	e5813038 	str	r3, [r1, #56]	; 0x38
    d8d4:	e5942014 	ldr	r2, [r4, #20]
    d8d8:	e5823030 	str	r3, [r2, #48]	; 0x30
    d8dc:	0a00000e 	beq	d91c <CSerialDevice::~CSerialDevice() [clone .part.0]+0x9c>
    d8e0:	e5953004 	ldr	r3, [r5, #4]
    d8e4:	e2433001 	sub	r3, r3, #1
    d8e8:	e5853004 	str	r3, [r5, #4]
    d8ec:	e3530000 	cmp	r3, #0
    d8f0:	1a000009 	bne	d91c <CSerialDevice::~CSerialDevice() [clone .part.0]+0x9c>
    d8f4:	e5950008 	ldr	r0, [r5, #8]
    d8f8:	e3500000 	cmp	r0, #0
    d8fc:	0a000022 	beq	d98c <CSerialDevice::~CSerialDevice() [clone .part.0]+0x10c>
    d900:	e5d5300c 	ldrb	r3, [r5, #12]
    d904:	e3530000 	cmp	r3, #0
    d908:	0a00001c 	beq	d980 <CSerialDevice::~CSerialDevice() [clone .part.0]+0x100>
    d90c:	eb0011af 	bl	11fd0 <CInterruptSystem::DisconnectFIQ()>
    d910:	e3a03000 	mov	r3, #0
    d914:	e5853008 	str	r3, [r5, #8]
    d918:	e5c5300c 	strb	r3, [r5, #12]
    d91c:	e284606c 	add	r6, r4, #108	; 0x6c
    d920:	e2847094 	add	r7, r4, #148	; 0x94
    d924:	e1a00006 	mov	r0, r6
    d928:	e3a02001 	mov	r2, #1
    d92c:	e3a01000 	mov	r1, #0
    d930:	ebffef02 	bl	9540 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d934:	e3a01000 	mov	r1, #0
    d938:	e1a00007 	mov	r0, r7
    d93c:	e3a02001 	mov	r2, #1
    d940:	ebffeefe 	bl	9540 <CGPIOPin::SetMode(TGPIOMode, bool)>
    d944:	e5942010 	ldr	r2, [r4, #16]
    d948:	e3a03000 	mov	r3, #0
    d94c:	e5c43018 	strb	r3, [r4, #24]
    d950:	e1a00007 	mov	r0, r7
    d954:	e7853102 	str	r3, [r5, r2, lsl #2]
    d958:	ebffecb6 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    d95c:	e1a00006 	mov	r0, r6
    d960:	ebffecb4 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    d964:	e2840044 	add	r0, r4, #68	; 0x44
    d968:	ebffecb2 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    d96c:	e284001c 	add	r0, r4, #28
    d970:	ebffecb0 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    d974:	e1a00004 	mov	r0, r4
    d978:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    d97c:	ea0014d6 	b	12cdc <CDevice::~CDevice()>
    d980:	e3a01039 	mov	r1, #57	; 0x39
    d984:	eb00113a 	bl	11e74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    d988:	eaffffe0 	b	d910 <CSerialDevice::~CSerialDevice() [clone .part.0]+0x90>
    d98c:	e30512f0 	movw	r1, #21232	; 0x52f0
    d990:	e3a020e2 	mov	r2, #226	; 0xe2
    d994:	e3401001 	movt	r1, #1
    d998:	e2810e1a 	add	r0, r1, #416	; 0x1a0
    d99c:	eb00127a 	bl	1238c <assertion_failed>
    d9a0:	00015424 	.word	0x00015424

0000d9a4 <CSerialDevice::~CSerialDevice()>:
    d9a4:	e5d03018 	ldrb	r3, [r0, #24]
    d9a8:	e59f204c 	ldr	r2, [pc, #76]	; d9fc <CSerialDevice::~CSerialDevice()+0x58>
    d9ac:	e3530000 	cmp	r3, #0
    d9b0:	e92d4010 	push	{r4, lr}
    d9b4:	e1a04000 	mov	r4, r0
    d9b8:	e5802000 	str	r2, [r0]
    d9bc:	0a000002 	beq	d9cc <CSerialDevice::~CSerialDevice()+0x28>
    d9c0:	ebffffae 	bl	d880 <CSerialDevice::~CSerialDevice() [clone .part.0]>
    d9c4:	e1a00004 	mov	r0, r4
    d9c8:	e8bd8010 	pop	{r4, pc}
    d9cc:	e2800094 	add	r0, r0, #148	; 0x94
    d9d0:	ebffec98 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    d9d4:	e284006c 	add	r0, r4, #108	; 0x6c
    d9d8:	ebffec96 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    d9dc:	e2840044 	add	r0, r4, #68	; 0x44
    d9e0:	ebffec94 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    d9e4:	e284001c 	add	r0, r4, #28
    d9e8:	ebffec92 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    d9ec:	e1a00004 	mov	r0, r4
    d9f0:	eb0014b9 	bl	12cdc <CDevice::~CDevice()>
    d9f4:	e1a00004 	mov	r0, r4
    d9f8:	e8bd8010 	pop	{r4, pc}
    d9fc:	0001531c 	.word	0x0001531c

0000da00 <CSerialDevice::~CSerialDevice()>:
    da00:	e5d03018 	ldrb	r3, [r0, #24]
    da04:	e59f2054 	ldr	r2, [pc, #84]	; da60 <CSerialDevice::~CSerialDevice()+0x60>
    da08:	e3530000 	cmp	r3, #0
    da0c:	e92d4010 	push	{r4, lr}
    da10:	e1a04000 	mov	r4, r0
    da14:	e5802000 	str	r2, [r0]
    da18:	0a000005 	beq	da34 <CSerialDevice::~CSerialDevice()+0x34>
    da1c:	ebffff97 	bl	d880 <CSerialDevice::~CSerialDevice() [clone .part.0]>
    da20:	e1a00004 	mov	r0, r4
    da24:	e30110e8 	movw	r1, #4328	; 0x10e8
    da28:	eb000cf5 	bl	10e04 <operator delete(void*, unsigned int)>
    da2c:	e1a00004 	mov	r0, r4
    da30:	e8bd8010 	pop	{r4, pc}
    da34:	e2800094 	add	r0, r0, #148	; 0x94
    da38:	ebffec7e 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    da3c:	e284006c 	add	r0, r4, #108	; 0x6c
    da40:	ebffec7c 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    da44:	e2840044 	add	r0, r4, #68	; 0x44
    da48:	ebffec7a 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    da4c:	e284001c 	add	r0, r4, #28
    da50:	ebffec78 	bl	8c38 <CGPIOPin::~CGPIOPin()>
    da54:	e1a00004 	mov	r0, r4
    da58:	eb00149f 	bl	12cdc <CDevice::~CDevice()>
    da5c:	eaffffef 	b	da20 <CSerialDevice::~CSerialDevice()+0x20>
    da60:	0001531c 	.word	0x0001531c
    da64:	00000000 	.word	0x00000000

0000da68 <CString::~CString()>:
    da68:	e92d4010 	push	{r4, lr}
    da6c:	e1a04000 	mov	r4, r0
    da70:	e5900004 	ldr	r0, [r0, #4]
    da74:	e59f3014 	ldr	r3, [pc, #20]	; da90 <CString::~CString()+0x28>
    da78:	e3500000 	cmp	r0, #0
    da7c:	e5843000 	str	r3, [r4]
    da80:	0a000000 	beq	da88 <CString::~CString()+0x20>
    da84:	eb000cd8 	bl	10dec <operator delete[](void*)>
    da88:	e1a00004 	mov	r0, r4
    da8c:	e8bd8010 	pop	{r4, pc}
    da90:	000154c4 	.word	0x000154c4

0000da94 <CString::~CString()>:
    da94:	e92d4010 	push	{r4, lr}
    da98:	e1a04000 	mov	r4, r0
    da9c:	e5900004 	ldr	r0, [r0, #4]
    daa0:	e59f3020 	ldr	r3, [pc, #32]	; dac8 <CString::~CString()+0x34>
    daa4:	e3500000 	cmp	r0, #0
    daa8:	e5843000 	str	r3, [r4]
    daac:	0a000000 	beq	dab4 <CString::~CString()+0x20>
    dab0:	eb000ccd 	bl	10dec <operator delete[](void*)>
    dab4:	e1a00004 	mov	r0, r4
    dab8:	e3a01010 	mov	r1, #16
    dabc:	eb000cd0 	bl	10e04 <operator delete(void*, unsigned int)>
    dac0:	e1a00004 	mov	r0, r4
    dac4:	e8bd8010 	pop	{r4, pc}
    dac8:	000154c4 	.word	0x000154c4

0000dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    dacc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    dad0:	e990004c 	ldmib	r0, {r2, r3, r6}
    dad4:	e0466002 	sub	r6, r6, r2
    dad8:	e0861001 	add	r1, r6, r1
    dadc:	e2812001 	add	r2, r1, #1
    dae0:	e1520003 	cmp	r2, r3
    dae4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    dae8:	e1a04000 	mov	r4, r0
    daec:	e2815041 	add	r5, r1, #65	; 0x41
    daf0:	e1a00005 	mov	r0, r5
    daf4:	eb000cb0 	bl	10dbc <operator new[](unsigned int)>
    daf8:	e594300c 	ldr	r3, [r4, #12]
    dafc:	e3a02000 	mov	r2, #0
    db00:	e1a07000 	mov	r7, r0
    db04:	e5c32000 	strb	r2, [r3]
    db08:	e5941004 	ldr	r1, [r4, #4]
    db0c:	eb000a31 	bl	103d8 <strcpy>
    db10:	e5940004 	ldr	r0, [r4, #4]
    db14:	e3500000 	cmp	r0, #0
    db18:	0a000000 	beq	db20 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
    db1c:	eb000cb2 	bl	10dec <operator delete[](void*)>
    db20:	e0876006 	add	r6, r7, r6
    db24:	e5847004 	str	r7, [r4, #4]
    db28:	e5845008 	str	r5, [r4, #8]
    db2c:	e584600c 	str	r6, [r4, #12]
    db30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000db34 <CString::CString()>:
    db34:	e59f100c 	ldr	r1, [pc, #12]	; db48 <CString::CString()+0x14>
    db38:	e3a02000 	mov	r2, #0
    db3c:	e5802008 	str	r2, [r0, #8]
    db40:	e8800006 	stm	r0, {r1, r2}
    db44:	e12fff1e 	bx	lr
    db48:	000154c4 	.word	0x000154c4

0000db4c <CString::CString(char const*)>:
    db4c:	e59f3034 	ldr	r3, [pc, #52]	; db88 <CString::CString(char const*)+0x3c>
    db50:	e92d4070 	push	{r4, r5, r6, lr}
    db54:	e1a04000 	mov	r4, r0
    db58:	e5803000 	str	r3, [r0]
    db5c:	e1a00001 	mov	r0, r1
    db60:	e1a05001 	mov	r5, r1
    db64:	eb000976 	bl	10144 <strlen>
    db68:	e2800001 	add	r0, r0, #1
    db6c:	e5840008 	str	r0, [r4, #8]
    db70:	eb000c91 	bl	10dbc <operator new[](unsigned int)>
    db74:	e5840004 	str	r0, [r4, #4]
    db78:	e1a01005 	mov	r1, r5
    db7c:	eb000a15 	bl	103d8 <strcpy>
    db80:	e1a00004 	mov	r0, r4
    db84:	e8bd8070 	pop	{r4, r5, r6, pc}
    db88:	000154c4 	.word	0x000154c4

0000db8c <CString::CString(CString const&)>:
    db8c:	e5913004 	ldr	r3, [r1, #4]
    db90:	e92d4070 	push	{r4, r5, r6, lr}
    db94:	e1a04000 	mov	r4, r0
    db98:	e59f2044 	ldr	r2, [pc, #68]	; dbe4 <CString::CString(CString const&)+0x58>
    db9c:	e3055abc 	movw	r5, #23228	; 0x5abc
    dba0:	e3405001 	movt	r5, #1
    dba4:	e3530000 	cmp	r3, #0
    dba8:	e5842000 	str	r2, [r4]
    dbac:	11a00003 	movne	r0, r3
    dbb0:	01a00005 	moveq	r0, r5
    dbb4:	e1a06001 	mov	r6, r1
    dbb8:	eb000961 	bl	10144 <strlen>
    dbbc:	e2800001 	add	r0, r0, #1
    dbc0:	e5840008 	str	r0, [r4, #8]
    dbc4:	eb000c7c 	bl	10dbc <operator new[](unsigned int)>
    dbc8:	e5961004 	ldr	r1, [r6, #4]
    dbcc:	e5840004 	str	r0, [r4, #4]
    dbd0:	e3510000 	cmp	r1, #0
    dbd4:	01a01005 	moveq	r1, r5
    dbd8:	eb0009fe 	bl	103d8 <strcpy>
    dbdc:	e1a00004 	mov	r0, r4
    dbe0:	e8bd8070 	pop	{r4, r5, r6, pc}
    dbe4:	000154c4 	.word	0x000154c4

0000dbe8 <CString::CString(CString&&)>:
    dbe8:	e59f201c 	ldr	r2, [pc, #28]	; dc0c <CString::CString(CString&&)+0x24>
    dbec:	e3a03000 	mov	r3, #0
    dbf0:	e591c008 	ldr	ip, [r1, #8]
    dbf4:	e5802000 	str	r2, [r0]
    dbf8:	e5912004 	ldr	r2, [r1, #4]
    dbfc:	e5813008 	str	r3, [r1, #8]
    dc00:	e9801004 	stmib	r0, {r2, ip}
    dc04:	e5813004 	str	r3, [r1, #4]
    dc08:	e12fff1e 	bx	lr
    dc0c:	000154c4 	.word	0x000154c4

0000dc10 <CString::operator char const*() const>:
    dc10:	e5900004 	ldr	r0, [r0, #4]
    dc14:	e3053abc 	movw	r3, #23228	; 0x5abc
    dc18:	e3403001 	movt	r3, #1
    dc1c:	e3500000 	cmp	r0, #0
    dc20:	01a00003 	moveq	r0, r3
    dc24:	e12fff1e 	bx	lr

0000dc28 <CString::operator=(char const*)>:
    dc28:	e92d4070 	push	{r4, r5, r6, lr}
    dc2c:	e1a04000 	mov	r4, r0
    dc30:	e5900004 	ldr	r0, [r0, #4]
    dc34:	e1a05001 	mov	r5, r1
    dc38:	e3500000 	cmp	r0, #0
    dc3c:	0a000000 	beq	dc44 <CString::operator=(char const*)+0x1c>
    dc40:	eb000c69 	bl	10dec <operator delete[](void*)>
    dc44:	e1a00005 	mov	r0, r5
    dc48:	eb00093d 	bl	10144 <strlen>
    dc4c:	e2800001 	add	r0, r0, #1
    dc50:	e5840008 	str	r0, [r4, #8]
    dc54:	eb000c58 	bl	10dbc <operator new[](unsigned int)>
    dc58:	e5840004 	str	r0, [r4, #4]
    dc5c:	e1a01005 	mov	r1, r5
    dc60:	eb0009dc 	bl	103d8 <strcpy>
    dc64:	e5940004 	ldr	r0, [r4, #4]
    dc68:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dc6c <CString::operator=(CString const&)>:
    dc6c:	e92d4070 	push	{r4, r5, r6, lr}
    dc70:	e1a04000 	mov	r4, r0
    dc74:	e5900004 	ldr	r0, [r0, #4]
    dc78:	e1a06001 	mov	r6, r1
    dc7c:	e3500000 	cmp	r0, #0
    dc80:	0a000000 	beq	dc88 <CString::operator=(CString const&)+0x1c>
    dc84:	eb000c58 	bl	10dec <operator delete[](void*)>
    dc88:	e5960004 	ldr	r0, [r6, #4]
    dc8c:	e3055abc 	movw	r5, #23228	; 0x5abc
    dc90:	e3405001 	movt	r5, #1
    dc94:	e3500000 	cmp	r0, #0
    dc98:	01a00005 	moveq	r0, r5
    dc9c:	eb000928 	bl	10144 <strlen>
    dca0:	e2800001 	add	r0, r0, #1
    dca4:	e5840008 	str	r0, [r4, #8]
    dca8:	eb000c43 	bl	10dbc <operator new[](unsigned int)>
    dcac:	e5840004 	str	r0, [r4, #4]
    dcb0:	e5961004 	ldr	r1, [r6, #4]
    dcb4:	e3510000 	cmp	r1, #0
    dcb8:	01a01005 	moveq	r1, r5
    dcbc:	eb0009c5 	bl	103d8 <strcpy>
    dcc0:	e1a00004 	mov	r0, r4
    dcc4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dcc8 <CString::operator=(CString&&)>:
    dcc8:	e92d4070 	push	{r4, r5, r6, lr}
    dccc:	e1a05000 	mov	r5, r0
    dcd0:	e5900004 	ldr	r0, [r0, #4]
    dcd4:	e1a04001 	mov	r4, r1
    dcd8:	e3500000 	cmp	r0, #0
    dcdc:	0a000000 	beq	dce4 <CString::operator=(CString&&)+0x1c>
    dce0:	eb000c41 	bl	10dec <operator delete[](void*)>
    dce4:	e1c420d4 	ldrd	r2, [r4, #4]
    dce8:	e1a00005 	mov	r0, r5
    dcec:	e5853008 	str	r3, [r5, #8]
    dcf0:	e3a03000 	mov	r3, #0
    dcf4:	e5852004 	str	r2, [r5, #4]
    dcf8:	e5843008 	str	r3, [r4, #8]
    dcfc:	e5843004 	str	r3, [r4, #4]
    dd00:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dd04 <CString::GetLength() const>:
    dd04:	e5900004 	ldr	r0, [r0, #4]
    dd08:	e3500000 	cmp	r0, #0
    dd0c:	012fff1e 	bxeq	lr
    dd10:	ea00090b 	b	10144 <strlen>

0000dd14 <CString::Append(char const*)>:
    dd14:	e92d4070 	push	{r4, r5, r6, lr}
    dd18:	e1a04000 	mov	r4, r0
    dd1c:	e5900004 	ldr	r0, [r0, #4]
    dd20:	e3a03001 	mov	r3, #1
    dd24:	e5843008 	str	r3, [r4, #8]
    dd28:	e1a06001 	mov	r6, r1
    dd2c:	e3500000 	cmp	r0, #0
    dd30:	0a000003 	beq	dd44 <CString::Append(char const*)+0x30>
    dd34:	eb000902 	bl	10144 <strlen>
    dd38:	e5943008 	ldr	r3, [r4, #8]
    dd3c:	e0833000 	add	r3, r3, r0
    dd40:	e5843008 	str	r3, [r4, #8]
    dd44:	e1a00006 	mov	r0, r6
    dd48:	eb0008fd 	bl	10144 <strlen>
    dd4c:	e5943008 	ldr	r3, [r4, #8]
    dd50:	e0800003 	add	r0, r0, r3
    dd54:	e5840008 	str	r0, [r4, #8]
    dd58:	eb000c17 	bl	10dbc <operator new[](unsigned int)>
    dd5c:	e5941004 	ldr	r1, [r4, #4]
    dd60:	e1a05000 	mov	r5, r0
    dd64:	e3510000 	cmp	r1, #0
    dd68:	05c01000 	strbeq	r1, [r0]
    dd6c:	0a000004 	beq	dd84 <CString::Append(char const*)+0x70>
    dd70:	eb000998 	bl	103d8 <strcpy>
    dd74:	e5940004 	ldr	r0, [r4, #4]
    dd78:	e3500000 	cmp	r0, #0
    dd7c:	0a000000 	beq	dd84 <CString::Append(char const*)+0x70>
    dd80:	eb000c19 	bl	10dec <operator delete[](void*)>
    dd84:	e1a01006 	mov	r1, r6
    dd88:	e1a00005 	mov	r0, r5
    dd8c:	eb0009aa 	bl	1043c <strcat>
    dd90:	e5845004 	str	r5, [r4, #4]
    dd94:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dd98 <CString::Compare(char const*) const>:
    dd98:	e5900004 	ldr	r0, [r0, #4]
    dd9c:	ea0008f2 	b	1016c <strcmp>

0000dda0 <CString::Find(char) const>:
    dda0:	e5902004 	ldr	r2, [r0, #4]
    dda4:	e1d230d0 	ldrsb	r3, [r2]
    dda8:	e3530000 	cmp	r3, #0
    ddac:	0a000006 	beq	ddcc <CString::Find(char) const+0x2c>
    ddb0:	e3a00000 	mov	r0, #0
    ddb4:	e1510003 	cmp	r1, r3
    ddb8:	012fff1e 	bxeq	lr
    ddbc:	e1f230d1 	ldrsb	r3, [r2, #1]!
    ddc0:	e2800001 	add	r0, r0, #1
    ddc4:	e3530000 	cmp	r3, #0
    ddc8:	1afffff9 	bne	ddb4 <CString::Find(char) const+0x14>
    ddcc:	e3e00000 	mvn	r0, #0
    ddd0:	e12fff1e 	bx	lr

0000ddd4 <CString::Replace(char const*, char const*)>:
    ddd4:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ddd8:	e1d170d0 	ldrsb	r7, [r1]
    dddc:	e3570000 	cmp	r7, #0
    dde0:	1a000001 	bne	ddec <CString::Replace(char const*, char const*)+0x18>
    dde4:	e1a00007 	mov	r0, r7
    dde8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddec:	e5904004 	ldr	r4, [r0, #4]
    ddf0:	e1a05000 	mov	r5, r0
    ddf4:	e1a06001 	mov	r6, r1
    ddf8:	e1a08002 	mov	r8, r2
    ddfc:	e1a00004 	mov	r0, r4
    de00:	eb0008cf 	bl	10144 <strlen>
    de04:	e2800001 	add	r0, r0, #1
    de08:	eb000beb 	bl	10dbc <operator new[](unsigned int)>
    de0c:	e1a01004 	mov	r1, r4
    de10:	e1a09000 	mov	r9, r0
    de14:	eb00096f 	bl	103d8 <strcpy>
    de18:	e5950004 	ldr	r0, [r5, #4]
    de1c:	e3500000 	cmp	r0, #0
    de20:	0a000000 	beq	de28 <CString::Replace(char const*, char const*)+0x54>
    de24:	eb000bf0 	bl	10dec <operator delete[](void*)>
    de28:	e3a00040 	mov	r0, #64	; 0x40
    de2c:	e1a04009 	mov	r4, r9
    de30:	e5850008 	str	r0, [r5, #8]
    de34:	e3a07000 	mov	r7, #0
    de38:	eb000bdf 	bl	10dbc <operator new[](unsigned int)>
    de3c:	e5850004 	str	r0, [r5, #4]
    de40:	e585000c 	str	r0, [r5, #12]
    de44:	e1d610d0 	ldrsb	r1, [r6]
    de48:	e1a00004 	mov	r0, r4
    de4c:	eb00098b 	bl	10480 <strchr>
    de50:	e250a000 	subs	sl, r0, #0
    de54:	0a000033 	beq	df28 <CString::Replace(char const*, char const*)+0x154>
    de58:	e154000a 	cmp	r4, sl
    de5c:	2a000044 	bcs	df74 <CString::Replace(char const*, char const*)+0x1a0>
    de60:	e0d4b0d1 	ldrsb	fp, [r4], #1
    de64:	e3a01001 	mov	r1, #1
    de68:	e1a00005 	mov	r0, r5
    de6c:	ebffff16 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    de70:	e595300c 	ldr	r3, [r5, #12]
    de74:	e15a0004 	cmp	sl, r4
    de78:	e2832001 	add	r2, r3, #1
    de7c:	e585200c 	str	r2, [r5, #12]
    de80:	e5c3b000 	strb	fp, [r3]
    de84:	1afffff5 	bne	de60 <CString::Replace(char const*, char const*)+0x8c>
    de88:	e1a0c00a 	mov	ip, sl
    de8c:	e1d600d1 	ldrsb	r0, [r6, #1]
    de90:	e2861001 	add	r1, r6, #1
    de94:	e28a4001 	add	r4, sl, #1
    de98:	e3500000 	cmp	r0, #0
    de9c:	0a000012 	beq	deec <CString::Replace(char const*, char const*)+0x118>
    dea0:	e1a03004 	mov	r3, r4
    dea4:	ea000002 	b	deb4 <CString::Replace(char const*, char const*)+0xe0>
    dea8:	e1f100d1 	ldrsb	r0, [r1, #1]!
    deac:	e3500000 	cmp	r0, #0
    deb0:	0a00000d 	beq	deec <CString::Replace(char const*, char const*)+0x118>
    deb4:	e0d320d1 	ldrsb	r2, [r3], #1
    deb8:	e1520000 	cmp	r2, r0
    debc:	e1a04003 	mov	r4, r3
    dec0:	0afffff8 	beq	dea8 <CString::Replace(char const*, char const*)+0xd4>
    dec4:	e1a0400c 	mov	r4, ip
    dec8:	e3a01001 	mov	r1, #1
    decc:	e1a00005 	mov	r0, r5
    ded0:	e0d4a0d1 	ldrsb	sl, [r4], #1
    ded4:	ebfffefc 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ded8:	e595300c 	ldr	r3, [r5, #12]
    dedc:	e2832001 	add	r2, r3, #1
    dee0:	e585200c 	str	r2, [r5, #12]
    dee4:	e5c3a000 	strb	sl, [r3]
    dee8:	eaffffd5 	b	de44 <CString::Replace(char const*, char const*)+0x70>
    deec:	e1a00008 	mov	r0, r8
    def0:	eb000893 	bl	10144 <strlen>
    def4:	e250a000 	subs	sl, r0, #0
    def8:	0a000002 	beq	df08 <CString::Replace(char const*, char const*)+0x134>
    defc:	e1a0100a 	mov	r1, sl
    df00:	e1a00005 	mov	r0, r5
    df04:	ebfffef0 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df08:	e595000c 	ldr	r0, [r5, #12]
    df0c:	e1a01008 	mov	r1, r8
    df10:	e2877001 	add	r7, r7, #1
    df14:	eb00092f 	bl	103d8 <strcpy>
    df18:	e595000c 	ldr	r0, [r5, #12]
    df1c:	e080000a 	add	r0, r0, sl
    df20:	e585000c 	str	r0, [r5, #12]
    df24:	eaffffc6 	b	de44 <CString::Replace(char const*, char const*)+0x70>
    df28:	e1a00004 	mov	r0, r4
    df2c:	eb000884 	bl	10144 <strlen>
    df30:	e2506000 	subs	r6, r0, #0
    df34:	0a000002 	beq	df44 <CString::Replace(char const*, char const*)+0x170>
    df38:	e1a01006 	mov	r1, r6
    df3c:	e1a00005 	mov	r0, r5
    df40:	ebfffee1 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df44:	e595000c 	ldr	r0, [r5, #12]
    df48:	e1a01004 	mov	r1, r4
    df4c:	eb000921 	bl	103d8 <strcpy>
    df50:	e595300c 	ldr	r3, [r5, #12]
    df54:	e1a00009 	mov	r0, r9
    df58:	e0832006 	add	r2, r3, r6
    df5c:	e585200c 	str	r2, [r5, #12]
    df60:	e3a02000 	mov	r2, #0
    df64:	e7c32006 	strb	r2, [r3, r6]
    df68:	eb000b9f 	bl	10dec <operator delete[](void*)>
    df6c:	e1a00007 	mov	r0, r7
    df70:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df74:	e1a0c004 	mov	ip, r4
    df78:	eaffffc3 	b	de8c <CString::Replace(char const*, char const*)+0xb8>

0000df7c <CString::PutChar(char, unsigned int)>:
    df7c:	e92d4070 	push	{r4, r5, r6, lr}
    df80:	e2524000 	subs	r4, r2, #0
    df84:	08bd8070 	popeq	{r4, r5, r6, pc}
    df88:	e1a06001 	mov	r6, r1
    df8c:	e1a01004 	mov	r1, r4
    df90:	e1a05000 	mov	r5, r0
    df94:	ebfffecc 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    df98:	e2442001 	sub	r2, r4, #1
    df9c:	e595300c 	ldr	r3, [r5, #12]
    dfa0:	e2422001 	sub	r2, r2, #1
    dfa4:	e3720001 	cmn	r2, #1
    dfa8:	e2830001 	add	r0, r3, #1
    dfac:	e585000c 	str	r0, [r5, #12]
    dfb0:	e5c36000 	strb	r6, [r3]
    dfb4:	1afffff8 	bne	df9c <CString::PutChar(char, unsigned int)+0x20>
    dfb8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dfbc <CString::PutString(char const*)>:
    dfbc:	e92d4070 	push	{r4, r5, r6, lr}
    dfc0:	e1a04000 	mov	r4, r0
    dfc4:	e1a00001 	mov	r0, r1
    dfc8:	e1a06001 	mov	r6, r1
    dfcc:	eb00085c 	bl	10144 <strlen>
    dfd0:	e2505000 	subs	r5, r0, #0
    dfd4:	0a000002 	beq	dfe4 <CString::PutString(char const*)+0x28>
    dfd8:	e1a01005 	mov	r1, r5
    dfdc:	e1a00004 	mov	r0, r4
    dfe0:	ebfffeb9 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    dfe4:	e594000c 	ldr	r0, [r4, #12]
    dfe8:	e1a01006 	mov	r1, r6
    dfec:	eb0008f9 	bl	103d8 <strcpy>
    dff0:	e594000c 	ldr	r0, [r4, #12]
    dff4:	e0800005 	add	r0, r0, r5
    dff8:	e584000c 	str	r0, [r4, #12]
    dffc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e000 <CString::ReserveSpace(unsigned int)>:
    e000:	e3510000 	cmp	r1, #0
    e004:	012fff1e 	bxeq	lr
    e008:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e00c:	e1a05000 	mov	r5, r0
    e010:	e990004c 	ldmib	r0, {r2, r3, r6}
    e014:	e0466002 	sub	r6, r6, r2
    e018:	e0811006 	add	r1, r1, r6
    e01c:	e2812001 	add	r2, r1, #1
    e020:	e1520003 	cmp	r2, r3
    e024:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    e028:	e2814041 	add	r4, r1, #65	; 0x41
    e02c:	e1a00004 	mov	r0, r4
    e030:	eb000b61 	bl	10dbc <operator new[](unsigned int)>
    e034:	e595300c 	ldr	r3, [r5, #12]
    e038:	e3a02000 	mov	r2, #0
    e03c:	e1a07000 	mov	r7, r0
    e040:	e5c32000 	strb	r2, [r3]
    e044:	e5951004 	ldr	r1, [r5, #4]
    e048:	eb0008e2 	bl	103d8 <strcpy>
    e04c:	e5950004 	ldr	r0, [r5, #4]
    e050:	e3500000 	cmp	r0, #0
    e054:	0a000000 	beq	e05c <CString::ReserveSpace(unsigned int)+0x5c>
    e058:	eb000b63 	bl	10dec <operator delete[](void*)>
    e05c:	e0876006 	add	r6, r7, r6
    e060:	e5857004 	str	r7, [r5, #4]
    e064:	e5854008 	str	r4, [r5, #8]
    e068:	e585600c 	str	r6, [r5, #12]
    e06c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000e070 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    e070:	e1510002 	cmp	r1, r2
    e074:	23a0c001 	movcs	ip, #1
    e078:	e92d4070 	push	{r4, r5, r6, lr}
    e07c:	3a000019 	bcc	e0e8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x78>
    e080:	e00c0c92 	mul	ip, r2, ip
    e084:	e734fc11 	udiv	r4, r1, ip
    e088:	e1540002 	cmp	r4, r2
    e08c:	e1a0e004 	mov	lr, r4
    e090:	2afffffa 	bcs	e080 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
    e094:	e3530000 	cmp	r3, #0
    e098:	e1a05000 	mov	r5, r0
    e09c:	03a06020 	moveq	r6, #32
    e0a0:	13a06000 	movne	r6, #0
    e0a4:	e2866037 	add	r6, r6, #55	; 0x37
    e0a8:	ea000001 	b	e0b4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x44>
    e0ac:	e73efc11 	udiv	lr, r1, ip
    e0b0:	e1a0400e 	mov	r4, lr
    e0b4:	e086300e 	add	r3, r6, lr
    e0b8:	e35e0009 	cmp	lr, #9
    e0bc:	e28ee030 	add	lr, lr, #48	; 0x30
    e0c0:	e6af3073 	sxtb	r3, r3
    e0c4:	96af307e 	sxtbls	r3, lr
    e0c8:	e15c0002 	cmp	ip, r2
    e0cc:	e061149c 	mls	r1, ip, r4, r1
    e0d0:	e4c53001 	strb	r3, [r5], #1
    e0d4:	e73cf21c 	udiv	ip, ip, r2
    e0d8:	2afffff3 	bcs	e0ac <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>
    e0dc:	e3a03000 	mov	r3, #0
    e0e0:	e5c53000 	strb	r3, [r5]
    e0e4:	e8bd8070 	pop	{r4, r5, r6, pc}
    e0e8:	e1a0e001 	mov	lr, r1
    e0ec:	e3a0c001 	mov	ip, #1
    e0f0:	e1a04001 	mov	r4, r1
    e0f4:	eaffffe6 	b	e094 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

0000e0f8 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    e0f8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e0fc:	e24dd014 	sub	sp, sp, #20
    e100:	e1a0b003 	mov	fp, r3
    e104:	e1a0a002 	mov	sl, r2
    e108:	e59d7038 	ldr	r7, [sp, #56]	; 0x38
    e10c:	e3a05000 	mov	r5, #0
    e110:	e5dd903c 	ldrb	r9, [sp, #60]	; 0x3c
    e114:	e1520007 	cmp	r2, r7
    e118:	e2db3000 	sbcs	r3, fp, #0
    e11c:	e58d000c 	str	r0, [sp, #12]
    e120:	23a06001 	movcs	r6, #1
    e124:	3a00003e 	bcc	e224 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x12c>
    e128:	e0030597 	mul	r3, r7, r5
    e12c:	e0856796 	umull	r6, r5, r6, r7
    e130:	e1a0000a 	mov	r0, sl
    e134:	e1a0100b 	mov	r1, fp
    e138:	e0835005 	add	r5, r3, r5
    e13c:	e1a02006 	mov	r2, r6
    e140:	e1a03005 	mov	r3, r5
    e144:	fa00190e 	blx	14584 <__aeabi_uldivmod>
    e148:	e1500007 	cmp	r0, r7
    e14c:	e2d13000 	sbcs	r3, r1, #0
    e150:	2afffff4 	bcs	e128 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x30>
    e154:	e1a04000 	mov	r4, r0
    e158:	e1a08001 	mov	r8, r1
    e15c:	e59d300c 	ldr	r3, [sp, #12]
    e160:	e3590000 	cmp	r9, #0
    e164:	e58d3004 	str	r3, [sp, #4]
    e168:	03a03020 	moveq	r3, #32
    e16c:	13a03000 	movne	r3, #0
    e170:	e2833037 	add	r3, r3, #55	; 0x37
    e174:	e58d3008 	str	r3, [sp, #8]
    e178:	ea000002 	b	e188 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x90>
    e17c:	fa001900 	blx	14584 <__aeabi_uldivmod>
    e180:	e1a04000 	mov	r4, r0
    e184:	e1a08001 	mov	r8, r1
    e188:	e1a02006 	mov	r2, r6
    e18c:	e1a03005 	mov	r3, r5
    e190:	e1a0000a 	mov	r0, sl
    e194:	e1a0100b 	mov	r1, fp
    e198:	fa0018f9 	blx	14584 <__aeabi_uldivmod>
    e19c:	e59d1008 	ldr	r1, [sp, #8]
    e1a0:	e354000a 	cmp	r4, #10
    e1a4:	e2d80000 	sbcs	r0, r8, #0
    e1a8:	e1a0b003 	mov	fp, r3
    e1ac:	e0811004 	add	r1, r1, r4
    e1b0:	e1a08003 	mov	r8, r3
    e1b4:	e59d3004 	ldr	r3, [sp, #4]
    e1b8:	e2844030 	add	r4, r4, #48	; 0x30
    e1bc:	e6af1071 	sxtb	r1, r1
    e1c0:	36af1074 	sxtbcc	r1, r4
    e1c4:	e4c31001 	strb	r1, [r3], #1
    e1c8:	e1a09002 	mov	r9, r2
    e1cc:	e58d3004 	str	r3, [sp, #4]
    e1d0:	e1a00006 	mov	r0, r6
    e1d4:	e3a03000 	mov	r3, #0
    e1d8:	e1a01005 	mov	r1, r5
    e1dc:	e1a0a002 	mov	sl, r2
    e1e0:	e1a02007 	mov	r2, r7
    e1e4:	fa0018e6 	blx	14584 <__aeabi_uldivmod>
    e1e8:	e1560007 	cmp	r6, r7
    e1ec:	e1a02000 	mov	r2, r0
    e1f0:	e2d5c000 	sbcs	ip, r5, #0
    e1f4:	e1a03001 	mov	r3, r1
    e1f8:	e1a00009 	mov	r0, r9
    e1fc:	e1a01008 	mov	r1, r8
    e200:	e1a06002 	mov	r6, r2
    e204:	e1a05003 	mov	r5, r3
    e208:	2affffdb 	bcs	e17c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x84>
    e20c:	e59d000c 	ldr	r0, [sp, #12]
    e210:	e3a03000 	mov	r3, #0
    e214:	e59d2004 	ldr	r2, [sp, #4]
    e218:	e5c23000 	strb	r3, [r2]
    e21c:	e28dd014 	add	sp, sp, #20
    e220:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e224:	e1a04002 	mov	r4, r2
    e228:	e1a0800b 	mov	r8, fp
    e22c:	e3a06001 	mov	r6, #1
    e230:	eaffffc9 	b	e15c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x64>

0000e234 <CString::ftoa(char*, double, unsigned int)>:
    e234:	eeb50bc0 	vcmpe.f64	d0, #0.0
    e238:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e23c:	e1a04000 	mov	r4, r0
    e240:	ed2d8b02 	vpush	{d8}
    e244:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e248:	e24dd010 	sub	sp, sp, #16
    e24c:	eeb08b40 	vmov.f64	d8, d0
    e250:	e1a07001 	mov	r7, r1
    e254:	eddf0b87 	vldr	d16, [pc, #540]	; e478 <CString::ftoa(char*, double, unsigned int)+0x244>
    e258:	4eb18b40 	vnegmi.f64	d8, d0
    e25c:	41a06000 	movmi	r6, r0
    e260:	43a0302d 	movmi	r3, #45	; 0x2d
    e264:	51a06000 	movpl	r6, r0
    e268:	44c63001 	strbmi	r3, [r6], #1
    e26c:	eeb48be0 	vcmpe.f64	d8, d16
    e270:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    e274:	ca00006b 	bgt	e428 <CString::ftoa(char*, double, unsigned int)+0x1f4>
    e278:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e27c:	ee175a90 	vmov	r5, s15
    e280:	e3550009 	cmp	r5, #9
    e284:	83a02001 	movhi	r2, #1
    e288:	83a0100a 	movhi	r1, #10
    e28c:	9a00006d 	bls	e448 <CString::ftoa(char*, double, unsigned int)+0x214>
    e290:	e0020291 	mul	r2, r1, r2
    e294:	e733f215 	udiv	r3, r5, r2
    e298:	e3530009 	cmp	r3, #9
    e29c:	8afffffb 	bhi	e290 <CString::ftoa(char*, double, unsigned int)+0x5c>
    e2a0:	e30ceccd 	movw	lr, #52429	; 0xcccd
    e2a4:	e1a0c006 	mov	ip, r6
    e2a8:	e34ceccc 	movt	lr, #52428	; 0xcccc
    e2ac:	e1a01005 	mov	r1, r5
    e2b0:	ea000001 	b	e2bc <CString::ftoa(char*, double, unsigned int)+0x88>
    e2b4:	e1a02003 	mov	r2, r3
    e2b8:	e733f311 	udiv	r3, r1, r3
    e2bc:	e738f211 	udiv	r8, r1, r2
    e2c0:	e3530009 	cmp	r3, #9
    e2c4:	e2830057 	add	r0, r3, #87	; 0x57
    e2c8:	e2833030 	add	r3, r3, #48	; 0x30
    e2cc:	e6af0070 	sxtb	r0, r0
    e2d0:	e0611892 	mls	r1, r2, r8, r1
    e2d4:	96af0073 	sxtbls	r0, r3
    e2d8:	e3520009 	cmp	r2, #9
    e2dc:	e083829e 	umull	r8, r3, lr, r2
    e2e0:	e4cc0001 	strb	r0, [ip], #1
    e2e4:	e1a031a3 	lsr	r3, r3, #3
    e2e8:	8afffff1 	bhi	e2b4 <CString::ftoa(char*, double, unsigned int)+0x80>
    e2ec:	e3570000 	cmp	r7, #0
    e2f0:	e3a03000 	mov	r3, #0
    e2f4:	e5cc3000 	strb	r3, [ip]
    e2f8:	1a000003 	bne	e30c <CString::ftoa(char*, double, unsigned int)+0xd8>
    e2fc:	e1a00004 	mov	r0, r4
    e300:	e28dd010 	add	sp, sp, #16
    e304:	ecbd8b02 	vpop	{d8}
    e308:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e30c:	e1a00006 	mov	r0, r6
    e310:	eb00078b 	bl	10144 <strlen>
    e314:	e0868000 	add	r8, r6, r0
    e318:	e3570009 	cmp	r7, #9
    e31c:	e3a0302e 	mov	r3, #46	; 0x2e
    e320:	e7c63000 	strb	r3, [r6, r0]
    e324:	31a06007 	movcc	r6, r7
    e328:	23a06009 	movcs	r6, #9
    e32c:	e3570001 	cmp	r7, #1
    e330:	e2887001 	add	r7, r8, #1
    e334:	0a000048 	beq	e45c <CString::ftoa(char*, double, unsigned int)+0x228>
    e338:	e3a0200a 	mov	r2, #10
    e33c:	e3a03002 	mov	r3, #2
    e340:	e1a01002 	mov	r1, r2
    e344:	e2833001 	add	r3, r3, #1
    e348:	e1530006 	cmp	r3, r6
    e34c:	e0020291 	mul	r2, r1, r2
    e350:	9afffffb 	bls	e344 <CString::ftoa(char*, double, unsigned int)+0x110>
    e354:	ee072a90 	vmov	s15, r2
    e358:	eef81b67 	vcvt.f64.u32	d17, s15
    e35c:	ee075a90 	vmov	s15, r5
    e360:	eef80b67 	vcvt.f64.u32	d16, s15
    e364:	ee388b60 	vsub.f64	d8, d8, d16
    e368:	ee288b21 	vmul.f64	d8, d8, d17
    e36c:	eefc7bc8 	vcvt.u32.f64	s15, d8
    e370:	ee172a90 	vmov	r2, s15
    e374:	e3520009 	cmp	r2, #9
    e378:	83a01001 	movhi	r1, #1
    e37c:	83a0c00a 	movhi	ip, #10
    e380:	9a000037 	bls	e464 <CString::ftoa(char*, double, unsigned int)+0x230>
    e384:	e001019c 	mul	r1, ip, r1
    e388:	e730f112 	udiv	r0, r2, r1
    e38c:	e3500009 	cmp	r0, #9
    e390:	e1a03000 	mov	r3, r0
    e394:	8afffffa 	bhi	e384 <CString::ftoa(char*, double, unsigned int)+0x150>
    e398:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    e39c:	e28de004 	add	lr, sp, #4
    e3a0:	e34c5ccc 	movt	r5, #52428	; 0xcccc
    e3a4:	ea000002 	b	e3b4 <CString::ftoa(char*, double, unsigned int)+0x180>
    e3a8:	e1a01003 	mov	r1, r3
    e3ac:	e733f312 	udiv	r3, r2, r3
    e3b0:	e1a00003 	mov	r0, r3
    e3b4:	e3530009 	cmp	r3, #9
    e3b8:	e283c057 	add	ip, r3, #87	; 0x57
    e3bc:	e2833030 	add	r3, r3, #48	; 0x30
    e3c0:	e6afc07c 	sxtb	ip, ip
    e3c4:	e0622091 	mls	r2, r1, r0, r2
    e3c8:	96afc073 	sxtbls	ip, r3
    e3cc:	e3510009 	cmp	r1, #9
    e3d0:	e0830195 	umull	r0, r3, r5, r1
    e3d4:	e4cec001 	strb	ip, [lr], #1
    e3d8:	e1a031a3 	lsr	r3, r3, #3
    e3dc:	8afffff1 	bhi	e3a8 <CString::ftoa(char*, double, unsigned int)+0x174>
    e3e0:	e3a03000 	mov	r3, #0
    e3e4:	e28d0004 	add	r0, sp, #4
    e3e8:	e5ce3000 	strb	r3, [lr]
    e3ec:	eb000754 	bl	10144 <strlen>
    e3f0:	e0566000 	subs	r6, r6, r0
    e3f4:	0a000016 	beq	e454 <CString::ftoa(char*, double, unsigned int)+0x220>
    e3f8:	e2866001 	add	r6, r6, #1
    e3fc:	e3a03030 	mov	r3, #48	; 0x30
    e400:	e0880006 	add	r0, r8, r6
    e404:	e4c73001 	strb	r3, [r7], #1
    e408:	e1570000 	cmp	r7, r0
    e40c:	1afffffc 	bne	e404 <CString::ftoa(char*, double, unsigned int)+0x1d0>
    e410:	e28d1004 	add	r1, sp, #4
    e414:	eb0007ef 	bl	103d8 <strcpy>
    e418:	e1a00004 	mov	r0, r4
    e41c:	e28dd010 	add	sp, sp, #16
    e420:	ecbd8b02 	vpop	{d8}
    e424:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e428:	e30514a8 	movw	r1, #21672	; 0x54a8
    e42c:	e1a00006 	mov	r0, r6
    e430:	e3401001 	movt	r1, #1
    e434:	eb0007e7 	bl	103d8 <strcpy>
    e438:	e1a00004 	mov	r0, r4
    e43c:	e28dd010 	add	sp, sp, #16
    e440:	ecbd8b02 	vpop	{d8}
    e444:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e448:	ee173a90 	vmov	r3, s15
    e44c:	e3a02001 	mov	r2, #1
    e450:	eaffff92 	b	e2a0 <CString::ftoa(char*, double, unsigned int)+0x6c>
    e454:	e1a00007 	mov	r0, r7
    e458:	eaffffec 	b	e410 <CString::ftoa(char*, double, unsigned int)+0x1dc>
    e45c:	eef21b04 	vmov.f64	d17, #36	; 0x41200000  10.0
    e460:	eaffffbd 	b	e35c <CString::ftoa(char*, double, unsigned int)+0x128>
    e464:	ee173a90 	vmov	r3, s15
    e468:	e3a01001 	mov	r1, #1
    e46c:	ee170a90 	vmov	r0, s15
    e470:	eaffffc8 	b	e398 <CString::ftoa(char*, double, unsigned int)+0x164>
    e474:	e320f000 	nop	{0}
    e478:	ffe00000 	.word	0xffe00000
    e47c:	41efffff 	.word	0x41efffff

0000e480 <CString::FormatV(char const*, std::__va_list)>:
    e480:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e484:	e1a0b000 	mov	fp, r0
    e488:	e5900004 	ldr	r0, [r0, #4]
    e48c:	e24dd064 	sub	sp, sp, #100	; 0x64
    e490:	e1a0a001 	mov	sl, r1
    e494:	e58d2008 	str	r2, [sp, #8]
    e498:	e3500000 	cmp	r0, #0
    e49c:	0a000000 	beq	e4a4 <CString::FormatV(char const*, std::__va_list)+0x24>
    e4a0:	eb000a51 	bl	10dec <operator delete[](void*)>
    e4a4:	e3a00040 	mov	r0, #64	; 0x40
    e4a8:	e58b0008 	str	r0, [fp, #8]
    e4ac:	eb000a42 	bl	10dbc <operator new[](unsigned int)>
    e4b0:	e58b0004 	str	r0, [fp, #4]
    e4b4:	e58b000c 	str	r0, [fp, #12]
    e4b8:	e1da40d0 	ldrsb	r4, [sl]
    e4bc:	e3540000 	cmp	r4, #0
    e4c0:	0a000080 	beq	e6c8 <CString::FormatV(char const*, std::__va_list)+0x248>
    e4c4:	e30534b4 	movw	r3, #21684	; 0x54b4
    e4c8:	e1a0900b 	mov	r9, fp
    e4cc:	e3403001 	movt	r3, #1
    e4d0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
    e4d4:	e30534b8 	movw	r3, #21688	; 0x54b8
    e4d8:	e3403001 	movt	r3, #1
    e4dc:	e58d3030 	str	r3, [sp, #48]	; 0x30
    e4e0:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    e4e4:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    e4e8:	e58d3034 	str	r3, [sp, #52]	; 0x34
    e4ec:	e3540025 	cmp	r4, #37	; 0x25
    e4f0:	1a000068 	bne	e698 <CString::FormatV(char const*, std::__va_list)+0x218>
    e4f4:	e1da30d1 	ldrsb	r3, [sl, #1]
    e4f8:	e3530025 	cmp	r3, #37	; 0x25
    e4fc:	0a000075 	beq	e6d8 <CString::FormatV(char const*, std::__va_list)+0x258>
    e500:	e3530023 	cmp	r3, #35	; 0x23
    e504:	e3a0b000 	mov	fp, #0
    e508:	128aa001 	addne	sl, sl, #1
    e50c:	13a0c000 	movne	ip, #0
    e510:	01da30d2 	ldrsbeq	r3, [sl, #2]
    e514:	03a0c001 	moveq	ip, #1
    e518:	028aa002 	addeq	sl, sl, #2
    e51c:	e353002d 	cmp	r3, #45	; 0x2d
    e520:	03a02001 	moveq	r2, #1
    e524:	13a02000 	movne	r2, #0
    e528:	01da30d1 	ldrsbeq	r3, [sl, #1]
    e52c:	028aa001 	addeq	sl, sl, #1
    e530:	e58d2010 	str	r2, [sp, #16]
    e534:	e3530030 	cmp	r3, #48	; 0x30
    e538:	03a02001 	moveq	r2, #1
    e53c:	13a02000 	movne	r2, #0
    e540:	01da30d1 	ldrsbeq	r3, [sl, #1]
    e544:	028aa001 	addeq	sl, sl, #1
    e548:	e58d2014 	str	r2, [sp, #20]
    e54c:	e2432030 	sub	r2, r3, #48	; 0x30
    e550:	e6ef2072 	uxtb	r2, r2
    e554:	e3520009 	cmp	r2, #9
    e558:	8a000007 	bhi	e57c <CString::FormatV(char const*, std::__va_list)+0xfc>
    e55c:	e3a0000a 	mov	r0, #10
    e560:	e02b3b90 	mla	fp, r0, fp, r3
    e564:	e1fa30d1 	ldrsb	r3, [sl, #1]!
    e568:	e24bb030 	sub	fp, fp, #48	; 0x30
    e56c:	e2432030 	sub	r2, r3, #48	; 0x30
    e570:	e6ef2072 	uxtb	r2, r2
    e574:	e3520009 	cmp	r2, #9
    e578:	9afffff8 	bls	e560 <CString::FormatV(char const*, std::__va_list)+0xe0>
    e57c:	e353002e 	cmp	r3, #46	; 0x2e
    e580:	0a0001b0 	beq	ec48 <CString::FormatV(char const*, std::__va_list)+0x7c8>
    e584:	e1da30d0 	ldrsb	r3, [sl]
    e588:	e3a01006 	mov	r1, #6
    e58c:	e58d3000 	str	r3, [sp]
    e590:	e59d3000 	ldr	r3, [sp]
    e594:	e353006c 	cmp	r3, #108	; 0x6c
    e598:	13a03000 	movne	r3, #0
    e59c:	158d300c 	strne	r3, [sp, #12]
    e5a0:	11a05003 	movne	r5, r3
    e5a4:	1a00000c 	bne	e5dc <CString::FormatV(char const*, std::__va_list)+0x15c>
    e5a8:	e1da30d1 	ldrsb	r3, [sl, #1]
    e5ac:	e58d3000 	str	r3, [sp]
    e5b0:	e353006c 	cmp	r3, #108	; 0x6c
    e5b4:	03a05000 	moveq	r5, #0
    e5b8:	13a05001 	movne	r5, #1
    e5bc:	01da30d2 	ldrsbeq	r3, [sl, #2]
    e5c0:	028aa001 	addeq	sl, sl, #1
    e5c4:	e28aa001 	add	sl, sl, #1
    e5c8:	13a03000 	movne	r3, #0
    e5cc:	058d3000 	streq	r3, [sp]
    e5d0:	03a03001 	moveq	r3, #1
    e5d4:	058d300c 	streq	r3, [sp, #12]
    e5d8:	158d300c 	strne	r3, [sp, #12]
    e5dc:	e59d3000 	ldr	r3, [sp]
    e5e0:	e2433058 	sub	r3, r3, #88	; 0x58
    e5e4:	e3530020 	cmp	r3, #32
    e5e8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    e5ec:	ea000042 	b	e6fc <CString::FormatV(char const*, std::__va_list)+0x27c>
    e5f0:	0000e728 	.word	0x0000e728
    e5f4:	0000e6fc 	.word	0x0000e6fc
    e5f8:	0000e6fc 	.word	0x0000e6fc
    e5fc:	0000e6fc 	.word	0x0000e6fc
    e600:	0000e6fc 	.word	0x0000e6fc
    e604:	0000e6fc 	.word	0x0000e6fc
    e608:	0000e6fc 	.word	0x0000e6fc
    e60c:	0000e6fc 	.word	0x0000e6fc
    e610:	0000e6fc 	.word	0x0000e6fc
    e614:	0000e6fc 	.word	0x0000e6fc
    e618:	0000e6fc 	.word	0x0000e6fc
    e61c:	0000e674 	.word	0x0000e674
    e620:	0000e920 	.word	0x0000e920
    e624:	0000e6fc 	.word	0x0000e6fc
    e628:	0000ea94 	.word	0x0000ea94
    e62c:	0000e6fc 	.word	0x0000e6fc
    e630:	0000e6fc 	.word	0x0000e6fc
    e634:	0000e920 	.word	0x0000e920
    e638:	0000e6fc 	.word	0x0000e6fc
    e63c:	0000e6fc 	.word	0x0000e6fc
    e640:	0000e6fc 	.word	0x0000e6fc
    e644:	0000e6fc 	.word	0x0000e6fc
    e648:	0000e6fc 	.word	0x0000e6fc
    e64c:	0000eb78 	.word	0x0000eb78
    e650:	0000e728 	.word	0x0000e728
    e654:	0000e6fc 	.word	0x0000e6fc
    e658:	0000e6fc 	.word	0x0000e6fc
    e65c:	0000eb14 	.word	0x0000eb14
    e660:	0000e6fc 	.word	0x0000e6fc
    e664:	0000ee88 	.word	0x0000ee88
    e668:	0000e6fc 	.word	0x0000e6fc
    e66c:	0000e6fc 	.word	0x0000e6fc
    e670:	0000e728 	.word	0x0000e728
    e674:	e59d3010 	ldr	r3, [sp, #16]
    e678:	e59d5008 	ldr	r5, [sp, #8]
    e67c:	e3530000 	cmp	r3, #0
    e680:	e4954004 	ldr	r4, [r5], #4
    e684:	e6af4074 	sxtb	r4, r4
    e688:	1a000269 	bne	f034 <CString::FormatV(char const*, std::__va_list)+0xbb4>
    e68c:	e35b0001 	cmp	fp, #1
    e690:	8a0001fe 	bhi	ee90 <CString::FormatV(char const*, std::__va_list)+0xa10>
    e694:	e58d5008 	str	r5, [sp, #8]
    e698:	e3a01001 	mov	r1, #1
    e69c:	e1a00009 	mov	r0, r9
    e6a0:	ebfffd09 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e6a4:	e599300c 	ldr	r3, [r9, #12]
    e6a8:	e2832001 	add	r2, r3, #1
    e6ac:	e589200c 	str	r2, [r9, #12]
    e6b0:	e5c34000 	strb	r4, [r3]
    e6b4:	e28aa001 	add	sl, sl, #1
    e6b8:	e1da40d0 	ldrsb	r4, [sl]
    e6bc:	e3540000 	cmp	r4, #0
    e6c0:	1affff89 	bne	e4ec <CString::FormatV(char const*, std::__va_list)+0x6c>
    e6c4:	e599000c 	ldr	r0, [r9, #12]
    e6c8:	e3a03000 	mov	r3, #0
    e6cc:	e5c03000 	strb	r3, [r0]
    e6d0:	e28dd064 	add	sp, sp, #100	; 0x64
    e6d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e6d8:	e3a01001 	mov	r1, #1
    e6dc:	e1a00009 	mov	r0, r9
    e6e0:	e28aa002 	add	sl, sl, #2
    e6e4:	ebfffcf8 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e6e8:	e599300c 	ldr	r3, [r9, #12]
    e6ec:	e2832001 	add	r2, r3, #1
    e6f0:	e589200c 	str	r2, [r9, #12]
    e6f4:	e5c34000 	strb	r4, [r3]
    e6f8:	eaffffee 	b	e6b8 <CString::FormatV(char const*, std::__va_list)+0x238>
    e6fc:	e3a01001 	mov	r1, #1
    e700:	e1a00009 	mov	r0, r9
    e704:	ebfffcf0 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e708:	e599300c 	ldr	r3, [r9, #12]
    e70c:	e3a01001 	mov	r1, #1
    e710:	e3a02025 	mov	r2, #37	; 0x25
    e714:	e0830001 	add	r0, r3, r1
    e718:	e589000c 	str	r0, [r9, #12]
    e71c:	e5c32000 	strb	r2, [r3]
    e720:	e1da40d0 	ldrsb	r4, [sl]
    e724:	eaffffdc 	b	e69c <CString::FormatV(char const*, std::__va_list)+0x21c>
    e728:	e35c0000 	cmp	ip, #0
    e72c:	03a08010 	moveq	r8, #16
    e730:	1a0001be 	bne	ee30 <CString::FormatV(char const*, std::__va_list)+0x9b0>
    e734:	e59d300c 	ldr	r3, [sp, #12]
    e738:	e3530000 	cmp	r3, #0
    e73c:	e59d3008 	ldr	r3, [sp, #8]
    e740:	0a00011e 	beq	ebc0 <CString::FormatV(char const*, std::__va_list)+0x740>
    e744:	e2833007 	add	r3, r3, #7
    e748:	e3a05000 	mov	r5, #0
    e74c:	e3c33007 	bic	r3, r3, #7
    e750:	e5937004 	ldr	r7, [r3, #4]
    e754:	e4934008 	ldr	r4, [r3], #8
    e758:	e58d701c 	str	r7, [sp, #28]
    e75c:	e1540008 	cmp	r4, r8
    e760:	e58d3008 	str	r3, [sp, #8]
    e764:	e2d73000 	sbcs	r3, r7, #0
    e768:	e58d4018 	str	r4, [sp, #24]
    e76c:	3a00024a 	bcc	f09c <CString::FormatV(char const*, std::__va_list)+0xc1c>
    e770:	e3a06001 	mov	r6, #1
    e774:	e0030598 	mul	r3, r8, r5
    e778:	e0856896 	umull	r6, r5, r6, r8
    e77c:	e1a00004 	mov	r0, r4
    e780:	e1a01007 	mov	r1, r7
    e784:	e0835005 	add	r5, r3, r5
    e788:	e1a02006 	mov	r2, r6
    e78c:	e1a03005 	mov	r3, r5
    e790:	fa00177b 	blx	14584 <__aeabi_uldivmod>
    e794:	e1500008 	cmp	r0, r8
    e798:	e2d13000 	sbcs	r3, r1, #0
    e79c:	2afffff4 	bcs	e774 <CString::FormatV(char const*, std::__va_list)+0x2f4>
    e7a0:	e1a04000 	mov	r4, r0
    e7a4:	e1a07001 	mov	r7, r1
    e7a8:	e59d3000 	ldr	r3, [sp]
    e7ac:	e58db020 	str	fp, [sp, #32]
    e7b0:	e58da028 	str	sl, [sp, #40]	; 0x28
    e7b4:	e3530058 	cmp	r3, #88	; 0x58
    e7b8:	e58d9024 	str	r9, [sp, #36]	; 0x24
    e7bc:	e28d303c 	add	r3, sp, #60	; 0x3c
    e7c0:	e58d3004 	str	r3, [sp, #4]
    e7c4:	e58d3000 	str	r3, [sp]
    e7c8:	13a03020 	movne	r3, #32
    e7cc:	03a03000 	moveq	r3, #0
    e7d0:	e2833037 	add	r3, r3, #55	; 0x37
    e7d4:	e1cda1d8 	ldrd	sl, [sp, #24]
    e7d8:	e58d300c 	str	r3, [sp, #12]
    e7dc:	ea000002 	b	e7ec <CString::FormatV(char const*, std::__va_list)+0x36c>
    e7e0:	fa001767 	blx	14584 <__aeabi_uldivmod>
    e7e4:	e1a04000 	mov	r4, r0
    e7e8:	e1a07001 	mov	r7, r1
    e7ec:	e1a02006 	mov	r2, r6
    e7f0:	e1a03005 	mov	r3, r5
    e7f4:	e1a0000a 	mov	r0, sl
    e7f8:	e1a0100b 	mov	r1, fp
    e7fc:	fa001760 	blx	14584 <__aeabi_uldivmod>
    e800:	e59d100c 	ldr	r1, [sp, #12]
    e804:	e354000a 	cmp	r4, #10
    e808:	e2d70000 	sbcs	r0, r7, #0
    e80c:	e1a0b003 	mov	fp, r3
    e810:	e0811004 	add	r1, r1, r4
    e814:	e1a07003 	mov	r7, r3
    e818:	e59d3000 	ldr	r3, [sp]
    e81c:	e2844030 	add	r4, r4, #48	; 0x30
    e820:	e6af1071 	sxtb	r1, r1
    e824:	36af1074 	sxtbcc	r1, r4
    e828:	e4c31001 	strb	r1, [r3], #1
    e82c:	e1a09002 	mov	r9, r2
    e830:	e58d3000 	str	r3, [sp]
    e834:	e1a00006 	mov	r0, r6
    e838:	e3a03000 	mov	r3, #0
    e83c:	e1a01005 	mov	r1, r5
    e840:	e1a0a002 	mov	sl, r2
    e844:	e1a02008 	mov	r2, r8
    e848:	fa00174d 	blx	14584 <__aeabi_uldivmod>
    e84c:	e1560008 	cmp	r6, r8
    e850:	e1a02000 	mov	r2, r0
    e854:	e2d5c000 	sbcs	ip, r5, #0
    e858:	e1a03001 	mov	r3, r1
    e85c:	e1a00009 	mov	r0, r9
    e860:	e1a01007 	mov	r1, r7
    e864:	e1a06002 	mov	r6, r2
    e868:	e1a05003 	mov	r5, r3
    e86c:	2affffdb 	bcs	e7e0 <CString::FormatV(char const*, std::__va_list)+0x360>
    e870:	e59d2000 	ldr	r2, [sp]
    e874:	e3a03000 	mov	r3, #0
    e878:	e59db020 	ldr	fp, [sp, #32]
    e87c:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
    e880:	e59da028 	ldr	sl, [sp, #40]	; 0x28
    e884:	e5c23000 	strb	r3, [r2]
    e888:	e59d0004 	ldr	r0, [sp, #4]
    e88c:	eb00062c 	bl	10144 <strlen>
    e890:	e59d3010 	ldr	r3, [sp, #16]
    e894:	e1a04000 	mov	r4, r0
    e898:	e3530000 	cmp	r3, #0
    e89c:	1a0000fb 	bne	ec90 <CString::FormatV(char const*, std::__va_list)+0x810>
    e8a0:	e150000b 	cmp	r0, fp
    e8a4:	2a00000f 	bcs	e8e8 <CString::FormatV(char const*, std::__va_list)+0x468>
    e8a8:	e59d3014 	ldr	r3, [sp, #20]
    e8ac:	e04b4000 	sub	r4, fp, r0
    e8b0:	e1a00009 	mov	r0, r9
    e8b4:	e3530000 	cmp	r3, #0
    e8b8:	e1a01004 	mov	r1, r4
    e8bc:	13a05030 	movne	r5, #48	; 0x30
    e8c0:	03a05020 	moveq	r5, #32
    e8c4:	ebfffc80 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e8c8:	e2443001 	sub	r3, r4, #1
    e8cc:	e599200c 	ldr	r2, [r9, #12]
    e8d0:	e2433001 	sub	r3, r3, #1
    e8d4:	e3730001 	cmn	r3, #1
    e8d8:	e2821001 	add	r1, r2, #1
    e8dc:	e589100c 	str	r1, [r9, #12]
    e8e0:	e5c25000 	strb	r5, [r2]
    e8e4:	1afffff8 	bne	e8cc <CString::FormatV(char const*, std::__va_list)+0x44c>
    e8e8:	e59d0004 	ldr	r0, [sp, #4]
    e8ec:	eb000614 	bl	10144 <strlen>
    e8f0:	e2504000 	subs	r4, r0, #0
    e8f4:	0a000002 	beq	e904 <CString::FormatV(char const*, std::__va_list)+0x484>
    e8f8:	e1a01004 	mov	r1, r4
    e8fc:	e1a00009 	mov	r0, r9
    e900:	ebfffc71 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    e904:	e599000c 	ldr	r0, [r9, #12]
    e908:	e59d1004 	ldr	r1, [sp, #4]
    e90c:	eb0006b1 	bl	103d8 <strcpy>
    e910:	e599000c 	ldr	r0, [r9, #12]
    e914:	e0800004 	add	r0, r0, r4
    e918:	e589000c 	str	r0, [r9, #12]
    e91c:	eaffff64 	b	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    e920:	e59d300c 	ldr	r3, [sp, #12]
    e924:	e3530000 	cmp	r3, #0
    e928:	e59d3008 	ldr	r3, [sp, #8]
    e92c:	0a0000f4 	beq	ed04 <CString::FormatV(char const*, std::__va_list)+0x884>
    e930:	e2833007 	add	r3, r3, #7
    e934:	e3c33007 	bic	r3, r3, #7
    e938:	e5938004 	ldr	r8, [r3, #4]
    e93c:	e4932008 	ldr	r2, [r3], #8
    e940:	e3580000 	cmp	r8, #0
    e944:	e58d3008 	str	r3, [sp, #8]
    e948:	a3a03000 	movge	r3, #0
    e94c:	a58d300c 	strge	r3, [sp, #12]
    e950:	aa000002 	bge	e960 <CString::FormatV(char const*, std::__va_list)+0x4e0>
    e954:	e2723000 	rsbs	r3, r2, #0
    e958:	e2e88000 	rsc	r8, r8, #0
    e95c:	e1a02003 	mov	r2, r3
    e960:	e58d8018 	str	r8, [sp, #24]
    e964:	e352000a 	cmp	r2, #10
    e968:	e1a03002 	mov	r3, r2
    e96c:	e2d82000 	sbcs	r2, r8, #0
    e970:	e58d3000 	str	r3, [sp]
    e974:	ba0001ff 	blt	f178 <CString::FormatV(char const*, std::__va_list)+0xcf8>
    e978:	e1a06008 	mov	r6, r8
    e97c:	e3a04001 	mov	r4, #1
    e980:	e3a05000 	mov	r5, #0
    e984:	e1a08003 	mov	r8, r3
    e988:	e0941004 	adds	r1, r4, r4
    e98c:	e1a00008 	mov	r0, r8
    e990:	e0a53005 	adc	r3, r5, r5
    e994:	e0911001 	adds	r1, r1, r1
    e998:	e0a33003 	adc	r3, r3, r3
    e99c:	e0912004 	adds	r2, r1, r4
    e9a0:	e1a01006 	mov	r1, r6
    e9a4:	e0a55003 	adc	r5, r5, r3
    e9a8:	e0922002 	adds	r2, r2, r2
    e9ac:	e0a55005 	adc	r5, r5, r5
    e9b0:	e1a04002 	mov	r4, r2
    e9b4:	e1a03005 	mov	r3, r5
    e9b8:	fa0016f1 	blx	14584 <__aeabi_uldivmod>
    e9bc:	e350000a 	cmp	r0, #10
    e9c0:	e2d13000 	sbcs	r3, r1, #0
    e9c4:	2affffef 	bcs	e988 <CString::FormatV(char const*, std::__va_list)+0x508>
    e9c8:	e1a06000 	mov	r6, r0
    e9cc:	e1a07001 	mov	r7, r1
    e9d0:	e58db01c 	str	fp, [sp, #28]
    e9d4:	e28d303c 	add	r3, sp, #60	; 0x3c
    e9d8:	e58d9020 	str	r9, [sp, #32]
    e9dc:	e1a09003 	mov	r9, r3
    e9e0:	e58da024 	str	sl, [sp, #36]	; 0x24
    e9e4:	e59db018 	ldr	fp, [sp, #24]
    e9e8:	e59da000 	ldr	sl, [sp]
    e9ec:	e58d3004 	str	r3, [sp, #4]
    e9f0:	ea000002 	b	ea00 <CString::FormatV(char const*, std::__va_list)+0x580>
    e9f4:	fa0016e2 	blx	14584 <__aeabi_uldivmod>
    e9f8:	e1a06000 	mov	r6, r0
    e9fc:	e1a07001 	mov	r7, r1
    ea00:	e1a02004 	mov	r2, r4
    ea04:	e1a03005 	mov	r3, r5
    ea08:	e1a0000a 	mov	r0, sl
    ea0c:	e1a0100b 	mov	r1, fp
    ea10:	fa0016db 	blx	14584 <__aeabi_uldivmod>
    ea14:	e356000a 	cmp	r6, #10
    ea18:	e2861057 	add	r1, r6, #87	; 0x57
    ea1c:	e2d70000 	sbcs	r0, r7, #0
    ea20:	e2866030 	add	r6, r6, #48	; 0x30
    ea24:	e6af1071 	sxtb	r1, r1
    ea28:	36af1076 	sxtbcc	r1, r6
    ea2c:	e4c91001 	strb	r1, [r9], #1
    ea30:	e1a08002 	mov	r8, r2
    ea34:	e1a07003 	mov	r7, r3
    ea38:	e1a00004 	mov	r0, r4
    ea3c:	e1a01005 	mov	r1, r5
    ea40:	e1a0a002 	mov	sl, r2
    ea44:	e1a0b003 	mov	fp, r3
    ea48:	e3a0200a 	mov	r2, #10
    ea4c:	e3a03000 	mov	r3, #0
    ea50:	fa0016cb 	blx	14584 <__aeabi_uldivmod>
    ea54:	e354000a 	cmp	r4, #10
    ea58:	e1a02000 	mov	r2, r0
    ea5c:	e2d5c000 	sbcs	ip, r5, #0
    ea60:	e1a03001 	mov	r3, r1
    ea64:	e1a00008 	mov	r0, r8
    ea68:	e1a01007 	mov	r1, r7
    ea6c:	e1a04002 	mov	r4, r2
    ea70:	e1a05003 	mov	r5, r3
    ea74:	2affffde 	bcs	e9f4 <CString::FormatV(char const*, std::__va_list)+0x574>
    ea78:	e59db01c 	ldr	fp, [sp, #28]
    ea7c:	e1a02009 	mov	r2, r9
    ea80:	e59da024 	ldr	sl, [sp, #36]	; 0x24
    ea84:	e3a03000 	mov	r3, #0
    ea88:	e59d9020 	ldr	r9, [sp, #32]
    ea8c:	e5c23000 	strb	r3, [r2]
    ea90:	ea0000be 	b	ed90 <CString::FormatV(char const*, std::__va_list)+0x910>
    ea94:	e59d3008 	ldr	r3, [sp, #8]
    ea98:	e2833007 	add	r3, r3, #7
    ea9c:	e3c33007 	bic	r3, r3, #7
    eaa0:	ecb30b02 	vldmia	r3!, {d0}
    eaa4:	e58d3008 	str	r3, [sp, #8]
    eaa8:	e28d303c 	add	r3, sp, #60	; 0x3c
    eaac:	e58d3004 	str	r3, [sp, #4]
    eab0:	e1a04003 	mov	r4, r3
    eab4:	e1a00003 	mov	r0, r3
    eab8:	ebfffddd 	bl	e234 <CString::ftoa(char*, double, unsigned int)>
    eabc:	e1a00004 	mov	r0, r4
    eac0:	eb00059f 	bl	10144 <strlen>
    eac4:	e59d3010 	ldr	r3, [sp, #16]
    eac8:	e1a04000 	mov	r4, r0
    eacc:	e3530000 	cmp	r3, #0
    ead0:	1a00013a 	bne	efc0 <CString::FormatV(char const*, std::__va_list)+0xb40>
    ead4:	e150000b 	cmp	r0, fp
    ead8:	2affff82 	bcs	e8e8 <CString::FormatV(char const*, std::__va_list)+0x468>
    eadc:	e04b4000 	sub	r4, fp, r0
    eae0:	e1a00009 	mov	r0, r9
    eae4:	e1a01004 	mov	r1, r4
    eae8:	ebfffbf7 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eaec:	e2443001 	sub	r3, r4, #1
    eaf0:	e3a00020 	mov	r0, #32
    eaf4:	e599200c 	ldr	r2, [r9, #12]
    eaf8:	e2433001 	sub	r3, r3, #1
    eafc:	e3730001 	cmn	r3, #1
    eb00:	e2821001 	add	r1, r2, #1
    eb04:	e589100c 	str	r1, [r9, #12]
    eb08:	e5c20000 	strb	r0, [r2]
    eb0c:	1afffff8 	bne	eaf4 <CString::FormatV(char const*, std::__va_list)+0x674>
    eb10:	eaffff74 	b	e8e8 <CString::FormatV(char const*, std::__va_list)+0x468>
    eb14:	e59d5008 	ldr	r5, [sp, #8]
    eb18:	e4956004 	ldr	r6, [r5], #4
    eb1c:	e1a00006 	mov	r0, r6
    eb20:	eb000587 	bl	10144 <strlen>
    eb24:	e59d3010 	ldr	r3, [sp, #16]
    eb28:	e1a04000 	mov	r4, r0
    eb2c:	e3530000 	cmp	r3, #0
    eb30:	1a000111 	bne	ef7c <CString::FormatV(char const*, std::__va_list)+0xafc>
    eb34:	e150000b 	cmp	r0, fp
    eb38:	3a0000e1 	bcc	eec4 <CString::FormatV(char const*, std::__va_list)+0xa44>
    eb3c:	e1a00006 	mov	r0, r6
    eb40:	eb00057f 	bl	10144 <strlen>
    eb44:	e2504000 	subs	r4, r0, #0
    eb48:	0a000002 	beq	eb58 <CString::FormatV(char const*, std::__va_list)+0x6d8>
    eb4c:	e1a01004 	mov	r1, r4
    eb50:	e1a00009 	mov	r0, r9
    eb54:	ebfffbdc 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb58:	e599000c 	ldr	r0, [r9, #12]
    eb5c:	e1a01006 	mov	r1, r6
    eb60:	eb00061c 	bl	103d8 <strcpy>
    eb64:	e599000c 	ldr	r0, [r9, #12]
    eb68:	e58d5008 	str	r5, [sp, #8]
    eb6c:	e0800004 	add	r0, r0, r4
    eb70:	e589000c 	str	r0, [r9, #12]
    eb74:	eafffece 	b	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    eb78:	e35c0000 	cmp	ip, #0
    eb7c:	03a08008 	moveq	r8, #8
    eb80:	0afffeeb 	beq	e734 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    eb84:	e3a01001 	mov	r1, #1
    eb88:	e1a00009 	mov	r0, r9
    eb8c:	e3a08008 	mov	r8, #8
    eb90:	ebfffbcd 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eb94:	e599300c 	ldr	r3, [r9, #12]
    eb98:	e3a02030 	mov	r2, #48	; 0x30
    eb9c:	e2831001 	add	r1, r3, #1
    eba0:	e589100c 	str	r1, [r9, #12]
    eba4:	e5c32000 	strb	r2, [r3]
    eba8:	e1da30d0 	ldrsb	r3, [sl]
    ebac:	e58d3000 	str	r3, [sp]
    ebb0:	e59d300c 	ldr	r3, [sp, #12]
    ebb4:	e3530000 	cmp	r3, #0
    ebb8:	e59d3008 	ldr	r3, [sp, #8]
    ebbc:	1afffee0 	bne	e744 <CString::FormatV(char const*, std::__va_list)+0x2c4>
    ebc0:	e493c004 	ldr	ip, [r3], #4
    ebc4:	e158000c 	cmp	r8, ip
    ebc8:	e58d3008 	str	r3, [sp, #8]
    ebcc:	8a00012e 	bhi	f08c <CString::FormatV(char const*, std::__va_list)+0xc0c>
    ebd0:	e3a03001 	mov	r3, #1
    ebd4:	e0030398 	mul	r3, r8, r3
    ebd8:	e731f31c 	udiv	r1, ip, r3
    ebdc:	e1580001 	cmp	r8, r1
    ebe0:	e1a02001 	mov	r2, r1
    ebe4:	9afffffa 	bls	ebd4 <CString::FormatV(char const*, std::__va_list)+0x754>
    ebe8:	e59d0000 	ldr	r0, [sp]
    ebec:	e3500058 	cmp	r0, #88	; 0x58
    ebf0:	e28d003c 	add	r0, sp, #60	; 0x3c
    ebf4:	e58d0004 	str	r0, [sp, #4]
    ebf8:	13a04020 	movne	r4, #32
    ebfc:	03a04000 	moveq	r4, #0
    ec00:	e1a0e000 	mov	lr, r0
    ec04:	e2844037 	add	r4, r4, #55	; 0x37
    ec08:	ea000001 	b	ec14 <CString::FormatV(char const*, std::__va_list)+0x794>
    ec0c:	e732f31c 	udiv	r2, ip, r3
    ec10:	e1a01002 	mov	r1, r2
    ec14:	e0840002 	add	r0, r4, r2
    ec18:	e3520009 	cmp	r2, #9
    ec1c:	e2822030 	add	r2, r2, #48	; 0x30
    ec20:	e6af0070 	sxtb	r0, r0
    ec24:	96af0072 	sxtbls	r0, r2
    ec28:	e1580003 	cmp	r8, r3
    ec2c:	e06cc193 	mls	ip, r3, r1, ip
    ec30:	e4ce0001 	strb	r0, [lr], #1
    ec34:	e733f813 	udiv	r3, r3, r8
    ec38:	9afffff3 	bls	ec0c <CString::FormatV(char const*, std::__va_list)+0x78c>
    ec3c:	e3a03000 	mov	r3, #0
    ec40:	e5ce3000 	strb	r3, [lr]
    ec44:	eaffff0f 	b	e888 <CString::FormatV(char const*, std::__va_list)+0x408>
    ec48:	e1da00d1 	ldrsb	r0, [sl, #1]
    ec4c:	e3a01000 	mov	r1, #0
    ec50:	e28aa001 	add	sl, sl, #1
    ec54:	e58d0000 	str	r0, [sp]
    ec58:	e2403030 	sub	r3, r0, #48	; 0x30
    ec5c:	e6ef3073 	uxtb	r3, r3
    ec60:	e3530009 	cmp	r3, #9
    ec64:	8afffe49 	bhi	e590 <CString::FormatV(char const*, std::__va_list)+0x110>
    ec68:	e3a0200a 	mov	r2, #10
    ec6c:	e0210192 	mla	r1, r2, r1, r0
    ec70:	e1fa00d1 	ldrsb	r0, [sl, #1]!
    ec74:	e2411030 	sub	r1, r1, #48	; 0x30
    ec78:	e2403030 	sub	r3, r0, #48	; 0x30
    ec7c:	e6ef3073 	uxtb	r3, r3
    ec80:	e3530009 	cmp	r3, #9
    ec84:	9afffff8 	bls	ec6c <CString::FormatV(char const*, std::__va_list)+0x7ec>
    ec88:	e58d0000 	str	r0, [sp]
    ec8c:	eafffe3f 	b	e590 <CString::FormatV(char const*, std::__va_list)+0x110>
    ec90:	e59d0004 	ldr	r0, [sp, #4]
    ec94:	eb00052a 	bl	10144 <strlen>
    ec98:	e2505000 	subs	r5, r0, #0
    ec9c:	0a000002 	beq	ecac <CString::FormatV(char const*, std::__va_list)+0x82c>
    eca0:	e1a01005 	mov	r1, r5
    eca4:	e1a00009 	mov	r0, r9
    eca8:	ebfffb87 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ecac:	e599000c 	ldr	r0, [r9, #12]
    ecb0:	e59d1004 	ldr	r1, [sp, #4]
    ecb4:	eb0005c7 	bl	103d8 <strcpy>
    ecb8:	e599300c 	ldr	r3, [r9, #12]
    ecbc:	e154000b 	cmp	r4, fp
    ecc0:	e0835005 	add	r5, r3, r5
    ecc4:	e589500c 	str	r5, [r9, #12]
    ecc8:	2afffe79 	bcs	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    eccc:	e04b4004 	sub	r4, fp, r4
    ecd0:	e1a00009 	mov	r0, r9
    ecd4:	e1a01004 	mov	r1, r4
    ecd8:	ebfffb7b 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ecdc:	e2443001 	sub	r3, r4, #1
    ece0:	e3a00020 	mov	r0, #32
    ece4:	e599200c 	ldr	r2, [r9, #12]
    ece8:	e2433001 	sub	r3, r3, #1
    ecec:	e3730001 	cmn	r3, #1
    ecf0:	e2821001 	add	r1, r2, #1
    ecf4:	e589100c 	str	r1, [r9, #12]
    ecf8:	e5c20000 	strb	r0, [r2]
    ecfc:	1afffff8 	bne	ece4 <CString::FormatV(char const*, std::__va_list)+0x864>
    ed00:	eafffe6b 	b	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    ed04:	e4930004 	ldr	r0, [r3], #4
    ed08:	e58d3008 	str	r3, [sp, #8]
    ed0c:	e3500000 	cmp	r0, #0
    ed10:	b2600000 	rsblt	r0, r0, #0
    ed14:	b3a03001 	movlt	r3, #1
    ed18:	b58d300c 	strlt	r3, [sp, #12]
    ed1c:	e3500009 	cmp	r0, #9
    ed20:	e1a01000 	mov	r1, r0
    ed24:	da000118 	ble	f18c <CString::FormatV(char const*, std::__va_list)+0xd0c>
    ed28:	e3a02001 	mov	r2, #1
    ed2c:	e3a0c00a 	mov	ip, #10
    ed30:	e002029c 	mul	r2, ip, r2
    ed34:	e733f210 	udiv	r3, r0, r2
    ed38:	e3530009 	cmp	r3, #9
    ed3c:	8afffffb 	bhi	ed30 <CString::FormatV(char const*, std::__va_list)+0x8b0>
    ed40:	e59d4034 	ldr	r4, [sp, #52]	; 0x34
    ed44:	e28d003c 	add	r0, sp, #60	; 0x3c
    ed48:	e58d0004 	str	r0, [sp, #4]
    ed4c:	ea000001 	b	ed58 <CString::FormatV(char const*, std::__va_list)+0x8d8>
    ed50:	e1a02003 	mov	r2, r3
    ed54:	e733f311 	udiv	r3, r1, r3
    ed58:	e73ef211 	udiv	lr, r1, r2
    ed5c:	e3530009 	cmp	r3, #9
    ed60:	e283c057 	add	ip, r3, #87	; 0x57
    ed64:	e2833030 	add	r3, r3, #48	; 0x30
    ed68:	e6afc07c 	sxtb	ip, ip
    ed6c:	e0611e92 	mls	r1, r2, lr, r1
    ed70:	96afc073 	sxtbls	ip, r3
    ed74:	e3520009 	cmp	r2, #9
    ed78:	e083e294 	umull	lr, r3, r4, r2
    ed7c:	e4c0c001 	strb	ip, [r0], #1
    ed80:	e1a031a3 	lsr	r3, r3, #3
    ed84:	8afffff1 	bhi	ed50 <CString::FormatV(char const*, std::__va_list)+0x8d0>
    ed88:	e3a03000 	mov	r3, #0
    ed8c:	e5c03000 	strb	r3, [r0]
    ed90:	e59d0004 	ldr	r0, [sp, #4]
    ed94:	eb0004ea 	bl	10144 <strlen>
    ed98:	e59d300c 	ldr	r3, [sp, #12]
    ed9c:	e1a04000 	mov	r4, r0
    eda0:	e3530000 	cmp	r3, #0
    eda4:	0a000054 	beq	eefc <CString::FormatV(char const*, std::__va_list)+0xa7c>
    eda8:	e59d3010 	ldr	r3, [sp, #16]
    edac:	e2804001 	add	r4, r0, #1
    edb0:	e3530000 	cmp	r3, #0
    edb4:	1a0000cf 	bne	f0f8 <CString::FormatV(char const*, std::__va_list)+0xc78>
    edb8:	e59d3014 	ldr	r3, [sp, #20]
    edbc:	e3530000 	cmp	r3, #0
    edc0:	1a0000e3 	bne	f154 <CString::FormatV(char const*, std::__va_list)+0xcd4>
    edc4:	e15b0004 	cmp	fp, r4
    edc8:	9a00000f 	bls	ee0c <CString::FormatV(char const*, std::__va_list)+0x98c>
    edcc:	e04b4004 	sub	r4, fp, r4
    edd0:	e1a00009 	mov	r0, r9
    edd4:	e1a01004 	mov	r1, r4
    edd8:	ebfffb3b 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eddc:	e2443001 	sub	r3, r4, #1
    ede0:	e3a00020 	mov	r0, #32
    ede4:	e599200c 	ldr	r2, [r9, #12]
    ede8:	e2433001 	sub	r3, r3, #1
    edec:	e3730001 	cmn	r3, #1
    edf0:	e2821001 	add	r1, r2, #1
    edf4:	e589100c 	str	r1, [r9, #12]
    edf8:	e5c20000 	strb	r0, [r2]
    edfc:	1afffff8 	bne	ede4 <CString::FormatV(char const*, std::__va_list)+0x964>
    ee00:	e59d300c 	ldr	r3, [sp, #12]
    ee04:	e3530000 	cmp	r3, #0
    ee08:	0afffeb6 	beq	e8e8 <CString::FormatV(char const*, std::__va_list)+0x468>
    ee0c:	e3a01001 	mov	r1, #1
    ee10:	e1a00009 	mov	r0, r9
    ee14:	ebfffb2c 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee18:	e599300c 	ldr	r3, [r9, #12]
    ee1c:	e3a0202d 	mov	r2, #45	; 0x2d
    ee20:	e2831001 	add	r1, r3, #1
    ee24:	e589100c 	str	r1, [r9, #12]
    ee28:	e5c32000 	strb	r2, [r3]
    ee2c:	eafffead 	b	e8e8 <CString::FormatV(char const*, std::__va_list)+0x468>
    ee30:	e59d2000 	ldr	r2, [sp]
    ee34:	e59d3030 	ldr	r3, [sp, #48]	; 0x30
    ee38:	e59d602c 	ldr	r6, [sp, #44]	; 0x2c
    ee3c:	e3520058 	cmp	r2, #88	; 0x58
    ee40:	01a06003 	moveq	r6, r3
    ee44:	e1a00006 	mov	r0, r6
    ee48:	eb0004bd 	bl	10144 <strlen>
    ee4c:	e2504000 	subs	r4, r0, #0
    ee50:	0a000002 	beq	ee60 <CString::FormatV(char const*, std::__va_list)+0x9e0>
    ee54:	e1a01004 	mov	r1, r4
    ee58:	e1a00009 	mov	r0, r9
    ee5c:	ebfffb1a 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee60:	e599000c 	ldr	r0, [r9, #12]
    ee64:	e1a01006 	mov	r1, r6
    ee68:	e3a08010 	mov	r8, #16
    ee6c:	eb000559 	bl	103d8 <strcpy>
    ee70:	e599300c 	ldr	r3, [r9, #12]
    ee74:	e0834004 	add	r4, r3, r4
    ee78:	e589400c 	str	r4, [r9, #12]
    ee7c:	e1da30d0 	ldrsb	r3, [sl]
    ee80:	e58d3000 	str	r3, [sp]
    ee84:	eafffe2a 	b	e734 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    ee88:	e3a0800a 	mov	r8, #10
    ee8c:	eafffe28 	b	e734 <CString::FormatV(char const*, std::__va_list)+0x2b4>
    ee90:	e1a00009 	mov	r0, r9
    ee94:	e24b1001 	sub	r1, fp, #1
    ee98:	ebfffb0b 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ee9c:	e24b3002 	sub	r3, fp, #2
    eea0:	e3a00020 	mov	r0, #32
    eea4:	e599200c 	ldr	r2, [r9, #12]
    eea8:	e2433001 	sub	r3, r3, #1
    eeac:	e3730001 	cmn	r3, #1
    eeb0:	e2821001 	add	r1, r2, #1
    eeb4:	e589100c 	str	r1, [r9, #12]
    eeb8:	e5c20000 	strb	r0, [r2]
    eebc:	1afffff8 	bne	eea4 <CString::FormatV(char const*, std::__va_list)+0xa24>
    eec0:	eafffdf3 	b	e694 <CString::FormatV(char const*, std::__va_list)+0x214>
    eec4:	e04b4000 	sub	r4, fp, r0
    eec8:	e1a00009 	mov	r0, r9
    eecc:	e1a01004 	mov	r1, r4
    eed0:	ebfffafd 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    eed4:	e2443001 	sub	r3, r4, #1
    eed8:	e3a00020 	mov	r0, #32
    eedc:	e599200c 	ldr	r2, [r9, #12]
    eee0:	e2433001 	sub	r3, r3, #1
    eee4:	e3730001 	cmn	r3, #1
    eee8:	e2821001 	add	r1, r2, #1
    eeec:	e589100c 	str	r1, [r9, #12]
    eef0:	e5c20000 	strb	r0, [r2]
    eef4:	1afffff8 	bne	eedc <CString::FormatV(char const*, std::__va_list)+0xa5c>
    eef8:	eaffff0f 	b	eb3c <CString::FormatV(char const*, std::__va_list)+0x6bc>
    eefc:	e59d3010 	ldr	r3, [sp, #16]
    ef00:	e3530000 	cmp	r3, #0
    ef04:	0a000068 	beq	f0ac <CString::FormatV(char const*, std::__va_list)+0xc2c>
    ef08:	e59d0004 	ldr	r0, [sp, #4]
    ef0c:	eb00048c 	bl	10144 <strlen>
    ef10:	e2505000 	subs	r5, r0, #0
    ef14:	0a000002 	beq	ef24 <CString::FormatV(char const*, std::__va_list)+0xaa4>
    ef18:	e1a01005 	mov	r1, r5
    ef1c:	e1a00009 	mov	r0, r9
    ef20:	ebfffae9 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef24:	e599000c 	ldr	r0, [r9, #12]
    ef28:	e59d1004 	ldr	r1, [sp, #4]
    ef2c:	eb000529 	bl	103d8 <strcpy>
    ef30:	e599300c 	ldr	r3, [r9, #12]
    ef34:	e15b0004 	cmp	fp, r4
    ef38:	e0835005 	add	r5, r3, r5
    ef3c:	e589500c 	str	r5, [r9, #12]
    ef40:	9afffddb 	bls	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    ef44:	e04b4004 	sub	r4, fp, r4
    ef48:	e1a00009 	mov	r0, r9
    ef4c:	e1a01004 	mov	r1, r4
    ef50:	ebfffadd 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef54:	e2443001 	sub	r3, r4, #1
    ef58:	e3a00020 	mov	r0, #32
    ef5c:	e599200c 	ldr	r2, [r9, #12]
    ef60:	e2433001 	sub	r3, r3, #1
    ef64:	e3730001 	cmn	r3, #1
    ef68:	e2821001 	add	r1, r2, #1
    ef6c:	e589100c 	str	r1, [r9, #12]
    ef70:	e5c20000 	strb	r0, [r2]
    ef74:	1afffff8 	bne	ef5c <CString::FormatV(char const*, std::__va_list)+0xadc>
    ef78:	eafffdcd 	b	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    ef7c:	e1a00006 	mov	r0, r6
    ef80:	eb00046f 	bl	10144 <strlen>
    ef84:	e2507000 	subs	r7, r0, #0
    ef88:	0a000002 	beq	ef98 <CString::FormatV(char const*, std::__va_list)+0xb18>
    ef8c:	e1a01007 	mov	r1, r7
    ef90:	e1a00009 	mov	r0, r9
    ef94:	ebfffacc 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ef98:	e599000c 	ldr	r0, [r9, #12]
    ef9c:	e1a01006 	mov	r1, r6
    efa0:	eb00050c 	bl	103d8 <strcpy>
    efa4:	e599300c 	ldr	r3, [r9, #12]
    efa8:	e154000b 	cmp	r4, fp
    efac:	e0837007 	add	r7, r3, r7
    efb0:	e589700c 	str	r7, [r9, #12]
    efb4:	3a000058 	bcc	f11c <CString::FormatV(char const*, std::__va_list)+0xc9c>
    efb8:	e58d5008 	str	r5, [sp, #8]
    efbc:	eafffdbc 	b	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    efc0:	e59d0004 	ldr	r0, [sp, #4]
    efc4:	eb00045e 	bl	10144 <strlen>
    efc8:	e2505000 	subs	r5, r0, #0
    efcc:	0a000002 	beq	efdc <CString::FormatV(char const*, std::__va_list)+0xb5c>
    efd0:	e1a01005 	mov	r1, r5
    efd4:	e1a00009 	mov	r0, r9
    efd8:	ebfffabb 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    efdc:	e599000c 	ldr	r0, [r9, #12]
    efe0:	e59d1004 	ldr	r1, [sp, #4]
    efe4:	eb0004fb 	bl	103d8 <strcpy>
    efe8:	e599300c 	ldr	r3, [r9, #12]
    efec:	e154000b 	cmp	r4, fp
    eff0:	e0835005 	add	r5, r3, r5
    eff4:	e589500c 	str	r5, [r9, #12]
    eff8:	2afffdad 	bcs	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    effc:	e04b4004 	sub	r4, fp, r4
    f000:	e1a00009 	mov	r0, r9
    f004:	e1a01004 	mov	r1, r4
    f008:	ebfffaaf 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f00c:	e2443001 	sub	r3, r4, #1
    f010:	e3a00020 	mov	r0, #32
    f014:	e599200c 	ldr	r2, [r9, #12]
    f018:	e2433001 	sub	r3, r3, #1
    f01c:	e3730001 	cmn	r3, #1
    f020:	e2821001 	add	r1, r2, #1
    f024:	e589100c 	str	r1, [r9, #12]
    f028:	e5c20000 	strb	r0, [r2]
    f02c:	1afffff8 	bne	f014 <CString::FormatV(char const*, std::__va_list)+0xb94>
    f030:	eafffd9f 	b	e6b4 <CString::FormatV(char const*, std::__va_list)+0x234>
    f034:	e3a01001 	mov	r1, #1
    f038:	e1a00009 	mov	r0, r9
    f03c:	ebfffaa2 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f040:	e599300c 	ldr	r3, [r9, #12]
    f044:	e35b0001 	cmp	fp, #1
    f048:	e2832001 	add	r2, r3, #1
    f04c:	e589200c 	str	r2, [r9, #12]
    f050:	e5c34000 	strb	r4, [r3]
    f054:	9affffd7 	bls	efb8 <CString::FormatV(char const*, std::__va_list)+0xb38>
    f058:	e1a00009 	mov	r0, r9
    f05c:	e24b1001 	sub	r1, fp, #1
    f060:	ebfffa99 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f064:	e24b3002 	sub	r3, fp, #2
    f068:	e3a00020 	mov	r0, #32
    f06c:	e599200c 	ldr	r2, [r9, #12]
    f070:	e2433001 	sub	r3, r3, #1
    f074:	e3730001 	cmn	r3, #1
    f078:	e2821001 	add	r1, r2, #1
    f07c:	e589100c 	str	r1, [r9, #12]
    f080:	e5c20000 	strb	r0, [r2]
    f084:	1afffff8 	bne	f06c <CString::FormatV(char const*, std::__va_list)+0xbec>
    f088:	eaffffca 	b	efb8 <CString::FormatV(char const*, std::__va_list)+0xb38>
    f08c:	e1a0200c 	mov	r2, ip
    f090:	e3a03001 	mov	r3, #1
    f094:	e1a0100c 	mov	r1, ip
    f098:	eafffed2 	b	ebe8 <CString::FormatV(char const*, std::__va_list)+0x768>
    f09c:	e59d4018 	ldr	r4, [sp, #24]
    f0a0:	e3a06001 	mov	r6, #1
    f0a4:	e59d701c 	ldr	r7, [sp, #28]
    f0a8:	eafffdbe 	b	e7a8 <CString::FormatV(char const*, std::__va_list)+0x328>
    f0ac:	e59d3014 	ldr	r3, [sp, #20]
    f0b0:	e3530000 	cmp	r3, #0
    f0b4:	0a000037 	beq	f198 <CString::FormatV(char const*, std::__va_list)+0xd18>
    f0b8:	e154000b 	cmp	r4, fp
    f0bc:	2afffe09 	bcs	e8e8 <CString::FormatV(char const*, std::__va_list)+0x468>
    f0c0:	e04b4004 	sub	r4, fp, r4
    f0c4:	e1a00009 	mov	r0, r9
    f0c8:	e1a01004 	mov	r1, r4
    f0cc:	ebfffa7e 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f0d0:	e2443001 	sub	r3, r4, #1
    f0d4:	e3a00030 	mov	r0, #48	; 0x30
    f0d8:	e599200c 	ldr	r2, [r9, #12]
    f0dc:	e2433001 	sub	r3, r3, #1
    f0e0:	e3730001 	cmn	r3, #1
    f0e4:	e2821001 	add	r1, r2, #1
    f0e8:	e589100c 	str	r1, [r9, #12]
    f0ec:	e5c20000 	strb	r0, [r2]
    f0f0:	1afffff8 	bne	f0d8 <CString::FormatV(char const*, std::__va_list)+0xc58>
    f0f4:	eafffdfb 	b	e8e8 <CString::FormatV(char const*, std::__va_list)+0x468>
    f0f8:	e3a01001 	mov	r1, #1
    f0fc:	e1a00009 	mov	r0, r9
    f100:	ebfffa71 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f104:	e599300c 	ldr	r3, [r9, #12]
    f108:	e3a0202d 	mov	r2, #45	; 0x2d
    f10c:	e2831001 	add	r1, r3, #1
    f110:	e589100c 	str	r1, [r9, #12]
    f114:	e5c32000 	strb	r2, [r3]
    f118:	eaffff7a 	b	ef08 <CString::FormatV(char const*, std::__va_list)+0xa88>
    f11c:	e04b4004 	sub	r4, fp, r4
    f120:	e1a00009 	mov	r0, r9
    f124:	e1a01004 	mov	r1, r4
    f128:	ebfffa67 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f12c:	e2443001 	sub	r3, r4, #1
    f130:	e3a00020 	mov	r0, #32
    f134:	e599200c 	ldr	r2, [r9, #12]
    f138:	e2433001 	sub	r3, r3, #1
    f13c:	e3730001 	cmn	r3, #1
    f140:	e2821001 	add	r1, r2, #1
    f144:	e589100c 	str	r1, [r9, #12]
    f148:	e5c20000 	strb	r0, [r2]
    f14c:	1afffff8 	bne	f134 <CString::FormatV(char const*, std::__va_list)+0xcb4>
    f150:	eaffff98 	b	efb8 <CString::FormatV(char const*, std::__va_list)+0xb38>
    f154:	e3a01001 	mov	r1, #1
    f158:	e1a00009 	mov	r0, r9
    f15c:	ebfffa5a 	bl	dacc <CString::ReserveSpace(unsigned int) [clone .part.0]>
    f160:	e599300c 	ldr	r3, [r9, #12]
    f164:	e3a0202d 	mov	r2, #45	; 0x2d
    f168:	e2831001 	add	r1, r3, #1
    f16c:	e589100c 	str	r1, [r9, #12]
    f170:	e5c32000 	strb	r2, [r3]
    f174:	eaffffcf 	b	f0b8 <CString::FormatV(char const*, std::__va_list)+0xc38>
    f178:	e59d6000 	ldr	r6, [sp]
    f17c:	e3a04001 	mov	r4, #1
    f180:	e59d7018 	ldr	r7, [sp, #24]
    f184:	e3a05000 	mov	r5, #0
    f188:	eafffe10 	b	e9d0 <CString::FormatV(char const*, std::__va_list)+0x550>
    f18c:	e1a03001 	mov	r3, r1
    f190:	e3a02001 	mov	r2, #1
    f194:	eafffee9 	b	ed40 <CString::FormatV(char const*, std::__va_list)+0x8c0>
    f198:	e150000b 	cmp	r0, fp
    f19c:	2afffdd1 	bcs	e8e8 <CString::FormatV(char const*, std::__va_list)+0x468>
    f1a0:	eaffff09 	b	edcc <CString::FormatV(char const*, std::__va_list)+0x94c>

0000f1a4 <CString::Format(char const*, ...)>:
    f1a4:	e92d000e 	push	{r1, r2, r3}
    f1a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f1ac:	e24dd008 	sub	sp, sp, #8
    f1b0:	e28d2010 	add	r2, sp, #16
    f1b4:	e59d100c 	ldr	r1, [sp, #12]
    f1b8:	e58d2004 	str	r2, [sp, #4]
    f1bc:	ebfffcaf 	bl	e480 <CString::FormatV(char const*, std::__va_list)>
    f1c0:	e28dd008 	add	sp, sp, #8
    f1c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    f1c8:	e28dd00c 	add	sp, sp, #12
    f1cc:	e12fff1e 	bx	lr

0000f1d0 <__aeabi_atexit>:
    f1d0:	e12fff1e 	bx	lr

0000f1d4 <__errno>:
    f1d4:	e3070164 	movw	r0, #29028	; 0x7164
    f1d8:	e3400001 	movt	r0, #1
    f1dc:	e12fff1e 	bx	lr

0000f1e0 <set_qemu_exit_status>:
    f1e0:	e12fff1e 	bx	lr

0000f1e4 <halt>:
    f1e4:	f10c0080 	cpsid	i
    f1e8:	f10c0040 	cpsid	f
    f1ec:	f57ff04f 	dsb	sy
    f1f0:	e320f003 	wfi
    f1f4:	eafffffc 	b	f1ec <halt+0x8>

0000f1f8 <reboot>:
    f1f8:	e3a03000 	mov	r3, #0
    f1fc:	e3a01001 	mov	r1, #1
    f200:	e3433f10 	movt	r3, #16144	; 0x3f10
    f204:	e3a02020 	mov	r2, #32
    f208:	e3451a00 	movt	r1, #23040	; 0x5a00
    f20c:	e3452a00 	movt	r2, #23040	; 0x5a00
    f210:	e5831024 	str	r1, [r3, #36]	; 0x24
    f214:	e583201c 	str	r2, [r3, #28]
    f218:	eafffffe 	b	f218 <reboot+0x20>

0000f21c <sysinit>:
    f21c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    f220:	e24ddf4b 	sub	sp, sp, #300	; 0x12c
    f224:	f1080040 	cpsie	f
    f228:	f1080080 	cpsie	i
    f22c:	eb0007e1 	bl	111b8 <InvalidateDataCacheL1Only>
    f230:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    f234:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    f238:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    f23c:	f57ff06f 	isb	sy
    f240:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    f244:	eee83a10 	vmsr	fpexc, r3
    f248:	e3a03403 	mov	r3, #50331648	; 0x3000000
    f24c:	eee13a10 	vmsr	fpscr, r3
    f250:	e30721f0 	movw	r2, #29168	; 0x71f0
    f254:	e3070138 	movw	r0, #28984	; 0x7138
    f258:	e3400001 	movt	r0, #1
    f25c:	e3a01000 	mov	r1, #0
    f260:	e3402001 	movt	r2, #1
    f264:	e30750c0 	movw	r5, #28864	; 0x70c0
    f268:	e0422000 	sub	r2, r2, r0
    f26c:	e30740b4 	movw	r4, #28852	; 0x70b4
    f270:	e3405001 	movt	r5, #1
    f274:	eb0005a6 	bl	10914 <memset>
    f278:	e3404001 	movt	r4, #1
    f27c:	e28d0010 	add	r0, sp, #16
    f280:	ebffed80 	bl	a888 <CMachineInfo::CMachineInfo()>
    f284:	e3a01001 	mov	r1, #1
    f288:	e28d004c 	add	r0, sp, #76	; 0x4c
    f28c:	eb0009c5 	bl	119a8 <CMemorySystem::CMemorySystem(bool)>
    f290:	e1a0000d 	mov	r0, sp
    f294:	ebfffa26 	bl	db34 <CString::CString()>
    f298:	e30514cc 	movw	r1, #21708	; 0x54cc
    f29c:	e3a03001 	mov	r3, #1
    f2a0:	e3401001 	movt	r1, #1
    f2a4:	e3a0202d 	mov	r2, #45	; 0x2d
    f2a8:	e1a0000d 	mov	r0, sp
    f2ac:	ebffffbc 	bl	f1a4 <CString::Format(char const*, ...)>
    f2b0:	e1a0000d 	mov	r0, sp
    f2b4:	ebfffa55 	bl	dc10 <CString::operator char const*() const>
    f2b8:	e1a01000 	mov	r1, r0
    f2bc:	e59f004c 	ldr	r0, [pc, #76]	; f310 <sysinit+0xf4>
    f2c0:	eb000444 	bl	103d8 <strcpy>
    f2c4:	e1540005 	cmp	r4, r5
    f2c8:	2a000003 	bcs	f2dc <sysinit+0xc0>
    f2cc:	e4943004 	ldr	r3, [r4], #4
    f2d0:	e12fff33 	blx	r3
    f2d4:	e1540005 	cmp	r4, r5
    f2d8:	3afffffb 	bcc	f2cc <sysinit+0xb0>
    f2dc:	ebffe363 	bl	8070 <main>
    f2e0:	e3500001 	cmp	r0, #1
    f2e4:	0a000000 	beq	f2ec <sysinit+0xd0>
    f2e8:	ebffffbd 	bl	f1e4 <halt>
    f2ec:	eb000689 	bl	10d18 <IsChainBootEnabled>
    f2f0:	e3500000 	cmp	r0, #0
    f2f4:	1a000000 	bne	f2fc <sysinit+0xe0>
    f2f8:	ebffffbe 	bl	f1f8 <reboot>
    f2fc:	e28d004c 	add	r0, sp, #76	; 0x4c
    f300:	eb00094e 	bl	11840 <CMemorySystem::Destructor()>
    f304:	f10c0040 	cpsid	f
    f308:	eb000688 	bl	10d30 <DoChainBoot>
    f30c:	eafffff9 	b	f2f8 <sysinit+0xdc>
    f310:	00017168 	.word	0x00017168

0000f314 <CTimer::CTimer(CInterruptSystem*)>:
    f314:	e92d4070 	push	{r4, r5, r6, lr}
    f318:	e1a04000 	mov	r4, r0
    f31c:	e3a05000 	mov	r5, #0
    f320:	e3a06001 	mov	r6, #1
    f324:	e5805004 	str	r5, [r0, #4]
    f328:	e2800018 	add	r0, r0, #24
    f32c:	e5005010 	str	r5, [r0, #-16]
    f330:	e5841000 	str	r1, [r4]
    f334:	e584500c 	str	r5, [r4, #12]
    f338:	e5846010 	str	r6, [r4, #16]
    f33c:	e5845014 	str	r5, [r4, #20]
    f340:	eb00126b 	bl	13cf4 <CPtrList::CPtrList()>
    f344:	e584601c 	str	r6, [r4, #28]
    f348:	e3073178 	movw	r3, #29048	; 0x7178
    f34c:	e3403001 	movt	r3, #1
    f350:	e3a02d35 	mov	r2, #3392	; 0xd40
    f354:	e3402003 	movt	r2, #3
    f358:	e3a000c8 	mov	r0, #200	; 0xc8
    f35c:	e5931000 	ldr	r1, [r3]
    f360:	e5840024 	str	r0, [r4, #36]	; 0x24
    f364:	e1510005 	cmp	r1, r5
    f368:	e5842020 	str	r2, [r4, #32]
    f36c:	e5845028 	str	r5, [r4, #40]	; 0x28
    f370:	e584503c 	str	r5, [r4, #60]	; 0x3c
    f374:	1a000002 	bne	f384 <CTimer::CTimer(CInterruptSystem*)+0x70>
    f378:	e5834000 	str	r4, [r3]
    f37c:	e1a00004 	mov	r0, r4
    f380:	e8bd8070 	pop	{r4, r5, r6, pc}
    f384:	e30514d4 	movw	r1, #21716	; 0x54d4
    f388:	e30504e0 	movw	r0, #21728	; 0x54e0
    f38c:	e3401001 	movt	r1, #1
    f390:	e3a02040 	mov	r2, #64	; 0x40
    f394:	e3400001 	movt	r0, #1
    f398:	eb000bfb 	bl	1238c <assertion_failed>

0000f39c <CTimer::~CTimer()>:
    f39c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f3a0:	e1a08000 	mov	r8, r0
    f3a4:	e5900000 	ldr	r0, [r0]
    f3a8:	e3500000 	cmp	r0, #0
    f3ac:	0a00002f 	beq	f470 <CTimer::~CTimer()+0xd4>
    f3b0:	e3a03000 	mov	r3, #0
    f3b4:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    f3b8:	e3a01049 	mov	r1, #73	; 0x49
    f3bc:	e2886018 	add	r6, r8, #24
    f3c0:	e3047d43 	movw	r7, #19779	; 0x4d43
    f3c4:	eb000aaa 	bl	11e74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    f3c8:	e3447b54 	movt	r7, #19284	; 0x4b54
    f3cc:	e1a00006 	mov	r0, r6
    f3d0:	eb001254 	bl	13d28 <CPtrList::GetFirst()>
    f3d4:	e2504000 	subs	r4, r0, #0
    f3d8:	0a000011 	beq	f424 <CTimer::~CTimer()+0x88>
    f3dc:	e1a01004 	mov	r1, r4
    f3e0:	e1a00006 	mov	r0, r6
    f3e4:	eb001267 	bl	13d88 <CPtrList::GetPtr(TPtrListElement*)>
    f3e8:	e2505000 	subs	r5, r0, #0
    f3ec:	0a000013 	beq	f440 <CTimer::~CTimer()+0xa4>
    f3f0:	e5953000 	ldr	r3, [r5]
    f3f4:	e1530007 	cmp	r3, r7
    f3f8:	1a000016 	bne	f458 <CTimer::~CTimer()+0xbc>
    f3fc:	e1a01004 	mov	r1, r4
    f400:	e1a00006 	mov	r0, r6
    f404:	eb0012ed 	bl	13fc0 <CPtrList::Remove(TPtrListElement*)>
    f408:	e3a01014 	mov	r1, #20
    f40c:	e1a00005 	mov	r0, r5
    f410:	eb00067b 	bl	10e04 <operator delete(void*, unsigned int)>
    f414:	e1a00006 	mov	r0, r6
    f418:	eb001242 	bl	13d28 <CPtrList::GetFirst()>
    f41c:	e2504000 	subs	r4, r0, #0
    f420:	1affffed 	bne	f3dc <CTimer::~CTimer()+0x40>
    f424:	e3073178 	movw	r3, #29048	; 0x7178
    f428:	e1a00006 	mov	r0, r6
    f42c:	e3403001 	movt	r3, #1
    f430:	e5834000 	str	r4, [r3]
    f434:	eb001231 	bl	13d00 <CPtrList::~CPtrList()>
    f438:	e1a00008 	mov	r0, r8
    f43c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f440:	e30514d4 	movw	r1, #21716	; 0x54d4
    f444:	e3050508 	movw	r0, #21768	; 0x5508
    f448:	e3401001 	movt	r1, #1
    f44c:	e3a02057 	mov	r2, #87	; 0x57
    f450:	e3400001 	movt	r0, #1
    f454:	eb000bcc 	bl	1238c <assertion_failed>
    f458:	e30514d4 	movw	r1, #21716	; 0x54d4
    f45c:	e3050514 	movw	r0, #21780	; 0x5514
    f460:	e3401001 	movt	r1, #1
    f464:	e3a02058 	mov	r2, #88	; 0x58
    f468:	e3400001 	movt	r0, #1
    f46c:	eb000bc6 	bl	1238c <assertion_failed>
    f470:	e30514d4 	movw	r1, #21716	; 0x54d4
    f474:	e30504f0 	movw	r0, #21744	; 0x54f0
    f478:	e3401001 	movt	r1, #1
    f47c:	e3a02046 	mov	r2, #70	; 0x46
    f480:	e3400001 	movt	r0, #1
    f484:	eb000bc0 	bl	1238c <assertion_failed>

0000f488 <CTimer::SetTimeZone(int)>:
    f488:	e2813e59 	add	r3, r1, #1424	; 0x590
    f48c:	e3002b3e 	movw	r2, #2878	; 0xb3e
    f490:	e283300f 	add	r3, r3, #15
    f494:	e1530002 	cmp	r3, r2
    f498:	95801014 	strls	r1, [r0, #20]
    f49c:	93a00001 	movls	r0, #1
    f4a0:	83a00000 	movhi	r0, #0
    f4a4:	e12fff1e 	bx	lr

0000f4a8 <CTimer::GetTimeZone() const>:
    f4a8:	e5900014 	ldr	r0, [r0, #20]
    f4ac:	e12fff1e 	bx	lr

0000f4b0 <CTimer::SetTime(unsigned int, bool)>:
    f4b0:	e5903014 	ldr	r3, [r0, #20]
    f4b4:	e3520000 	cmp	r2, #0
    f4b8:	e3a0203c 	mov	r2, #60	; 0x3c
    f4bc:	e92d4070 	push	{r4, r5, r6, lr}
    f4c0:	e1a04000 	mov	r4, r0
    f4c4:	e1a05001 	mov	r5, r1
    f4c8:	e0030392 	mul	r3, r2, r3
    f4cc:	1a000002 	bne	f4dc <CTimer::SetTime(unsigned int, bool)+0x2c>
    f4d0:	e3530000 	cmp	r3, #0
    f4d4:	ba000019 	blt	f540 <CTimer::SetTime(unsigned int, bool)+0x90>
    f4d8:	e0855003 	add	r5, r5, r3
    f4dc:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    f4e0:	e3520000 	cmp	r2, #0
    f4e4:	0a000007 	beq	f508 <CTimer::SetTime(unsigned int, bool)+0x58>
    f4e8:	e594100c 	ldr	r1, [r4, #12]
    f4ec:	e0450003 	sub	r0, r5, r3
    f4f0:	e1530001 	cmp	r3, r1
    f4f4:	d0411003 	suble	r1, r1, r3
    f4f8:	c3a01000 	movgt	r1, #0
    f4fc:	e12fff32 	blx	r2
    f500:	e3500000 	cmp	r0, #0
    f504:	0a000010 	beq	f54c <CTimer::SetTime(unsigned int, bool)+0x9c>
    f508:	e5940010 	ldr	r0, [r4, #16]
    f50c:	e3500000 	cmp	r0, #0
    f510:	0584500c 	streq	r5, [r4, #12]
    f514:	1a000001 	bne	f520 <CTimer::SetTime(unsigned int, bool)+0x70>
    f518:	e3a00001 	mov	r0, #1
    f51c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f520:	eb0009a1 	bl	11bac <EnterCritical>
    f524:	e5943010 	ldr	r3, [r4, #16]
    f528:	e584500c 	str	r5, [r4, #12]
    f52c:	e3530000 	cmp	r3, #0
    f530:	0afffff8 	beq	f518 <CTimer::SetTime(unsigned int, bool)+0x68>
    f534:	eb0009c7 	bl	11c58 <LeaveCritical>
    f538:	e3a00001 	mov	r0, #1
    f53c:	e8bd8070 	pop	{r4, r5, r6, pc}
    f540:	e2632000 	rsb	r2, r3, #0
    f544:	e1520001 	cmp	r2, r1
    f548:	daffffe2 	ble	f4d8 <CTimer::SetTime(unsigned int, bool)+0x28>
    f54c:	e3a00000 	mov	r0, #0
    f550:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f554 <CTimer::GetClockTicks()>:
    f554:	f57ff06f 	isb	sy
    f558:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
    f55c:	e12fff1e 	bx	lr

0000f560 <CTimer::GetTicks() const>:
    f560:	e5900004 	ldr	r0, [r0, #4]
    f564:	e12fff1e 	bx	lr

0000f568 <CTimer::GetUptime() const>:
    f568:	e5900008 	ldr	r0, [r0, #8]
    f56c:	e12fff1e 	bx	lr

0000f570 <CTimer::GetTime() const>:
    f570:	e590000c 	ldr	r0, [r0, #12]
    f574:	e12fff1e 	bx	lr

0000f578 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    f578:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f57c:	e1a04000 	mov	r4, r0
    f580:	e5900010 	ldr	r0, [r0, #16]
    f584:	e1a06001 	mov	r6, r1
    f588:	e1a07002 	mov	r7, r2
    f58c:	e3500000 	cmp	r0, #0
    f590:	1a000011 	bne	f5dc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
    f594:	e594800c 	ldr	r8, [r4, #12]
    f598:	e5945004 	ldr	r5, [r4, #4]
    f59c:	e3560000 	cmp	r6, #0
    f5a0:	0a000016 	beq	f600 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
    f5a4:	e5868000 	str	r8, [r6]
    f5a8:	e3570000 	cmp	r7, #0
    f5ac:	0a000019 	beq	f618 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
    f5b0:	e308351f 	movw	r3, #34079	; 0x851f
    f5b4:	e3a01064 	mov	r1, #100	; 0x64
    f5b8:	e34531eb 	movt	r3, #20971	; 0x51eb
    f5bc:	e3022710 	movw	r2, #10000	; 0x2710
    f5c0:	e0830593 	umull	r0, r3, r3, r5
    f5c4:	e3a00001 	mov	r0, #1
    f5c8:	e1a032a3 	lsr	r3, r3, #5
    f5cc:	e0655391 	mls	r5, r1, r3, r5
    f5d0:	e0050592 	mul	r5, r2, r5
    f5d4:	e5875000 	str	r5, [r7]
    f5d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f5dc:	eb000972 	bl	11bac <EnterCritical>
    f5e0:	e5943010 	ldr	r3, [r4, #16]
    f5e4:	e594800c 	ldr	r8, [r4, #12]
    f5e8:	e5945004 	ldr	r5, [r4, #4]
    f5ec:	e3530000 	cmp	r3, #0
    f5f0:	0affffe9 	beq	f59c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
    f5f4:	eb000997 	bl	11c58 <LeaveCritical>
    f5f8:	e3560000 	cmp	r6, #0
    f5fc:	1affffe8 	bne	f5a4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
    f600:	e30514d4 	movw	r1, #21716	; 0x54d4
    f604:	e305053c 	movw	r0, #21820	; 0x553c
    f608:	e3401001 	movt	r1, #1
    f60c:	e300210a 	movw	r2, #266	; 0x10a
    f610:	e3400001 	movt	r0, #1
    f614:	eb000b5c 	bl	1238c <assertion_failed>
    f618:	e30514d4 	movw	r1, #21716	; 0x54d4
    f61c:	e305054c 	movw	r0, #21836	; 0x554c
    f620:	e3401001 	movt	r1, #1
    f624:	e300210d 	movw	r2, #269	; 0x10d
    f628:	e3400001 	movt	r0, #1
    f62c:	eb000b56 	bl	1238c <assertion_failed>

0000f630 <CTimer::GetUniversalTime() const>:
    f630:	e5903014 	ldr	r3, [r0, #20]
    f634:	e3a0203c 	mov	r2, #60	; 0x3c
    f638:	e590000c 	ldr	r0, [r0, #12]
    f63c:	e0030392 	mul	r3, r2, r3
    f640:	e1500003 	cmp	r0, r3
    f644:	a0400003 	subge	r0, r0, r3
    f648:	b3a00000 	movlt	r0, #0
    f64c:	e12fff1e 	bx	lr

0000f650 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    f650:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    f654:	e1a04000 	mov	r4, r0
    f658:	e5900010 	ldr	r0, [r0, #16]
    f65c:	e1a05001 	mov	r5, r1
    f660:	e1a06002 	mov	r6, r2
    f664:	e3500000 	cmp	r0, #0
    f668:	1a000019 	bne	f6d4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    f66c:	e594700c 	ldr	r7, [r4, #12]
    f670:	e5948004 	ldr	r8, [r4, #4]
    f674:	e5940014 	ldr	r0, [r4, #20]
    f678:	e3a0203c 	mov	r2, #60	; 0x3c
    f67c:	e0000092 	mul	r0, r2, r0
    f680:	e1570000 	cmp	r7, r0
    f684:	ba000010 	blt	f6cc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
    f688:	e3550000 	cmp	r5, #0
    f68c:	0a000018 	beq	f6f4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
    f690:	e0470000 	sub	r0, r7, r0
    f694:	e3560000 	cmp	r6, #0
    f698:	e5850000 	str	r0, [r5]
    f69c:	0a00001a 	beq	f70c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
    f6a0:	e308351f 	movw	r3, #34079	; 0x851f
    f6a4:	e3a01064 	mov	r1, #100	; 0x64
    f6a8:	e34531eb 	movt	r3, #20971	; 0x51eb
    f6ac:	e3022710 	movw	r2, #10000	; 0x2710
    f6b0:	e0830893 	umull	r0, r3, r3, r8
    f6b4:	e3a00001 	mov	r0, #1
    f6b8:	e1a032a3 	lsr	r3, r3, #5
    f6bc:	e0638391 	mls	r3, r1, r3, r8
    f6c0:	e0030392 	mul	r3, r2, r3
    f6c4:	e5863000 	str	r3, [r6]
    f6c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f6cc:	e3a00000 	mov	r0, #0
    f6d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    f6d4:	eb000934 	bl	11bac <EnterCritical>
    f6d8:	e5943010 	ldr	r3, [r4, #16]
    f6dc:	e594700c 	ldr	r7, [r4, #12]
    f6e0:	e5948004 	ldr	r8, [r4, #4]
    f6e4:	e3530000 	cmp	r3, #0
    f6e8:	0affffe1 	beq	f674 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f6ec:	eb000959 	bl	11c58 <LeaveCritical>
    f6f0:	eaffffdf 	b	f674 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
    f6f4:	e30514d4 	movw	r1, #21716	; 0x54d4
    f6f8:	e305053c 	movw	r0, #21820	; 0x553c
    f6fc:	e3401001 	movt	r1, #1
    f700:	e300212f 	movw	r2, #303	; 0x12f
    f704:	e3400001 	movt	r0, #1
    f708:	eb000b1f 	bl	1238c <assertion_failed>
    f70c:	e30514d4 	movw	r1, #21716	; 0x54d4
    f710:	e305054c 	movw	r0, #21836	; 0x554c
    f714:	e3401001 	movt	r1, #1
    f718:	e3002132 	movw	r2, #306	; 0x132
    f71c:	e3400001 	movt	r0, #1
    f720:	eb000b19 	bl	1238c <assertion_failed>

0000f724 <CTimer::GetTimeString()>:
    f724:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f728:	e1a04000 	mov	r4, r0
    f72c:	e5900010 	ldr	r0, [r0, #16]
    f730:	e24dd014 	sub	sp, sp, #20
    f734:	e3500000 	cmp	r0, #0
    f738:	1a000067 	bne	f8dc <CTimer::GetTimeString()+0x1b8>
    f73c:	e594500c 	ldr	r5, [r4, #12]
    f740:	e594a004 	ldr	sl, [r4, #4]
    f744:	e195000a 	orrs	r0, r5, sl
    f748:	01a0a000 	moveq	sl, r0
    f74c:	0a000054 	beq	f8a4 <CTimer::GetTimeString()+0x180>
    f750:	e3089889 	movw	r9, #34953	; 0x8889
    f754:	e30a4aab 	movw	r4, #43691	; 0xaaab
    f758:	e3489888 	movt	r9, #34952	; 0x8888
    f75c:	e305cc29 	movw	ip, #23593	; 0x5c29
    f760:	e0832599 	umull	r2, r3, r9, r5
    f764:	e34a4aaa 	movt	r4, #43690	; 0xaaaa
    f768:	e30067b2 	movw	r6, #1970	; 0x7b2
    f76c:	e1a072a3 	lsr	r7, r3, #5
    f770:	e300e16d 	movw	lr, #365	; 0x16d
    f774:	e0892799 	umull	r2, r9, r9, r7
    f778:	e34cc28f 	movt	ip, #49807	; 0xc28f
    f77c:	e3a0203c 	mov	r2, #60	; 0x3c
    f780:	e1a082a9 	lsr	r8, r9, #5
    f784:	e1a03007 	mov	r3, r7
    f788:	e0841894 	umull	r1, r4, r4, r8
    f78c:	e0675792 	mls	r7, r2, r7, r5
    f790:	e0693892 	mls	r9, r2, r8, r3
    f794:	e30d570a 	movw	r5, #55050	; 0xd70a
    f798:	e3052c28 	movw	r2, #23592	; 0x5c28
    f79c:	e1a04224 	lsr	r4, r4, #4
    f7a0:	e340228f 	movt	r2, #655	; 0x28f
    f7a4:	e34050a3 	movt	r5, #163	; 0xa3
    f7a8:	ea000007 	b	f7cc <CTimer::GetTimeString()+0xa8>
    f7ac:	e3160003 	tst	r6, #3
    f7b0:	03a01001 	moveq	r1, #1
    f7b4:	13a01000 	movne	r1, #0
    f7b8:	e081000e 	add	r0, r1, lr
    f7bc:	e1540000 	cmp	r4, r0
    f7c0:	3a00000a 	bcc	f7f0 <CTimer::GetTimeString()+0xcc>
    f7c4:	e0444000 	sub	r4, r4, r0
    f7c8:	e2866001 	add	r6, r6, #1
    f7cc:	e003069c 	mul	r3, ip, r6
    f7d0:	e1520163 	cmp	r2, r3, ror #2
    f7d4:	3afffff4 	bcc	f7ac <CTimer::GetTimeString()+0x88>
    f7d8:	e1550263 	cmp	r5, r3, ror #4
    f7dc:	23a01001 	movcs	r1, #1
    f7e0:	33a01000 	movcc	r1, #0
    f7e4:	e081000e 	add	r0, r1, lr
    f7e8:	e1540000 	cmp	r4, r0
    f7ec:	2afffff4 	bcs	f7c4 <CTimer::GetTimeString()+0xa0>
    f7f0:	e30526d4 	movw	r2, #22228	; 0x56d4
    f7f4:	e3a05000 	mov	r5, #0
    f7f8:	e3402001 	movt	r2, #1
    f7fc:	ea000001 	b	f808 <CTimer::GetTimeString()+0xe4>
    f800:	e0444000 	sub	r4, r4, r0
    f804:	e2855001 	add	r5, r5, #1
    f808:	e3550001 	cmp	r5, #1
    f80c:	13a03000 	movne	r3, #0
    f810:	02013001 	andeq	r3, r1, #1
    f814:	e3530000 	cmp	r3, #0
    f818:	13a0001d 	movne	r0, #29
    f81c:	07920105 	ldreq	r0, [r2, r5, lsl #2]
    f820:	e1540000 	cmp	r4, r0
    f824:	2afffff5 	bcs	f800 <CTimer::GetTimeString()+0xdc>
    f828:	e308b51f 	movw	fp, #34079	; 0x851f
    f82c:	e3a00010 	mov	r0, #16
    f830:	e345b1eb 	movt	fp, #20971	; 0x51eb
    f834:	e08b3a9b 	umull	r3, fp, fp, sl
    f838:	e3a03064 	mov	r3, #100	; 0x64
    f83c:	e1a0b2ab 	lsr	fp, fp, #5
    f840:	e06bab93 	mls	fp, r3, fp, sl
    f844:	eb000556 	bl	10da4 <operator new(unsigned int)>
    f848:	e1a0a000 	mov	sl, r0
    f84c:	ebfff8b8 	bl	db34 <CString::CString()>
    f850:	e30037b7 	movw	r3, #1975	; 0x7b7
    f854:	e1560003 	cmp	r6, r3
    f858:	9a000014 	bls	f8b0 <CTimer::GetTimeString()+0x18c>
    f85c:	e58db00c 	str	fp, [sp, #12]
    f860:	e30a2aab 	movw	r2, #43691	; 0xaaab
    f864:	e34a2aaa 	movt	r2, #43690	; 0xaaaa
    f868:	e2843001 	add	r3, r4, #1
    f86c:	e0821892 	umull	r1, r2, r2, r8
    f870:	e58d7008 	str	r7, [sp, #8]
    f874:	e3a01018 	mov	r1, #24
    f878:	e1a02222 	lsr	r2, r2, #4
    f87c:	e1a0000a 	mov	r0, sl
    f880:	e0688291 	mls	r8, r1, r2, r8
    f884:	e58d9004 	str	r9, [sp, #4]
    f888:	e30720c8 	movw	r2, #28872	; 0x70c8
    f88c:	e3402001 	movt	r2, #1
    f890:	e3051560 	movw	r1, #21856	; 0x5560
    f894:	e58d8000 	str	r8, [sp]
    f898:	e3401001 	movt	r1, #1
    f89c:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    f8a0:	ebfffe3f 	bl	f1a4 <CString::Format(char const*, ...)>
    f8a4:	e1a0000a 	mov	r0, sl
    f8a8:	e28dd014 	add	sp, sp, #20
    f8ac:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8b0:	e58db004 	str	fp, [sp, #4]
    f8b4:	e305157c 	movw	r1, #21884	; 0x557c
    f8b8:	e3401001 	movt	r1, #1
    f8bc:	e1a0000a 	mov	r0, sl
    f8c0:	e58d7000 	str	r7, [sp]
    f8c4:	e1a03009 	mov	r3, r9
    f8c8:	e1a02008 	mov	r2, r8
    f8cc:	ebfffe34 	bl	f1a4 <CString::Format(char const*, ...)>
    f8d0:	e1a0000a 	mov	r0, sl
    f8d4:	e28dd014 	add	sp, sp, #20
    f8d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f8dc:	eb0008b2 	bl	11bac <EnterCritical>
    f8e0:	e5943010 	ldr	r3, [r4, #16]
    f8e4:	e594500c 	ldr	r5, [r4, #12]
    f8e8:	e594a004 	ldr	sl, [r4, #4]
    f8ec:	e3530000 	cmp	r3, #0
    f8f0:	0affff93 	beq	f744 <CTimer::GetTimeString()+0x20>
    f8f4:	eb0008d7 	bl	11c58 <LeaveCritical>
    f8f8:	eaffff91 	b	f744 <CTimer::GetTimeString()+0x20>

0000f8fc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    f8fc:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    f900:	e1a07000 	mov	r7, r0
    f904:	e1a04002 	mov	r4, r2
    f908:	e3a00014 	mov	r0, #20
    f90c:	e1a06001 	mov	r6, r1
    f910:	e1a08003 	mov	r8, r3
    f914:	eb000522 	bl	10da4 <operator new(unsigned int)>
    f918:	e5971004 	ldr	r1, [r7, #4]
    f91c:	e3540000 	cmp	r4, #0
    f920:	e0816006 	add	r6, r1, r6
    f924:	0a00003c 	beq	fa1c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
    f928:	e5804004 	str	r4, [r0, #4]
    f92c:	e1a05000 	mov	r5, r0
    f930:	e59d3020 	ldr	r3, [sp, #32]
    f934:	e597001c 	ldr	r0, [r7, #28]
    f938:	e5853010 	str	r3, [r5, #16]
    f93c:	e3043d43 	movw	r3, #19779	; 0x4d43
    f940:	e3443b54 	movt	r3, #19284	; 0x4b54
    f944:	e3500000 	cmp	r0, #0
    f948:	e5856008 	str	r6, [r5, #8]
    f94c:	e585800c 	str	r8, [r5, #12]
    f950:	e5853000 	str	r3, [r5]
    f954:	1a000025 	bne	f9f0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
    f958:	e2874018 	add	r4, r7, #24
    f95c:	e1a00004 	mov	r0, r4
    f960:	eb0010f0 	bl	13d28 <CPtrList::GetFirst()>
    f964:	e2509000 	subs	r9, r0, #0
    f968:	0a000033 	beq	fa3c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    f96c:	e3048d43 	movw	r8, #19779	; 0x4d43
    f970:	e3448b54 	movt	r8, #19284	; 0x4b54
    f974:	e1a01009 	mov	r1, r9
    f978:	e1a00004 	mov	r0, r4
    f97c:	eb001101 	bl	13d88 <CPtrList::GetPtr(TPtrListElement*)>
    f980:	e3500000 	cmp	r0, #0
    f984:	0a00000d 	beq	f9c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
    f988:	e5903000 	ldr	r3, [r0]
    f98c:	e1530008 	cmp	r3, r8
    f990:	1a000010 	bne	f9d8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
    f994:	e5903008 	ldr	r3, [r0, #8]
    f998:	e0433006 	sub	r3, r3, r6
    f99c:	e3530000 	cmp	r3, #0
    f9a0:	ca000014 	bgt	f9f8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
    f9a4:	e1a01009 	mov	r1, r9
    f9a8:	e1a00004 	mov	r0, r4
    f9ac:	eb0010df 	bl	13d30 <CPtrList::GetNext(TPtrListElement*)>
    f9b0:	e3500000 	cmp	r0, #0
    f9b4:	0a000020 	beq	fa3c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
    f9b8:	e1a09000 	mov	r9, r0
    f9bc:	eaffffec 	b	f974 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
    f9c0:	e30514d4 	movw	r1, #21716	; 0x54d4
    f9c4:	e3050590 	movw	r0, #21904	; 0x5590
    f9c8:	e3401001 	movt	r1, #1
    f9cc:	e3002199 	movw	r2, #409	; 0x199
    f9d0:	e3400001 	movt	r0, #1
    f9d4:	eb000a6c 	bl	1238c <assertion_failed>
    f9d8:	e30514d4 	movw	r1, #21716	; 0x54d4
    f9dc:	e30505a0 	movw	r0, #21920	; 0x55a0
    f9e0:	e3401001 	movt	r1, #1
    f9e4:	e300219a 	movw	r2, #410	; 0x19a
    f9e8:	e3400001 	movt	r0, #1
    f9ec:	eb000a66 	bl	1238c <assertion_failed>
    f9f0:	eb00086d 	bl	11bac <EnterCritical>
    f9f4:	eaffffd7 	b	f958 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
    f9f8:	e1a02005 	mov	r2, r5
    f9fc:	e1a01009 	mov	r1, r9
    fa00:	e1a00004 	mov	r0, r4
    fa04:	eb0010f5 	bl	13de0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
    fa08:	e597301c 	ldr	r3, [r7, #28]
    fa0c:	e3530000 	cmp	r3, #0
    fa10:	1a000007 	bne	fa34 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
    fa14:	e1a00005 	mov	r0, r5
    fa18:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    fa1c:	e30514d4 	movw	r1, #21716	; 0x54d4
    fa20:	e3050a7c 	movw	r0, #23164	; 0x5a7c
    fa24:	e3401001 	movt	r1, #1
    fa28:	e3002189 	movw	r2, #393	; 0x189
    fa2c:	e3400001 	movt	r0, #1
    fa30:	eb000a55 	bl	1238c <assertion_failed>
    fa34:	eb000887 	bl	11c58 <LeaveCritical>
    fa38:	eafffff5 	b	fa14 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
    fa3c:	e1a02005 	mov	r2, r5
    fa40:	e1a01009 	mov	r1, r9
    fa44:	e1a00004 	mov	r0, r4
    fa48:	eb001120 	bl	13ed0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
    fa4c:	eaffffed 	b	fa08 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>

0000fa50 <CTimer::CancelKernelTimer(unsigned int)>:
    fa50:	e92d4070 	push	{r4, r5, r6, lr}
    fa54:	e2514000 	subs	r4, r1, #0
    fa58:	0a00001a 	beq	fac8 <CTimer::CancelKernelTimer(unsigned int)+0x78>
    fa5c:	e1a05000 	mov	r5, r0
    fa60:	e590001c 	ldr	r0, [r0, #28]
    fa64:	e3500000 	cmp	r0, #0
    fa68:	1a000014 	bne	fac0 <CTimer::CancelKernelTimer(unsigned int)+0x70>
    fa6c:	e2856018 	add	r6, r5, #24
    fa70:	e1a01004 	mov	r1, r4
    fa74:	e1a00006 	mov	r0, r6
    fa78:	eb00119a 	bl	140e8 <CPtrList::Find(void*)>
    fa7c:	e2501000 	subs	r1, r0, #0
    fa80:	0a000009 	beq	faac <CTimer::CancelKernelTimer(unsigned int)+0x5c>
    fa84:	e5942000 	ldr	r2, [r4]
    fa88:	e3043d43 	movw	r3, #19779	; 0x4d43
    fa8c:	e3443b54 	movt	r3, #19284	; 0x4b54
    fa90:	e1520003 	cmp	r2, r3
    fa94:	1a000011 	bne	fae0 <CTimer::CancelKernelTimer(unsigned int)+0x90>
    fa98:	e1a00006 	mov	r0, r6
    fa9c:	eb001147 	bl	13fc0 <CPtrList::Remove(TPtrListElement*)>
    faa0:	e3a01014 	mov	r1, #20
    faa4:	e1a00004 	mov	r0, r4
    faa8:	eb0004d5 	bl	10e04 <operator delete(void*, unsigned int)>
    faac:	e595301c 	ldr	r3, [r5, #28]
    fab0:	e3530000 	cmp	r3, #0
    fab4:	08bd8070 	popeq	{r4, r5, r6, pc}
    fab8:	e8bd4070 	pop	{r4, r5, r6, lr}
    fabc:	ea000865 	b	11c58 <LeaveCritical>
    fac0:	eb000839 	bl	11bac <EnterCritical>
    fac4:	eaffffe8 	b	fa6c <CTimer::CancelKernelTimer(unsigned int)+0x1c>
    fac8:	e30514d4 	movw	r1, #21716	; 0x54d4
    facc:	e3050508 	movw	r0, #21768	; 0x5508
    fad0:	e3401001 	movt	r1, #1
    fad4:	e30021b6 	movw	r2, #438	; 0x1b6
    fad8:	e3400001 	movt	r0, #1
    fadc:	eb000a2a 	bl	1238c <assertion_failed>
    fae0:	e30514d4 	movw	r1, #21716	; 0x54d4
    fae4:	e3050514 	movw	r0, #21780	; 0x5514
    fae8:	e3401001 	movt	r1, #1
    faec:	e30021bd 	movw	r2, #445	; 0x1bd
    faf0:	e3400001 	movt	r0, #1
    faf4:	eb000a24 	bl	1238c <assertion_failed>

0000faf8 <CTimer::PollKernelTimers()>:
    faf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    fafc:	e1a06000 	mov	r6, r0
    fb00:	e590001c 	ldr	r0, [r0, #28]
    fb04:	e3500000 	cmp	r0, #0
    fb08:	1a00003e 	bne	fc08 <CTimer::PollKernelTimers()+0x110>
    fb0c:	e2867018 	add	r7, r6, #24
    fb10:	e1a00007 	mov	r0, r7
    fb14:	eb001083 	bl	13d28 <CPtrList::GetFirst()>
    fb18:	e2505000 	subs	r5, r0, #0
    fb1c:	0a000028 	beq	fbc4 <CTimer::PollKernelTimers()+0xcc>
    fb20:	e3048d43 	movw	r8, #19779	; 0x4d43
    fb24:	e3448b54 	movt	r8, #19284	; 0x4b54
    fb28:	e1a01005 	mov	r1, r5
    fb2c:	e1a00007 	mov	r0, r7
    fb30:	eb001094 	bl	13d88 <CPtrList::GetPtr(TPtrListElement*)>
    fb34:	e2504000 	subs	r4, r0, #0
    fb38:	0a000034 	beq	fc10 <CTimer::PollKernelTimers()+0x118>
    fb3c:	e5943000 	ldr	r3, [r4]
    fb40:	e1530008 	cmp	r3, r8
    fb44:	1a000037 	bne	fc28 <CTimer::PollKernelTimers()+0x130>
    fb48:	e5962004 	ldr	r2, [r6, #4]
    fb4c:	e5943008 	ldr	r3, [r4, #8]
    fb50:	e0433002 	sub	r3, r3, r2
    fb54:	e3530000 	cmp	r3, #0
    fb58:	ca000019 	bgt	fbc4 <CTimer::PollKernelTimers()+0xcc>
    fb5c:	e1a01005 	mov	r1, r5
    fb60:	e1a00007 	mov	r0, r7
    fb64:	eb001071 	bl	13d30 <CPtrList::GetNext(TPtrListElement*)>
    fb68:	e1a03000 	mov	r3, r0
    fb6c:	e1a01005 	mov	r1, r5
    fb70:	e1a00007 	mov	r0, r7
    fb74:	e1a05003 	mov	r5, r3
    fb78:	eb001110 	bl	13fc0 <CPtrList::Remove(TPtrListElement*)>
    fb7c:	e596301c 	ldr	r3, [r6, #28]
    fb80:	e3530000 	cmp	r3, #0
    fb84:	1a000013 	bne	fbd8 <CTimer::PollKernelTimers()+0xe0>
    fb88:	e5943004 	ldr	r3, [r4, #4]
    fb8c:	e3530000 	cmp	r3, #0
    fb90:	0a000014 	beq	fbe8 <CTimer::PollKernelTimers()+0xf0>
    fb94:	e5942010 	ldr	r2, [r4, #16]
    fb98:	e1a00004 	mov	r0, r4
    fb9c:	e594100c 	ldr	r1, [r4, #12]
    fba0:	e12fff33 	blx	r3
    fba4:	e1a00004 	mov	r0, r4
    fba8:	e3a01014 	mov	r1, #20
    fbac:	eb000494 	bl	10e04 <operator delete(void*, unsigned int)>
    fbb0:	e596001c 	ldr	r0, [r6, #28]
    fbb4:	e3500000 	cmp	r0, #0
    fbb8:	1a000010 	bne	fc00 <CTimer::PollKernelTimers()+0x108>
    fbbc:	e3550000 	cmp	r5, #0
    fbc0:	1affffd8 	bne	fb28 <CTimer::PollKernelTimers()+0x30>
    fbc4:	e596301c 	ldr	r3, [r6, #28]
    fbc8:	e3530000 	cmp	r3, #0
    fbcc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    fbd0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    fbd4:	ea00081f 	b	11c58 <LeaveCritical>
    fbd8:	eb00081e 	bl	11c58 <LeaveCritical>
    fbdc:	e5943004 	ldr	r3, [r4, #4]
    fbe0:	e3530000 	cmp	r3, #0
    fbe4:	1affffea 	bne	fb94 <CTimer::PollKernelTimers()+0x9c>
    fbe8:	e30514d4 	movw	r1, #21716	; 0x54d4
    fbec:	e3050a7c 	movw	r0, #23164	; 0x5a7c
    fbf0:	e3401001 	movt	r1, #1
    fbf4:	e30021e1 	movw	r2, #481	; 0x1e1
    fbf8:	e3400001 	movt	r0, #1
    fbfc:	eb0009e2 	bl	1238c <assertion_failed>
    fc00:	eb0007e9 	bl	11bac <EnterCritical>
    fc04:	eaffffec 	b	fbbc <CTimer::PollKernelTimers()+0xc4>
    fc08:	eb0007e7 	bl	11bac <EnterCritical>
    fc0c:	eaffffbe 	b	fb0c <CTimer::PollKernelTimers()+0x14>
    fc10:	e30514d4 	movw	r1, #21716	; 0x54d4
    fc14:	e3050508 	movw	r0, #21768	; 0x5508
    fc18:	e3401001 	movt	r1, #1
    fc1c:	e30021d2 	movw	r2, #466	; 0x1d2
    fc20:	e3400001 	movt	r0, #1
    fc24:	eb0009d8 	bl	1238c <assertion_failed>
    fc28:	e30514d4 	movw	r1, #21716	; 0x54d4
    fc2c:	e3050514 	movw	r0, #21780	; 0x5514
    fc30:	e3401001 	movt	r1, #1
    fc34:	e30021d3 	movw	r2, #467	; 0x1d3
    fc38:	e3400001 	movt	r0, #1
    fc3c:	eb0009d2 	bl	1238c <assertion_failed>

0000fc40 <CTimer::InterruptHandler()>:
    fc40:	e92d4070 	push	{r4, r5, r6, lr}
    fc44:	e1a04000 	mov	r4, r0
    fc48:	ec5e3f2e 	mrrc	15, 2, r3, lr, cr14
    fc4c:	e3022710 	movw	r2, #10000	; 0x2710
    fc50:	e3a0c000 	mov	ip, #0
    fc54:	e0933002 	adds	r3, r3, r2
    fc58:	e1a0100c 	mov	r1, ip
    fc5c:	e2ae2000 	adc	r2, lr, #0
    fc60:	e1a00003 	mov	r0, r3
    fc64:	e1a0300c 	mov	r3, ip
    fc68:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
    fc6c:	e5940010 	ldr	r0, [r4, #16]
    fc70:	e150000c 	cmp	r0, ip
    fc74:	1a000018 	bne	fcdc <CTimer::InterruptHandler()+0x9c>
    fc78:	e5942004 	ldr	r2, [r4, #4]
    fc7c:	e308351f 	movw	r3, #34079	; 0x851f
    fc80:	e34531eb 	movt	r3, #20971	; 0x51eb
    fc84:	e3a01064 	mov	r1, #100	; 0x64
    fc88:	e2822001 	add	r2, r2, #1
    fc8c:	e0830293 	umull	r0, r3, r3, r2
    fc90:	e5842004 	str	r2, [r4, #4]
    fc94:	e1a032a3 	lsr	r3, r3, #5
    fc98:	e0632391 	mls	r3, r1, r3, r2
    fc9c:	e3530000 	cmp	r3, #0
    fca0:	0a000019 	beq	fd0c <CTimer::InterruptHandler()+0xcc>
    fca4:	e1a00004 	mov	r0, r4
    fca8:	ebffff92 	bl	faf8 <CTimer::PollKernelTimers()>
    fcac:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    fcb0:	e3530000 	cmp	r3, #0
    fcb4:	08bd8070 	popeq	{r4, r5, r6, pc}
    fcb8:	e284602c 	add	r6, r4, #44	; 0x2c
    fcbc:	e3a05000 	mov	r5, #0
    fcc0:	e4963004 	ldr	r3, [r6], #4
    fcc4:	e2855001 	add	r5, r5, #1
    fcc8:	e12fff33 	blx	r3
    fccc:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    fcd0:	e1530005 	cmp	r3, r5
    fcd4:	8afffff9 	bhi	fcc0 <CTimer::InterruptHandler()+0x80>
    fcd8:	e8bd8070 	pop	{r4, r5, r6, pc}
    fcdc:	eb0007b2 	bl	11bac <EnterCritical>
    fce0:	e5941004 	ldr	r1, [r4, #4]
    fce4:	e3052c29 	movw	r2, #23593	; 0x5c29
    fce8:	e34c228f 	movt	r2, #49807	; 0xc28f
    fcec:	e3050c28 	movw	r0, #23592	; 0x5c28
    fcf0:	e340028f 	movt	r0, #655	; 0x28f
    fcf4:	e2811001 	add	r1, r1, #1
    fcf8:	e0020192 	mul	r2, r2, r1
    fcfc:	e5943010 	ldr	r3, [r4, #16]
    fd00:	e1500162 	cmp	r0, r2, ror #2
    fd04:	e5841004 	str	r1, [r4, #4]
    fd08:	3a000005 	bcc	fd24 <CTimer::InterruptHandler()+0xe4>
    fd0c:	e5942008 	ldr	r2, [r4, #8]
    fd10:	e2822001 	add	r2, r2, #1
    fd14:	e5842008 	str	r2, [r4, #8]
    fd18:	e594200c 	ldr	r2, [r4, #12]
    fd1c:	e2822001 	add	r2, r2, #1
    fd20:	e584200c 	str	r2, [r4, #12]
    fd24:	e3530000 	cmp	r3, #0
    fd28:	0affffdd 	beq	fca4 <CTimer::InterruptHandler()+0x64>
    fd2c:	eb0007c9 	bl	11c58 <LeaveCritical>
    fd30:	eaffffdb 	b	fca4 <CTimer::InterruptHandler()+0x64>

0000fd34 <CTimer::InterruptHandler(void*)>:
    fd34:	e3500000 	cmp	r0, #0
    fd38:	0a000000 	beq	fd40 <CTimer::InterruptHandler(void*)+0xc>
    fd3c:	eaffffbf 	b	fc40 <CTimer::InterruptHandler()>
    fd40:	e30514d4 	movw	r1, #21716	; 0x54d4
    fd44:	e30505c8 	movw	r0, #21960	; 0x55c8
    fd48:	e3401001 	movt	r1, #1
    fd4c:	e3a02f8a 	mov	r2, #552	; 0x228
    fd50:	e3400001 	movt	r0, #1
    fd54:	e92d4010 	push	{r4, lr}
    fd58:	eb00098b 	bl	1238c <assertion_failed>

0000fd5c <CTimer::TuneMsDelay()>:
    fd5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fd60:	e1a06000 	mov	r6, r0
    fd64:	e5900020 	ldr	r0, [r0, #32]
    fd68:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    fd6c:	e5967004 	ldr	r7, [r6, #4]
    fd70:	e24dd00c 	sub	sp, sp, #12
    fd74:	e0000092 	mul	r0, r2, r0
    fd78:	e3025710 	movw	r5, #10000	; 0x2710
    fd7c:	eb000bc7 	bl	12ca0 <DelayLoop>
    fd80:	e5962004 	ldr	r2, [r6, #4]
    fd84:	e308451f 	movw	r4, #34079	; 0x851f
    fd88:	e5963020 	ldr	r3, [r6, #32]
    fd8c:	e0422007 	sub	r2, r2, r7
    fd90:	e34541eb 	movt	r4, #20971	; 0x51eb
    fd94:	e735f215 	udiv	r5, r5, r2
    fd98:	e0030593 	mul	r3, r3, r5
    fd9c:	e0832394 	umull	r2, r3, r4, r3
    fda0:	e3042dd3 	movw	r2, #19923	; 0x4dd3
    fda4:	e1a032a3 	lsr	r3, r3, #5
    fda8:	e3412062 	movt	r2, #4194	; 0x1062
    fdac:	e5863020 	str	r3, [r6, #32]
    fdb0:	e2833f7d 	add	r3, r3, #500	; 0x1f4
    fdb4:	e0832392 	umull	r2, r3, r2, r3
    fdb8:	e1a03323 	lsr	r3, r3, #6
    fdbc:	e5863024 	str	r3, [r6, #36]	; 0x24
    fdc0:	e0843594 	umull	r3, r4, r4, r5
    fdc4:	ebffe8b0 	bl	a08c <CLogger::Get()>
    fdc8:	e1a042a4 	lsr	r4, r4, #5
    fdcc:	e3a03064 	mov	r3, #100	; 0x64
    fdd0:	e0655493 	mls	r5, r3, r4, r5
    fdd4:	e59f1018 	ldr	r1, [pc, #24]	; fdf4 <CTimer::TuneMsDelay()+0x98>
    fdd8:	e30535d4 	movw	r3, #21972	; 0x55d4
    fddc:	e3403001 	movt	r3, #1
    fde0:	e3a02003 	mov	r2, #3
    fde4:	e1cd40f0 	strd	r4, [sp]
    fde8:	ebffea86 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fdec:	e28dd00c 	add	sp, sp, #12
    fdf0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fdf4:	00015704 	.word	0x00015704

0000fdf8 <CTimer::Initialize()>:
    fdf8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    fdfc:	e1a04000 	mov	r4, r0
    fe00:	e5900000 	ldr	r0, [r0]
    fe04:	e24dd00c 	sub	sp, sp, #12
    fe08:	e3500000 	cmp	r0, #0
    fe0c:	0a000028 	beq	feb4 <CTimer::Initialize()+0xbc>
    fe10:	e30f2d34 	movw	r2, #64820	; 0xfd34
    fe14:	e1a03004 	mov	r3, r4
    fe18:	e3402000 	movt	r2, #0
    fe1c:	e3a01049 	mov	r1, #73	; 0x49
    fe20:	eb0007e0 	bl	11da8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    fe24:	ec5c3f0e 	mrrc	15, 0, r3, ip, cr14
    fe28:	e3022710 	movw	r2, #10000	; 0x2710
    fe2c:	e3a05000 	mov	r5, #0
    fe30:	e0933002 	adds	r3, r3, r2
    fe34:	e1a01005 	mov	r1, r5
    fe38:	e1a00003 	mov	r0, r3
    fe3c:	e1a07005 	mov	r7, r5
    fe40:	e2ac6000 	adc	r6, ip, #0
    fe44:	ec460f2e 	mcrr	15, 2, r0, r6, cr14
    fe48:	e3a03001 	mov	r3, #1
    fe4c:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    fe50:	e1a00004 	mov	r0, r4
    fe54:	ebffffc0 	bl	fd5c <CTimer::TuneMsDelay()>
    fe58:	ee1e4f10 	mrc	15, 0, r4, cr14, cr0, {0}
    fe5c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
    fe60:	e3a02b3e 	mov	r2, #63488	; 0xf800
    fe64:	e3402124 	movt	r2, #292	; 0x124
    fe68:	e30a3aab 	movw	r3, #43691	; 0xaaab
    fe6c:	e5916008 	ldr	r6, [r1, #8]
    fe70:	e34036aa 	movt	r3, #1706	; 0x6aa
    fe74:	e1560003 	cmp	r6, r3
    fe78:	01540002 	cmpeq	r4, r2
    fe7c:	1a000002 	bne	fe8c <CTimer::Initialize()+0x94>
    fe80:	e3a00001 	mov	r0, #1
    fe84:	e28dd00c 	add	sp, sp, #12
    fe88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    fe8c:	ebffe87e 	bl	a08c <CLogger::Get()>
    fe90:	e59f1034 	ldr	r1, [pc, #52]	; fecc <CTimer::Initialize()+0xd4>
    fe94:	e30535ec 	movw	r3, #21996	; 0x55ec
    fe98:	e3403001 	movt	r3, #1
    fe9c:	e1a02005 	mov	r2, r5
    fea0:	e88d0050 	stm	sp, {r4, r6}
    fea4:	ebffea57 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    fea8:	e3a00001 	mov	r0, #1
    feac:	e28dd00c 	add	sp, sp, #12
    feb0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    feb4:	e30514d4 	movw	r1, #21716	; 0x54d4
    feb8:	e30504f0 	movw	r0, #21744	; 0x54f0
    febc:	e3401001 	movt	r1, #1
    fec0:	e3a02064 	mov	r2, #100	; 0x64
    fec4:	e3400001 	movt	r0, #1
    fec8:	eb00092f 	bl	1238c <assertion_failed>
    fecc:	00015704 	.word	0x00015704

0000fed0 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
    fed0:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    fed4:	e92d4010 	push	{r4, lr}
    fed8:	e3530000 	cmp	r3, #0
    fedc:	1a000008 	bne	ff04 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
    fee0:	e5801028 	str	r1, [r0, #40]	; 0x28
    fee4:	e3510000 	cmp	r1, #0
    fee8:	18bd8010 	popne	{r4, pc}
    feec:	e30514d4 	movw	r1, #21716	; 0x54d4
    fef0:	e3050644 	movw	r0, #22084	; 0x5644
    fef4:	e3401001 	movt	r1, #1
    fef8:	e3a02d09 	mov	r2, #576	; 0x240
    fefc:	e3400001 	movt	r0, #1
    ff00:	eb000921 	bl	1238c <assertion_failed>
    ff04:	e30514d4 	movw	r1, #21716	; 0x54d4
    ff08:	e3050628 	movw	r0, #22056	; 0x5628
    ff0c:	e3401001 	movt	r1, #1
    ff10:	e300223e 	movw	r2, #574	; 0x23e
    ff14:	e3400001 	movt	r0, #1
    ff18:	eb00091b 	bl	1238c <assertion_failed>

0000ff1c <CTimer::RegisterPeriodicHandler(void (*)())>:
    ff1c:	e3510000 	cmp	r1, #0
    ff20:	e92d4010 	push	{r4, lr}
    ff24:	0a00000a 	beq	ff54 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
    ff28:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    ff2c:	e3530003 	cmp	r3, #3
    ff30:	8a00000d 	bhi	ff6c <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
    ff34:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    ff38:	e0803103 	add	r3, r0, r3, lsl #2
    ff3c:	e583102c 	str	r1, [r3, #44]	; 0x2c
    ff40:	f57ff04f 	dsb	sy
    ff44:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    ff48:	e2833001 	add	r3, r3, #1
    ff4c:	e580303c 	str	r3, [r0, #60]	; 0x3c
    ff50:	e8bd8010 	pop	{r4, pc}
    ff54:	e30514d4 	movw	r1, #21716	; 0x54d4
    ff58:	e3050a7c 	movw	r0, #23164	; 0x5a7c
    ff5c:	e3401001 	movt	r1, #1
    ff60:	e3002245 	movw	r2, #581	; 0x245
    ff64:	e3400001 	movt	r0, #1
    ff68:	eb000907 	bl	1238c <assertion_failed>
    ff6c:	e30514d4 	movw	r1, #21716	; 0x54d4
    ff70:	e3050660 	movw	r0, #22112	; 0x5660
    ff74:	e3401001 	movt	r1, #1
    ff78:	e3002247 	movw	r2, #583	; 0x247
    ff7c:	e3400001 	movt	r0, #1
    ff80:	eb000901 	bl	1238c <assertion_failed>

0000ff84 <CTimer::SimpleMsDelay(unsigned int)>:
    ff84:	e3500000 	cmp	r0, #0
    ff88:	012fff1e 	bxeq	lr
    ff8c:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    ff90:	e0000093 	mul	r0, r3, r0
    ff94:	e3500000 	cmp	r0, #0
    ff98:	012fff1e 	bxeq	lr
    ff9c:	e2800001 	add	r0, r0, #1
    ffa0:	f57ff06f 	isb	sy
    ffa4:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    ffa8:	f57ff06f 	isb	sy
    ffac:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    ffb0:	e0433002 	sub	r3, r3, r2
    ffb4:	e1500003 	cmp	r0, r3
    ffb8:	8afffffa 	bhi	ffa8 <CTimer::SimpleMsDelay(unsigned int)+0x24>
    ffbc:	e12fff1e 	bx	lr

0000ffc0 <CTimer::SimpleusDelay(unsigned int)>:
    ffc0:	e3500000 	cmp	r0, #0
    ffc4:	012fff1e 	bxeq	lr
    ffc8:	e2800001 	add	r0, r0, #1
    ffcc:	f57ff06f 	isb	sy
    ffd0:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    ffd4:	f57ff06f 	isb	sy
    ffd8:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    ffdc:	e0433002 	sub	r3, r3, r2
    ffe0:	e1500003 	cmp	r0, r3
    ffe4:	8afffffa 	bhi	ffd4 <CTimer::SimpleusDelay(unsigned int)+0x14>
    ffe8:	e12fff1e 	bx	lr

0000ffec <CTimer::IsLeapYear(unsigned int)>:
    ffec:	e3053c29 	movw	r3, #23593	; 0x5c29
    fff0:	e3052c28 	movw	r2, #23592	; 0x5c28
    fff4:	e34c328f 	movt	r3, #49807	; 0xc28f
    fff8:	e0030093 	mul	r3, r3, r0
    fffc:	e340228f 	movt	r2, #655	; 0x28f
   10000:	e1520163 	cmp	r2, r3, ror #2
   10004:	2a000003 	bcs	10018 <CTimer::IsLeapYear(unsigned int)+0x2c>
   10008:	e3100003 	tst	r0, #3
   1000c:	03a00001 	moveq	r0, #1
   10010:	13a00000 	movne	r0, #0
   10014:	e12fff1e 	bx	lr
   10018:	e30d270a 	movw	r2, #55050	; 0xd70a
   1001c:	e34020a3 	movt	r2, #163	; 0xa3
   10020:	e1520263 	cmp	r2, r3, ror #4
   10024:	23a00001 	movcs	r0, #1
   10028:	33a00000 	movcc	r0, #0
   1002c:	e12fff1e 	bx	lr

00010030 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   10030:	e3500001 	cmp	r0, #1
   10034:	0a000003 	beq	10048 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   10038:	e30536d4 	movw	r3, #22228	; 0x56d4
   1003c:	e3403001 	movt	r3, #1
   10040:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   10044:	e12fff1e 	bx	lr
   10048:	e3053c29 	movw	r3, #23593	; 0x5c29
   1004c:	e3052c28 	movw	r2, #23592	; 0x5c28
   10050:	e34c328f 	movt	r3, #49807	; 0xc28f
   10054:	e0030193 	mul	r3, r3, r1
   10058:	e340228f 	movt	r2, #655	; 0x28f
   1005c:	e1520163 	cmp	r2, r3, ror #2
   10060:	2a000003 	bcs	10074 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   10064:	e3110003 	tst	r1, #3
   10068:	1afffff2 	bne	10038 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   1006c:	e3a0001d 	mov	r0, #29
   10070:	e12fff1e 	bx	lr
   10074:	e30d270a 	movw	r2, #55050	; 0xd70a
   10078:	e34020a3 	movt	r2, #163	; 0xa3
   1007c:	e1520263 	cmp	r2, r3, ror #4
   10080:	3affffec 	bcc	10038 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   10084:	eafffff8 	b	1006c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>

00010088 <CTimer::Get()>:
   10088:	e3073178 	movw	r3, #29048	; 0x7178
   1008c:	e3403001 	movt	r3, #1
   10090:	e5930000 	ldr	r0, [r3]
   10094:	e3500000 	cmp	r0, #0
   10098:	112fff1e 	bxne	lr
   1009c:	e30514d4 	movw	r1, #21716	; 0x54d4
   100a0:	e3050694 	movw	r0, #22164	; 0x5694
   100a4:	e3401001 	movt	r1, #1
   100a8:	e3a02fa2 	mov	r2, #648	; 0x288
   100ac:	e3400001 	movt	r0, #1
   100b0:	e92d4010 	push	{r4, lr}
   100b4:	eb0008b4 	bl	1238c <assertion_failed>

000100b8 <memmove>:
   100b8:	e1500001 	cmp	r0, r1
   100bc:	9a000002 	bls	100cc <memmove+0x14>
   100c0:	e0813002 	add	r3, r1, r2
   100c4:	e1530000 	cmp	r3, r0
   100c8:	8a000000 	bhi	100d0 <memmove+0x18>
   100cc:	ea000227 	b	10970 <memcpy>
   100d0:	e080c002 	add	ip, r0, r2
   100d4:	e3520000 	cmp	r2, #0
   100d8:	012fff1e 	bxeq	lr
   100dc:	e1a0200c 	mov	r2, ip
   100e0:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   100e4:	e1510003 	cmp	r1, r3
   100e8:	e562c001 	strb	ip, [r2, #-1]!
   100ec:	1afffffb 	bne	100e0 <memmove+0x28>
   100f0:	e12fff1e 	bx	lr

000100f4 <memcmp>:
   100f4:	e3520000 	cmp	r2, #0
   100f8:	e242c001 	sub	ip, r2, #1
   100fc:	0a00000c 	beq	10134 <memcmp+0x40>
   10100:	e080c00c 	add	ip, r0, ip
   10104:	e2411001 	sub	r1, r1, #1
   10108:	e2400001 	sub	r0, r0, #1
   1010c:	ea000002 	b	1011c <memcmp+0x28>
   10110:	3a000009 	bcc	1013c <memcmp+0x48>
   10114:	e150000c 	cmp	r0, ip
   10118:	0a000005 	beq	10134 <memcmp+0x40>
   1011c:	e5f02001 	ldrb	r2, [r0, #1]!
   10120:	e5f13001 	ldrb	r3, [r1, #1]!
   10124:	e1520003 	cmp	r2, r3
   10128:	9afffff8 	bls	10110 <memcmp+0x1c>
   1012c:	e3a00001 	mov	r0, #1
   10130:	e12fff1e 	bx	lr
   10134:	e3a00000 	mov	r0, #0
   10138:	e12fff1e 	bx	lr
   1013c:	e3e00000 	mvn	r0, #0
   10140:	e12fff1e 	bx	lr

00010144 <strlen>:
   10144:	e1a03000 	mov	r3, r0
   10148:	e0d300d1 	ldrsb	r0, [r3], #1
   1014c:	e3500000 	cmp	r0, #0
   10150:	012fff1e 	bxeq	lr
   10154:	e3a00000 	mov	r0, #0
   10158:	e0d320d1 	ldrsb	r2, [r3], #1
   1015c:	e2800001 	add	r0, r0, #1
   10160:	e3520000 	cmp	r2, #0
   10164:	1afffffb 	bne	10158 <strlen+0x14>
   10168:	e12fff1e 	bx	lr

0001016c <strcmp>:
   1016c:	e1d030d0 	ldrsb	r3, [r0]
   10170:	e3530000 	cmp	r3, #0
   10174:	1a000006 	bne	10194 <strcmp+0x28>
   10178:	ea000016 	b	101d8 <strcmp+0x6c>
   1017c:	e1520003 	cmp	r2, r3
   10180:	ba00000c 	blt	101b8 <strcmp+0x4c>
   10184:	ca00000d 	bgt	101c0 <strcmp+0x54>
   10188:	e1f030d1 	ldrsb	r3, [r0, #1]!
   1018c:	e3530000 	cmp	r3, #0
   10190:	0a00000c 	beq	101c8 <strcmp+0x5c>
   10194:	e1a0c001 	mov	ip, r1
   10198:	e0d120d1 	ldrsb	r2, [r1], #1
   1019c:	e3520000 	cmp	r2, #0
   101a0:	1afffff5 	bne	1017c <strcmp+0x10>
   101a4:	e1530002 	cmp	r3, r2
   101a8:	ca000002 	bgt	101b8 <strcmp+0x4c>
   101ac:	b3e00000 	mvnlt	r0, #0
   101b0:	a3a00000 	movge	r0, #0
   101b4:	e12fff1e 	bx	lr
   101b8:	e3a00001 	mov	r0, #1
   101bc:	e12fff1e 	bx	lr
   101c0:	e3e00000 	mvn	r0, #0
   101c4:	e12fff1e 	bx	lr
   101c8:	e1dc20d1 	ldrsb	r2, [ip, #1]
   101cc:	e1530002 	cmp	r3, r2
   101d0:	dafffff5 	ble	101ac <strcmp+0x40>
   101d4:	eafffff7 	b	101b8 <strcmp+0x4c>
   101d8:	e1d120d0 	ldrsb	r2, [r1]
   101dc:	eafffff0 	b	101a4 <strcmp+0x38>

000101e0 <strcasecmp>:
   101e0:	e2402001 	sub	r2, r0, #1
   101e4:	ea000009 	b	10210 <strcasecmp+0x30>
   101e8:	e0d100d1 	ldrsb	r0, [r1], #1
   101ec:	e240c061 	sub	ip, r0, #97	; 0x61
   101f0:	e35c0019 	cmp	ip, #25
   101f4:	92400020 	subls	r0, r0, #32
   101f8:	9a000001 	bls	10204 <strcasecmp+0x24>
   101fc:	e3500000 	cmp	r0, #0
   10200:	0a000012 	beq	10250 <strcasecmp+0x70>
   10204:	e1530000 	cmp	r3, r0
   10208:	ca000012 	bgt	10258 <strcasecmp+0x78>
   1020c:	ba000013 	blt	10260 <strcasecmp+0x80>
   10210:	e1f230d1 	ldrsb	r3, [r2, #1]!
   10214:	e2430061 	sub	r0, r3, #97	; 0x61
   10218:	e3500019 	cmp	r0, #25
   1021c:	92433020 	subls	r3, r3, #32
   10220:	9afffff0 	bls	101e8 <strcasecmp+0x8>
   10224:	e3530000 	cmp	r3, #0
   10228:	1affffee 	bne	101e8 <strcasecmp+0x8>
   1022c:	e1d100d0 	ldrsb	r0, [r1]
   10230:	e2402061 	sub	r2, r0, #97	; 0x61
   10234:	e3520019 	cmp	r2, #25
   10238:	92400020 	subls	r0, r0, #32
   1023c:	8a000003 	bhi	10250 <strcasecmp+0x70>
   10240:	e1530000 	cmp	r3, r0
   10244:	a3a00000 	movge	r0, #0
   10248:	b3e00000 	mvnlt	r0, #0
   1024c:	e12fff1e 	bx	lr
   10250:	e1500003 	cmp	r0, r3
   10254:	aafffff9 	bge	10240 <strcasecmp+0x60>
   10258:	e3a00001 	mov	r0, #1
   1025c:	e12fff1e 	bx	lr
   10260:	e3e00000 	mvn	r0, #0
   10264:	e12fff1e 	bx	lr

00010268 <strncmp>:
   10268:	e3520000 	cmp	r2, #0
   1026c:	0a000015 	beq	102c8 <strncmp+0x60>
   10270:	e081c002 	add	ip, r1, r2
   10274:	e2400001 	sub	r0, r0, #1
   10278:	ea000007 	b	1029c <strncmp+0x34>
   1027c:	e0d120d1 	ldrsb	r2, [r1], #1
   10280:	e3520000 	cmp	r2, #0
   10284:	0a000008 	beq	102ac <strncmp+0x44>
   10288:	e1530002 	cmp	r3, r2
   1028c:	ca00000b 	bgt	102c0 <strncmp+0x58>
   10290:	ba00000e 	blt	102d0 <strncmp+0x68>
   10294:	e151000c 	cmp	r1, ip
   10298:	0a00000a 	beq	102c8 <strncmp+0x60>
   1029c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   102a0:	e3530000 	cmp	r3, #0
   102a4:	1afffff4 	bne	1027c <strncmp+0x14>
   102a8:	e1d120d0 	ldrsb	r2, [r1]
   102ac:	e1520003 	cmp	r2, r3
   102b0:	ba000002 	blt	102c0 <strncmp+0x58>
   102b4:	c3e00000 	mvngt	r0, #0
   102b8:	d3a00000 	movle	r0, #0
   102bc:	e12fff1e 	bx	lr
   102c0:	e3a00001 	mov	r0, #1
   102c4:	e12fff1e 	bx	lr
   102c8:	e3a00000 	mov	r0, #0
   102cc:	e12fff1e 	bx	lr
   102d0:	e3e00000 	mvn	r0, #0
   102d4:	e12fff1e 	bx	lr

000102d8 <strncasecmp>:
   102d8:	e3520000 	cmp	r2, #0
   102dc:	0a00001f 	beq	10360 <strncasecmp+0x88>
   102e0:	e2400001 	sub	r0, r0, #1
   102e4:	e1a0c001 	mov	ip, r1
   102e8:	e1f030d1 	ldrsb	r3, [r0, #1]!
   102ec:	e2431061 	sub	r1, r3, #97	; 0x61
   102f0:	e3510019 	cmp	r1, #25
   102f4:	92433020 	subls	r3, r3, #32
   102f8:	8a00000e 	bhi	10338 <strncasecmp+0x60>
   102fc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10300:	e0dc10d1 	ldrsb	r1, [ip], #1
   10304:	e241e061 	sub	lr, r1, #97	; 0x61
   10308:	e35e0019 	cmp	lr, #25
   1030c:	92411020 	subls	r1, r1, #32
   10310:	9a000014 	bls	10368 <strncasecmp+0x90>
   10314:	e3510000 	cmp	r1, #0
   10318:	1a000012 	bne	10368 <strncasecmp+0x90>
   1031c:	e1530001 	cmp	r3, r1
   10320:	ca000022 	bgt	103b0 <strncasecmp+0xd8>
   10324:	e1510003 	cmp	r1, r3
   10328:	d3a02000 	movle	r2, #0
   1032c:	c3e02000 	mvngt	r2, #0
   10330:	e1a00002 	mov	r0, r2
   10334:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10338:	e3530000 	cmp	r3, #0
   1033c:	1affffee 	bne	102fc <strncasecmp+0x24>
   10340:	e1dc10d0 	ldrsb	r1, [ip]
   10344:	e2412061 	sub	r2, r1, #97	; 0x61
   10348:	e3520019 	cmp	r2, #25
   1034c:	92411020 	subls	r1, r1, #32
   10350:	8a00001c 	bhi	103c8 <strncasecmp+0xf0>
   10354:	e1510003 	cmp	r1, r3
   10358:	d3a02000 	movle	r2, #0
   1035c:	c3e02000 	mvngt	r2, #0
   10360:	e1a00002 	mov	r0, r2
   10364:	e12fff1e 	bx	lr
   10368:	e1530001 	cmp	r3, r1
   1036c:	ca00000f 	bgt	103b0 <strncasecmp+0xd8>
   10370:	ba000011 	blt	103bc <strncasecmp+0xe4>
   10374:	e2522001 	subs	r2, r2, #1
   10378:	0affffec 	beq	10330 <strncasecmp+0x58>
   1037c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10380:	e2431061 	sub	r1, r3, #97	; 0x61
   10384:	e3510019 	cmp	r1, #25
   10388:	92433020 	subls	r3, r3, #32
   1038c:	9affffdb 	bls	10300 <strncasecmp+0x28>
   10390:	e3530000 	cmp	r3, #0
   10394:	1affffd9 	bne	10300 <strncasecmp+0x28>
   10398:	e1dc10d0 	ldrsb	r1, [ip]
   1039c:	e2412061 	sub	r2, r1, #97	; 0x61
   103a0:	e3520019 	cmp	r2, #25
   103a4:	92411020 	subls	r1, r1, #32
   103a8:	9affffdd 	bls	10324 <strncasecmp+0x4c>
   103ac:	eaffffda 	b	1031c <strncasecmp+0x44>
   103b0:	e3a02001 	mov	r2, #1
   103b4:	e1a00002 	mov	r0, r2
   103b8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   103bc:	e3e02000 	mvn	r2, #0
   103c0:	e1a00002 	mov	r0, r2
   103c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   103c8:	e1530001 	cmp	r3, r1
   103cc:	c3a02001 	movgt	r2, #1
   103d0:	daffffdf 	ble	10354 <strncasecmp+0x7c>
   103d4:	eaffffe1 	b	10360 <strncasecmp+0x88>

000103d8 <strcpy>:
   103d8:	e1d130d0 	ldrsb	r3, [r1]
   103dc:	e1a02000 	mov	r2, r0
   103e0:	e3530000 	cmp	r3, #0
   103e4:	0a000003 	beq	103f8 <strcpy+0x20>
   103e8:	e4c23001 	strb	r3, [r2], #1
   103ec:	e1f130d1 	ldrsb	r3, [r1, #1]!
   103f0:	e3530000 	cmp	r3, #0
   103f4:	1afffffb 	bne	103e8 <strcpy+0x10>
   103f8:	e3a03000 	mov	r3, #0
   103fc:	e5c23000 	strb	r3, [r2]
   10400:	e12fff1e 	bx	lr

00010404 <strncpy>:
   10404:	e3520000 	cmp	r2, #0
   10408:	012fff1e 	bxeq	lr
   1040c:	e080c002 	add	ip, r0, r2
   10410:	e2411001 	sub	r1, r1, #1
   10414:	e1a02000 	mov	r2, r0
   10418:	ea000002 	b	10428 <strncpy+0x24>
   1041c:	e4c23001 	strb	r3, [r2], #1
   10420:	e152000c 	cmp	r2, ip
   10424:	012fff1e 	bxeq	lr
   10428:	e1f130d1 	ldrsb	r3, [r1, #1]!
   1042c:	e3530000 	cmp	r3, #0
   10430:	1afffff9 	bne	1041c <strncpy+0x18>
   10434:	e5c23000 	strb	r3, [r2]
   10438:	e12fff1e 	bx	lr

0001043c <strcat>:
   1043c:	e1d030d0 	ldrsb	r3, [r0]
   10440:	e3530000 	cmp	r3, #0
   10444:	e1a03000 	mov	r3, r0
   10448:	0a000002 	beq	10458 <strcat+0x1c>
   1044c:	e1f320d1 	ldrsb	r2, [r3, #1]!
   10450:	e3520000 	cmp	r2, #0
   10454:	1afffffc 	bne	1044c <strcat+0x10>
   10458:	e1d120d0 	ldrsb	r2, [r1]
   1045c:	e3520000 	cmp	r2, #0
   10460:	0a000003 	beq	10474 <strcat+0x38>
   10464:	e4c32001 	strb	r2, [r3], #1
   10468:	e1f120d1 	ldrsb	r2, [r1, #1]!
   1046c:	e3520000 	cmp	r2, #0
   10470:	1afffffb 	bne	10464 <strcat+0x28>
   10474:	e3a02000 	mov	r2, #0
   10478:	e5c32000 	strb	r2, [r3]
   1047c:	e12fff1e 	bx	lr

00010480 <strchr>:
   10480:	e1d030d0 	ldrsb	r3, [r0]
   10484:	e3530000 	cmp	r3, #0
   10488:	0a000004 	beq	104a0 <strchr+0x20>
   1048c:	e1530001 	cmp	r3, r1
   10490:	012fff1e 	bxeq	lr
   10494:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10498:	e3530000 	cmp	r3, #0
   1049c:	1afffffa 	bne	1048c <strchr+0xc>
   104a0:	e1a00003 	mov	r0, r3
   104a4:	e12fff1e 	bx	lr

000104a8 <strstr>:
   104a8:	e1d030d0 	ldrsb	r3, [r0]
   104ac:	e3530000 	cmp	r3, #0
   104b0:	1a000003 	bne	104c4 <strstr+0x1c>
   104b4:	e1d130d0 	ldrsb	r3, [r1]
   104b8:	e3530000 	cmp	r3, #0
   104bc:	13a00000 	movne	r0, #0
   104c0:	e12fff1e 	bx	lr
   104c4:	e92d4010 	push	{r4, lr}
   104c8:	e1d140d0 	ldrsb	r4, [r1]
   104cc:	e3540000 	cmp	r4, #0
   104d0:	08bd8010 	popeq	{r4, pc}
   104d4:	e2402001 	sub	r2, r0, #1
   104d8:	e1a0e001 	mov	lr, r1
   104dc:	e1a03004 	mov	r3, r4
   104e0:	ea000002 	b	104f0 <strstr+0x48>
   104e4:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   104e8:	e3530000 	cmp	r3, #0
   104ec:	08bd8010 	popeq	{r4, pc}
   104f0:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   104f4:	e15c0003 	cmp	ip, r3
   104f8:	0afffff9 	beq	104e4 <strstr+0x3c>
   104fc:	e1f030d1 	ldrsb	r3, [r0, #1]!
   10500:	e3530000 	cmp	r3, #0
   10504:	1afffff0 	bne	104cc <strstr+0x24>
   10508:	e1a00003 	mov	r0, r3
   1050c:	e8bd8010 	pop	{r4, pc}

00010510 <strtok_r>:
   10510:	e92d4030 	push	{r4, r5, lr}
   10514:	e2504000 	subs	r4, r0, #0
   10518:	e1a05002 	mov	r5, r2
   1051c:	0a000026 	beq	105bc <strtok_r+0xac>
   10520:	e1d4c0d0 	ldrsb	ip, [r4]
   10524:	e35c0000 	cmp	ip, #0
   10528:	0a000028 	beq	105d0 <strtok_r+0xc0>
   1052c:	e1d100d0 	ldrsb	r0, [r1]
   10530:	e3500000 	cmp	r0, #0
   10534:	0a00000a 	beq	10564 <strtok_r+0x54>
   10538:	e1a0e001 	mov	lr, r1
   1053c:	e1a03000 	mov	r3, r0
   10540:	ea000002 	b	10550 <strtok_r+0x40>
   10544:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   10548:	e3530000 	cmp	r3, #0
   1054c:	0a000004 	beq	10564 <strtok_r+0x54>
   10550:	e153000c 	cmp	r3, ip
   10554:	1afffffa 	bne	10544 <strtok_r+0x34>
   10558:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
   1055c:	e3500000 	cmp	r0, #0
   10560:	1afffff4 	bne	10538 <strtok_r+0x28>
   10564:	e35c0000 	cmp	ip, #0
   10568:	11a02004 	movne	r2, r4
   1056c:	0a000017 	beq	105d0 <strtok_r+0xc0>
   10570:	e3500000 	cmp	r0, #0
   10574:	0a00000c 	beq	105ac <strtok_r+0x9c>
   10578:	e1a03000 	mov	r3, r0
   1057c:	e1a0e001 	mov	lr, r1
   10580:	ea000002 	b	10590 <strtok_r+0x80>
   10584:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   10588:	e3530000 	cmp	r3, #0
   1058c:	0a000006 	beq	105ac <strtok_r+0x9c>
   10590:	e15c0003 	cmp	ip, r3
   10594:	1afffffa 	bne	10584 <strtok_r+0x74>
   10598:	e3a03000 	mov	r3, #0
   1059c:	e4c23001 	strb	r3, [r2], #1
   105a0:	e5852000 	str	r2, [r5]
   105a4:	e1a00004 	mov	r0, r4
   105a8:	e8bd8030 	pop	{r4, r5, pc}
   105ac:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   105b0:	e35c0000 	cmp	ip, #0
   105b4:	1affffed 	bne	10570 <strtok_r+0x60>
   105b8:	eafffff8 	b	105a0 <strtok_r+0x90>
   105bc:	e5924000 	ldr	r4, [r2]
   105c0:	e3540000 	cmp	r4, #0
   105c4:	1affffd5 	bne	10520 <strtok_r+0x10>
   105c8:	e1a00004 	mov	r0, r4
   105cc:	e8bd8030 	pop	{r4, r5, pc}
   105d0:	e3a04000 	mov	r4, #0
   105d4:	e5854000 	str	r4, [r5]
   105d8:	e1a00004 	mov	r0, r4
   105dc:	e8bd8030 	pop	{r4, r5, pc}

000105e0 <strtoul>:
   105e0:	e3510000 	cmp	r1, #0
   105e4:	e2423002 	sub	r3, r2, #2
   105e8:	e1a0c000 	mov	ip, r0
   105ec:	15810000 	strne	r0, [r1]
   105f0:	e3520000 	cmp	r2, #0
   105f4:	13530022 	cmpne	r3, #34	; 0x22
   105f8:	8a000043 	bhi	1070c <strtoul+0x12c>
   105fc:	e92d4070 	push	{r4, r5, r6, lr}
   10600:	e1a0e00c 	mov	lr, ip
   10604:	e1dc30d0 	ldrsb	r3, [ip]
   10608:	e28cc001 	add	ip, ip, #1
   1060c:	e3530020 	cmp	r3, #32
   10610:	e2430009 	sub	r0, r3, #9
   10614:	e6ef0070 	uxtb	r0, r0
   10618:	0afffff8 	beq	10600 <strtoul+0x20>
   1061c:	e3500004 	cmp	r0, #4
   10620:	9afffff6 	bls	10600 <strtoul+0x20>
   10624:	e353002b 	cmp	r3, #43	; 0x2b
   10628:	0a000027 	beq	106cc <strtoul+0xec>
   1062c:	e353002d 	cmp	r3, #45	; 0x2d
   10630:	03a06001 	moveq	r6, #1
   10634:	13a06000 	movne	r6, #0
   10638:	01de30d1 	ldrsbeq	r3, [lr, #1]
   1063c:	01a0e00c 	moveq	lr, ip
   10640:	e3530030 	cmp	r3, #48	; 0x30
   10644:	0a000025 	beq	106e0 <strtoul+0x100>
   10648:	e3520000 	cmp	r2, #0
   1064c:	03a0200a 	moveq	r2, #10
   10650:	e353002f 	cmp	r3, #47	; 0x2f
   10654:	e1a0c003 	mov	ip, r3
   10658:	da000038 	ble	10740 <strtoul+0x160>
   1065c:	e3a05001 	mov	r5, #1
   10660:	e3a04000 	mov	r4, #0
   10664:	ea000007 	b	10688 <strtoul+0xa8>
   10668:	e1500004 	cmp	r0, r4
   1066c:	e3a05000 	mov	r5, #0
   10670:	e1a04000 	mov	r4, r0
   10674:	3a00002a 	bcc	10724 <strtoul+0x144>
   10678:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   1067c:	e35c002f 	cmp	ip, #47	; 0x2f
   10680:	e1a0300c 	mov	r3, ip
   10684:	da00002b 	ble	10738 <strtoul+0x158>
   10688:	e2433061 	sub	r3, r3, #97	; 0x61
   1068c:	e3530019 	cmp	r3, #25
   10690:	924cc020 	subls	ip, ip, #32
   10694:	e35c0040 	cmp	ip, #64	; 0x40
   10698:	c24cc007 	subgt	ip, ip, #7
   1069c:	e24cc030 	sub	ip, ip, #48	; 0x30
   106a0:	e15c0002 	cmp	ip, r2
   106a4:	e020c294 	mla	r0, r4, r2, ip
   106a8:	baffffee 	blt	10668 <strtoul+0x88>
   106ac:	e2255001 	eor	r5, r5, #1
   106b0:	e1a00004 	mov	r0, r4
   106b4:	e3510000 	cmp	r1, #0
   106b8:	e0055006 	and	r5, r5, r6
   106bc:	1581e000 	strne	lr, [r1]
   106c0:	e3550000 	cmp	r5, #0
   106c4:	12600000 	rsbne	r0, r0, #0
   106c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   106cc:	e1de30d1 	ldrsb	r3, [lr, #1]
   106d0:	e3a06000 	mov	r6, #0
   106d4:	e1a0e00c 	mov	lr, ip
   106d8:	e3530030 	cmp	r3, #48	; 0x30
   106dc:	1affffd9 	bne	10648 <strtoul+0x68>
   106e0:	e1de30d1 	ldrsb	r3, [lr, #1]
   106e4:	e28ec001 	add	ip, lr, #1
   106e8:	e3c30020 	bic	r0, r3, #32
   106ec:	e3500058 	cmp	r0, #88	; 0x58
   106f0:	1a000007 	bne	10714 <strtoul+0x134>
   106f4:	e3d23010 	bics	r3, r2, #16
   106f8:	1a000012 	bne	10748 <strtoul+0x168>
   106fc:	e1de30d2 	ldrsb	r3, [lr, #2]
   10700:	e3a02010 	mov	r2, #16
   10704:	e28ee002 	add	lr, lr, #2
   10708:	eaffffd0 	b	10650 <strtoul+0x70>
   1070c:	e3a00000 	mov	r0, #0
   10710:	e12fff1e 	bx	lr
   10714:	e3520000 	cmp	r2, #0
   10718:	e1a0e00c 	mov	lr, ip
   1071c:	03a02008 	moveq	r2, #8
   10720:	eaffffca 	b	10650 <strtoul+0x70>
   10724:	e1510005 	cmp	r1, r5
   10728:	0a000008 	beq	10750 <strtoul+0x170>
   1072c:	e581e000 	str	lr, [r1]
   10730:	e3e00000 	mvn	r0, #0
   10734:	e8bd8070 	pop	{r4, r5, r6, pc}
   10738:	e3a05001 	mov	r5, #1
   1073c:	eaffffdc 	b	106b4 <strtoul+0xd4>
   10740:	e3510000 	cmp	r1, #0
   10744:	1581e000 	strne	lr, [r1]
   10748:	e3a00000 	mov	r0, #0
   1074c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10750:	e3e00000 	mvn	r0, #0
   10754:	e8bd8070 	pop	{r4, r5, r6, pc}

00010758 <strtoull>:
   10758:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1075c:	e2423002 	sub	r3, r2, #2
   10760:	e2514000 	subs	r4, r1, #0
   10764:	e1a0c000 	mov	ip, r0
   10768:	15840000 	strne	r0, [r4]
   1076c:	e3520000 	cmp	r2, #0
   10770:	13530022 	cmpne	r3, #34	; 0x22
   10774:	8a000050 	bhi	108bc <strtoull+0x164>
   10778:	e1dc30d0 	ldrsb	r3, [ip]
   1077c:	e1a0e00c 	mov	lr, ip
   10780:	e28cc001 	add	ip, ip, #1
   10784:	e3530020 	cmp	r3, #32
   10788:	e2430009 	sub	r0, r3, #9
   1078c:	e6ef0070 	uxtb	r0, r0
   10790:	0afffff8 	beq	10778 <strtoull+0x20>
   10794:	e3500004 	cmp	r0, #4
   10798:	9afffff6 	bls	10778 <strtoull+0x20>
   1079c:	e353002b 	cmp	r3, #43	; 0x2b
   107a0:	0a000033 	beq	10874 <strtoull+0x11c>
   107a4:	e353002d 	cmp	r3, #45	; 0x2d
   107a8:	03a08001 	moveq	r8, #1
   107ac:	13a08000 	movne	r8, #0
   107b0:	01de30d1 	ldrsbeq	r3, [lr, #1]
   107b4:	01a0e00c 	moveq	lr, ip
   107b8:	e3530030 	cmp	r3, #48	; 0x30
   107bc:	0a000031 	beq	10888 <strtoull+0x130>
   107c0:	e3520000 	cmp	r2, #0
   107c4:	03a0200a 	moveq	r2, #10
   107c8:	e353002f 	cmp	r3, #47	; 0x2f
   107cc:	e1a0c003 	mov	ip, r3
   107d0:	da000037 	ble	108b4 <strtoull+0x15c>
   107d4:	e3a05000 	mov	r5, #0
   107d8:	e3a07001 	mov	r7, #1
   107dc:	e1a09fc2 	asr	r9, r2, #31
   107e0:	e1a06005 	mov	r6, r5
   107e4:	ea00000b 	b	10818 <strtoull+0xc0>
   107e8:	e09c0000 	adds	r0, ip, r0
   107ec:	e3a07000 	mov	r7, #0
   107f0:	e0a11fcc 	adc	r1, r1, ip, asr #31
   107f4:	e1500005 	cmp	r0, r5
   107f8:	e1a05000 	mov	r5, r0
   107fc:	e0d13006 	sbcs	r3, r1, r6
   10800:	e1a06001 	mov	r6, r1
   10804:	3a000033 	bcc	108d8 <strtoull+0x180>
   10808:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   1080c:	e35c002f 	cmp	ip, #47	; 0x2f
   10810:	e1a0300c 	mov	r3, ip
   10814:	da000035 	ble	108f0 <strtoull+0x198>
   10818:	e2433061 	sub	r3, r3, #97	; 0x61
   1081c:	e3530019 	cmp	r3, #25
   10820:	924cc020 	subls	ip, ip, #32
   10824:	e35c0040 	cmp	ip, #64	; 0x40
   10828:	c24cc007 	subgt	ip, ip, #7
   1082c:	e0010692 	mul	r1, r2, r6
   10830:	e24cc030 	sub	ip, ip, #48	; 0x30
   10834:	e08a0592 	umull	r0, sl, r2, r5
   10838:	e0211995 	mla	r1, r5, r9, r1
   1083c:	e15c0002 	cmp	ip, r2
   10840:	e081100a 	add	r1, r1, sl
   10844:	baffffe7 	blt	107e8 <strtoull+0x90>
   10848:	e2277001 	eor	r7, r7, #1
   1084c:	e1a00005 	mov	r0, r5
   10850:	e1a01006 	mov	r1, r6
   10854:	e3540000 	cmp	r4, #0
   10858:	e0088007 	and	r8, r8, r7
   1085c:	1584e000 	strne	lr, [r4]
   10860:	e3580000 	cmp	r8, #0
   10864:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10868:	e2700000 	rsbs	r0, r0, #0
   1086c:	e2e11000 	rsc	r1, r1, #0
   10870:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10874:	e1de30d1 	ldrsb	r3, [lr, #1]
   10878:	e3a08000 	mov	r8, #0
   1087c:	e1a0e00c 	mov	lr, ip
   10880:	e3530030 	cmp	r3, #48	; 0x30
   10884:	1affffcd 	bne	107c0 <strtoull+0x68>
   10888:	e1de30d1 	ldrsb	r3, [lr, #1]
   1088c:	e28e0001 	add	r0, lr, #1
   10890:	e3c31020 	bic	r1, r3, #32
   10894:	e3510058 	cmp	r1, #88	; 0x58
   10898:	1a00000a 	bne	108c8 <strtoull+0x170>
   1089c:	e3d23010 	bics	r3, r2, #16
   108a0:	1a000005 	bne	108bc <strtoull+0x164>
   108a4:	e1de30d2 	ldrsb	r3, [lr, #2]
   108a8:	e3a02010 	mov	r2, #16
   108ac:	e28ee002 	add	lr, lr, #2
   108b0:	eaffffc4 	b	107c8 <strtoull+0x70>
   108b4:	e3540000 	cmp	r4, #0
   108b8:	1584e000 	strne	lr, [r4]
   108bc:	e3a00000 	mov	r0, #0
   108c0:	e1a01000 	mov	r1, r0
   108c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108c8:	e3520000 	cmp	r2, #0
   108cc:	e1a0e000 	mov	lr, r0
   108d0:	03a02008 	moveq	r2, #8
   108d4:	eaffffbb 	b	107c8 <strtoull+0x70>
   108d8:	e1540007 	cmp	r4, r7
   108dc:	0a000005 	beq	108f8 <strtoull+0x1a0>
   108e0:	e584e000 	str	lr, [r4]
   108e4:	e3e00000 	mvn	r0, #0
   108e8:	e1a01007 	mov	r1, r7
   108ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   108f0:	e3a07001 	mov	r7, #1
   108f4:	eaffffd6 	b	10854 <strtoull+0xfc>
   108f8:	e3e00000 	mvn	r0, #0
   108fc:	e1a01004 	mov	r1, r4
   10900:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010904 <atoi>:
   10904:	e3a0200a 	mov	r2, #10
   10908:	e3a01000 	mov	r1, #0
   1090c:	eaffff33 	b	105e0 <strtoul>

00010910 <char2int>:
   10910:	e12fff1e 	bx	lr

00010914 <memset>:
   10914:	e3100003 	tst	r0, #3
   10918:	1a00000d 	bne	10954 <memset+0x40>
   1091c:	e3520010 	cmp	r2, #16
   10920:	3a00000b 	bcc	10954 <memset+0x40>
   10924:	e1813401 	orr	r3, r1, r1, lsl #8
   10928:	e183c803 	orr	ip, r3, r3, lsl #16
   1092c:	e1a03000 	mov	r3, r0
   10930:	e583c000 	str	ip, [r3]
   10934:	e583c004 	str	ip, [r3, #4]
   10938:	e583c008 	str	ip, [r3, #8]
   1093c:	e583c00c 	str	ip, [r3, #12]
   10940:	e2833010 	add	r3, r3, #16
   10944:	e2422010 	sub	r2, r2, #16
   10948:	e352000f 	cmp	r2, #15
   1094c:	8afffff7 	bhi	10930 <memset+0x1c>
   10950:	ea000000 	b	10958 <memset+0x44>
   10954:	e1a03000 	mov	r3, r0
   10958:	e3520000 	cmp	r2, #0
   1095c:	012fff1e 	bxeq	lr
   10960:	e4c31001 	strb	r1, [r3], #1
   10964:	e2522001 	subs	r2, r2, #1
   10968:	1afffffc 	bne	10960 <memset+0x4c>
   1096c:	e12fff1e 	bx	lr

00010970 <memcpy>:
   10970:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
   10974:	e352007f 	cmp	r2, #127	; 0x7f
   10978:	9a00000b 	bls	109ac <memcpy+0x3c>
   1097c:	e3110003 	tst	r1, #3
   10980:	1a000009 	bne	109ac <memcpy+0x3c>
   10984:	e3100003 	tst	r0, #3
   10988:	1a000007 	bne	109ac <memcpy+0x3c>
   1098c:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   10990:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   10994:	e2422020 	sub	r2, r2, #32
   10998:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   1099c:	f5d1f040 	pld	[r1, #64]	; 0x40
   109a0:	e352001f 	cmp	r2, #31
   109a4:	8afffff9 	bhi	10990 <memcpy+0x20>
   109a8:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   109ac:	e3520000 	cmp	r2, #0
   109b0:	0a000003 	beq	109c4 <memcpy+0x54>
   109b4:	e4d13001 	ldrb	r3, [r1], #1
   109b8:	e2522001 	subs	r2, r2, #1
   109bc:	e4c03001 	strb	r3, [r0], #1
   109c0:	1afffffb 	bne	109b4 <memcpy+0x44>
   109c4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
   109c8:	e12fff1e 	bx	lr

000109cc <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   109cc:	e12fff1e 	bx	lr

000109d0 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   109d0:	e92d4010 	push	{r4, lr}
   109d4:	e3a01014 	mov	r1, #20
   109d8:	e1a04000 	mov	r4, r0
   109dc:	eb000108 	bl	10e04 <operator delete(void*, unsigned int)>
   109e0:	e1a00004 	mov	r0, r4
   109e4:	e8bd8010 	pop	{r4, pc}

000109e8 <CVirtualGPIOPin::Write(unsigned int)>:
   109e8:	e5d03004 	ldrb	r3, [r0, #4]
   109ec:	e92d4070 	push	{r4, r5, r6, lr}
   109f0:	e3530000 	cmp	r3, #0
   109f4:	e24dd028 	sub	sp, sp, #40	; 0x28
   109f8:	e1a04000 	mov	r4, r0
   109fc:	e1a05001 	mov	r5, r1
   10a00:	0a000013 	beq	10a54 <CVirtualGPIOPin::Write(unsigned int)+0x6c>
   10a04:	e5901008 	ldr	r1, [r0, #8]
   10a08:	e3510000 	cmp	r1, #0
   10a0c:	1a000036 	bne	10aec <CVirtualGPIOPin::Write(unsigned int)+0x104>
   10a10:	e28d000c 	add	r0, sp, #12
   10a14:	eb0007af 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10a18:	e58d5024 	str	r5, [sp, #36]	; 0x24
   10a1c:	e3a03008 	mov	r3, #8
   10a20:	e58d3000 	str	r3, [sp]
   10a24:	e3a03082 	mov	r3, #130	; 0x82
   10a28:	e58d3020 	str	r3, [sp, #32]
   10a2c:	e3081041 	movw	r1, #32833	; 0x8041
   10a30:	e3401003 	movt	r1, #3
   10a34:	e3a03014 	mov	r3, #20
   10a38:	e08d2003 	add	r2, sp, r3
   10a3c:	e28d000c 	add	r0, sp, #12
   10a40:	eb0007ea 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10a44:	e28d000c 	add	r0, sp, #12
   10a48:	eb0007a9 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   10a4c:	e28dd028 	add	sp, sp, #40	; 0x28
   10a50:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a54:	e5903008 	ldr	r3, [r0, #8]
   10a58:	e3530001 	cmp	r3, #1
   10a5c:	8afffffa 	bhi	10a4c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10a60:	e307617c 	movw	r6, #29052	; 0x717c
   10a64:	e3510001 	cmp	r1, #1
   10a68:	e3406001 	movt	r6, #1
   10a6c:	93a03000 	movls	r3, #0
   10a70:	83a03001 	movhi	r3, #1
   10a74:	e5962000 	ldr	r2, [r6]
   10a78:	e3520000 	cmp	r2, #0
   10a7c:	03833001 	orreq	r3, r3, #1
   10a80:	e3530000 	cmp	r3, #0
   10a84:	1afffff0 	bne	10a4c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10a88:	e5960004 	ldr	r0, [r6, #4]
   10a8c:	e3500000 	cmp	r0, #0
   10a90:	1a000020 	bne	10b18 <CVirtualGPIOPin::Write(unsigned int)+0x130>
   10a94:	e1d421b0 	ldrh	r2, [r4, #16]
   10a98:	e1d431b2 	ldrh	r3, [r4, #18]
   10a9c:	e584500c 	str	r5, [r4, #12]
   10aa0:	e0421003 	sub	r1, r2, r3
   10aa4:	e6bf1071 	sxth	r1, r1
   10aa8:	e3510000 	cmp	r1, #0
   10aac:	da000013 	ble	10b00 <CVirtualGPIOPin::Write(unsigned int)+0x118>
   10ab0:	e3550000 	cmp	r5, #0
   10ab4:	1a000006 	bne	10ad4 <CVirtualGPIOPin::Write(unsigned int)+0xec>
   10ab8:	e2833001 	add	r3, r3, #1
   10abc:	e6ff3073 	uxth	r3, r3
   10ac0:	e1c431b2 	strh	r3, [r4, #18]
   10ac4:	e5940008 	ldr	r0, [r4, #8]
   10ac8:	e5961000 	ldr	r1, [r6]
   10acc:	e1833802 	orr	r3, r3, r2, lsl #16
   10ad0:	e7813100 	str	r3, [r1, r0, lsl #2]
   10ad4:	e5963004 	ldr	r3, [r6, #4]
   10ad8:	e3530000 	cmp	r3, #0
   10adc:	0affffda 	beq	10a4c <CVirtualGPIOPin::Write(unsigned int)+0x64>
   10ae0:	e28dd028 	add	sp, sp, #40	; 0x28
   10ae4:	e8bd4070 	pop	{r4, r5, r6, lr}
   10ae8:	ea00045a 	b	11c58 <LeaveCritical>
   10aec:	e305170c 	movw	r1, #22284	; 0x570c
   10af0:	e3a0205b 	mov	r2, #91	; 0x5b
   10af4:	e3401001 	movt	r1, #1
   10af8:	e2810014 	add	r0, r1, #20
   10afc:	eb000622 	bl	1238c <assertion_failed>
   10b00:	e3550000 	cmp	r5, #0
   10b04:	0afffff2 	beq	10ad4 <CVirtualGPIOPin::Write(unsigned int)+0xec>
   10b08:	e2822001 	add	r2, r2, #1
   10b0c:	e6ff2072 	uxth	r2, r2
   10b10:	e1c421b0 	strh	r2, [r4, #16]
   10b14:	eaffffea 	b	10ac4 <CVirtualGPIOPin::Write(unsigned int)+0xdc>
   10b18:	eb000423 	bl	11bac <EnterCritical>
   10b1c:	eaffffdc 	b	10a94 <CVirtualGPIOPin::Write(unsigned int)+0xac>

00010b20 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   10b20:	e92d4070 	push	{r4, r5, r6, lr}
   10b24:	e3a03000 	mov	r3, #0
   10b28:	e5c02004 	strb	r2, [r0, #4]
   10b2c:	e24dd020 	sub	sp, sp, #32
   10b30:	e3510001 	cmp	r1, #1
   10b34:	83822001 	orrhi	r2, r2, #1
   10b38:	e1a04000 	mov	r4, r0
   10b3c:	e59fc124 	ldr	ip, [pc, #292]	; 10c68 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x148>
   10b40:	e1520003 	cmp	r2, r3
   10b44:	e580c000 	str	ip, [r0]
   10b48:	e5801008 	str	r1, [r0, #8]
   10b4c:	e5803010 	str	r3, [r0, #16]
   10b50:	0a000002 	beq	10b60 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x40>
   10b54:	e1a00004 	mov	r0, r4
   10b58:	e28dd020 	add	sp, sp, #32
   10b5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10b60:	e307517c 	movw	r5, #29052	; 0x717c
   10b64:	e3405001 	movt	r5, #1
   10b68:	e5950004 	ldr	r0, [r5, #4]
   10b6c:	e1500003 	cmp	r0, r3
   10b70:	1a00000e 	bne	10bb0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x90>
   10b74:	e5956000 	ldr	r6, [r5]
   10b78:	e3560000 	cmp	r6, #0
   10b7c:	0a00000f 	beq	10bc0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa0>
   10b80:	e5943008 	ldr	r3, [r4, #8]
   10b84:	e3a02000 	mov	r2, #0
   10b88:	e7862103 	str	r2, [r6, r3, lsl #2]
   10b8c:	e5953004 	ldr	r3, [r5, #4]
   10b90:	e3530000 	cmp	r3, #0
   10b94:	1a000024 	bne	10c2c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x10c>
   10b98:	e1a00004 	mov	r0, r4
   10b9c:	e3a01000 	mov	r1, #0
   10ba0:	ebffff90 	bl	109e8 <CVirtualGPIOPin::Write(unsigned int)>
   10ba4:	e1a00004 	mov	r0, r4
   10ba8:	e28dd020 	add	sp, sp, #32
   10bac:	e8bd8070 	pop	{r4, r5, r6, pc}
   10bb0:	eb0003fd 	bl	11bac <EnterCritical>
   10bb4:	e5956000 	ldr	r6, [r5]
   10bb8:	e3560000 	cmp	r6, #0
   10bbc:	1affffef 	bne	10b80 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   10bc0:	e3a00001 	mov	r0, #1
   10bc4:	eb0003c8 	bl	11aec <CMemorySystem::GetCoherentPage(unsigned int)>
   10bc8:	e5850000 	str	r0, [r5]
   10bcc:	e1a01006 	mov	r1, r6
   10bd0:	e28d0008 	add	r0, sp, #8
   10bd4:	eb00073f 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10bd8:	e5953000 	ldr	r3, [r5]
   10bdc:	e3081020 	movw	r1, #32800	; 0x8020
   10be0:	e3401004 	movt	r1, #4
   10be4:	e28d0008 	add	r0, sp, #8
   10be8:	e3833103 	orr	r3, r3, #-1073741824	; 0xc0000000
   10bec:	e58d301c 	str	r3, [sp, #28]
   10bf0:	e3a03004 	mov	r3, #4
   10bf4:	e58d3000 	str	r3, [sp]
   10bf8:	e3a03010 	mov	r3, #16
   10bfc:	e08d2003 	add	r2, sp, r3
   10c00:	eb00077a 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10c04:	e3500000 	cmp	r0, #0
   10c08:	0a000009 	beq	10c34 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x114>
   10c0c:	e28d0008 	add	r0, sp, #8
   10c10:	eb000737 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   10c14:	e5956000 	ldr	r6, [r5]
   10c18:	e3560000 	cmp	r6, #0
   10c1c:	1affffd7 	bne	10b80 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x60>
   10c20:	e5953004 	ldr	r3, [r5, #4]
   10c24:	e3530000 	cmp	r3, #0
   10c28:	0affffda 	beq	10b98 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   10c2c:	eb000409 	bl	11c58 <LeaveCritical>
   10c30:	eaffffd8 	b	10b98 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x78>
   10c34:	e58d0000 	str	r0, [sp]
   10c38:	e3a03010 	mov	r3, #16
   10c3c:	e08d2003 	add	r2, sp, r3
   10c40:	e1a01003 	mov	r1, r3
   10c44:	e3401004 	movt	r1, #4
   10c48:	e28d0008 	add	r0, sp, #8
   10c4c:	eb000767 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10c50:	e3500000 	cmp	r0, #0
   10c54:	05850000 	streq	r0, [r5]
   10c58:	159d301c 	ldrne	r3, [sp, #28]
   10c5c:	13c33103 	bicne	r3, r3, #-1073741824	; 0xc0000000
   10c60:	15853000 	strne	r3, [r5]
   10c64:	eaffffe8 	b	10c0c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xec>
   10c68:	00015734 	.word	0x00015734

00010c6c <CVirtualGPIOPin::Invert()>:
   10c6c:	e590100c 	ldr	r1, [r0, #12]
   10c70:	e2211001 	eor	r1, r1, #1
   10c74:	eaffff5b 	b	109e8 <CVirtualGPIOPin::Write(unsigned int)>

00010c78 <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   10c78:	e307317c 	movw	r3, #29052	; 0x717c
   10c7c:	e3a02000 	mov	r2, #0
   10c80:	e3403001 	movt	r3, #1
   10c84:	e5832004 	str	r2, [r3, #4]
   10c88:	e12fff1e 	bx	lr

00010c8c <ChainBootStub(void const*, unsigned int)>:
   10c8c:	e2811003 	add	r1, r1, #3
   10c90:	e1b01121 	lsrs	r1, r1, #2
   10c94:	0a000007 	beq	10cb8 <ChainBootStub(void const*, unsigned int)+0x2c>
   10c98:	e1a03000 	mov	r3, r0
   10c9c:	e0800101 	add	r0, r0, r1, lsl #2
   10ca0:	e263c902 	rsb	ip, r3, #32768	; 0x8000
   10ca4:	e083200c 	add	r2, r3, ip
   10ca8:	e4931004 	ldr	r1, [r3], #4
   10cac:	e1530000 	cmp	r3, r0
   10cb0:	e5821000 	str	r1, [r2]
   10cb4:	1afffffa 	bne	10ca4 <ChainBootStub(void const*, unsigned int)+0x18>
   10cb8:	e3a03000 	mov	r3, #0
   10cbc:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10cc0:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10cc4:	f57ff04f 	dsb	sy
   10cc8:	f57ff06f 	isb	sy
   10ccc:	e3a03902 	mov	r3, #32768	; 0x8000
   10cd0:	e12fff13 	bx	r3

00010cd4 <EnableChainBoot>:
   10cd4:	e3073184 	movw	r3, #29060	; 0x7184
   10cd8:	e1a0c001 	mov	ip, r1
   10cdc:	e3403001 	movt	r3, #1
   10ce0:	e3001c8c 	movw	r1, #3212	; 0xc8c
   10ce4:	e92d4010 	push	{r4, lr}
   10ce8:	e3a02b01 	mov	r2, #1024	; 0x400
   10cec:	e5830000 	str	r0, [r3]
   10cf0:	e3a00b1f 	mov	r0, #31744	; 0x7c00
   10cf4:	e3401001 	movt	r1, #1
   10cf8:	e583c004 	str	ip, [r3, #4]
   10cfc:	ebffff1b 	bl	10970 <memcpy>
   10d00:	e3a03000 	mov	r3, #0
   10d04:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   10d08:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   10d0c:	f57ff04f 	dsb	sy
   10d10:	f57ff06f 	isb	sy
   10d14:	e8bd8010 	pop	{r4, pc}

00010d18 <IsChainBootEnabled>:
   10d18:	e3073184 	movw	r3, #29060	; 0x7184
   10d1c:	e3403001 	movt	r3, #1
   10d20:	e5930000 	ldr	r0, [r3]
   10d24:	e2500000 	subs	r0, r0, #0
   10d28:	13a00001 	movne	r0, #1
   10d2c:	e12fff1e 	bx	lr

00010d30 <DoChainBoot>:
   10d30:	e3073184 	movw	r3, #29060	; 0x7184
   10d34:	e3a02b1f 	mov	r2, #31744	; 0x7c00
   10d38:	e3403001 	movt	r3, #1
   10d3c:	e1c300d0 	ldrd	r0, [r3]
   10d40:	e12fff12 	bx	r2

00010d44 <operator new(unsigned int, int)>:
   10d44:	e3d13002 	bics	r3, r1, #2
   10d48:	e1a01000 	mov	r1, r0
   10d4c:	0a000001 	beq	10d58 <operator new(unsigned int, int)+0x14>
   10d50:	e3a00000 	mov	r0, #0
   10d54:	e12fff1e 	bx	lr
   10d58:	e3073190 	movw	r3, #29072	; 0x7190
   10d5c:	e3403001 	movt	r3, #1
   10d60:	e5930000 	ldr	r0, [r3]
   10d64:	e280000c 	add	r0, r0, #12
   10d68:	ea000052 	b	10eb8 <CHeapAllocator::Allocate(unsigned int)>

00010d6c <operator new[](unsigned int, int)>:
   10d6c:	e3d13002 	bics	r3, r1, #2
   10d70:	e1a01000 	mov	r1, r0
   10d74:	0a000001 	beq	10d80 <operator new[](unsigned int, int)+0x14>
   10d78:	e3a00000 	mov	r0, #0
   10d7c:	e12fff1e 	bx	lr
   10d80:	e3073190 	movw	r3, #29072	; 0x7190
   10d84:	e3403001 	movt	r3, #1
   10d88:	e5930000 	ldr	r0, [r3]
   10d8c:	e280000c 	add	r0, r0, #12
   10d90:	ea000048 	b	10eb8 <CHeapAllocator::Allocate(unsigned int)>

00010d94 <operator new(unsigned int, void*)>:
   10d94:	e1a00001 	mov	r0, r1
   10d98:	e12fff1e 	bx	lr

00010d9c <operator new[](unsigned int, void*)>:
   10d9c:	e1a00001 	mov	r0, r1
   10da0:	e12fff1e 	bx	lr

00010da4 <operator new(unsigned int)>:
   10da4:	e3073190 	movw	r3, #29072	; 0x7190
   10da8:	e1a01000 	mov	r1, r0
   10dac:	e3403001 	movt	r3, #1
   10db0:	e5930000 	ldr	r0, [r3]
   10db4:	e280000c 	add	r0, r0, #12
   10db8:	ea00003e 	b	10eb8 <CHeapAllocator::Allocate(unsigned int)>

00010dbc <operator new[](unsigned int)>:
   10dbc:	e3073190 	movw	r3, #29072	; 0x7190
   10dc0:	e1a01000 	mov	r1, r0
   10dc4:	e3403001 	movt	r3, #1
   10dc8:	e5930000 	ldr	r0, [r3]
   10dcc:	e280000c 	add	r0, r0, #12
   10dd0:	ea000038 	b	10eb8 <CHeapAllocator::Allocate(unsigned int)>

00010dd4 <operator delete(void*)>:
   10dd4:	e3073190 	movw	r3, #29072	; 0x7190
   10dd8:	e1a01000 	mov	r1, r0
   10ddc:	e3403001 	movt	r3, #1
   10de0:	e5930000 	ldr	r0, [r3]
   10de4:	e280000c 	add	r0, r0, #12
   10de8:	ea00009d 	b	11064 <CHeapAllocator::Free(void*)>

00010dec <operator delete[](void*)>:
   10dec:	e3073190 	movw	r3, #29072	; 0x7190
   10df0:	e1a01000 	mov	r1, r0
   10df4:	e3403001 	movt	r3, #1
   10df8:	e5930000 	ldr	r0, [r3]
   10dfc:	e280000c 	add	r0, r0, #12
   10e00:	ea000097 	b	11064 <CHeapAllocator::Free(void*)>

00010e04 <operator delete(void*, unsigned int)>:
   10e04:	e3073190 	movw	r3, #29072	; 0x7190
   10e08:	e1a01000 	mov	r1, r0
   10e0c:	e3403001 	movt	r3, #1
   10e10:	e5930000 	ldr	r0, [r3]
   10e14:	e280000c 	add	r0, r0, #12
   10e18:	ea000091 	b	11064 <CHeapAllocator::Free(void*)>

00010e1c <operator delete[](void*, unsigned int)>:
   10e1c:	e3073190 	movw	r3, #29072	; 0x7190
   10e20:	e1a01000 	mov	r1, r0
   10e24:	e3403001 	movt	r3, #1
   10e28:	e5930000 	ldr	r0, [r3]
   10e2c:	e280000c 	add	r0, r0, #12
   10e30:	ea00008b 	b	11064 <CHeapAllocator::Free(void*)>

00010e34 <CHeapAllocator::CHeapAllocator(char const*)>:
   10e34:	e92d4010 	push	{r4, lr}
   10e38:	e1a04000 	mov	r4, r0
   10e3c:	e5801000 	str	r1, [r0]
   10e40:	e3a03000 	mov	r3, #0
   10e44:	e5843004 	str	r3, [r4, #4]
   10e48:	e3a00001 	mov	r0, #1
   10e4c:	e5843008 	str	r3, [r4, #8]
   10e50:	e3a020a8 	mov	r2, #168	; 0xa8
   10e54:	e584300c 	str	r3, [r4, #12]
   10e58:	e1a01003 	mov	r1, r3
   10e5c:	e58400b8 	str	r0, [r4, #184]	; 0xb8
   10e60:	e2840010 	add	r0, r4, #16
   10e64:	ebfffeaa 	bl	10914 <memset>
   10e68:	e59f3020 	ldr	r3, [pc, #32]	; 10e90 <CHeapAllocator::CHeapAllocator(char const*)+0x5c>
   10e6c:	e1a02004 	mov	r2, r4
   10e70:	e283001c 	add	r0, r3, #28
   10e74:	e5b31004 	ldr	r1, [r3, #4]!
   10e78:	e2822008 	add	r2, r2, #8
   10e7c:	e1530000 	cmp	r3, r0
   10e80:	e5821008 	str	r1, [r2, #8]
   10e84:	1afffffa 	bne	10e74 <CHeapAllocator::CHeapAllocator(char const*)+0x40>
   10e88:	e1a00004 	mov	r0, r4
   10e8c:	e8bd8010 	pop	{r4, pc}
   10e90:	000170f4 	.word	0x000170f4

00010e94 <CHeapAllocator::~CHeapAllocator()>:
   10e94:	e12fff1e 	bx	lr

00010e98 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   10e98:	e5801004 	str	r1, [r0, #4]
   10e9c:	e0811002 	add	r1, r1, r2
   10ea0:	e5801008 	str	r1, [r0, #8]
   10ea4:	e580300c 	str	r3, [r0, #12]
   10ea8:	e12fff1e 	bx	lr

00010eac <CHeapAllocator::GetFreeSpace() const>:
   10eac:	e9900005 	ldmib	r0, {r0, r2}
   10eb0:	e0420000 	sub	r0, r2, r0
   10eb4:	e12fff1e 	bx	lr

00010eb8 <CHeapAllocator::Allocate(unsigned int)>:
   10eb8:	e5903004 	ldr	r3, [r0, #4]
   10ebc:	e3530000 	cmp	r3, #0
   10ec0:	0a000065 	beq	1105c <CHeapAllocator::Allocate(unsigned int)+0x1a4>
   10ec4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   10ec8:	e1a05000 	mov	r5, r0
   10ecc:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
   10ed0:	e1a04001 	mov	r4, r1
   10ed4:	e3500000 	cmp	r0, #0
   10ed8:	1a000046 	bne	10ff8 <CHeapAllocator::Allocate(unsigned int)+0x140>
   10edc:	e5953010 	ldr	r3, [r5, #16]
   10ee0:	e3530000 	cmp	r3, #0
   10ee4:	0a000022 	beq	10f74 <CHeapAllocator::Allocate(unsigned int)+0xbc>
   10ee8:	e2852010 	add	r2, r5, #16
   10eec:	ea000002 	b	10efc <CHeapAllocator::Allocate(unsigned int)+0x44>
   10ef0:	e5b23008 	ldr	r3, [r2, #8]!
   10ef4:	e3530000 	cmp	r3, #0
   10ef8:	0a00001d 	beq	10f74 <CHeapAllocator::Allocate(unsigned int)+0xbc>
   10efc:	e1540003 	cmp	r4, r3
   10f00:	8afffffa 	bhi	10ef0 <CHeapAllocator::Allocate(unsigned int)+0x38>
   10f04:	e5926004 	ldr	r6, [r2, #4]
   10f08:	e3560000 	cmp	r6, #0
   10f0c:	01a04003 	moveq	r4, r3
   10f10:	0a000017 	beq	10f74 <CHeapAllocator::Allocate(unsigned int)+0xbc>
   10f14:	e5961000 	ldr	r1, [r6]
   10f18:	e3043d43 	movw	r3, #19779	; 0x4d43
   10f1c:	e344324c 	movt	r3, #16972	; 0x424c
   10f20:	e1510003 	cmp	r1, r3
   10f24:	05963008 	ldreq	r3, [r6, #8]
   10f28:	05823004 	streq	r3, [r2, #4]
   10f2c:	1a000044 	bne	11044 <CHeapAllocator::Allocate(unsigned int)+0x18c>
   10f30:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10f34:	e3530000 	cmp	r3, #0
   10f38:	1a00002c 	bne	10ff0 <CHeapAllocator::Allocate(unsigned int)+0x138>
   10f3c:	e316003f 	tst	r6, #63	; 0x3f
   10f40:	e3a03000 	mov	r3, #0
   10f44:	e5c63008 	strb	r3, [r6, #8]
   10f48:	e2860040 	add	r0, r6, #64	; 0x40
   10f4c:	e5c63009 	strb	r3, [r6, #9]
   10f50:	e5c6300a 	strb	r3, [r6, #10]
   10f54:	e5c6300b 	strb	r3, [r6, #11]
   10f58:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   10f5c:	e305173c 	movw	r1, #22332	; 0x573c
   10f60:	e305078c 	movw	r0, #22412	; 0x578c
   10f64:	e3401001 	movt	r1, #1
   10f68:	e3a0208e 	mov	r2, #142	; 0x8e
   10f6c:	e3400001 	movt	r0, #1
   10f70:	eb000505 	bl	1238c <assertion_failed>
   10f74:	e5956004 	ldr	r6, [r5, #4]
   10f78:	e284307f 	add	r3, r4, #127	; 0x7f
   10f7c:	e3c3303f 	bic	r3, r3, #63	; 0x3f
   10f80:	e0863003 	add	r3, r6, r3
   10f84:	e1560003 	cmp	r6, r3
   10f88:	e595700c 	ldr	r7, [r5, #12]
   10f8c:	3a000006 	bcc	10fac <CHeapAllocator::Allocate(unsigned int)+0xf4>
   10f90:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10f94:	e3570000 	cmp	r7, #0
   10f98:	1a000018 	bne	11000 <CHeapAllocator::Allocate(unsigned int)+0x148>
   10f9c:	e3530000 	cmp	r3, #0
   10fa0:	1a000022 	bne	11030 <CHeapAllocator::Allocate(unsigned int)+0x178>
   10fa4:	e3a00000 	mov	r0, #0
   10fa8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10fac:	e5952008 	ldr	r2, [r5, #8]
   10fb0:	e0422007 	sub	r2, r2, r7
   10fb4:	e1530002 	cmp	r3, r2
   10fb8:	8afffff4 	bhi	10f90 <CHeapAllocator::Allocate(unsigned int)+0xd8>
   10fbc:	e5853004 	str	r3, [r5, #4]
   10fc0:	e3a03043 	mov	r3, #67	; 0x43
   10fc4:	e5c63000 	strb	r3, [r6]
   10fc8:	e3a0304d 	mov	r3, #77	; 0x4d
   10fcc:	e5c63001 	strb	r3, [r6, #1]
   10fd0:	e3a0304c 	mov	r3, #76	; 0x4c
   10fd4:	e5c63002 	strb	r3, [r6, #2]
   10fd8:	e3a03042 	mov	r3, #66	; 0x42
   10fdc:	e5c63003 	strb	r3, [r6, #3]
   10fe0:	e5864004 	str	r4, [r6, #4]
   10fe4:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
   10fe8:	e3530000 	cmp	r3, #0
   10fec:	0affffd2 	beq	10f3c <CHeapAllocator::Allocate(unsigned int)+0x84>
   10ff0:	eb000318 	bl	11c58 <LeaveCritical>
   10ff4:	eaffffd0 	b	10f3c <CHeapAllocator::Allocate(unsigned int)+0x84>
   10ff8:	eb0002eb 	bl	11bac <EnterCritical>
   10ffc:	eaffffb6 	b	10edc <CHeapAllocator::Allocate(unsigned int)+0x24>
   11000:	e3a02000 	mov	r2, #0
   11004:	e1530002 	cmp	r3, r2
   11008:	e585200c 	str	r2, [r5, #12]
   1100c:	1a00000a 	bne	1103c <CHeapAllocator::Allocate(unsigned int)+0x184>
   11010:	ebffe41d 	bl	a08c <CLogger::Get()>
   11014:	e5951000 	ldr	r1, [r5]
   11018:	e305377c 	movw	r3, #22396	; 0x577c
   1101c:	e3403001 	movt	r3, #1
   11020:	e3a02000 	mov	r2, #0
   11024:	ebffe5f7 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11028:	e3a00000 	mov	r0, #0
   1102c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11030:	eb000308 	bl	11c58 <LeaveCritical>
   11034:	e1a00007 	mov	r0, r7
   11038:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1103c:	eb000305 	bl	11c58 <LeaveCritical>
   11040:	eafffff2 	b	11010 <CHeapAllocator::Allocate(unsigned int)+0x158>
   11044:	e305173c 	movw	r1, #22332	; 0x573c
   11048:	e3050750 	movw	r0, #22352	; 0x5750
   1104c:	e3401001 	movt	r1, #1
   11050:	e3a0205e 	mov	r2, #94	; 0x5e
   11054:	e3400001 	movt	r0, #1
   11058:	eb0004cb 	bl	1238c <assertion_failed>
   1105c:	e3a00000 	mov	r0, #0
   11060:	e12fff1e 	bx	lr

00011064 <CHeapAllocator::Free(void*)>:
   11064:	e3510000 	cmp	r1, #0
   11068:	012fff1e 	bxeq	lr
   1106c:	e92d4070 	push	{r4, r5, r6, lr}
   11070:	e3043d43 	movw	r3, #19779	; 0x4d43
   11074:	e5112040 	ldr	r2, [r1, #-64]	; 0xffffffc0
   11078:	e2415040 	sub	r5, r1, #64	; 0x40
   1107c:	e344324c 	movt	r3, #16972	; 0x424c
   11080:	e1520003 	cmp	r2, r3
   11084:	1a00001b 	bne	110f8 <CHeapAllocator::Free(void*)+0x94>
   11088:	e5903010 	ldr	r3, [r0, #16]
   1108c:	e1a06000 	mov	r6, r0
   11090:	e3530000 	cmp	r3, #0
   11094:	08bd8070 	popeq	{r4, r5, r6, pc}
   11098:	e5952004 	ldr	r2, [r5, #4]
   1109c:	e2804010 	add	r4, r0, #16
   110a0:	ea000002 	b	110b0 <CHeapAllocator::Free(void*)+0x4c>
   110a4:	e5b43008 	ldr	r3, [r4, #8]!
   110a8:	e3530000 	cmp	r3, #0
   110ac:	08bd8070 	popeq	{r4, r5, r6, pc}
   110b0:	e1530002 	cmp	r3, r2
   110b4:	1afffffa 	bne	110a4 <CHeapAllocator::Free(void*)+0x40>
   110b8:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
   110bc:	e3500000 	cmp	r0, #0
   110c0:	1a000003 	bne	110d4 <CHeapAllocator::Free(void*)+0x70>
   110c4:	e5943004 	ldr	r3, [r4, #4]
   110c8:	e5853008 	str	r3, [r5, #8]
   110cc:	e5845004 	str	r5, [r4, #4]
   110d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   110d4:	eb0002b4 	bl	11bac <EnterCritical>
   110d8:	e59630b8 	ldr	r3, [r6, #184]	; 0xb8
   110dc:	e5942004 	ldr	r2, [r4, #4]
   110e0:	e3530000 	cmp	r3, #0
   110e4:	e5852008 	str	r2, [r5, #8]
   110e8:	e5845004 	str	r5, [r4, #4]
   110ec:	08bd8070 	popeq	{r4, r5, r6, pc}
   110f0:	e8bd4070 	pop	{r4, r5, r6, lr}
   110f4:	ea0002d7 	b	11c58 <LeaveCritical>
   110f8:	e305173c 	movw	r1, #22332	; 0x573c
   110fc:	e3050750 	movw	r0, #22352	; 0x5750
   11100:	e3401001 	movt	r1, #1
   11104:	e3a020bf 	mov	r2, #191	; 0xbf
   11108:	e3400001 	movt	r0, #1
   1110c:	eb00049e 	bl	1238c <assertion_failed>

00011110 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   11110:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   11114:	e2515000 	subs	r5, r1, #0
   11118:	0a00001a 	beq	11188 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   1111c:	e3520000 	cmp	r2, #0
   11120:	0a00001b 	beq	11194 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x84>
   11124:	e5151040 	ldr	r1, [r5, #-64]	; 0xffffffc0
   11128:	e3043d43 	movw	r3, #19779	; 0x4d43
   1112c:	e344324c 	movt	r3, #16972	; 0x424c
   11130:	e2457040 	sub	r7, r5, #64	; 0x40
   11134:	e1510003 	cmp	r1, r3
   11138:	1a000018 	bne	111a0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x90>
   1113c:	e5973004 	ldr	r3, [r7, #4]
   11140:	e1530002 	cmp	r3, r2
   11144:	21a04005 	movcs	r4, r5
   11148:	3a000001 	bcc	11154 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x44>
   1114c:	e1a00004 	mov	r0, r4
   11150:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11154:	e1a01002 	mov	r1, r2
   11158:	e1a06000 	mov	r6, r0
   1115c:	ebffff55 	bl	10eb8 <CHeapAllocator::Allocate(unsigned int)>
   11160:	e2504000 	subs	r4, r0, #0
   11164:	0afffff8 	beq	1114c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x3c>
   11168:	e5972004 	ldr	r2, [r7, #4]
   1116c:	e1a01005 	mov	r1, r5
   11170:	ebfffdfe 	bl	10970 <memcpy>
   11174:	e1a00006 	mov	r0, r6
   11178:	e1a01005 	mov	r1, r5
   1117c:	ebffffb8 	bl	11064 <CHeapAllocator::Free(void*)>
   11180:	e1a00004 	mov	r0, r4
   11184:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   11188:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1118c:	e1a01002 	mov	r1, r2
   11190:	eaffff48 	b	10eb8 <CHeapAllocator::Allocate(unsigned int)>
   11194:	e1a04002 	mov	r4, r2
   11198:	ebffffb1 	bl	11064 <CHeapAllocator::Free(void*)>
   1119c:	eaffffea 	b	1114c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x3c>
   111a0:	e305173c 	movw	r1, #22332	; 0x573c
   111a4:	e3050750 	movw	r0, #22352	; 0x5750
   111a8:	e3401001 	movt	r1, #1
   111ac:	e3a020a3 	mov	r2, #163	; 0xa3
   111b0:	e3400001 	movt	r0, #1
   111b4:	eb000474 	bl	1238c <assertion_failed>

000111b8 <InvalidateDataCacheL1Only>:
   111b8:	e92d0070 	push	{r4, r5, r6}
   111bc:	e3a00000 	mov	r0, #0
   111c0:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   111c4:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   111c8:	e3071fff 	movw	r1, #32767	; 0x7fff
   111cc:	e00126a0 	and	r2, r1, r0, lsr #13
   111d0:	e30013ff 	movw	r1, #1023	; 0x3ff
   111d4:	e00131a0 	and	r3, r1, r0, lsr #3
   111d8:	e2822001 	add	r2, r2, #1
   111dc:	e2000007 	and	r0, r0, #7
   111e0:	e2800004 	add	r0, r0, #4
   111e4:	e16f1f13 	clz	r1, r3
   111e8:	e2834001 	add	r4, r3, #1
   111ec:	e2422001 	sub	r2, r2, #1
   111f0:	e1a03004 	mov	r3, r4
   111f4:	e2533001 	subs	r3, r3, #1
   111f8:	e1a05113 	lsl	r5, r3, r1
   111fc:	e1a06012 	lsl	r6, r2, r0
   11200:	e1855006 	orr	r5, r5, r6
   11204:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   11208:	cafffff9 	bgt	111f4 <InvalidateDataCacheL1Only+0x3c>
   1120c:	e3520000 	cmp	r2, #0
   11210:	cafffff5 	bgt	111ec <InvalidateDataCacheL1Only+0x34>
   11214:	f57ff04e 	dsb	st
   11218:	f57ff06f 	isb	sy
   1121c:	e8bd0070 	pop	{r4, r5, r6}
   11220:	e12fff1e 	bx	lr

00011224 <InvalidateDataCache>:
   11224:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   11228:	f57ff05f 	dmb	sy
   1122c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   11230:	e1a03ba0 	lsr	r3, r0, #23
   11234:	e213300e 	ands	r3, r3, #14
   11238:	0a00001d 	beq	112b4 <InvalidateDataCache+0x90>
   1123c:	e3a0a000 	mov	sl, #0
   11240:	e08a20aa 	add	r2, sl, sl, lsr #1
   11244:	e1a01230 	lsr	r1, r0, r2
   11248:	e2011007 	and	r1, r1, #7
   1124c:	e3510002 	cmp	r1, #2
   11250:	ba000014 	blt	112a8 <InvalidateDataCache+0x84>
   11254:	e10f9000 	mrs	r9, CPSR
   11258:	f10c0080 	cpsid	i
   1125c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11260:	f57ff06f 	isb	sy
   11264:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   11268:	e121f009 	msr	CPSR_c, r9
   1126c:	e2012007 	and	r2, r1, #7
   11270:	e2822004 	add	r2, r2, #4
   11274:	e30043ff 	movw	r4, #1023	; 0x3ff
   11278:	e01441a1 	ands	r4, r4, r1, lsr #3
   1127c:	e16f5f14 	clz	r5, r4
   11280:	e3077fff 	movw	r7, #32767	; 0x7fff
   11284:	e01776a1 	ands	r7, r7, r1, lsr #13
   11288:	e1a09007 	mov	r9, r7
   1128c:	e18ab514 	orr	fp, sl, r4, lsl r5
   11290:	e18bb219 	orr	fp, fp, r9, lsl r2
   11294:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   11298:	e2599001 	subs	r9, r9, #1
   1129c:	aafffffa 	bge	1128c <InvalidateDataCache+0x68>
   112a0:	e2544001 	subs	r4, r4, #1
   112a4:	aafffff7 	bge	11288 <InvalidateDataCache+0x64>
   112a8:	e28aa002 	add	sl, sl, #2
   112ac:	e153000a 	cmp	r3, sl
   112b0:	caffffe2 	bgt	11240 <InvalidateDataCache+0x1c>
   112b4:	e3a0a000 	mov	sl, #0
   112b8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   112bc:	f57ff04e 	dsb	st
   112c0:	f57ff06f 	isb	sy
   112c4:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   112c8:	e12fff1e 	bx	lr

000112cc <CleanDataCache>:
   112cc:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   112d0:	f57ff05f 	dmb	sy
   112d4:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   112d8:	e1a03ba0 	lsr	r3, r0, #23
   112dc:	e213300e 	ands	r3, r3, #14
   112e0:	0a00001d 	beq	1135c <CleanDataCache+0x90>
   112e4:	e3a0a000 	mov	sl, #0
   112e8:	e08a20aa 	add	r2, sl, sl, lsr #1
   112ec:	e1a01230 	lsr	r1, r0, r2
   112f0:	e2011007 	and	r1, r1, #7
   112f4:	e3510002 	cmp	r1, #2
   112f8:	ba000014 	blt	11350 <CleanDataCache+0x84>
   112fc:	e10f9000 	mrs	r9, CPSR
   11300:	f10c0080 	cpsid	i
   11304:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11308:	f57ff06f 	isb	sy
   1130c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   11310:	e121f009 	msr	CPSR_c, r9
   11314:	e2012007 	and	r2, r1, #7
   11318:	e2822004 	add	r2, r2, #4
   1131c:	e30043ff 	movw	r4, #1023	; 0x3ff
   11320:	e01441a1 	ands	r4, r4, r1, lsr #3
   11324:	e16f5f14 	clz	r5, r4
   11328:	e3077fff 	movw	r7, #32767	; 0x7fff
   1132c:	e01776a1 	ands	r7, r7, r1, lsr #13
   11330:	e1a09007 	mov	r9, r7
   11334:	e18ab514 	orr	fp, sl, r4, lsl r5
   11338:	e18bb219 	orr	fp, fp, r9, lsl r2
   1133c:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   11340:	e2599001 	subs	r9, r9, #1
   11344:	aafffffa 	bge	11334 <CleanDataCache+0x68>
   11348:	e2544001 	subs	r4, r4, #1
   1134c:	aafffff7 	bge	11330 <CleanDataCache+0x64>
   11350:	e28aa002 	add	sl, sl, #2
   11354:	e153000a 	cmp	r3, sl
   11358:	caffffe2 	bgt	112e8 <CleanDataCache+0x1c>
   1135c:	e3a0a000 	mov	sl, #0
   11360:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   11364:	f57ff04e 	dsb	st
   11368:	f57ff06f 	isb	sy
   1136c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   11370:	e12fff1e 	bx	lr

00011374 <CleanAndInvalidateDataCacheRange>:
   11374:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   11378:	e1a03823 	lsr	r3, r3, #16
   1137c:	e203300f 	and	r3, r3, #15
   11380:	e3a02004 	mov	r2, #4
   11384:	e1a02312 	lsl	r2, r2, r3
   11388:	e0801001 	add	r1, r0, r1
   1138c:	e2423001 	sub	r3, r2, #1
   11390:	e1c00003 	bic	r0, r0, r3
   11394:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   11398:	e0800002 	add	r0, r0, r2
   1139c:	e1500001 	cmp	r0, r1
   113a0:	3afffffb 	bcc	11394 <CleanAndInvalidateDataCacheRange+0x20>
   113a4:	f57ff04e 	dsb	st
   113a8:	e12fff1e 	bx	lr

000113ac <CExceptionHandler::CExceptionHandler()>:
   113ac:	e307318c 	movw	r3, #29068	; 0x718c
   113b0:	e3403001 	movt	r3, #1
   113b4:	e92d4010 	push	{r4, lr}
   113b8:	e1a04000 	mov	r4, r0
   113bc:	e5930000 	ldr	r0, [r3]
   113c0:	e3500000 	cmp	r0, #0
   113c4:	1a000018 	bne	1142c <CExceptionHandler::CExceptionHandler()+0x80>
   113c8:	e5834000 	str	r4, [r3]
   113cc:	e3011764 	movw	r1, #5988	; 0x1764
   113d0:	e3401001 	movt	r1, #1
   113d4:	e30126c4 	movw	r2, #5828	; 0x16c4
   113d8:	e3402001 	movt	r2, #1
   113dc:	e3013714 	movw	r3, #5908	; 0x1714
   113e0:	e3403001 	movt	r3, #1
   113e4:	e2411004 	sub	r1, r1, #4
   113e8:	e242200c 	sub	r2, r2, #12
   113ec:	e2433010 	sub	r3, r3, #16
   113f0:	e1a01141 	asr	r1, r1, #2
   113f4:	e1a02142 	asr	r2, r2, #2
   113f8:	e2411002 	sub	r1, r1, #2
   113fc:	e1a03143 	asr	r3, r3, #2
   11400:	e2422002 	sub	r2, r2, #2
   11404:	e2433002 	sub	r3, r3, #2
   11408:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   1140c:	e5801004 	str	r1, [r0, #4]
   11410:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11414:	e580200c 	str	r2, [r0, #12]
   11418:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   1141c:	e5803010 	str	r3, [r0, #16]
   11420:	eb000221 	bl	11cac <SyncDataAndInstructionCache>
   11424:	e1a00004 	mov	r0, r4
   11428:	e8bd8010 	pop	{r4, pc}
   1142c:	e30517b8 	movw	r1, #22456	; 0x57b8
   11430:	e30504e0 	movw	r0, #21728	; 0x54e0
   11434:	e3401001 	movt	r1, #1
   11438:	e3a02030 	mov	r2, #48	; 0x30
   1143c:	e3400001 	movt	r0, #1
   11440:	eb0003d1 	bl	1238c <assertion_failed>

00011444 <CExceptionHandler::~CExceptionHandler()>:
   11444:	e307318c 	movw	r3, #29068	; 0x718c
   11448:	e3a02000 	mov	r2, #0
   1144c:	e3403001 	movt	r3, #1
   11450:	e5832000 	str	r2, [r3]
   11454:	e12fff1e 	bx	lr

00011458 <CExceptionHandler::Throw(unsigned int)>:
   11458:	e92d4010 	push	{r4, lr}
   1145c:	e24dd008 	sub	sp, sp, #8
   11460:	e1a04001 	mov	r4, r1
   11464:	ebffe308 	bl	a08c <CLogger::Get()>
   11468:	e3072114 	movw	r2, #28948	; 0x7114
   1146c:	e30537d0 	movw	r3, #22480	; 0x57d0
   11470:	e3402001 	movt	r2, #1
   11474:	e3403001 	movt	r3, #1
   11478:	e7921104 	ldr	r1, [r2, r4, lsl #2]
   1147c:	e3a02000 	mov	r2, #0
   11480:	e58d1000 	str	r1, [sp]
   11484:	e305187c 	movw	r1, #22652	; 0x587c
   11488:	e3401001 	movt	r1, #1
   1148c:	ebffe4dd 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11490:	e28dd008 	add	sp, sp, #8
   11494:	e8bd8010 	pop	{r4, pc}

00011498 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   11498:	e3510002 	cmp	r1, #2
   1149c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   114a0:	e1a09001 	mov	r9, r1
   114a4:	e24dd024 	sub	sp, sp, #36	; 0x24
   114a8:	e1a04002 	mov	r4, r2
   114ac:	0a000028 	beq	11554 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xbc>
   114b0:	e3510003 	cmp	r1, #3
   114b4:	13a06000 	movne	r6, #0
   114b8:	11a08006 	movne	r8, r6
   114bc:	1a000001 	bne	114c8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   114c0:	ee158f10 	mrc	15, 0, r8, cr5, cr0, {0}
   114c4:	ee166f10 	mrc	15, 0, r6, cr6, cr0, {0}
   114c8:	e3540000 	cmp	r4, #0
   114cc:	0a000024 	beq	11564 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xcc>
   114d0:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   114d4:	e5947048 	ldr	r7, [r4, #72]	; 0x48
   114d8:	e5945044 	ldr	r5, [r4, #68]	; 0x44
   114dc:	e203301f 	and	r3, r3, #31
   114e0:	e3530011 	cmp	r3, #17
   114e4:	0a000024 	beq	1157c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe4>
   114e8:	e3530012 	cmp	r3, #18
   114ec:	089400a0 	ldmeq	r4, {r5, r7}
   114f0:	e305187c 	movw	r1, #22652	; 0x587c
   114f4:	e1a00005 	mov	r0, r5
   114f8:	e3401001 	movt	r1, #1
   114fc:	eb0005c3 	bl	12c10 <debug_stacktrace(unsigned int const*, char const*)>
   11500:	ebffe2e1 	bl	a08c <CLogger::Get()>
   11504:	e58d7014 	str	r7, [sp, #20]
   11508:	e3073114 	movw	r3, #28948	; 0x7114
   1150c:	e58d5010 	str	r5, [sp, #16]
   11510:	e58d600c 	str	r6, [sp, #12]
   11514:	e3403001 	movt	r3, #1
   11518:	e5942050 	ldr	r2, [r4, #80]	; 0x50
   1151c:	e7931109 	ldr	r1, [r3, r9, lsl #2]
   11520:	e58d2004 	str	r2, [sp, #4]
   11524:	e3a02000 	mov	r2, #0
   11528:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   1152c:	e58d1000 	str	r1, [sp]
   11530:	e305187c 	movw	r1, #22652	; 0x587c
   11534:	e58d3018 	str	r3, [sp, #24]
   11538:	e30537ec 	movw	r3, #22508	; 0x57ec
   1153c:	e3403001 	movt	r3, #1
   11540:	e3401001 	movt	r1, #1
   11544:	e58d8008 	str	r8, [sp, #8]
   11548:	ebffe4ae 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1154c:	e28dd024 	add	sp, sp, #36	; 0x24
   11550:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   11554:	ee158f30 	mrc	15, 0, r8, cr5, cr0, {1}
   11558:	ee166f50 	mrc	15, 0, r6, cr6, cr0, {2}
   1155c:	e3540000 	cmp	r4, #0
   11560:	1affffda 	bne	114d0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x38>
   11564:	e30517b8 	movw	r1, #22456	; 0x57b8
   11568:	e30507e0 	movw	r0, #22496	; 0x57e0
   1156c:	e3401001 	movt	r1, #1
   11570:	e3a02069 	mov	r2, #105	; 0x69
   11574:	e3400001 	movt	r0, #1
   11578:	eb000383 	bl	1238c <assertion_failed>
   1157c:	e594700c 	ldr	r7, [r4, #12]
   11580:	e5945008 	ldr	r5, [r4, #8]
   11584:	eaffffd9 	b	114f0 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x58>

00011588 <CExceptionHandler::Get()>:
   11588:	e307318c 	movw	r3, #29068	; 0x718c
   1158c:	e3403001 	movt	r3, #1
   11590:	e5930000 	ldr	r0, [r3]
   11594:	e3500000 	cmp	r0, #0
   11598:	112fff1e 	bxne	lr
   1159c:	e30517b8 	movw	r1, #22456	; 0x57b8
   115a0:	e3050694 	movw	r0, #22164	; 0x5694
   115a4:	e3401001 	movt	r1, #1
   115a8:	e3a02087 	mov	r2, #135	; 0x87
   115ac:	e3400001 	movt	r0, #1
   115b0:	e92d4010 	push	{r4, lr}
   115b4:	eb000374 	bl	1238c <assertion_failed>

000115b8 <ExceptionHandler>:
   115b8:	e92d4070 	push	{r4, r5, r6, lr}
   115bc:	e1a04000 	mov	r4, r0
   115c0:	e1a05001 	mov	r5, r1
   115c4:	eb0002f6 	bl	121a4 <CInterruptSystem::DisableFIQ()>
   115c8:	f1080040 	cpsie	f
   115cc:	e307318c 	movw	r3, #29068	; 0x718c
   115d0:	e3403001 	movt	r3, #1
   115d4:	e5930000 	ldr	r0, [r3]
   115d8:	e3500000 	cmp	r0, #0
   115dc:	0a000003 	beq	115f0 <ExceptionHandler+0x38>
   115e0:	e1a02005 	mov	r2, r5
   115e4:	e1a01004 	mov	r1, r4
   115e8:	e8bd4070 	pop	{r4, r5, r6, lr}
   115ec:	eaffffa9 	b	11498 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   115f0:	e30517b8 	movw	r1, #22456	; 0x57b8
   115f4:	e3050694 	movw	r0, #22164	; 0x5694
   115f8:	e3401001 	movt	r1, #1
   115fc:	e3a02087 	mov	r2, #135	; 0x87
   11600:	e3400001 	movt	r0, #1
   11604:	eb000360 	bl	1238c <assertion_failed>

00011608 <raise>:
   11608:	e307318c 	movw	r3, #29068	; 0x718c
   1160c:	e3403001 	movt	r3, #1
   11610:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11614:	e24dd00c 	sub	sp, sp, #12
   11618:	e5933000 	ldr	r3, [r3]
   1161c:	e3530000 	cmp	r3, #0
   11620:	0a00000d 	beq	1165c <raise+0x54>
   11624:	ebffe298 	bl	a08c <CLogger::Get()>
   11628:	e3072114 	movw	r2, #28948	; 0x7114
   1162c:	e30537d0 	movw	r3, #22480	; 0x57d0
   11630:	e3402001 	movt	r2, #1
   11634:	e305187c 	movw	r1, #22652	; 0x587c
   11638:	e3403001 	movt	r3, #1
   1163c:	e592c010 	ldr	ip, [r2, #16]
   11640:	e3a02000 	mov	r2, #0
   11644:	e3401001 	movt	r1, #1
   11648:	e58dc000 	str	ip, [sp]
   1164c:	ebffe46d 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11650:	e3a00000 	mov	r0, #0
   11654:	e28dd00c 	add	sp, sp, #12
   11658:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1165c:	e30517b8 	movw	r1, #22456	; 0x57b8
   11660:	e3050694 	movw	r0, #22164	; 0x5694
   11664:	e3401001 	movt	r1, #1
   11668:	e3a02087 	mov	r2, #135	; 0x87
   1166c:	e3400001 	movt	r0, #1
   11670:	eb000345 	bl	1238c <assertion_failed>

00011674 <UndefinedInstructionInternal>:
   11674:	e24dd004 	sub	sp, sp, #4
   11678:	e24ee004 	sub	lr, lr, #4
   1167c:	e92d4000 	stmfd	sp!, {lr}
   11680:	e14fe000 	mrs	lr, SPSR
   11684:	e92d4000 	stmfd	sp!, {lr}
   11688:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1168c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11690:	e1a0100d 	mov	r1, sp
   11694:	f1020012 	cps	#18
   11698:	e1a0200d 	mov	r2, sp
   1169c:	e1a0300e 	mov	r3, lr
   116a0:	f1020011 	cps	#17
   116a4:	e1a0400d 	mov	r4, sp
   116a8:	e1a0500e 	mov	r5, lr
   116ac:	f102001f 	cps	#31
   116b0:	e1a0d001 	mov	sp, r1
   116b4:	e92d003c 	push	{r2, r3, r4, r5}
   116b8:	e1a0100d 	mov	r1, sp
   116bc:	e3a00001 	mov	r0, #1
   116c0:	eaffffbc 	b	115b8 <ExceptionHandler>

000116c4 <PrefetchAbortStub>:
   116c4:	e24dd004 	sub	sp, sp, #4
   116c8:	e24ee004 	sub	lr, lr, #4
   116cc:	e92d4000 	stmfd	sp!, {lr}
   116d0:	e14fe000 	mrs	lr, SPSR
   116d4:	e92d4000 	stmfd	sp!, {lr}
   116d8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   116dc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   116e0:	e1a0100d 	mov	r1, sp
   116e4:	f1020012 	cps	#18
   116e8:	e1a0200d 	mov	r2, sp
   116ec:	e1a0300e 	mov	r3, lr
   116f0:	f1020011 	cps	#17
   116f4:	e1a0400d 	mov	r4, sp
   116f8:	e1a0500e 	mov	r5, lr
   116fc:	f102001f 	cps	#31
   11700:	e1a0d001 	mov	sp, r1
   11704:	e92d003c 	push	{r2, r3, r4, r5}
   11708:	e1a0100d 	mov	r1, sp
   1170c:	e3a00002 	mov	r0, #2
   11710:	eaffffa8 	b	115b8 <ExceptionHandler>

00011714 <DataAbortStub>:
   11714:	e24dd004 	sub	sp, sp, #4
   11718:	e24ee008 	sub	lr, lr, #8
   1171c:	e92d4000 	stmfd	sp!, {lr}
   11720:	e14fe000 	mrs	lr, SPSR
   11724:	e92d4000 	stmfd	sp!, {lr}
   11728:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   1172c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   11730:	e1a0100d 	mov	r1, sp
   11734:	f1020012 	cps	#18
   11738:	e1a0200d 	mov	r2, sp
   1173c:	e1a0300e 	mov	r3, lr
   11740:	f1020011 	cps	#17
   11744:	e1a0400d 	mov	r4, sp
   11748:	e1a0500e 	mov	r5, lr
   1174c:	f102001f 	cps	#31
   11750:	e1a0d001 	mov	sp, r1
   11754:	e92d003c 	push	{r2, r3, r4, r5}
   11758:	e1a0100d 	mov	r1, sp
   1175c:	e3a00003 	mov	r0, #3
   11760:	eaffff94 	b	115b8 <ExceptionHandler>

00011764 <UndefinedInstructionStub>:
   11764:	e92d4001 	push	{r0, lr}
   11768:	eef80a10 	vmrs	r0, fpexc
   1176c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   11770:	0affffbf 	beq	11674 <UndefinedInstructionInternal>
   11774:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   11778:	eee80a10 	vmsr	fpexc, r0
   1177c:	e8fd8001 	ldm	sp!, {r0, pc}^

00011780 <IRQStub>:
   11780:	e24ee004 	sub	lr, lr, #4
   11784:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   11788:	e59f003c 	ldr	r0, [pc, #60]	; 117cc <FIQStub+0x34>
   1178c:	e580e000 	str	lr, [r0]
   11790:	eb0002fc 	bl	12388 <InterruptHandler>
   11794:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00011798 <FIQStub>:
   11798:	e24ee004 	sub	lr, lr, #4
   1179c:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   117a0:	e59f2028 	ldr	r2, [pc, #40]	; 117d0 <FIQStub+0x38>
   117a4:	e5921000 	ldr	r1, [r2]
   117a8:	e3510000 	cmp	r1, #0
   117ac:	0a000002 	beq	117bc <FIQStub+0x24>
   117b0:	e5920004 	ldr	r0, [r2, #4]
   117b4:	e12fff31 	blx	r1
   117b8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   117bc:	e59f1010 	ldr	r1, [pc, #16]	; 117d4 <FIQStub+0x3c>
   117c0:	e3a00000 	mov	r0, #0
   117c4:	e5810000 	str	r0, [r1]
   117c8:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   117cc:	00017134 	.word	0x00017134
   117d0:	00017128 	.word	0x00017128
   117d4:	3f00b20c 	.word	0x3f00b20c

000117d8 <CMemorySystem::~CMemorySystem()>:
   117d8:	e3073190 	movw	r3, #29072	; 0x7190
   117dc:	e3403001 	movt	r3, #1
   117e0:	e92d4070 	push	{r4, r5, r6, lr}
   117e4:	e1a04000 	mov	r4, r0
   117e8:	e5932000 	ldr	r2, [r3]
   117ec:	e1500002 	cmp	r0, r2
   117f0:	0a000005 	beq	1180c <CMemorySystem::~CMemorySystem()+0x34>
   117f4:	e28400c8 	add	r0, r4, #200	; 0xc8
   117f8:	eb000a57 	bl	1415c <CPageAllocator::~CPageAllocator()>
   117fc:	e284000c 	add	r0, r4, #12
   11800:	ebfffda3 	bl	10e94 <CHeapAllocator::~CHeapAllocator()>
   11804:	e1a00004 	mov	r0, r4
   11808:	e8bd8070 	pop	{r4, r5, r6, pc}
   1180c:	e5d02000 	ldrb	r2, [r0]
   11810:	e3a05000 	mov	r5, #0
   11814:	e5835000 	str	r5, [r3]
   11818:	e1520005 	cmp	r2, r5
   1181c:	0afffff4 	beq	117f4 <CMemorySystem::~CMemorySystem()+0x1c>
   11820:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11824:	e3c33005 	bic	r3, r3, #5
   11828:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   1182c:	ebfffea6 	bl	112cc <CleanDataCache>
   11830:	ebfffe7b 	bl	11224 <InvalidateDataCache>
   11834:	ee085f17 	mcr	15, 0, r5, cr8, cr7, {0}
   11838:	f57ff04f 	dsb	sy
   1183c:	eaffffec 	b	117f4 <CMemorySystem::~CMemorySystem()+0x1c>

00011840 <CMemorySystem::Destructor()>:
   11840:	e3073190 	movw	r3, #29072	; 0x7190
   11844:	e3403001 	movt	r3, #1
   11848:	e5932000 	ldr	r2, [r3]
   1184c:	e1520000 	cmp	r2, r0
   11850:	112fff1e 	bxne	lr
   11854:	e5d22000 	ldrb	r2, [r2]
   11858:	e92d4010 	push	{r4, lr}
   1185c:	e3a04000 	mov	r4, #0
   11860:	e1520004 	cmp	r2, r4
   11864:	e5834000 	str	r4, [r3]
   11868:	08bd8010 	popeq	{r4, pc}
   1186c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11870:	e3c33005 	bic	r3, r3, #5
   11874:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11878:	ebfffe93 	bl	112cc <CleanDataCache>
   1187c:	ebfffe68 	bl	11224 <InvalidateDataCache>
   11880:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   11884:	f57ff04f 	dsb	sy
   11888:	e8bd8010 	pop	{r4, pc}

0001188c <CMemorySystem::GetMemSize() const>:
   1188c:	e3073190 	movw	r3, #29072	; 0x7190
   11890:	e3403001 	movt	r3, #1
   11894:	e5933000 	ldr	r3, [r3]
   11898:	e3530000 	cmp	r3, #0
   1189c:	0a000002 	beq	118ac <CMemorySystem::GetMemSize() const+0x20>
   118a0:	e9930009 	ldmib	r3, {r0, r3}
   118a4:	e0800003 	add	r0, r0, r3
   118a8:	e12fff1e 	bx	lr
   118ac:	e3051884 	movw	r1, #22660	; 0x5884
   118b0:	e3a020a0 	mov	r2, #160	; 0xa0
   118b4:	e3401001 	movt	r1, #1
   118b8:	e281000c 	add	r0, r1, #12
   118bc:	e92d4010 	push	{r4, lr}
   118c0:	eb0002b1 	bl	1238c <assertion_failed>

000118c4 <CMemorySystem::Get()>:
   118c4:	e3073190 	movw	r3, #29072	; 0x7190
   118c8:	e3403001 	movt	r3, #1
   118cc:	e5930000 	ldr	r0, [r3]
   118d0:	e3500000 	cmp	r0, #0
   118d4:	112fff1e 	bxne	lr
   118d8:	e3051884 	movw	r1, #22660	; 0x5884
   118dc:	e3a020a6 	mov	r2, #166	; 0xa6
   118e0:	e3401001 	movt	r1, #1
   118e4:	e281000c 	add	r0, r1, #12
   118e8:	e92d4010 	push	{r4, lr}
   118ec:	eb0002a6 	bl	1238c <assertion_failed>

000118f0 <CMemorySystem::EnableMMU()>:
   118f0:	e5d03000 	ldrb	r3, [r0]
   118f4:	e92d4010 	push	{r4, lr}
   118f8:	e3530000 	cmp	r3, #0
   118fc:	0a00001a 	beq	1196c <CMemorySystem::EnableMMU()+0x7c>
   11900:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   11904:	e3833040 	orr	r3, r3, #64	; 0x40
   11908:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   1190c:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   11910:	e3130001 	tst	r3, #1
   11914:	1a000019 	bne	11980 <CMemorySystem::EnableMMU()+0x90>
   11918:	e3a04000 	mov	r4, #0
   1191c:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   11920:	e59000d8 	ldr	r0, [r0, #216]	; 0xd8
   11924:	e1500004 	cmp	r0, r4
   11928:	0a000019 	beq	11994 <CMemorySystem::EnableMMU()+0xa4>
   1192c:	eb000096 	bl	11b8c <CPageTable::GetBaseAddress() const>
   11930:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   11934:	e3a03001 	mov	r3, #1
   11938:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   1193c:	ebfffe38 	bl	11224 <InvalidateDataCache>
   11940:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   11944:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   11948:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   1194c:	f57ff04f 	dsb	sy
   11950:	f57ff06f 	isb	sy
   11954:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11958:	e3c33002 	bic	r3, r3, #2
   1195c:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   11960:	e3833005 	orr	r3, r3, #5
   11964:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11968:	e8bd8010 	pop	{r4, pc}
   1196c:	e3051884 	movw	r1, #22660	; 0x5884
   11970:	e3a020ac 	mov	r2, #172	; 0xac
   11974:	e3401001 	movt	r1, #1
   11978:	e281001c 	add	r0, r1, #28
   1197c:	eb000282 	bl	1238c <assertion_failed>
   11980:	e3051884 	movw	r1, #22660	; 0x5884
   11984:	e3a020ba 	mov	r2, #186	; 0xba
   11988:	e3401001 	movt	r1, #1
   1198c:	e281002c 	add	r0, r1, #44	; 0x2c
   11990:	eb00027d 	bl	1238c <assertion_failed>
   11994:	e3051884 	movw	r1, #22660	; 0x5884
   11998:	e3a020c0 	mov	r2, #192	; 0xc0
   1199c:	e3401001 	movt	r1, #1
   119a0:	e2810058 	add	r0, r1, #88	; 0x58
   119a4:	eb000278 	bl	1238c <assertion_failed>

000119a8 <CMemorySystem::CMemorySystem(bool)>:
   119a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   119ac:	e1a04000 	mov	r4, r0
   119b0:	e1a03001 	mov	r3, r1
   119b4:	e3a05000 	mov	r5, #0
   119b8:	e5c03000 	strb	r3, [r0]
   119bc:	e280700c 	add	r7, r0, #12
   119c0:	e59f1120 	ldr	r1, [pc, #288]	; 11ae8 <CMemorySystem::CMemorySystem(bool)+0x140>
   119c4:	e24dd02c 	sub	sp, sp, #44	; 0x2c
   119c8:	e5845004 	str	r5, [r4, #4]
   119cc:	e1a00007 	mov	r0, r7
   119d0:	e5845008 	str	r5, [r4, #8]
   119d4:	e28460c8 	add	r6, r4, #200	; 0xc8
   119d8:	ebfffd15 	bl	10e34 <CHeapAllocator::CHeapAllocator(char const*)>
   119dc:	e1a00006 	mov	r0, r6
   119e0:	eb0009d6 	bl	14140 <CPageAllocator::CPageAllocator()>
   119e4:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   119e8:	e3073190 	movw	r3, #29072	; 0x7190
   119ec:	e3403001 	movt	r3, #1
   119f0:	e5935000 	ldr	r5, [r3]
   119f4:	e3550000 	cmp	r5, #0
   119f8:	0a000002 	beq	11a08 <CMemorySystem::CMemorySystem(bool)+0x60>
   119fc:	e1a00004 	mov	r0, r4
   11a00:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11a04:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11a08:	e5834000 	str	r4, [r3]
   11a0c:	e3a01001 	mov	r1, #1
   11a10:	e28d000c 	add	r0, sp, #12
   11a14:	eb0003af 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   11a18:	e58d5000 	str	r5, [sp]
   11a1c:	e3a03014 	mov	r3, #20
   11a20:	e08d2003 	add	r2, sp, r3
   11a24:	e3a01005 	mov	r1, #5
   11a28:	e3401001 	movt	r1, #1
   11a2c:	e28d000c 	add	r0, sp, #12
   11a30:	eb0003ee 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   11a34:	e3500000 	cmp	r0, #0
   11a38:	0a000016 	beq	11a98 <CMemorySystem::CMemorySystem(bool)+0xf0>
   11a3c:	e59d3020 	ldr	r3, [sp, #32]
   11a40:	e3530000 	cmp	r3, #0
   11a44:	1a000022 	bne	11ad4 <CMemorySystem::CMemorySystem(bool)+0x12c>
   11a48:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   11a4c:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   11a50:	e2432609 	sub	r2, r3, #9437184	; 0x900000
   11a54:	e5843004 	str	r3, [r4, #4]
   11a58:	e1a00007 	mov	r0, r7
   11a5c:	e3a03701 	mov	r3, #262144	; 0x40000
   11a60:	e3a01605 	mov	r1, #5242880	; 0x500000
   11a64:	ebfffd0b 	bl	10e98 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   11a68:	e3a02501 	mov	r2, #4194304	; 0x400000
   11a6c:	e1a01005 	mov	r1, r5
   11a70:	e1a00006 	mov	r0, r6
   11a74:	eb0009b9 	bl	14160 <CPageAllocator::Setup(unsigned int, unsigned int)>
   11a78:	e5d43000 	ldrb	r3, [r4]
   11a7c:	e3530000 	cmp	r3, #0
   11a80:	1a00000a 	bne	11ab0 <CMemorySystem::CMemorySystem(bool)+0x108>
   11a84:	e28d000c 	add	r0, sp, #12
   11a88:	eb000399 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   11a8c:	e1a00004 	mov	r0, r4
   11a90:	e28dd02c 	add	sp, sp, #44	; 0x2c
   11a94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   11a98:	e58d0020 	str	r0, [sp, #32]
   11a9c:	e3a03303 	mov	r3, #201326592	; 0xc000000
   11aa0:	e58d3024 	str	r3, [sp, #36]	; 0x24
   11aa4:	e3a026b7 	mov	r2, #191889408	; 0xb700000
   11aa8:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   11aac:	eaffffe8 	b	11a54 <CMemorySystem::CMemorySystem(bool)+0xac>
   11ab0:	e3a00004 	mov	r0, #4
   11ab4:	ebfffcba 	bl	10da4 <operator new(unsigned int)>
   11ab8:	e5941004 	ldr	r1, [r4, #4]
   11abc:	e1a05000 	mov	r5, r0
   11ac0:	eb00000c 	bl	11af8 <CPageTable::CPageTable(unsigned int)>
   11ac4:	e58450d8 	str	r5, [r4, #216]	; 0xd8
   11ac8:	e1a00004 	mov	r0, r4
   11acc:	ebffff87 	bl	118f0 <CMemorySystem::EnableMMU()>
   11ad0:	eaffffeb 	b	11a84 <CMemorySystem::CMemorySystem(bool)+0xdc>
   11ad4:	e3051884 	movw	r1, #22660	; 0x5884
   11ad8:	e3a0204e 	mov	r2, #78	; 0x4e
   11adc:	e3401001 	movt	r1, #1
   11ae0:	e2810074 	add	r0, r1, #116	; 0x74
   11ae4:	eb000228 	bl	1238c <assertion_failed>
   11ae8:	000158f0 	.word	0x000158f0

00011aec <CMemorySystem::GetCoherentPage(unsigned int)>:
   11aec:	e1a00600 	lsl	r0, r0, #12
   11af0:	e2800501 	add	r0, r0, #4194304	; 0x400000
   11af4:	e12fff1e 	bx	lr

00011af8 <CPageTable::CPageTable(unsigned int)>:
   11af8:	e3a0c9ba 	mov	ip, #3047424	; 0x2e8000
   11afc:	e3a03000 	mov	r3, #0
   11b00:	e92d4070 	push	{r4, r5, r6, lr}
   11b04:	e1a06000 	mov	r6, r0
   11b08:	e580c000 	str	ip, [r0]
   11b0c:	e304e924 	movw	lr, #18724	; 0x4924
   11b10:	e340e001 	movt	lr, #1
   11b14:	e3000412 	movw	r0, #1042	; 0x412
   11b18:	e3400001 	movt	r0, #1
   11b1c:	e30f5ffe 	movw	r5, #65534	; 0xfffe
   11b20:	e3445003 	movt	r5, #16387	; 0x4003
   11b24:	e3004416 	movw	r4, #1046	; 0x416
   11b28:	e3404001 	movt	r4, #1
   11b2c:	e300240e 	movw	r2, #1038	; 0x40e
   11b30:	ea00000c 	b	11b68 <CPageTable::CPageTable(unsigned int)+0x70>
   11b34:	e153000e 	cmp	r3, lr
   11b38:	e300240e 	movw	r2, #1038	; 0x40e
   11b3c:	3a000008 	bcc	11b64 <CPageTable::CPageTable(unsigned int)+0x6c>
   11b40:	e3530501 	cmp	r3, #4194304	; 0x400000
   11b44:	01a02000 	moveq	r2, r0
   11b48:	0a000005 	beq	11b64 <CPageTable::CPageTable(unsigned int)+0x6c>
   11b4c:	e1530001 	cmp	r3, r1
   11b50:	e300241e 	movw	r2, #1054	; 0x41e
   11b54:	3a000002 	bcc	11b64 <CPageTable::CPageTable(unsigned int)+0x6c>
   11b58:	e1530005 	cmp	r3, r5
   11b5c:	91a02004 	movls	r2, r4
   11b60:	83a02000 	movhi	r2, #0
   11b64:	e28cc004 	add	ip, ip, #4
   11b68:	e1822003 	orr	r2, r2, r3
   11b6c:	e3730601 	cmn	r3, #1048576	; 0x100000
   11b70:	e58c2000 	str	r2, [ip]
   11b74:	e2833601 	add	r3, r3, #1048576	; 0x100000
   11b78:	1affffed 	bne	11b34 <CPageTable::CPageTable(unsigned int)+0x3c>
   11b7c:	ebfffdd2 	bl	112cc <CleanDataCache>
   11b80:	e1a00006 	mov	r0, r6
   11b84:	e8bd8070 	pop	{r4, r5, r6, pc}

00011b88 <CPageTable::~CPageTable()>:
   11b88:	e12fff1e 	bx	lr

00011b8c <CPageTable::GetBaseAddress() const>:
   11b8c:	e5900000 	ldr	r0, [r0]
   11b90:	e3800059 	orr	r0, r0, #89	; 0x59
   11b94:	e12fff1e 	bx	lr

00011b98 <CurrentExecutionLevel>:
   11b98:	e10f0000 	mrs	r0, CPSR
   11b9c:	e3100040 	tst	r0, #64	; 0x40
   11ba0:	07e003d0 	ubfxeq	r0, r0, #7, #1
   11ba4:	13a00002 	movne	r0, #2
   11ba8:	e12fff1e 	bx	lr

00011bac <EnterCritical>:
   11bac:	e2403001 	sub	r3, r0, #1
   11bb0:	e3530001 	cmp	r3, #1
   11bb4:	e92d4010 	push	{r4, lr}
   11bb8:	8a000012 	bhi	11c08 <EnterCritical+0x5c>
   11bbc:	e10f1000 	mrs	r1, CPSR
   11bc0:	e3500002 	cmp	r0, #2
   11bc4:	1a000015 	bne	11c20 <EnterCritical+0x74>
   11bc8:	f10c00c0 	cpsid	if
   11bcc:	e3073194 	movw	r3, #29076	; 0x7194
   11bd0:	e3403001 	movt	r3, #1
   11bd4:	e5932000 	ldr	r2, [r3]
   11bd8:	e3520013 	cmp	r2, #19
   11bdc:	8a000017 	bhi	11c40 <EnterCritical+0x94>
   11be0:	e5932000 	ldr	r2, [r3]
   11be4:	e3500001 	cmp	r0, #1
   11be8:	e2820001 	add	r0, r2, #1
   11bec:	e0832102 	add	r2, r3, r2, lsl #2
   11bf0:	e5830000 	str	r0, [r3]
   11bf4:	e5821004 	str	r1, [r2, #4]
   11bf8:	1a000000 	bne	11c00 <EnterCritical+0x54>
   11bfc:	f1080040 	cpsie	f
   11c00:	f57ff05f 	dmb	sy
   11c04:	e8bd8010 	pop	{r4, pc}
   11c08:	e3051914 	movw	r1, #22804	; 0x5914
   11c0c:	e3050924 	movw	r0, #22820	; 0x5924
   11c10:	e3401001 	movt	r1, #1
   11c14:	e3a02064 	mov	r2, #100	; 0x64
   11c18:	e3400001 	movt	r0, #1
   11c1c:	eb0001da 	bl	1238c <assertion_failed>
   11c20:	e3110040 	tst	r1, #64	; 0x40
   11c24:	0affffe7 	beq	11bc8 <EnterCritical+0x1c>
   11c28:	e3051914 	movw	r1, #22804	; 0x5914
   11c2c:	e305095c 	movw	r0, #22876	; 0x595c
   11c30:	e3401001 	movt	r1, #1
   11c34:	e3a0206a 	mov	r2, #106	; 0x6a
   11c38:	e3400001 	movt	r0, #1
   11c3c:	eb0001d2 	bl	1238c <assertion_failed>
   11c40:	e3051914 	movw	r1, #22804	; 0x5914
   11c44:	e305098c 	movw	r0, #22924	; 0x598c
   11c48:	e3401001 	movt	r1, #1
   11c4c:	e3a0206e 	mov	r2, #110	; 0x6e
   11c50:	e3400001 	movt	r0, #1
   11c54:	eb0001cc 	bl	1238c <assertion_failed>

00011c58 <LeaveCritical>:
   11c58:	f57ff05f 	dmb	sy
   11c5c:	f10c0040 	cpsid	f
   11c60:	e3073194 	movw	r3, #29076	; 0x7194
   11c64:	e3403001 	movt	r3, #1
   11c68:	e5932000 	ldr	r2, [r3]
   11c6c:	e3520000 	cmp	r2, #0
   11c70:	0a000006 	beq	11c90 <LeaveCritical+0x38>
   11c74:	e5932000 	ldr	r2, [r3]
   11c78:	e2422001 	sub	r2, r2, #1
   11c7c:	e5832000 	str	r2, [r3]
   11c80:	e0833102 	add	r3, r3, r2, lsl #2
   11c84:	e5933004 	ldr	r3, [r3, #4]
   11c88:	e121f003 	msr	CPSR_c, r3
   11c8c:	e12fff1e 	bx	lr
   11c90:	e3051914 	movw	r1, #22804	; 0x5914
   11c94:	e30509b4 	movw	r0, #22964	; 0x59b4
   11c98:	e3401001 	movt	r1, #1
   11c9c:	e3a0207f 	mov	r2, #127	; 0x7f
   11ca0:	e3400001 	movt	r0, #1
   11ca4:	e92d4010 	push	{r4, lr}
   11ca8:	eb0001b7 	bl	1238c <assertion_failed>

00011cac <SyncDataAndInstructionCache>:
   11cac:	e92d4010 	push	{r4, lr}
   11cb0:	ebfffd85 	bl	112cc <CleanDataCache>
   11cb4:	e3a03000 	mov	r3, #0
   11cb8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11cbc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11cc0:	f57ff04f 	dsb	sy
   11cc4:	f57ff06f 	isb	sy
   11cc8:	e8bd8010 	pop	{r4, pc}

00011ccc <CInterruptSystem::CInterruptSystem()>:
   11ccc:	e3a02000 	mov	r2, #0
   11cd0:	e2403004 	sub	r3, r0, #4
   11cd4:	e2801f53 	add	r1, r0, #332	; 0x14c
   11cd8:	e5a32004 	str	r2, [r3, #4]!
   11cdc:	e1530001 	cmp	r3, r1
   11ce0:	e5832150 	str	r2, [r3, #336]	; 0x150
   11ce4:	1afffffb 	bne	11cd8 <CInterruptSystem::CInterruptSystem()+0xc>
   11ce8:	e30731e8 	movw	r3, #29160	; 0x71e8
   11cec:	e3403001 	movt	r3, #1
   11cf0:	e5830000 	str	r0, [r3]
   11cf4:	e12fff1e 	bx	lr

00011cf8 <CInterruptSystem::~CInterruptSystem()>:
   11cf8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   11cfc:	f10c0080 	cpsid	i
   11d00:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11d04:	e30721e8 	movw	r2, #29160	; 0x71e8
   11d08:	e3433f00 	movt	r3, #16128	; 0x3f00
   11d0c:	e3a0e101 	mov	lr, #1073741824	; 0x40000000
   11d10:	e3402001 	movt	r2, #1
   11d14:	e3a01000 	mov	r1, #0
   11d18:	e583120c 	str	r1, [r3, #524]	; 0x20c
   11d1c:	e3e0c000 	mvn	ip, #0
   11d20:	e583c21c 	str	ip, [r3, #540]	; 0x21c
   11d24:	e583c220 	str	ip, [r3, #544]	; 0x220
   11d28:	e583c224 	str	ip, [r3, #548]	; 0x224
   11d2c:	e58e1040 	str	r1, [lr, #64]	; 0x40
   11d30:	e5821000 	str	r1, [r2]
   11d34:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011d38 <CInterruptSystem::Initialize()>:
   11d38:	e3012780 	movw	r2, #6016	; 0x1780
   11d3c:	e3013798 	movw	r3, #6040	; 0x1798
   11d40:	e3402001 	movt	r2, #1
   11d44:	e3403001 	movt	r3, #1
   11d48:	e2422018 	sub	r2, r2, #24
   11d4c:	e243301c 	sub	r3, r3, #28
   11d50:	e1a02142 	asr	r2, r2, #2
   11d54:	e1a03143 	asr	r3, r3, #2
   11d58:	e2422002 	sub	r2, r2, #2
   11d5c:	e92d4010 	push	{r4, lr}
   11d60:	e2433002 	sub	r3, r3, #2
   11d64:	e3a04000 	mov	r4, #0
   11d68:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11d6c:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   11d70:	e1c421f8 	strd	r2, [r4, #24]
   11d74:	ebffffcc 	bl	11cac <SyncDataAndInstructionCache>
   11d78:	e3a03a0b 	mov	r3, #45056	; 0xb000
   11d7c:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   11d80:	e3433f00 	movt	r3, #16128	; 0x3f00
   11d84:	e3e02000 	mvn	r2, #0
   11d88:	e583420c 	str	r4, [r3, #524]	; 0x20c
   11d8c:	e583221c 	str	r2, [r3, #540]	; 0x21c
   11d90:	e5832220 	str	r2, [r3, #544]	; 0x220
   11d94:	e5832224 	str	r2, [r3, #548]	; 0x224
   11d98:	e5814040 	str	r4, [r1, #64]	; 0x40
   11d9c:	f1080080 	cpsie	i
   11da0:	e3a00001 	mov	r0, #1
   11da4:	e8bd8010 	pop	{r4, pc}

00011da8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   11da8:	e3510053 	cmp	r1, #83	; 0x53
   11dac:	e92d4010 	push	{r4, lr}
   11db0:	8a00001d 	bhi	11e2c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x84>
   11db4:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   11db8:	e080e101 	add	lr, r0, r1, lsl #2
   11dbc:	e35c0000 	cmp	ip, #0
   11dc0:	1a00001f 	bne	11e44 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x9c>
   11dc4:	e7802101 	str	r2, [r0, r1, lsl #2]
   11dc8:	e3510047 	cmp	r1, #71	; 0x47
   11dcc:	e58e3150 	str	r3, [lr, #336]	; 0x150
   11dd0:	9a000006 	bls	11df0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   11dd4:	e3510049 	cmp	r1, #73	; 0x49
   11dd8:	1a00001f 	bne	11e5c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb4>
   11ddc:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   11de0:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   11de4:	e3833002 	orr	r3, r3, #2
   11de8:	e5823040 	str	r3, [r2, #64]	; 0x40
   11dec:	e8bd8010 	pop	{r4, pc}
   11df0:	e351001f 	cmp	r1, #31
   11df4:	930b3210 	movwls	r3, #45584	; 0xb210
   11df8:	93433f00 	movtls	r3, #16128	; 0x3f00
   11dfc:	9a000005 	bls	11e18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x70>
   11e00:	e30b2218 	movw	r2, #45592	; 0xb218
   11e04:	e30b3214 	movw	r3, #45588	; 0xb214
   11e08:	e3432f00 	movt	r2, #16128	; 0x3f00
   11e0c:	e351003f 	cmp	r1, #63	; 0x3f
   11e10:	e3433f00 	movt	r3, #16128	; 0x3f00
   11e14:	81a03002 	movhi	r3, r2
   11e18:	e201101f 	and	r1, r1, #31
   11e1c:	e3a02001 	mov	r2, #1
   11e20:	e1a01112 	lsl	r1, r2, r1
   11e24:	e5831000 	str	r1, [r3]
   11e28:	e8bd8010 	pop	{r4, pc}
   11e2c:	e30519cc 	movw	r1, #22988	; 0x59cc
   11e30:	e30509dc 	movw	r0, #23004	; 0x59dc
   11e34:	e3401001 	movt	r1, #1
   11e38:	e3a02076 	mov	r2, #118	; 0x76
   11e3c:	e3400001 	movt	r0, #1
   11e40:	eb000151 	bl	1238c <assertion_failed>
   11e44:	e30519cc 	movw	r1, #22988	; 0x59cc
   11e48:	e30509f0 	movw	r0, #23024	; 0x59f0
   11e4c:	e3401001 	movt	r1, #1
   11e50:	e3a02077 	mov	r2, #119	; 0x77
   11e54:	e3400001 	movt	r0, #1
   11e58:	eb00014b 	bl	1238c <assertion_failed>
   11e5c:	e30519cc 	movw	r1, #22988	; 0x59cc
   11e60:	e3050a0c 	movw	r0, #23052	; 0x5a0c
   11e64:	e3401001 	movt	r1, #1
   11e68:	e3a020b0 	mov	r2, #176	; 0xb0
   11e6c:	e3400001 	movt	r0, #1
   11e70:	eb000145 	bl	1238c <assertion_failed>

00011e74 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   11e74:	e3510053 	cmp	r1, #83	; 0x53
   11e78:	e92d4010 	push	{r4, lr}
   11e7c:	8a00001e 	bhi	11efc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x88>
   11e80:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   11e84:	e0802101 	add	r2, r0, r1, lsl #2
   11e88:	e3530000 	cmp	r3, #0
   11e8c:	0a000020 	beq	11f14 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa0>
   11e90:	e3510047 	cmp	r1, #71	; 0x47
   11e94:	9a000009 	bls	11ec0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   11e98:	e3510049 	cmp	r1, #73	; 0x49
   11e9c:	1a000022 	bne	11f2c <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb8>
   11ea0:	e3a0c101 	mov	ip, #1073741824	; 0x40000000
   11ea4:	e59c3040 	ldr	r3, [ip, #64]	; 0x40
   11ea8:	e3c33002 	bic	r3, r3, #2
   11eac:	e58c3040 	str	r3, [ip, #64]	; 0x40
   11eb0:	e3a03000 	mov	r3, #0
   11eb4:	e7803101 	str	r3, [r0, r1, lsl #2]
   11eb8:	e5823150 	str	r3, [r2, #336]	; 0x150
   11ebc:	e8bd8010 	pop	{r4, pc}
   11ec0:	e351001f 	cmp	r1, #31
   11ec4:	930b321c 	movwls	r3, #45596	; 0xb21c
   11ec8:	93433f00 	movtls	r3, #16128	; 0x3f00
   11ecc:	9a000005 	bls	11ee8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   11ed0:	e30bc224 	movw	ip, #45604	; 0xb224
   11ed4:	e30b3220 	movw	r3, #45600	; 0xb220
   11ed8:	e343cf00 	movt	ip, #16128	; 0x3f00
   11edc:	e351003f 	cmp	r1, #63	; 0x3f
   11ee0:	e3433f00 	movt	r3, #16128	; 0x3f00
   11ee4:	81a0300c 	movhi	r3, ip
   11ee8:	e201e01f 	and	lr, r1, #31
   11eec:	e3a0c001 	mov	ip, #1
   11ef0:	e1a0ce1c 	lsl	ip, ip, lr
   11ef4:	e583c000 	str	ip, [r3]
   11ef8:	eaffffec 	b	11eb0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   11efc:	e30519cc 	movw	r1, #22988	; 0x59cc
   11f00:	e30509dc 	movw	r0, #23004	; 0x59dc
   11f04:	e3401001 	movt	r1, #1
   11f08:	e3a02081 	mov	r2, #129	; 0x81
   11f0c:	e3400001 	movt	r0, #1
   11f10:	eb00011d 	bl	1238c <assertion_failed>
   11f14:	e30519cc 	movw	r1, #22988	; 0x59cc
   11f18:	e3050a2c 	movw	r0, #23084	; 0x5a2c
   11f1c:	e3401001 	movt	r1, #1
   11f20:	e3a02082 	mov	r2, #130	; 0x82
   11f24:	e3400001 	movt	r0, #1
   11f28:	eb000117 	bl	1238c <assertion_failed>
   11f2c:	e30519cc 	movw	r1, #22988	; 0x59cc
   11f30:	e3050a0c 	movw	r0, #23052	; 0x5a0c
   11f34:	e3401001 	movt	r1, #1
   11f38:	e3a020c8 	mov	r2, #200	; 0xc8
   11f3c:	e3400001 	movt	r0, #1
   11f40:	eb000111 	bl	1238c <assertion_failed>

00011f44 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   11f44:	e3510047 	cmp	r1, #71	; 0x47
   11f48:	e92d4010 	push	{r4, lr}
   11f4c:	8a00000d 	bhi	11f88 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x44>
   11f50:	e3520000 	cmp	r2, #0
   11f54:	0a000011 	beq	11fa0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x5c>
   11f58:	e3070128 	movw	r0, #28968	; 0x7128
   11f5c:	e3400001 	movt	r0, #1
   11f60:	e590c000 	ldr	ip, [r0]
   11f64:	e35c0000 	cmp	ip, #0
   11f68:	1a000012 	bne	11fb8 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x74>
   11f6c:	e5802000 	str	r2, [r0]
   11f70:	e3a02a0b 	mov	r2, #45056	; 0xb000
   11f74:	e3432f00 	movt	r2, #16128	; 0x3f00
   11f78:	e3811080 	orr	r1, r1, #128	; 0x80
   11f7c:	e5803004 	str	r3, [r0, #4]
   11f80:	e582120c 	str	r1, [r2, #524]	; 0x20c
   11f84:	e8bd8010 	pop	{r4, pc}
   11f88:	e30519cc 	movw	r1, #22988	; 0x59cc
   11f8c:	e3050a48 	movw	r0, #23112	; 0x5a48
   11f90:	e3401001 	movt	r1, #1
   11f94:	e3a0208f 	mov	r2, #143	; 0x8f
   11f98:	e3400001 	movt	r0, #1
   11f9c:	eb0000fa 	bl	1238c <assertion_failed>
   11fa0:	e30519cc 	movw	r1, #22988	; 0x59cc
   11fa4:	e3050a7c 	movw	r0, #23164	; 0x5a7c
   11fa8:	e3401001 	movt	r1, #1
   11fac:	e3a02090 	mov	r2, #144	; 0x90
   11fb0:	e3400001 	movt	r0, #1
   11fb4:	eb0000f4 	bl	1238c <assertion_failed>
   11fb8:	e30519cc 	movw	r1, #22988	; 0x59cc
   11fbc:	e3050a5c 	movw	r0, #23132	; 0x5a5c
   11fc0:	e3401001 	movt	r1, #1
   11fc4:	e3a02091 	mov	r2, #145	; 0x91
   11fc8:	e3400001 	movt	r0, #1
   11fcc:	eb0000ee 	bl	1238c <assertion_failed>

00011fd0 <CInterruptSystem::DisconnectFIQ()>:
   11fd0:	e3073128 	movw	r3, #28968	; 0x7128
   11fd4:	e3403001 	movt	r3, #1
   11fd8:	e5932000 	ldr	r2, [r3]
   11fdc:	e3520000 	cmp	r2, #0
   11fe0:	0a00000c 	beq	12018 <CInterruptSystem::DisconnectFIQ()+0x48>
   11fe4:	e3a01a0b 	mov	r1, #45056	; 0xb000
   11fe8:	e3a02000 	mov	r2, #0
   11fec:	e3431f00 	movt	r1, #16128	; 0x3f00
   11ff0:	e581220c 	str	r2, [r1, #524]	; 0x20c
   11ff4:	e5c32000 	strb	r2, [r3]
   11ff8:	e5c32001 	strb	r2, [r3, #1]
   11ffc:	e5c32002 	strb	r2, [r3, #2]
   12000:	e5c32003 	strb	r2, [r3, #3]
   12004:	e5c32004 	strb	r2, [r3, #4]
   12008:	e5c32005 	strb	r2, [r3, #5]
   1200c:	e5c32006 	strb	r2, [r3, #6]
   12010:	e5c32007 	strb	r2, [r3, #7]
   12014:	e12fff1e 	bx	lr
   12018:	e30519cc 	movw	r1, #22988	; 0x59cc
   1201c:	e3050a74 	movw	r0, #23156	; 0x5a74
   12020:	e3401001 	movt	r1, #1
   12024:	e3a0209b 	mov	r2, #155	; 0x9b
   12028:	e3400001 	movt	r0, #1
   1202c:	e92d4010 	push	{r4, lr}
   12030:	eb0000d5 	bl	1238c <assertion_failed>

00012034 <CInterruptSystem::EnableIRQ(unsigned int)>:
   12034:	e3500053 	cmp	r0, #83	; 0x53
   12038:	e92d4010 	push	{r4, lr}
   1203c:	8a000017 	bhi	120a0 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   12040:	e3500047 	cmp	r0, #71	; 0x47
   12044:	8a00000e 	bhi	12084 <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   12048:	e350001f 	cmp	r0, #31
   1204c:	930b3210 	movwls	r3, #45584	; 0xb210
   12050:	93433f00 	movtls	r3, #16128	; 0x3f00
   12054:	9a000005 	bls	12070 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   12058:	e30b2218 	movw	r2, #45592	; 0xb218
   1205c:	e30b3214 	movw	r3, #45588	; 0xb214
   12060:	e3432f00 	movt	r2, #16128	; 0x3f00
   12064:	e350003f 	cmp	r0, #63	; 0x3f
   12068:	e3433f00 	movt	r3, #16128	; 0x3f00
   1206c:	81a03002 	movhi	r3, r2
   12070:	e200001f 	and	r0, r0, #31
   12074:	e3a02001 	mov	r2, #1
   12078:	e1a00012 	lsl	r0, r2, r0
   1207c:	e5830000 	str	r0, [r3]
   12080:	e8bd8010 	pop	{r4, pc}
   12084:	e3500049 	cmp	r0, #73	; 0x49
   12088:	1a00000a 	bne	120b8 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   1208c:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   12090:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   12094:	e3833002 	orr	r3, r3, #2
   12098:	e5823040 	str	r3, [r2, #64]	; 0x40
   1209c:	e8bd8010 	pop	{r4, pc}
   120a0:	e30519cc 	movw	r1, #22988	; 0x59cc
   120a4:	e30509dc 	movw	r0, #23004	; 0x59dc
   120a8:	e3401001 	movt	r1, #1
   120ac:	e3a020a7 	mov	r2, #167	; 0xa7
   120b0:	e3400001 	movt	r0, #1
   120b4:	eb0000b4 	bl	1238c <assertion_failed>
   120b8:	e30519cc 	movw	r1, #22988	; 0x59cc
   120bc:	e3050a0c 	movw	r0, #23052	; 0x5a0c
   120c0:	e3401001 	movt	r1, #1
   120c4:	e3a020b0 	mov	r2, #176	; 0xb0
   120c8:	e3400001 	movt	r0, #1
   120cc:	eb0000ae 	bl	1238c <assertion_failed>

000120d0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   120d0:	e3500053 	cmp	r0, #83	; 0x53
   120d4:	e92d4010 	push	{r4, lr}
   120d8:	8a000017 	bhi	1213c <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   120dc:	e3500047 	cmp	r0, #71	; 0x47
   120e0:	8a00000e 	bhi	12120 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   120e4:	e350001f 	cmp	r0, #31
   120e8:	930b321c 	movwls	r3, #45596	; 0xb21c
   120ec:	93433f00 	movtls	r3, #16128	; 0x3f00
   120f0:	9a000005 	bls	1210c <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   120f4:	e30b2224 	movw	r2, #45604	; 0xb224
   120f8:	e30b3220 	movw	r3, #45600	; 0xb220
   120fc:	e3432f00 	movt	r2, #16128	; 0x3f00
   12100:	e350003f 	cmp	r0, #63	; 0x3f
   12104:	e3433f00 	movt	r3, #16128	; 0x3f00
   12108:	81a03002 	movhi	r3, r2
   1210c:	e200001f 	and	r0, r0, #31
   12110:	e3a02001 	mov	r2, #1
   12114:	e1a00012 	lsl	r0, r2, r0
   12118:	e5830000 	str	r0, [r3]
   1211c:	e8bd8010 	pop	{r4, pc}
   12120:	e3500049 	cmp	r0, #73	; 0x49
   12124:	1a00000a 	bne	12154 <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   12128:	e3a02101 	mov	r2, #1073741824	; 0x40000000
   1212c:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   12130:	e3c33002 	bic	r3, r3, #2
   12134:	e5823040 	str	r3, [r2, #64]	; 0x40
   12138:	e8bd8010 	pop	{r4, pc}
   1213c:	e30519cc 	movw	r1, #22988	; 0x59cc
   12140:	e30509dc 	movw	r0, #23004	; 0x59dc
   12144:	e3401001 	movt	r1, #1
   12148:	e3a020bf 	mov	r2, #191	; 0xbf
   1214c:	e3400001 	movt	r0, #1
   12150:	eb00008d 	bl	1238c <assertion_failed>
   12154:	e30519cc 	movw	r1, #22988	; 0x59cc
   12158:	e3050a0c 	movw	r0, #23052	; 0x5a0c
   1215c:	e3401001 	movt	r1, #1
   12160:	e3a020c8 	mov	r2, #200	; 0xc8
   12164:	e3400001 	movt	r0, #1
   12168:	eb000087 	bl	1238c <assertion_failed>

0001216c <CInterruptSystem::EnableFIQ(unsigned int)>:
   1216c:	e3500047 	cmp	r0, #71	; 0x47
   12170:	8a000004 	bhi	12188 <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   12174:	e3a03a0b 	mov	r3, #45056	; 0xb000
   12178:	e3800080 	orr	r0, r0, #128	; 0x80
   1217c:	e3433f00 	movt	r3, #16128	; 0x3f00
   12180:	e583020c 	str	r0, [r3, #524]	; 0x20c
   12184:	e12fff1e 	bx	lr
   12188:	e30519cc 	movw	r1, #22988	; 0x59cc
   1218c:	e3050a48 	movw	r0, #23112	; 0x5a48
   12190:	e3401001 	movt	r1, #1
   12194:	e3a020d7 	mov	r2, #215	; 0xd7
   12198:	e3400001 	movt	r0, #1
   1219c:	e92d4010 	push	{r4, lr}
   121a0:	eb000079 	bl	1238c <assertion_failed>

000121a4 <CInterruptSystem::DisableFIQ()>:
   121a4:	e3a03a0b 	mov	r3, #45056	; 0xb000
   121a8:	e3a02000 	mov	r2, #0
   121ac:	e3433f00 	movt	r3, #16128	; 0x3f00
   121b0:	e583220c 	str	r2, [r3, #524]	; 0x20c
   121b4:	e12fff1e 	bx	lr

000121b8 <CInterruptSystem::Get()>:
   121b8:	e30731e8 	movw	r3, #29160	; 0x71e8
   121bc:	e3403001 	movt	r3, #1
   121c0:	e5930000 	ldr	r0, [r3]
   121c4:	e3500000 	cmp	r0, #0
   121c8:	112fff1e 	bxne	lr
   121cc:	e30519cc 	movw	r1, #22988	; 0x59cc
   121d0:	e3050694 	movw	r0, #22164	; 0x5694
   121d4:	e3401001 	movt	r1, #1
   121d8:	e3a020e9 	mov	r2, #233	; 0xe9
   121dc:	e3400001 	movt	r0, #1
   121e0:	e92d4010 	push	{r4, lr}
   121e4:	eb000068 	bl	1238c <assertion_failed>

000121e8 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   121e8:	e3510053 	cmp	r1, #83	; 0x53
   121ec:	e92d4010 	push	{r4, lr}
   121f0:	8a00000b 	bhi	12224 <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   121f4:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   121f8:	e0803101 	add	r3, r0, r1, lsl #2
   121fc:	e3540000 	cmp	r4, #0
   12200:	0a000003 	beq	12214 <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   12204:	e5930150 	ldr	r0, [r3, #336]	; 0x150
   12208:	e12fff34 	blx	r4
   1220c:	e3a00001 	mov	r0, #1
   12210:	e8bd8010 	pop	{r4, pc}
   12214:	e1a00001 	mov	r0, r1
   12218:	ebffffac 	bl	120d0 <CInterruptSystem::DisableIRQ(unsigned int)>
   1221c:	e1a00004 	mov	r0, r4
   12220:	e8bd8010 	pop	{r4, pc}
   12224:	e30519cc 	movw	r1, #22988	; 0x59cc
   12228:	e30509dc 	movw	r0, #23004	; 0x59dc
   1222c:	e3401001 	movt	r1, #1
   12230:	e3a020ef 	mov	r2, #239	; 0xef
   12234:	e3400001 	movt	r0, #1
   12238:	eb000053 	bl	1238c <assertion_failed>

0001223c <CInterruptSystem::InterruptHandler()>:
   1223c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12240:	e30771e8 	movw	r7, #29160	; 0x71e8
   12244:	e3407001 	movt	r7, #1
   12248:	e24dd010 	sub	sp, sp, #16
   1224c:	e5972000 	ldr	r2, [r7]
   12250:	e3520000 	cmp	r2, #0
   12254:	0a00003a 	beq	12344 <CInterruptSystem::InterruptHandler()+0x108>
   12258:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   1225c:	e5916060 	ldr	r6, [r1, #96]	; 0x60
   12260:	e3c63e1f 	bic	r3, r6, #496	; 0x1f0
   12264:	e3c33002 	bic	r3, r3, #2
   12268:	e3530000 	cmp	r3, #0
   1226c:	1a00003a 	bne	1235c <CInterruptSystem::InterruptHandler()+0x120>
   12270:	e2166002 	ands	r6, r6, #2
   12274:	1a000025 	bne	12310 <CInterruptSystem::InterruptHandler()+0xd4>
   12278:	e3a03a0b 	mov	r3, #45056	; 0xb000
   1227c:	e28d8008 	add	r8, sp, #8
   12280:	e3433f00 	movt	r3, #16128	; 0x3f00
   12284:	e5934204 	ldr	r4, [r3, #516]	; 0x204
   12288:	e5932208 	ldr	r2, [r3, #520]	; 0x208
   1228c:	e3540000 	cmp	r4, #0
   12290:	e58d2008 	str	r2, [sp, #8]
   12294:	e5933200 	ldr	r3, [r3, #512]	; 0x200
   12298:	e6ef3073 	uxtb	r3, r3
   1229c:	e58d300c 	str	r3, [sp, #12]
   122a0:	1a000005 	bne	122bc <CInterruptSystem::InterruptHandler()+0x80>
   122a4:	e2866020 	add	r6, r6, #32
   122a8:	e3560060 	cmp	r6, #96	; 0x60
   122ac:	0a000033 	beq	12380 <CInterruptSystem::InterruptHandler()+0x144>
   122b0:	e4984004 	ldr	r4, [r8], #4
   122b4:	e3540000 	cmp	r4, #0
   122b8:	0afffff9 	beq	122a4 <CInterruptSystem::InterruptHandler()+0x68>
   122bc:	e1a05006 	mov	r5, r6
   122c0:	ea000002 	b	122d0 <CInterruptSystem::InterruptHandler()+0x94>
   122c4:	e1b040a4 	lsrs	r4, r4, #1
   122c8:	e2855001 	add	r5, r5, #1
   122cc:	0afffff4 	beq	122a4 <CInterruptSystem::InterruptHandler()+0x68>
   122d0:	e3140001 	tst	r4, #1
   122d4:	0afffffa 	beq	122c4 <CInterruptSystem::InterruptHandler()+0x88>
   122d8:	e5973000 	ldr	r3, [r7]
   122dc:	e3550053 	cmp	r5, #83	; 0x53
   122e0:	8a000011 	bhi	1232c <CInterruptSystem::InterruptHandler()+0xf0>
   122e4:	e7932105 	ldr	r2, [r3, r5, lsl #2]
   122e8:	e3520000 	cmp	r2, #0
   122ec:	0a000004 	beq	12304 <CInterruptSystem::InterruptHandler()+0xc8>
   122f0:	e2855054 	add	r5, r5, #84	; 0x54
   122f4:	e7930105 	ldr	r0, [r3, r5, lsl #2]
   122f8:	e28dd010 	add	sp, sp, #16
   122fc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12300:	e12fff12 	bx	r2
   12304:	e1a00005 	mov	r0, r5
   12308:	ebffff70 	bl	120d0 <CInterruptSystem::DisableIRQ(unsigned int)>
   1230c:	eaffffec 	b	122c4 <CInterruptSystem::InterruptHandler()+0x88>
   12310:	e5923124 	ldr	r3, [r2, #292]	; 0x124
   12314:	e3530000 	cmp	r3, #0
   12318:	0a000015 	beq	12374 <CInterruptSystem::InterruptHandler()+0x138>
   1231c:	e5920274 	ldr	r0, [r2, #628]	; 0x274
   12320:	e28dd010 	add	sp, sp, #16
   12324:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   12328:	e12fff13 	bx	r3
   1232c:	e30519cc 	movw	r1, #22988	; 0x59cc
   12330:	e30509dc 	movw	r0, #23004	; 0x59dc
   12334:	e3401001 	movt	r1, #1
   12338:	e3a020ef 	mov	r2, #239	; 0xef
   1233c:	e3400001 	movt	r0, #1
   12340:	eb000011 	bl	1238c <assertion_failed>
   12344:	e30519cc 	movw	r1, #22988	; 0x59cc
   12348:	e3050694 	movw	r0, #22164	; 0x5694
   1234c:	e3401001 	movt	r1, #1
   12350:	e3002102 	movw	r2, #258	; 0x102
   12354:	e3400001 	movt	r0, #1
   12358:	eb00000b 	bl	1238c <assertion_failed>
   1235c:	e30519cc 	movw	r1, #22988	; 0x59cc
   12360:	e3050a8c 	movw	r0, #23180	; 0x5a8c
   12364:	e3401001 	movt	r1, #1
   12368:	e3002106 	movw	r2, #262	; 0x106
   1236c:	e3400001 	movt	r0, #1
   12370:	eb000005 	bl	1238c <assertion_failed>
   12374:	e5913040 	ldr	r3, [r1, #64]	; 0x40
   12378:	e3c33002 	bic	r3, r3, #2
   1237c:	e5813040 	str	r3, [r1, #64]	; 0x40
   12380:	e28dd010 	add	sp, sp, #16
   12384:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00012388 <InterruptHandler>:
   12388:	eaffffab 	b	1223c <CInterruptSystem::InterruptHandler()>

0001238c <assertion_failed>:
   1238c:	e92d4080 	push	{r7, lr}
   12390:	e1a05000 	mov	r5, r0
   12394:	e24dd018 	sub	sp, sp, #24
   12398:	e1a04001 	mov	r4, r1
   1239c:	e1a06002 	mov	r6, r2
   123a0:	e1a0700d 	mov	r7, sp
   123a4:	ebffff7e 	bl	121a4 <CInterruptSystem::DisableFIQ()>
   123a8:	f1080040 	cpsie	f
   123ac:	e28d0008 	add	r0, sp, #8
   123b0:	ebffeddf 	bl	db34 <CString::CString()>
   123b4:	e3051ac0 	movw	r1, #23232	; 0x5ac0
   123b8:	e1a02004 	mov	r2, r4
   123bc:	e3401001 	movt	r1, #1
   123c0:	e1a03006 	mov	r3, r6
   123c4:	e28d0008 	add	r0, sp, #8
   123c8:	ebfff375 	bl	f1a4 <CString::Format(char const*, ...)>
   123cc:	e28d0008 	add	r0, sp, #8
   123d0:	ebffee0e 	bl	dc10 <CString::operator char const*() const>
   123d4:	e1a01000 	mov	r1, r0
   123d8:	e1a00007 	mov	r0, r7
   123dc:	eb00020b 	bl	12c10 <debug_stacktrace(unsigned int const*, char const*)>
   123e0:	ebffdf29 	bl	a08c <CLogger::Get()>
   123e4:	e1a04000 	mov	r4, r0
   123e8:	e28d0008 	add	r0, sp, #8
   123ec:	ebffee07 	bl	dc10 <CString::operator char const*() const>
   123f0:	e58d5000 	str	r5, [sp]
   123f4:	e3053ac8 	movw	r3, #23240	; 0x5ac8
   123f8:	e3403001 	movt	r3, #1
   123fc:	e1a01000 	mov	r1, r0
   12400:	e3a02000 	mov	r2, #0
   12404:	e1a00004 	mov	r0, r4
   12408:	ebffe0fe 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1240c:	eafffffe 	b	1240c <assertion_failed+0x80>

00012410 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12410:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12414:	e3a01000 	mov	r1, #0
   12418:	e92d4030 	push	{r4, r5, lr}
   1241c:	e3a02001 	mov	r2, #1
   12420:	e5c3100c 	strb	r1, [r3, #12]
   12424:	e24dd014 	sub	sp, sp, #20
   12428:	e5c3100d 	strb	r1, [r3, #13]
   1242c:	e1a05000 	mov	r5, r0
   12430:	e5c3100e 	strb	r1, [r3, #14]
   12434:	e28d0008 	add	r0, sp, #8
   12438:	e5c3100f 	strb	r1, [r3, #15]
   1243c:	e5c31010 	strb	r1, [r3, #16]
   12440:	e5c32011 	strb	r2, [r3, #17]
   12444:	e5c31012 	strb	r1, [r3, #18]
   12448:	e5c31013 	strb	r1, [r3, #19]
   1244c:	eb000121 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12450:	e5952024 	ldr	r2, [r5, #36]	; 0x24
   12454:	e3000408 	movw	r0, #1032	; 0x408
   12458:	e58d0000 	str	r0, [sp]
   1245c:	e308100b 	movw	r1, #32779	; 0x800b
   12460:	e3401004 	movt	r1, #4
   12464:	e3003414 	movw	r3, #1044	; 0x414
   12468:	e28d0008 	add	r0, sp, #8
   1246c:	eb00015f 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12470:	e2504000 	subs	r4, r0, #0
   12474:	e28d0008 	add	r0, sp, #8
   12478:	0a000003 	beq	1248c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x7c>
   1247c:	e5953024 	ldr	r3, [r5, #36]	; 0x24
   12480:	e593300c 	ldr	r3, [r3, #12]
   12484:	e3530000 	cmp	r3, #0
   12488:	0a000000 	beq	12490 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x80>
   1248c:	e3a04000 	mov	r4, #0
   12490:	eb000117 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   12494:	e1a00004 	mov	r0, r4
   12498:	e28dd014 	add	sp, sp, #20
   1249c:	e8bd8030 	pop	{r4, r5, pc}

000124a0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   124a0:	e92d4070 	push	{r4, r5, r6, lr}
   124a4:	e24dd028 	sub	sp, sp, #40	; 0x28
   124a8:	e1a04000 	mov	r4, r0
   124ac:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   124b0:	e59dc038 	ldr	ip, [sp, #56]	; 0x38
   124b4:	e5805014 	str	r5, [r0, #20]
   124b8:	e3550000 	cmp	r5, #0
   124bc:	e580c008 	str	ip, [r0, #8]
   124c0:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   124c4:	e5dd6044 	ldrb	r6, [sp, #68]	; 0x44
   124c8:	e584000c 	str	r0, [r4, #12]
   124cc:	e3a00000 	mov	r0, #0
   124d0:	e8840006 	stm	r4, {r1, r2}
   124d4:	e5843010 	str	r3, [r4, #16]
   124d8:	e5840018 	str	r0, [r4, #24]
   124dc:	e584001c 	str	r0, [r4, #28]
   124e0:	e5840020 	str	r0, [r4, #32]
   124e4:	e5840024 	str	r0, [r4, #36]	; 0x24
   124e8:	1a000035 	bne	125c4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x124>
   124ec:	e1520000 	cmp	r2, r0
   124f0:	11510000 	cmpne	r1, r0
   124f4:	1a00001a 	bne	12564 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc4>
   124f8:	e1a01005 	mov	r1, r5
   124fc:	e28d000c 	add	r0, sp, #12
   12500:	eb0000f4 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12504:	e58d5000 	str	r5, [sp]
   12508:	e3a03014 	mov	r3, #20
   1250c:	e08d2003 	add	r2, sp, r3
   12510:	e3a01003 	mov	r1, #3
   12514:	e3401004 	movt	r1, #4
   12518:	e28d000c 	add	r0, sp, #12
   1251c:	eb000133 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12520:	e3500000 	cmp	r0, #0
   12524:	0a000007 	beq	12548 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa8>
   12528:	e1cd22d0 	ldrd	r2, [sp, #32]
   1252c:	e5842000 	str	r2, [r4]
   12530:	e2422d0a 	sub	r2, r2, #640	; 0x280
   12534:	e5843004 	str	r3, [r4, #4]
   12538:	e2433e1e 	sub	r3, r3, #480	; 0x1e0
   1253c:	e3530e69 	cmp	r3, #1680	; 0x690
   12540:	93520d36 	cmpls	r2, #3456	; 0xd80
   12544:	9a000002 	bls	12554 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb4>
   12548:	e3a02d0a 	mov	r2, #640	; 0x280
   1254c:	e3a03e1e 	mov	r3, #480	; 0x1e0
   12550:	e1c420f0 	strd	r2, [r4]
   12554:	e28d000c 	add	r0, sp, #12
   12558:	eb0000e5 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   1255c:	e594c008 	ldr	ip, [r4, #8]
   12560:	e5943010 	ldr	r3, [r4, #16]
   12564:	e35c0000 	cmp	ip, #0
   12568:	1a000018 	bne	125d0 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x130>
   1256c:	e5942004 	ldr	r2, [r4, #4]
   12570:	e2866001 	add	r6, r6, #1
   12574:	e5941000 	ldr	r1, [r4]
   12578:	e3530008 	cmp	r3, #8
   1257c:	e0060296 	mul	r6, r6, r2
   12580:	e5841008 	str	r1, [r4, #8]
   12584:	e584600c 	str	r6, [r4, #12]
   12588:	9a000015 	bls	125e4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x144>
   1258c:	e3051ae0 	movw	r1, #23264	; 0x5ae0
   12590:	e3a02070 	mov	r2, #112	; 0x70
   12594:	e3401001 	movt	r1, #1
   12598:	e2840028 	add	r0, r4, #40	; 0x28
   1259c:	ebfff8f3 	bl	10970 <memcpy>
   125a0:	e8940009 	ldm	r4, {r0, r3}
   125a4:	e5941008 	ldr	r1, [r4, #8]
   125a8:	e594200c 	ldr	r2, [r4, #12]
   125ac:	e5843038 	str	r3, [r4, #56]	; 0x38
   125b0:	e5943010 	ldr	r3, [r4, #16]
   125b4:	e5840034 	str	r0, [r4, #52]	; 0x34
   125b8:	e5841048 	str	r1, [r4, #72]	; 0x48
   125bc:	e584204c 	str	r2, [r4, #76]	; 0x4c
   125c0:	e584305c 	str	r3, [r4, #92]	; 0x5c
   125c4:	e1a00004 	mov	r0, r4
   125c8:	e28dd028 	add	sp, sp, #40	; 0x28
   125cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   125d0:	e594200c 	ldr	r2, [r4, #12]
   125d4:	e3520000 	cmp	r2, #0
   125d8:	0affffe3 	beq	1256c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xcc>
   125dc:	e3530008 	cmp	r3, #8
   125e0:	8affffe9 	bhi	1258c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xec>
   125e4:	e3000414 	movw	r0, #1044	; 0x414
   125e8:	ebfff9f3 	bl	10dbc <operator new[](unsigned int)>
   125ec:	e5840024 	str	r0, [r4, #36]	; 0x24
   125f0:	e3a02b01 	mov	r2, #1024	; 0x400
   125f4:	e3a01000 	mov	r1, #0
   125f8:	e2800014 	add	r0, r0, #20
   125fc:	ebfff8c4 	bl	10914 <memset>
   12600:	eaffffe1 	b	1258c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xec>

00012604 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   12604:	e92d4010 	push	{r4, lr}
   12608:	e1a04000 	mov	r4, r0
   1260c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12610:	e3500000 	cmp	r0, #0
   12614:	0a000001 	beq	12620 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   12618:	e3a01014 	mov	r1, #20
   1261c:	ebfff9f8 	bl	10e04 <operator delete(void*, unsigned int)>
   12620:	e1a00004 	mov	r0, r4
   12624:	e8bd8010 	pop	{r4, pc}

00012628 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   12628:	e5903010 	ldr	r3, [r0, #16]
   1262c:	e3530008 	cmp	r3, #8
   12630:	812fff1e 	bxhi	lr
   12634:	e1a03982 	lsl	r3, r2, #19
   12638:	e1a0c5a2 	lsr	ip, r2, #11
   1263c:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   12640:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12644:	e1a02282 	lsl	r2, r2, #5
   12648:	e183318c 	orr	r3, r3, ip, lsl #3
   1264c:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   12650:	e0801101 	add	r1, r0, r1, lsl #2
   12654:	e1822003 	orr	r2, r2, r3
   12658:	e38224ff 	orr	r2, r2, #-16777216	; 0xff000000
   1265c:	e5812014 	str	r2, [r1, #20]
   12660:	e12fff1e 	bx	lr

00012664 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   12664:	e5903010 	ldr	r3, [r0, #16]
   12668:	e3530008 	cmp	r3, #8
   1266c:	95903024 	ldrls	r3, [r0, #36]	; 0x24
   12670:	90831101 	addls	r1, r3, r1, lsl #2
   12674:	95812014 	strls	r2, [r1, #20]
   12678:	e12fff1e 	bx	lr

0001267c <CBcmFrameBuffer::Initialize()>:
   1267c:	e5901014 	ldr	r1, [r0, #20]
   12680:	e92d4030 	push	{r4, r5, lr}
   12684:	e3510000 	cmp	r1, #0
   12688:	e24dd00c 	sub	sp, sp, #12
   1268c:	13a05000 	movne	r5, #0
   12690:	0a000002 	beq	126a0 <CBcmFrameBuffer::Initialize()+0x24>
   12694:	e1a00005 	mov	r0, r5
   12698:	e28dd00c 	add	sp, sp, #12
   1269c:	e8bd8030 	pop	{r4, r5, pc}
   126a0:	e1a04000 	mov	r4, r0
   126a4:	e1a0000d 	mov	r0, sp
   126a8:	eb00008a 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   126ac:	e3a02070 	mov	r2, #112	; 0x70
   126b0:	e2841028 	add	r1, r4, #40	; 0x28
   126b4:	e1a0000d 	mov	r0, sp
   126b8:	eb000092 	bl	12908 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   126bc:	e2505000 	subs	r5, r0, #0
   126c0:	0a00001f 	beq	12744 <CBcmFrameBuffer::Initialize()+0xc8>
   126c4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   126c8:	e3530000 	cmp	r3, #0
   126cc:	0a00001b 	beq	12740 <CBcmFrameBuffer::Initialize()+0xc4>
   126d0:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   126d4:	e3530000 	cmp	r3, #0
   126d8:	0a000018 	beq	12740 <CBcmFrameBuffer::Initialize()+0xc4>
   126dc:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   126e0:	e3530000 	cmp	r3, #0
   126e4:	0a000015 	beq	12740 <CBcmFrameBuffer::Initialize()+0xc4>
   126e8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   126ec:	e3530000 	cmp	r3, #0
   126f0:	0a000012 	beq	12740 <CBcmFrameBuffer::Initialize()+0xc4>
   126f4:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   126f8:	e3530000 	cmp	r3, #0
   126fc:	0a00000f 	beq	12740 <CBcmFrameBuffer::Initialize()+0xc4>
   12700:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   12704:	e3530000 	cmp	r3, #0
   12708:	0a00000c 	beq	12740 <CBcmFrameBuffer::Initialize()+0xc4>
   1270c:	e5942010 	ldr	r2, [r4, #16]
   12710:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   12714:	e5941084 	ldr	r1, [r4, #132]	; 0x84
   12718:	e3520008 	cmp	r2, #8
   1271c:	e5843018 	str	r3, [r4, #24]
   12720:	e5943094 	ldr	r3, [r4, #148]	; 0x94
   12724:	e584101c 	str	r1, [r4, #28]
   12728:	e5843020 	str	r3, [r4, #32]
   1272c:	8a000004 	bhi	12744 <CBcmFrameBuffer::Initialize()+0xc8>
   12730:	e1a00004 	mov	r0, r4
   12734:	ebffff35 	bl	12410 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   12738:	e1a05000 	mov	r5, r0
   1273c:	ea000000 	b	12744 <CBcmFrameBuffer::Initialize()+0xc8>
   12740:	e1a05003 	mov	r5, r3
   12744:	e1a0000d 	mov	r0, sp
   12748:	eb000069 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   1274c:	e1a00005 	mov	r0, r5
   12750:	e28dd00c 	add	sp, sp, #12
   12754:	e8bd8030 	pop	{r4, r5, pc}

00012758 <CBcmFrameBuffer::GetWidth() const>:
   12758:	e5900000 	ldr	r0, [r0]
   1275c:	e12fff1e 	bx	lr

00012760 <CBcmFrameBuffer::GetHeight() const>:
   12760:	e5900004 	ldr	r0, [r0, #4]
   12764:	e12fff1e 	bx	lr

00012768 <CBcmFrameBuffer::GetVirtWidth() const>:
   12768:	e5900008 	ldr	r0, [r0, #8]
   1276c:	e12fff1e 	bx	lr

00012770 <CBcmFrameBuffer::GetVirtHeight() const>:
   12770:	e590000c 	ldr	r0, [r0, #12]
   12774:	e12fff1e 	bx	lr

00012778 <CBcmFrameBuffer::GetPitch() const>:
   12778:	e5900020 	ldr	r0, [r0, #32]
   1277c:	e12fff1e 	bx	lr

00012780 <CBcmFrameBuffer::GetDepth() const>:
   12780:	e5900010 	ldr	r0, [r0, #16]
   12784:	e12fff1e 	bx	lr

00012788 <CBcmFrameBuffer::GetBuffer() const>:
   12788:	e5900018 	ldr	r0, [r0, #24]
   1278c:	e12fff1e 	bx	lr

00012790 <CBcmFrameBuffer::GetSize() const>:
   12790:	e590001c 	ldr	r0, [r0, #28]
   12794:	e12fff1e 	bx	lr

00012798 <CBcmFrameBuffer::UpdatePalette()>:
   12798:	e5903010 	ldr	r3, [r0, #16]
   1279c:	e3530008 	cmp	r3, #8
   127a0:	9a000001 	bls	127ac <CBcmFrameBuffer::UpdatePalette()+0x14>
   127a4:	e3a00001 	mov	r0, #1
   127a8:	e12fff1e 	bx	lr
   127ac:	eaffff17 	b	12410 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>

000127b0 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   127b0:	e92d4070 	push	{r4, r5, r6, lr}
   127b4:	e24dd028 	sub	sp, sp, #40	; 0x28
   127b8:	e1a05001 	mov	r5, r1
   127bc:	e28d000c 	add	r0, sp, #12
   127c0:	e3a01000 	mov	r1, #0
   127c4:	e1a06002 	mov	r6, r2
   127c8:	eb000042 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   127cc:	e58d5020 	str	r5, [sp, #32]
   127d0:	e3a03008 	mov	r3, #8
   127d4:	e58d3000 	str	r3, [sp]
   127d8:	e3081009 	movw	r1, #32777	; 0x8009
   127dc:	e3401004 	movt	r1, #4
   127e0:	e3a03014 	mov	r3, #20
   127e4:	e08d2003 	add	r2, sp, r3
   127e8:	e28d000c 	add	r0, sp, #12
   127ec:	e58d6024 	str	r6, [sp, #36]	; 0x24
   127f0:	eb00007e 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   127f4:	e2504000 	subs	r4, r0, #0
   127f8:	0a000006 	beq	12818 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   127fc:	e59d3020 	ldr	r3, [sp, #32]
   12800:	e1530005 	cmp	r3, r5
   12804:	13a04000 	movne	r4, #0
   12808:	059d0024 	ldreq	r0, [sp, #36]	; 0x24
   1280c:	00404006 	subeq	r4, r0, r6
   12810:	016f4f14 	clzeq	r4, r4
   12814:	01a042a4 	lsreq	r4, r4, #5
   12818:	e28d000c 	add	r0, sp, #12
   1281c:	eb000034 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   12820:	e1a00004 	mov	r0, r4
   12824:	e28dd028 	add	sp, sp, #40	; 0x28
   12828:	e8bd8070 	pop	{r4, r5, r6, pc}

0001282c <CBcmFrameBuffer::WaitForVerticalSync()>:
   1282c:	e92d4010 	push	{r4, lr}
   12830:	e24dd020 	sub	sp, sp, #32
   12834:	e3a01000 	mov	r1, #0
   12838:	e28d0008 	add	r0, sp, #8
   1283c:	eb000025 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12840:	e3a03000 	mov	r3, #0
   12844:	e308100e 	movw	r1, #32782	; 0x800e
   12848:	e58d3000 	str	r3, [sp]
   1284c:	e3a03010 	mov	r3, #16
   12850:	e3401004 	movt	r1, #4
   12854:	e28d0008 	add	r0, sp, #8
   12858:	e08d2003 	add	r2, sp, r3
   1285c:	eb000063 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12860:	e1a04000 	mov	r4, r0
   12864:	e28d0008 	add	r0, sp, #8
   12868:	eb000021 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   1286c:	e1a00004 	mov	r0, r4
   12870:	e28dd020 	add	sp, sp, #32
   12874:	e8bd8010 	pop	{r4, pc}

00012878 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   12878:	e92d4010 	push	{r4, lr}
   1287c:	e24dd020 	sub	sp, sp, #32
   12880:	e1a04001 	mov	r4, r1
   12884:	e28d0008 	add	r0, sp, #8
   12888:	e3a01000 	mov	r1, #0
   1288c:	eb000011 	bl	128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12890:	e58d401c 	str	r4, [sp, #28]
   12894:	e3a03004 	mov	r3, #4
   12898:	e58d3000 	str	r3, [sp]
   1289c:	e308100f 	movw	r1, #32783	; 0x800f
   128a0:	e3401004 	movt	r1, #4
   128a4:	e3a03010 	mov	r3, #16
   128a8:	e08d2003 	add	r2, sp, r3
   128ac:	e28d0008 	add	r0, sp, #8
   128b0:	eb00004e 	bl	129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   128b4:	e1a04000 	mov	r4, r0
   128b8:	e28d0008 	add	r0, sp, #8
   128bc:	eb00000c 	bl	128f4 <CBcmPropertyTags::~CBcmPropertyTags()>
   128c0:	e1a00004 	mov	r0, r4
   128c4:	e28dd020 	add	sp, sp, #32
   128c8:	e8bd8010 	pop	{r4, pc}

000128cc <CBcmFrameBuffer::SetDisplay()>:
   128cc:	e12fff1e 	bx	lr

000128d0 <CBcmFrameBuffer::GetNumDisplays()>:
   128d0:	e3a00001 	mov	r0, #1
   128d4:	e12fff1e 	bx	lr

000128d8 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   128d8:	e1a02001 	mov	r2, r1
   128dc:	e3a01008 	mov	r1, #8
   128e0:	e92d4010 	push	{r4, lr}
   128e4:	e1a04000 	mov	r4, r0
   128e8:	eb000686 	bl	14308 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   128ec:	e1a00004 	mov	r0, r4
   128f0:	e8bd8010 	pop	{r4, pc}

000128f4 <CBcmPropertyTags::~CBcmPropertyTags()>:
   128f4:	e92d4010 	push	{r4, lr}
   128f8:	e1a04000 	mov	r4, r0
   128fc:	eb000684 	bl	14314 <CBcmMailBox::~CBcmMailBox()>
   12900:	e1a00004 	mov	r0, r4
   12904:	e8bd8010 	pop	{r4, pc}

00012908 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   12908:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1290c:	e2518000 	subs	r8, r1, #0
   12910:	0a000027 	beq	129b4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xac>
   12914:	e352000f 	cmp	r2, #15
   12918:	e1a04002 	mov	r4, r2
   1291c:	9a000029 	bls	129c8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xc0>
   12920:	e2126003 	ands	r6, r2, #3
   12924:	e282900c 	add	r9, r2, #12
   12928:	1a00002b 	bne	129dc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd4>
   1292c:	e1a07000 	mov	r7, r0
   12930:	e1a00006 	mov	r0, r6
   12934:	ebfffc6c 	bl	11aec <CMemorySystem::GetCoherentPage(unsigned int)>
   12938:	e5809000 	str	r9, [r0]
   1293c:	e2809008 	add	r9, r0, #8
   12940:	e5c06004 	strb	r6, [r0, #4]
   12944:	e1a05000 	mov	r5, r0
   12948:	e5c06005 	strb	r6, [r0, #5]
   1294c:	e1a02004 	mov	r2, r4
   12950:	e5c06006 	strb	r6, [r0, #6]
   12954:	e1a01008 	mov	r1, r8
   12958:	e5c06007 	strb	r6, [r0, #7]
   1295c:	e1a00009 	mov	r0, r9
   12960:	ebfff802 	bl	10970 <memcpy>
   12964:	e7896004 	str	r6, [r9, r4]
   12968:	f57ff04f 	dsb	sy
   1296c:	e3856103 	orr	r6, r5, #-1073741824	; 0xc0000000
   12970:	e1a00007 	mov	r0, r7
   12974:	e1a01006 	mov	r1, r6
   12978:	eb000666 	bl	14318 <CBcmMailBox::WriteRead(unsigned int)>
   1297c:	e1500006 	cmp	r0, r6
   12980:	0a000001 	beq	1298c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x84>
   12984:	e3a00000 	mov	r0, #0
   12988:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1298c:	f57ff05f 	dmb	sy
   12990:	e5953004 	ldr	r3, [r5, #4]
   12994:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   12998:	1afffff9 	bne	12984 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x7c>
   1299c:	e1a02004 	mov	r2, r4
   129a0:	e1a01009 	mov	r1, r9
   129a4:	e1a00008 	mov	r0, r8
   129a8:	ebfff7f0 	bl	10970 <memcpy>
   129ac:	e3a00001 	mov	r0, #1
   129b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   129b4:	e3051b50 	movw	r1, #23376	; 0x5b50
   129b8:	e3a0204b 	mov	r2, #75	; 0x4b
   129bc:	e3401001 	movt	r1, #1
   129c0:	e2810014 	add	r0, r1, #20
   129c4:	ebfffe70 	bl	1238c <assertion_failed>
   129c8:	e3051b50 	movw	r1, #23376	; 0x5b50
   129cc:	e3a0204c 	mov	r2, #76	; 0x4c
   129d0:	e3401001 	movt	r1, #1
   129d4:	e2810020 	add	r0, r1, #32
   129d8:	ebfffe6b 	bl	1238c <assertion_failed>
   129dc:	e3051b50 	movw	r1, #23376	; 0x5b50
   129e0:	e3a0204e 	mov	r2, #78	; 0x4e
   129e4:	e3401001 	movt	r1, #1
   129e8:	e281004c 	add	r0, r1, #76	; 0x4c
   129ec:	ebfffe66 	bl	1238c <assertion_failed>

000129f0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   129f0:	e92d4010 	push	{r4, lr}
   129f4:	e2524000 	subs	r4, r2, #0
   129f8:	0a000012 	beq	12a48 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x58>
   129fc:	e353000f 	cmp	r3, #15
   12a00:	e1a02003 	mov	r2, r3
   12a04:	9a000014 	bls	12a5c <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x6c>
   12a08:	e59d3008 	ldr	r3, [sp, #8]
   12a0c:	e242c00c 	sub	ip, r2, #12
   12a10:	e5841000 	str	r1, [r4]
   12a14:	e1a01004 	mov	r1, r4
   12a18:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   12a1c:	e584c004 	str	ip, [r4, #4]
   12a20:	e5843008 	str	r3, [r4, #8]
   12a24:	ebffffb7 	bl	12908 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12a28:	e3500000 	cmp	r0, #0
   12a2c:	08bd8010 	popeq	{r4, pc}
   12a30:	e5940008 	ldr	r0, [r4, #8]
   12a34:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   12a38:	e5840008 	str	r0, [r4, #8]
   12a3c:	e2500000 	subs	r0, r0, #0
   12a40:	13a00001 	movne	r0, #1
   12a44:	e8bd8010 	pop	{r4, pc}
   12a48:	e3051b50 	movw	r1, #23376	; 0x5b50
   12a4c:	e3a02033 	mov	r2, #51	; 0x33
   12a50:	e3401001 	movt	r1, #1
   12a54:	e2810064 	add	r0, r1, #100	; 0x64
   12a58:	ebfffe4b 	bl	1238c <assertion_failed>
   12a5c:	e3051b50 	movw	r1, #23376	; 0x5b50
   12a60:	e3a02034 	mov	r2, #52	; 0x34
   12a64:	e3401001 	movt	r1, #1
   12a68:	e2810070 	add	r0, r1, #112	; 0x70
   12a6c:	ebfffe46 	bl	1238c <assertion_failed>

00012a70 <CCharGenerator::CCharGenerator()>:
   12a70:	e3a03008 	mov	r3, #8
   12a74:	e5803000 	str	r3, [r0]
   12a78:	e12fff1e 	bx	lr

00012a7c <CCharGenerator::~CCharGenerator()>:
   12a7c:	e12fff1e 	bx	lr

00012a80 <CCharGenerator::GetCharWidth() const>:
   12a80:	e5900000 	ldr	r0, [r0]
   12a84:	e12fff1e 	bx	lr

00012a88 <CCharGenerator::GetCharHeight() const>:
   12a88:	e3a00013 	mov	r0, #19
   12a8c:	e12fff1e 	bx	lr

00012a90 <CCharGenerator::GetUnderline() const>:
   12a90:	e3a00010 	mov	r0, #16
   12a94:	e12fff1e 	bx	lr

00012a98 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   12a98:	e6ef1071 	uxtb	r1, r1
   12a9c:	e2411021 	sub	r1, r1, #33	; 0x21
   12aa0:	e35100de 	cmp	r1, #222	; 0xde
   12aa4:	8a00000d 	bhi	12ae0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   12aa8:	e5900000 	ldr	r0, [r0]
   12aac:	e1500002 	cmp	r0, r2
   12ab0:	9a00000c 	bls	12ae8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   12ab4:	e353000f 	cmp	r3, #15
   12ab8:	8a000008 	bhi	12ae0 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   12abc:	e3050c14 	movw	r0, #23572	; 0x5c14
   12ac0:	e3a0c080 	mov	ip, #128	; 0x80
   12ac4:	e3400001 	movt	r0, #1
   12ac8:	e0801201 	add	r1, r0, r1, lsl #4
   12acc:	e7d13003 	ldrb	r3, [r1, r3]
   12ad0:	e013325c 	ands	r3, r3, ip, asr r2
   12ad4:	13a00001 	movne	r0, #1
   12ad8:	03a00000 	moveq	r0, #0
   12adc:	e12fff1e 	bx	lr
   12ae0:	e3a00000 	mov	r0, #0
   12ae4:	e12fff1e 	bx	lr
   12ae8:	e3051be8 	movw	r1, #23528	; 0x5be8
   12aec:	e3050bfc 	movw	r0, #23548	; 0x5bfc
   12af0:	e3401001 	movt	r1, #1
   12af4:	e3a0204e 	mov	r2, #78	; 0x4e
   12af8:	e3400001 	movt	r0, #1
   12afc:	e92d4010 	push	{r4, lr}
   12b00:	ebfffe21 	bl	1238c <assertion_failed>

00012b04 <debug_hexdump(void const*, unsigned int, char const*)>:
   12b04:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b08:	e3520000 	cmp	r2, #0
   12b0c:	e24dd04c 	sub	sp, sp, #76	; 0x4c
   12b10:	e3067a98 	movw	r7, #27288	; 0x6a98
   12b14:	e3407001 	movt	r7, #1
   12b18:	e1a05001 	mov	r5, r1
   12b1c:	11a07002 	movne	r7, r2
   12b20:	e1a04000 	mov	r4, r0
   12b24:	ebffdd58 	bl	a08c <CLogger::Get()>
   12b28:	e58d4004 	str	r4, [sp, #4]
   12b2c:	e3063a04 	movw	r3, #27140	; 0x6a04
   12b30:	e3403001 	movt	r3, #1
   12b34:	e3a02004 	mov	r2, #4
   12b38:	e58d5000 	str	r5, [sp]
   12b3c:	e1a01007 	mov	r1, r7
   12b40:	ebffdf30 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b44:	e3550000 	cmp	r5, #0
   12b48:	0a00002e 	beq	12c08 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
   12b4c:	e3068a2c 	movw	r8, #27180	; 0x6a2c
   12b50:	e205900f 	and	r9, r5, #15
   12b54:	e3408001 	movt	r8, #1
   12b58:	ea000001 	b	12b64 <debug_hexdump(void const*, unsigned int, char const*)+0x60>
   12b5c:	e2555010 	subs	r5, r5, #16
   12b60:	0a000028 	beq	12c08 <debug_hexdump(void const*, unsigned int, char const*)+0x104>
   12b64:	ebffdd48 	bl	a08c <CLogger::Get()>
   12b68:	e5d4b00f 	ldrb	fp, [r4, #15]
   12b6c:	e5d4c00e 	ldrb	ip, [r4, #14]
   12b70:	e5d4200d 	ldrb	r2, [r4, #13]
   12b74:	e5d4300c 	ldrb	r3, [r4, #12]
   12b78:	e5d4a00b 	ldrb	sl, [r4, #11]
   12b7c:	e5d4100a 	ldrb	r1, [r4, #10]
   12b80:	e5d46009 	ldrb	r6, [r4, #9]
   12b84:	e5d4e008 	ldrb	lr, [r4, #8]
   12b88:	e58db040 	str	fp, [sp, #64]	; 0x40
   12b8c:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
   12b90:	e5d4c006 	ldrb	ip, [r4, #6]
   12b94:	e5d4b007 	ldrb	fp, [r4, #7]
   12b98:	e58d2038 	str	r2, [sp, #56]	; 0x38
   12b9c:	e58d3034 	str	r3, [sp, #52]	; 0x34
   12ba0:	e5d43005 	ldrb	r3, [r4, #5]
   12ba4:	e5d42004 	ldrb	r2, [r4, #4]
   12ba8:	e58da030 	str	sl, [sp, #48]	; 0x30
   12bac:	e58d102c 	str	r1, [sp, #44]	; 0x2c
   12bb0:	e5d41003 	ldrb	r1, [r4, #3]
   12bb4:	e5d4a002 	ldrb	sl, [r4, #2]
   12bb8:	e58d6028 	str	r6, [sp, #40]	; 0x28
   12bbc:	e58de024 	str	lr, [sp, #36]	; 0x24
   12bc0:	e5d4e000 	ldrb	lr, [r4]
   12bc4:	e5d46001 	ldrb	r6, [r4, #1]
   12bc8:	e58dc01c 	str	ip, [sp, #28]
   12bcc:	e6ffc074 	uxth	ip, r4
   12bd0:	e58d3018 	str	r3, [sp, #24]
   12bd4:	e1a03008 	mov	r3, r8
   12bd8:	e58d2014 	str	r2, [sp, #20]
   12bdc:	e3a02004 	mov	r2, #4
   12be0:	e58d1010 	str	r1, [sp, #16]
   12be4:	e1a01007 	mov	r1, r7
   12be8:	e58db020 	str	fp, [sp, #32]
   12bec:	e2844010 	add	r4, r4, #16
   12bf0:	e58da00c 	str	sl, [sp, #12]
   12bf4:	e58d6008 	str	r6, [sp, #8]
   12bf8:	e88d5000 	stm	sp, {ip, lr}
   12bfc:	ebffdf01 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12c00:	e1590005 	cmp	r9, r5
   12c04:	1affffd4 	bne	12b5c <debug_hexdump(void const*, unsigned int, char const*)+0x58>
   12c08:	e28dd04c 	add	sp, sp, #76	; 0x4c
   12c0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012c10 <debug_stacktrace(unsigned int const*, char const*)>:
   12c10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12c14:	e3510000 	cmp	r1, #0
   12c18:	e3067a98 	movw	r7, #27288	; 0x6a98
   12c1c:	e3046924 	movw	r6, #18724	; 0x4924
   12c20:	e3407001 	movt	r7, #1
   12c24:	e3068a84 	movw	r8, #27268	; 0x6a84
   12c28:	e3406001 	movt	r6, #1
   12c2c:	e24dd008 	sub	sp, sp, #8
   12c30:	e3408001 	movt	r8, #1
   12c34:	11a07001 	movne	r7, r1
   12c38:	e2405004 	sub	r5, r0, #4
   12c3c:	e3a04000 	mov	r4, #0
   12c40:	ea000002 	b	12c50 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   12c44:	e2844001 	add	r4, r4, #1
   12c48:	e3540040 	cmp	r4, #64	; 0x40
   12c4c:	0a000011 	beq	12c98 <debug_stacktrace(unsigned int const*, char const*)+0x88>
   12c50:	e5b53004 	ldr	r3, [r5, #4]!
   12c54:	e3530902 	cmp	r3, #32768	; 0x8000
   12c58:	3afffff9 	bcc	12c44 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12c5c:	e1530006 	cmp	r3, r6
   12c60:	2afffff7 	bcs	12c44 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12c64:	e3130003 	tst	r3, #3
   12c68:	1afffff5 	bne	12c44 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   12c6c:	ebffdd06 	bl	a08c <CLogger::Get()>
   12c70:	e5952000 	ldr	r2, [r5]
   12c74:	e1a03008 	mov	r3, r8
   12c78:	e58d4000 	str	r4, [sp]
   12c7c:	e1a01007 	mov	r1, r7
   12c80:	e58d2004 	str	r2, [sp, #4]
   12c84:	e2844001 	add	r4, r4, #1
   12c88:	e3a02004 	mov	r2, #4
   12c8c:	ebffdedd 	bl	a808 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12c90:	e3540040 	cmp	r4, #64	; 0x40
   12c94:	1affffed 	bne	12c50 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   12c98:	e28dd008 	add	sp, sp, #8
   12c9c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00012ca0 <DelayLoop>:
   12ca0:	e1a01001 	mov	r1, r1
   12ca4:	e1a02002 	mov	r2, r2
   12ca8:	e2500001 	subs	r0, r0, #1
   12cac:	8afffffb 	bhi	12ca0 <DelayLoop>
   12cb0:	e1a0f00e 	mov	pc, lr

00012cb4 <CDevice::Read(void*, unsigned int)>:
   12cb4:	e3e00000 	mvn	r0, #0
   12cb8:	e12fff1e 	bx	lr

00012cbc <CDevice::Seek(unsigned long long)>:
   12cbc:	e3e00000 	mvn	r0, #0
   12cc0:	e3e01000 	mvn	r1, #0
   12cc4:	e12fff1e 	bx	lr

00012cc8 <CDevice::GetSize() const>:
   12cc8:	e3e00000 	mvn	r0, #0
   12ccc:	e3e01000 	mvn	r1, #0
   12cd0:	e12fff1e 	bx	lr

00012cd4 <CDevice::RemoveDevice()>:
   12cd4:	e3a00000 	mov	r0, #0
   12cd8:	e12fff1e 	bx	lr

00012cdc <CDevice::~CDevice()>:
   12cdc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12ce0:	e1a06000 	mov	r6, r0
   12ce4:	e59f3080 	ldr	r3, [pc, #128]	; 12d6c <CDevice::~CDevice()+0x90>
   12ce8:	e1a07000 	mov	r7, r0
   12cec:	e4863004 	str	r3, [r6], #4
   12cf0:	ea000008 	b	12d18 <CDevice::~CDevice()+0x3c>
   12cf4:	e5901004 	ldr	r1, [r0, #4]
   12cf8:	e1a00007 	mov	r0, r7
   12cfc:	e12fff33 	blx	r3
   12d00:	e1a01004 	mov	r1, r4
   12d04:	e1a00006 	mov	r0, r6
   12d08:	eb0004ac 	bl	13fc0 <CPtrList::Remove(TPtrListElement*)>
   12d0c:	e3a01008 	mov	r1, #8
   12d10:	e1a00005 	mov	r0, r5
   12d14:	ebfff83a 	bl	10e04 <operator delete(void*, unsigned int)>
   12d18:	e1a00006 	mov	r0, r6
   12d1c:	eb000401 	bl	13d28 <CPtrList::GetFirst()>
   12d20:	e2504000 	subs	r4, r0, #0
   12d24:	0a00000c 	beq	12d5c <CDevice::~CDevice()+0x80>
   12d28:	e1a01004 	mov	r1, r4
   12d2c:	e1a00006 	mov	r0, r6
   12d30:	eb000414 	bl	13d88 <CPtrList::GetPtr(TPtrListElement*)>
   12d34:	e5903000 	ldr	r3, [r0]
   12d38:	e1a05000 	mov	r5, r0
   12d3c:	e3530000 	cmp	r3, #0
   12d40:	1affffeb 	bne	12cf4 <CDevice::~CDevice()+0x18>
   12d44:	e3061aa0 	movw	r1, #27296	; 0x6aa0
   12d48:	e3060aac 	movw	r0, #27308	; 0x6aac
   12d4c:	e3401001 	movt	r1, #1
   12d50:	e3a02028 	mov	r2, #40	; 0x28
   12d54:	e3400001 	movt	r0, #1
   12d58:	ebfffd8b 	bl	1238c <assertion_failed>
   12d5c:	e1a00006 	mov	r0, r6
   12d60:	eb0003e6 	bl	13d00 <CPtrList::~CPtrList()>
   12d64:	e1a00007 	mov	r0, r7
   12d68:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12d6c:	00016ae8 	.word	0x00016ae8

00012d70 <CDevice::~CDevice()>:
   12d70:	e92d4010 	push	{r4, lr}
   12d74:	e1a04000 	mov	r4, r0
   12d78:	ebffffd7 	bl	12cdc <CDevice::~CDevice()>
   12d7c:	e1a00004 	mov	r0, r4
   12d80:	e3a01008 	mov	r1, #8
   12d84:	ebfff81e 	bl	10e04 <operator delete(void*, unsigned int)>
   12d88:	e1a00004 	mov	r0, r4
   12d8c:	e8bd8010 	pop	{r4, pc}

00012d90 <CDevice::CDevice()>:
   12d90:	e59f3014 	ldr	r3, [pc, #20]	; 12dac <CDevice::CDevice()+0x1c>
   12d94:	e92d4010 	push	{r4, lr}
   12d98:	e1a04000 	mov	r4, r0
   12d9c:	e4803004 	str	r3, [r0], #4
   12da0:	eb0003d3 	bl	13cf4 <CPtrList::CPtrList()>
   12da4:	e1a00004 	mov	r0, r4
   12da8:	e8bd8010 	pop	{r4, pc}
   12dac:	00016ae8 	.word	0x00016ae8

00012db0 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   12db0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12db4:	e2516000 	subs	r6, r1, #0
   12db8:	0a000012 	beq	12e08 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x58>
   12dbc:	e1a04000 	mov	r4, r0
   12dc0:	e3a00008 	mov	r0, #8
   12dc4:	e1a07002 	mov	r7, r2
   12dc8:	ebfff7f5 	bl	10da4 <operator new(unsigned int)>
   12dcc:	e1a05000 	mov	r5, r0
   12dd0:	e2844004 	add	r4, r4, #4
   12dd4:	e1a00004 	mov	r0, r4
   12dd8:	e1c560f0 	strd	r6, [r5]
   12ddc:	eb0003d1 	bl	13d28 <CPtrList::GetFirst()>
   12de0:	e2501000 	subs	r1, r0, #0
   12de4:	e1a02005 	mov	r2, r5
   12de8:	e1a00004 	mov	r0, r4
   12dec:	0a000002 	beq	12dfc <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x4c>
   12df0:	eb0003fa 	bl	13de0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   12df4:	e1a00005 	mov	r0, r5
   12df8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12dfc:	eb000433 	bl	13ed0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   12e00:	e1a00005 	mov	r0, r5
   12e04:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12e08:	e3061aa0 	movw	r1, #27296	; 0x6aa0
   12e0c:	e3050a7c 	movw	r0, #23164	; 0x5a7c
   12e10:	e3401001 	movt	r1, #1
   12e14:	e3a0204d 	mov	r2, #77	; 0x4d
   12e18:	e3400001 	movt	r0, #1
   12e1c:	ebfffd5a 	bl	1238c <assertion_failed>

00012e20 <CDevice::UnregisterRemovedHandler(void*)>:
   12e20:	e92d4070 	push	{r4, r5, r6, lr}
   12e24:	e2515000 	subs	r5, r1, #0
   12e28:	0a00000a 	beq	12e58 <CDevice::UnregisterRemovedHandler(void*)+0x38>
   12e2c:	e2804004 	add	r4, r0, #4
   12e30:	e1a00004 	mov	r0, r4
   12e34:	eb0004ab 	bl	140e8 <CPtrList::Find(void*)>
   12e38:	e2501000 	subs	r1, r0, #0
   12e3c:	0a00000b 	beq	12e70 <CDevice::UnregisterRemovedHandler(void*)+0x50>
   12e40:	e1a00004 	mov	r0, r4
   12e44:	eb00045d 	bl	13fc0 <CPtrList::Remove(TPtrListElement*)>
   12e48:	e1a00005 	mov	r0, r5
   12e4c:	e3a01008 	mov	r1, #8
   12e50:	e8bd4070 	pop	{r4, r5, r6, lr}
   12e54:	eafff7ea 	b	10e04 <operator delete(void*, unsigned int)>
   12e58:	e3061aa0 	movw	r1, #27296	; 0x6aa0
   12e5c:	e3060ac4 	movw	r0, #27332	; 0x6ac4
   12e60:	e3401001 	movt	r1, #1
   12e64:	e3a02064 	mov	r2, #100	; 0x64
   12e68:	e3400001 	movt	r0, #1
   12e6c:	ebfffd46 	bl	1238c <assertion_failed>
   12e70:	e3061aa0 	movw	r1, #27296	; 0x6aa0
   12e74:	e3060ad0 	movw	r0, #27344	; 0x6ad0
   12e78:	e3401001 	movt	r1, #1
   12e7c:	e3a02067 	mov	r2, #103	; 0x67
   12e80:	e3400001 	movt	r0, #1
   12e84:	ebfffd40 	bl	1238c <assertion_failed>

00012e88 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   12e88:	e92d4070 	push	{r4, r5, r6, lr}
   12e8c:	e1a06001 	mov	r6, r1
   12e90:	e1a04000 	mov	r4, r0
   12e94:	e1a05002 	mov	r5, r2
   12e98:	ebffe093 	bl	b0ec <CMachineInfo::Get()>
   12e9c:	e1a01006 	mov	r1, r6
   12ea0:	ebffe03f 	bl	afa4 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   12ea4:	e584500c 	str	r5, [r4, #12]
   12ea8:	e3500080 	cmp	r0, #128	; 0x80
   12eac:	e5840000 	str	r0, [r4]
   12eb0:	e3a05000 	mov	r5, #0
   12eb4:	e5845004 	str	r5, [r4, #4]
   12eb8:	e5845008 	str	r5, [r4, #8]
   12ebc:	e5c45010 	strb	r5, [r4, #16]
   12ec0:	e5845014 	str	r5, [r4, #20]
   12ec4:	e5845018 	str	r5, [r4, #24]
   12ec8:	e5c4501c 	strb	r5, [r4, #28]
   12ecc:	0a00001e 	beq	12f4c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xc4>
   12ed0:	e350000b 	cmp	r0, #11
   12ed4:	8a000021 	bhi	12f60 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xd8>
   12ed8:	e1a01005 	mov	r1, r5
   12edc:	e3a0003f 	mov	r0, #63	; 0x3f
   12ee0:	ebfff7a1 	bl	10d6c <operator new[](unsigned int, int)>
   12ee4:	e5840004 	str	r0, [r4, #4]
   12ee8:	e3a02a07 	mov	r2, #28672	; 0x7000
   12eec:	e3432f00 	movt	r2, #16128	; 0x3f00
   12ef0:	e280001f 	add	r0, r0, #31
   12ef4:	e3c0301f 	bic	r3, r0, #31
   12ef8:	e3a00001 	mov	r0, #1
   12efc:	e5941000 	ldr	r1, [r4]
   12f00:	e5843008 	str	r3, [r4, #8]
   12f04:	e5835018 	str	r5, [r3, #24]
   12f08:	e583501c 	str	r5, [r3, #28]
   12f0c:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   12f10:	e1833110 	orr	r3, r3, r0, lsl r1
   12f14:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   12f18:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   12f1c:	ebfff427 	bl	ffc0 <CTimer::SimpleusDelay(unsigned int)>
   12f20:	e5942000 	ldr	r2, [r4]
   12f24:	e3a03102 	mov	r3, #-2147483648	; 0x80000000
   12f28:	e282283f 	add	r2, r2, #4128768	; 0x3f0000
   12f2c:	e2822070 	add	r2, r2, #112	; 0x70
   12f30:	e1a02402 	lsl	r2, r2, #8
   12f34:	e5823000 	str	r3, [r2]
   12f38:	e5923000 	ldr	r3, [r2]
   12f3c:	e3530000 	cmp	r3, #0
   12f40:	bafffffc 	blt	12f38 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xb0>
   12f44:	e1a00004 	mov	r0, r4
   12f48:	e8bd8070 	pop	{r4, r5, r6, pc}
   12f4c:	e3061b04 	movw	r1, #27396	; 0x6b04
   12f50:	e3a02039 	mov	r2, #57	; 0x39
   12f54:	e3401001 	movt	r1, #1
   12f58:	e2810010 	add	r0, r1, #16
   12f5c:	ebfffd0a 	bl	1238c <assertion_failed>
   12f60:	e3061b04 	movw	r1, #27396	; 0x6b04
   12f64:	e3a0203a 	mov	r2, #58	; 0x3a
   12f68:	e3401001 	movt	r1, #1
   12f6c:	e2810030 	add	r0, r1, #48	; 0x30
   12f70:	ebfffd05 	bl	1238c <assertion_failed>

00012f74 <CDMAChannel::~CDMAChannel()>:
   12f74:	e5903000 	ldr	r3, [r0]
   12f78:	e92d4010 	push	{r4, lr}
   12f7c:	e353000b 	cmp	r3, #11
   12f80:	8a00002c 	bhi	13038 <CDMAChannel::~CDMAChannel()+0xc4>
   12f84:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   12f88:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   12f8c:	e2833070 	add	r3, r3, #112	; 0x70
   12f90:	e1a04000 	mov	r4, r0
   12f94:	e1a03403 	lsl	r3, r3, #8
   12f98:	e5832000 	str	r2, [r3]
   12f9c:	e5901000 	ldr	r1, [r0]
   12fa0:	e281283f 	add	r2, r1, #4128768	; 0x3f0000
   12fa4:	e2822070 	add	r2, r2, #112	; 0x70
   12fa8:	e1a02402 	lsl	r2, r2, #8
   12fac:	e5923000 	ldr	r3, [r2]
   12fb0:	e3530000 	cmp	r3, #0
   12fb4:	bafffffc 	blt	12fac <CDMAChannel::~CDMAChannel()+0x38>
   12fb8:	e594000c 	ldr	r0, [r4, #12]
   12fbc:	e3a03a07 	mov	r3, #28672	; 0x7000
   12fc0:	e3433f00 	movt	r3, #16128	; 0x3f00
   12fc4:	e3a0c001 	mov	ip, #1
   12fc8:	e3500000 	cmp	r0, #0
   12fcc:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   12fd0:	e1c2211c 	bic	r2, r2, ip, lsl r1
   12fd4:	e3a01000 	mov	r1, #0
   12fd8:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   12fdc:	e5841014 	str	r1, [r4, #20]
   12fe0:	0a000009 	beq	1300c <CDMAChannel::~CDMAChannel()+0x98>
   12fe4:	e5d43010 	ldrb	r3, [r4, #16]
   12fe8:	e1530001 	cmp	r3, r1
   12fec:	0a000004 	beq	13004 <CDMAChannel::~CDMAChannel()+0x90>
   12ff0:	e5941000 	ldr	r1, [r4]
   12ff4:	e351000c 	cmp	r1, #12
   12ff8:	8a000013 	bhi	1304c <CDMAChannel::~CDMAChannel()+0xd8>
   12ffc:	e2811010 	add	r1, r1, #16
   13000:	ebfffb9b 	bl	11e74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13004:	e3a03000 	mov	r3, #0
   13008:	e584300c 	str	r3, [r4, #12]
   1300c:	ebffe036 	bl	b0ec <CMachineInfo::Get()>
   13010:	e5941000 	ldr	r1, [r4]
   13014:	ebffe013 	bl	b068 <CMachineInfo::FreeDMAChannel(unsigned int)>
   13018:	e5940004 	ldr	r0, [r4, #4]
   1301c:	e3a03000 	mov	r3, #0
   13020:	e5843008 	str	r3, [r4, #8]
   13024:	e1500003 	cmp	r0, r3
   13028:	0a000000 	beq	13030 <CDMAChannel::~CDMAChannel()+0xbc>
   1302c:	ebfff76e 	bl	10dec <operator delete[](void*)>
   13030:	e1a00004 	mov	r0, r4
   13034:	e8bd8010 	pop	{r4, pc}
   13038:	e3061b04 	movw	r1, #27396	; 0x6b04
   1303c:	e3a02062 	mov	r2, #98	; 0x62
   13040:	e3401001 	movt	r1, #1
   13044:	e2810030 	add	r0, r1, #48	; 0x30
   13048:	ebfffccf 	bl	1238c <assertion_failed>
   1304c:	e3061b04 	movw	r1, #27396	; 0x6b04
   13050:	e3a02074 	mov	r2, #116	; 0x74
   13054:	e3401001 	movt	r1, #1
   13058:	e281004c 	add	r0, r1, #76	; 0x4c
   1305c:	ebfffcca 	bl	1238c <assertion_failed>

00013060 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   13060:	e92d4070 	push	{r4, r5, r6, lr}
   13064:	e2515000 	subs	r5, r1, #0
   13068:	e59de010 	ldr	lr, [sp, #16]
   1306c:	e5dd6014 	ldrb	r6, [sp, #20]
   13070:	0a000034 	beq	13148 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xe8>
   13074:	e3520000 	cmp	r2, #0
   13078:	0a000037 	beq	1315c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xfc>
   1307c:	e3530000 	cmp	r3, #0
   13080:	e1a04003 	mov	r4, r3
   13084:	0a000039 	beq	13170 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x110>
   13088:	e35e000f 	cmp	lr, #15
   1308c:	8a00003c 	bhi	13184 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x124>
   13090:	e590c008 	ldr	ip, [r0, #8]
   13094:	e35c0000 	cmp	ip, #0
   13098:	0a00003e 	beq	13198 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x138>
   1309c:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   130a0:	8a000041 	bhi	131ac <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x14c>
   130a4:	e5903000 	ldr	r3, [r0]
   130a8:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   130ac:	e2833070 	add	r3, r3, #112	; 0x70
   130b0:	e1a03403 	lsl	r3, r3, #8
   130b4:	e5933020 	ldr	r3, [r3, #32]
   130b8:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   130bc:	e7e03e53 	ubfx	r3, r3, #28, #1
   130c0:	e3540801 	cmp	r4, #65536	; 0x10000
   130c4:	33833001 	orrcc	r3, r3, #1
   130c8:	e3530000 	cmp	r3, #0
   130cc:	0a00003b 	beq	131c0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x160>
   130d0:	e58c400c 	str	r4, [ip, #12]
   130d4:	e3a03000 	mov	r3, #0
   130d8:	e1a0e60e 	lsl	lr, lr, #12
   130dc:	e3560000 	cmp	r6, #0
   130e0:	e5cc3010 	strb	r3, [ip, #16]
   130e4:	e38eee33 	orr	lr, lr, #816	; 0x330
   130e8:	e5cc3011 	strb	r3, [ip, #17]
   130ec:	e5cc3012 	strb	r3, [ip, #18]
   130f0:	e5cc3013 	strb	r3, [ip, #19]
   130f4:	e5cc3014 	strb	r3, [ip, #20]
   130f8:	e5cc3015 	strb	r3, [ip, #21]
   130fc:	e5cc3016 	strb	r3, [ip, #22]
   13100:	e5cc3017 	strb	r3, [ip, #23]
   13104:	e3823103 	orr	r3, r2, #-1073741824	; 0xc0000000
   13108:	e58c3004 	str	r3, [ip, #4]
   1310c:	e3853103 	orr	r3, r5, #-1073741824	; 0xc0000000
   13110:	e58ce000 	str	lr, [ip]
   13114:	e58c3008 	str	r3, [ip, #8]
   13118:	1a000001 	bne	13124 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xc4>
   1311c:	e5806020 	str	r6, [r0, #32]
   13120:	e8bd8070 	pop	{r4, r5, r6, pc}
   13124:	e5805020 	str	r5, [r0, #32]
   13128:	e1a01004 	mov	r1, r4
   1312c:	e5804024 	str	r4, [r0, #36]	; 0x24
   13130:	e1a00002 	mov	r0, r2
   13134:	ebfff88e 	bl	11374 <CleanAndInvalidateDataCacheRange>
   13138:	e1a01004 	mov	r1, r4
   1313c:	e1a00005 	mov	r0, r5
   13140:	e8bd4070 	pop	{r4, r5, r6, lr}
   13144:	eafff88a 	b	11374 <CleanAndInvalidateDataCacheRange>
   13148:	e3061b04 	movw	r1, #27396	; 0x6b04
   1314c:	e3a0208f 	mov	r2, #143	; 0x8f
   13150:	e3401001 	movt	r1, #1
   13154:	e2810060 	add	r0, r1, #96	; 0x60
   13158:	ebfffc8b 	bl	1238c <assertion_failed>
   1315c:	e3061b04 	movw	r1, #27396	; 0x6b04
   13160:	e3a02090 	mov	r2, #144	; 0x90
   13164:	e3401001 	movt	r1, #1
   13168:	e2810074 	add	r0, r1, #116	; 0x74
   1316c:	ebfffc86 	bl	1238c <assertion_failed>
   13170:	e3061b04 	movw	r1, #27396	; 0x6b04
   13174:	e3a02091 	mov	r2, #145	; 0x91
   13178:	e3401001 	movt	r1, #1
   1317c:	e2810084 	add	r0, r1, #132	; 0x84
   13180:	ebfffc81 	bl	1238c <assertion_failed>
   13184:	e3061b04 	movw	r1, #27396	; 0x6b04
   13188:	e3a02092 	mov	r2, #146	; 0x92
   1318c:	e3401001 	movt	r1, #1
   13190:	e2810090 	add	r0, r1, #144	; 0x90
   13194:	ebfffc7c 	bl	1238c <assertion_failed>
   13198:	e3061b04 	movw	r1, #27396	; 0x6b04
   1319c:	e3a02094 	mov	r2, #148	; 0x94
   131a0:	e3401001 	movt	r1, #1
   131a4:	e28100a4 	add	r0, r1, #164	; 0xa4
   131a8:	ebfffc77 	bl	1238c <assertion_failed>
   131ac:	e3061b04 	movw	r1, #27396	; 0x6b04
   131b0:	e3a02095 	mov	r2, #149	; 0x95
   131b4:	e3401001 	movt	r1, #1
   131b8:	e28100bc 	add	r0, r1, #188	; 0xbc
   131bc:	ebfffc72 	bl	1238c <assertion_failed>
   131c0:	e3061b04 	movw	r1, #27396	; 0x6b04
   131c4:	e3a02096 	mov	r2, #150	; 0x96
   131c8:	e3401001 	movt	r1, #1
   131cc:	e28100d4 	add	r0, r1, #212	; 0xd4
   131d0:	ebfffc6d 	bl	1238c <assertion_failed>

000131d4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   131d4:	e251c000 	subs	ip, r1, #0
   131d8:	e92d4010 	push	{r4, lr}
   131dc:	e5dde008 	ldrb	lr, [sp, #8]
   131e0:	0a00002a 	beq	13290 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xbc>
   131e4:	e3530000 	cmp	r3, #0
   131e8:	e1a01003 	mov	r1, r3
   131ec:	0a00002c 	beq	132a4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xd0>
   131f0:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   131f4:	8a00002f 	bhi	132b8 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xe4>
   131f8:	e5903000 	ldr	r3, [r0]
   131fc:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13200:	e2833070 	add	r3, r3, #112	; 0x70
   13204:	e1a03403 	lsl	r3, r3, #8
   13208:	e5933020 	ldr	r3, [r3, #32]
   1320c:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   13210:	e7e03e53 	ubfx	r3, r3, #28, #1
   13214:	e3510801 	cmp	r1, #65536	; 0x10000
   13218:	33833001 	orrcc	r3, r3, #1
   1321c:	e3530000 	cmp	r3, #0
   13220:	0a000033 	beq	132f4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x120>
   13224:	e3d234ff 	bics	r3, r2, #-16777216	; 0xff000000
   13228:	0a000027 	beq	132cc <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xf8>
   1322c:	e5902008 	ldr	r2, [r0, #8]
   13230:	e283347e 	add	r3, r3, #2113929216	; 0x7e000000
   13234:	e3520000 	cmp	r2, #0
   13238:	0a000028 	beq	132e0 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x10c>
   1323c:	e5823004 	str	r3, [r2, #4]
   13240:	e3003438 	movw	r3, #1080	; 0x438
   13244:	e183e80e 	orr	lr, r3, lr, lsl #16
   13248:	e38c3103 	orr	r3, ip, #-1073741824	; 0xc0000000
   1324c:	e5823008 	str	r3, [r2, #8]
   13250:	e3a03000 	mov	r3, #0
   13254:	e582e000 	str	lr, [r2]
   13258:	e582100c 	str	r1, [r2, #12]
   1325c:	e5c23010 	strb	r3, [r2, #16]
   13260:	e5c23011 	strb	r3, [r2, #17]
   13264:	e5c23012 	strb	r3, [r2, #18]
   13268:	e5c23013 	strb	r3, [r2, #19]
   1326c:	e5c23014 	strb	r3, [r2, #20]
   13270:	e5c23015 	strb	r3, [r2, #21]
   13274:	e5c23016 	strb	r3, [r2, #22]
   13278:	e5c23017 	strb	r3, [r2, #23]
   1327c:	e8bd4010 	pop	{r4, lr}
   13280:	e580c020 	str	ip, [r0, #32]
   13284:	e5801024 	str	r1, [r0, #36]	; 0x24
   13288:	e1a0000c 	mov	r0, ip
   1328c:	eafff838 	b	11374 <CleanAndInvalidateDataCacheRange>
   13290:	e3061b04 	movw	r1, #27396	; 0x6b04
   13294:	e3a020bd 	mov	r2, #189	; 0xbd
   13298:	e3401001 	movt	r1, #1
   1329c:	e2810060 	add	r0, r1, #96	; 0x60
   132a0:	ebfffc39 	bl	1238c <assertion_failed>
   132a4:	e3061b04 	movw	r1, #27396	; 0x6b04
   132a8:	e3a020be 	mov	r2, #190	; 0xbe
   132ac:	e3401001 	movt	r1, #1
   132b0:	e2810084 	add	r0, r1, #132	; 0x84
   132b4:	ebfffc34 	bl	1238c <assertion_failed>
   132b8:	e3061b04 	movw	r1, #27396	; 0x6b04
   132bc:	e3a020bf 	mov	r2, #191	; 0xbf
   132c0:	e3401001 	movt	r1, #1
   132c4:	e28100bc 	add	r0, r1, #188	; 0xbc
   132c8:	ebfffc2f 	bl	1238c <assertion_failed>
   132cc:	e3061b04 	movw	r1, #27396	; 0x6b04
   132d0:	e3a020c4 	mov	r2, #196	; 0xc4
   132d4:	e3401001 	movt	r1, #1
   132d8:	e2810f4b 	add	r0, r1, #300	; 0x12c
   132dc:	ebfffc2a 	bl	1238c <assertion_failed>
   132e0:	e3061b04 	movw	r1, #27396	; 0x6b04
   132e4:	e3a020c7 	mov	r2, #199	; 0xc7
   132e8:	e3401001 	movt	r1, #1
   132ec:	e28100a4 	add	r0, r1, #164	; 0xa4
   132f0:	ebfffc25 	bl	1238c <assertion_failed>
   132f4:	e3061b04 	movw	r1, #27396	; 0x6b04
   132f8:	e3a020c0 	mov	r2, #192	; 0xc0
   132fc:	e3401001 	movt	r1, #1
   13300:	e28100d4 	add	r0, r1, #212	; 0xd4
   13304:	ebfffc20 	bl	1238c <assertion_failed>

00013308 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   13308:	e3520000 	cmp	r2, #0
   1330c:	e92d4010 	push	{r4, lr}
   13310:	e5dd4008 	ldrb	r4, [sp, #8]
   13314:	0a00002a 	beq	133c4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xbc>
   13318:	e3530000 	cmp	r3, #0
   1331c:	e1a0c001 	mov	ip, r1
   13320:	e1a01003 	mov	r1, r3
   13324:	0a00002b 	beq	133d8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xd0>
   13328:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   1332c:	8a00002e 	bhi	133ec <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xe4>
   13330:	e5903000 	ldr	r3, [r0]
   13334:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13338:	e2833070 	add	r3, r3, #112	; 0x70
   1333c:	e1a03403 	lsl	r3, r3, #8
   13340:	e5933020 	ldr	r3, [r3, #32]
   13344:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   13348:	e7e03e53 	ubfx	r3, r3, #28, #1
   1334c:	e3510801 	cmp	r1, #65536	; 0x10000
   13350:	33833001 	orrcc	r3, r3, #1
   13354:	e3530000 	cmp	r3, #0
   13358:	0a000032 	beq	13428 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x120>
   1335c:	e3dce4ff 	bics	lr, ip, #-16777216	; 0xff000000
   13360:	0a000026 	beq	13400 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xf8>
   13364:	e590c008 	ldr	ip, [r0, #8]
   13368:	e28ee47e 	add	lr, lr, #2113929216	; 0x7e000000
   1336c:	e35c0000 	cmp	ip, #0
   13370:	0a000027 	beq	13414 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x10c>
   13374:	e58ce008 	str	lr, [ip, #8]
   13378:	e3823103 	orr	r3, r2, #-1073741824	; 0xc0000000
   1337c:	e1a04804 	lsl	r4, r4, #16
   13380:	e58c3004 	str	r3, [ip, #4]
   13384:	e3844fd2 	orr	r4, r4, #840	; 0x348
   13388:	e58c4000 	str	r4, [ip]
   1338c:	e3a03000 	mov	r3, #0
   13390:	e58c100c 	str	r1, [ip, #12]
   13394:	e5cc3010 	strb	r3, [ip, #16]
   13398:	e5cc3011 	strb	r3, [ip, #17]
   1339c:	e5cc3012 	strb	r3, [ip, #18]
   133a0:	e5cc3013 	strb	r3, [ip, #19]
   133a4:	e5cc3014 	strb	r3, [ip, #20]
   133a8:	e5cc3015 	strb	r3, [ip, #21]
   133ac:	e5cc3016 	strb	r3, [ip, #22]
   133b0:	e5cc3017 	strb	r3, [ip, #23]
   133b4:	e8bd4010 	pop	{r4, lr}
   133b8:	e5803020 	str	r3, [r0, #32]
   133bc:	e1a00002 	mov	r0, r2
   133c0:	eafff7eb 	b	11374 <CleanAndInvalidateDataCacheRange>
   133c4:	e3061b04 	movw	r1, #27396	; 0x6b04
   133c8:	e3a020e5 	mov	r2, #229	; 0xe5
   133cc:	e3401001 	movt	r1, #1
   133d0:	e2810074 	add	r0, r1, #116	; 0x74
   133d4:	ebfffbec 	bl	1238c <assertion_failed>
   133d8:	e3061b04 	movw	r1, #27396	; 0x6b04
   133dc:	e3a020e6 	mov	r2, #230	; 0xe6
   133e0:	e3401001 	movt	r1, #1
   133e4:	e2810084 	add	r0, r1, #132	; 0x84
   133e8:	ebfffbe7 	bl	1238c <assertion_failed>
   133ec:	e3061b04 	movw	r1, #27396	; 0x6b04
   133f0:	e3a020e7 	mov	r2, #231	; 0xe7
   133f4:	e3401001 	movt	r1, #1
   133f8:	e28100bc 	add	r0, r1, #188	; 0xbc
   133fc:	ebfffbe2 	bl	1238c <assertion_failed>
   13400:	e3061b04 	movw	r1, #27396	; 0x6b04
   13404:	e3a020ec 	mov	r2, #236	; 0xec
   13408:	e3401001 	movt	r1, #1
   1340c:	e2810f4b 	add	r0, r1, #300	; 0x12c
   13410:	ebfffbdd 	bl	1238c <assertion_failed>
   13414:	e3061b04 	movw	r1, #27396	; 0x6b04
   13418:	e3a020ef 	mov	r2, #239	; 0xef
   1341c:	e3401001 	movt	r1, #1
   13420:	e28100a4 	add	r0, r1, #164	; 0xa4
   13424:	ebfffbd8 	bl	1238c <assertion_failed>
   13428:	e3061b04 	movw	r1, #27396	; 0x6b04
   1342c:	e3a020e8 	mov	r2, #232	; 0xe8
   13430:	e3401001 	movt	r1, #1
   13434:	e28100d4 	add	r0, r1, #212	; 0xd4
   13438:	ebfffbd3 	bl	1238c <assertion_failed>

0001343c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   1343c:	e3510000 	cmp	r1, #0
   13440:	e92d4070 	push	{r4, r5, r6, lr}
   13444:	e59de010 	ldr	lr, [sp, #16]
   13448:	e59d6014 	ldr	r6, [sp, #20]
   1344c:	e59d4018 	ldr	r4, [sp, #24]
   13450:	0a000033 	beq	13524 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xe8>
   13454:	e3520000 	cmp	r2, #0
   13458:	e1a05000 	mov	r5, r0
   1345c:	e1a00002 	mov	r0, r2
   13460:	0a000034 	beq	13538 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xfc>
   13464:	e3530000 	cmp	r3, #0
   13468:	0a000037 	beq	1354c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x110>
   1346c:	e3530801 	cmp	r3, #65536	; 0x10000
   13470:	2a00003a 	bcs	13560 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x124>
   13474:	e35e0000 	cmp	lr, #0
   13478:	0a00003d 	beq	13574 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x138>
   1347c:	e35e0901 	cmp	lr, #16384	; 0x4000
   13480:	2a000040 	bcs	13588 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x14c>
   13484:	e3560801 	cmp	r6, #65536	; 0x10000
   13488:	2a000020 	bcs	13510 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
   1348c:	e354000f 	cmp	r4, #15
   13490:	8a000041 	bhi	1359c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x160>
   13494:	e595c000 	ldr	ip, [r5]
   13498:	e28cc83f 	add	ip, ip, #4128768	; 0x3f0000
   1349c:	e28cc070 	add	ip, ip, #112	; 0x70
   134a0:	e1a0c40c 	lsl	ip, ip, #8
   134a4:	e59c2020 	ldr	r2, [ip, #32]
   134a8:	e3120201 	tst	r2, #268435456	; 0x10000000
   134ac:	1a00003f 	bne	135b0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x174>
   134b0:	e5952008 	ldr	r2, [r5, #8]
   134b4:	e3520000 	cmp	r2, #0
   134b8:	0a000041 	beq	135c4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x188>
   134bc:	e381c103 	orr	ip, r1, #-1073741824	; 0xc0000000
   134c0:	e582c008 	str	ip, [r2, #8]
   134c4:	e24ec001 	sub	ip, lr, #1
   134c8:	e1a01806 	lsl	r1, r6, #16
   134cc:	e5821010 	str	r1, [r2, #16]
   134d0:	e001039e 	mul	r1, lr, r3
   134d4:	e183380c 	orr	r3, r3, ip, lsl #16
   134d8:	e582300c 	str	r3, [r2, #12]
   134dc:	e3003332 	movw	r3, #818	; 0x332
   134e0:	e1834604 	orr	r4, r3, r4, lsl #12
   134e4:	e3803103 	orr	r3, r0, #-1073741824	; 0xc0000000
   134e8:	e5823004 	str	r3, [r2, #4]
   134ec:	e3a03000 	mov	r3, #0
   134f0:	e5824000 	str	r4, [r2]
   134f4:	e5c23014 	strb	r3, [r2, #20]
   134f8:	e5c23015 	strb	r3, [r2, #21]
   134fc:	e5c23016 	strb	r3, [r2, #22]
   13500:	e5c23017 	strb	r3, [r2, #23]
   13504:	e5853020 	str	r3, [r5, #32]
   13508:	e8bd4070 	pop	{r4, r5, r6, lr}
   1350c:	eafff798 	b	11374 <CleanAndInvalidateDataCacheRange>
   13510:	e3061b04 	movw	r1, #27396	; 0x6b04
   13514:	e3002115 	movw	r2, #277	; 0x115
   13518:	e3401001 	movt	r1, #1
   1351c:	e2810e19 	add	r0, r1, #400	; 0x190
   13520:	ebfffb99 	bl	1238c <assertion_failed>
   13524:	e3061b04 	movw	r1, #27396	; 0x6b04
   13528:	e300210f 	movw	r2, #271	; 0x10f
   1352c:	e3401001 	movt	r1, #1
   13530:	e2810060 	add	r0, r1, #96	; 0x60
   13534:	ebfffb94 	bl	1238c <assertion_failed>
   13538:	e3061b04 	movw	r1, #27396	; 0x6b04
   1353c:	e3a02e11 	mov	r2, #272	; 0x110
   13540:	e3401001 	movt	r1, #1
   13544:	e2810074 	add	r0, r1, #116	; 0x74
   13548:	ebfffb8f 	bl	1238c <assertion_failed>
   1354c:	e3061b04 	movw	r1, #27396	; 0x6b04
   13550:	e3002111 	movw	r2, #273	; 0x111
   13554:	e3401001 	movt	r1, #1
   13558:	e2810f4f 	add	r0, r1, #316	; 0x13c
   1355c:	ebfffb8a 	bl	1238c <assertion_failed>
   13560:	e3061b04 	movw	r1, #27396	; 0x6b04
   13564:	e3002112 	movw	r2, #274	; 0x112
   13568:	e3401001 	movt	r1, #1
   1356c:	e2810e15 	add	r0, r1, #336	; 0x150
   13570:	ebfffb85 	bl	1238c <assertion_failed>
   13574:	e3061b04 	movw	r1, #27396	; 0x6b04
   13578:	e3002113 	movw	r2, #275	; 0x113
   1357c:	e3401001 	movt	r1, #1
   13580:	e2810f5a 	add	r0, r1, #360	; 0x168
   13584:	ebfffb80 	bl	1238c <assertion_failed>
   13588:	e3061b04 	movw	r1, #27396	; 0x6b04
   1358c:	e3a02f45 	mov	r2, #276	; 0x114
   13590:	e3401001 	movt	r1, #1
   13594:	e2810f5e 	add	r0, r1, #376	; 0x178
   13598:	ebfffb7b 	bl	1238c <assertion_failed>
   1359c:	e3061b04 	movw	r1, #27396	; 0x6b04
   135a0:	e3002116 	movw	r2, #278	; 0x116
   135a4:	e3401001 	movt	r1, #1
   135a8:	e2810090 	add	r0, r1, #144	; 0x90
   135ac:	ebfffb76 	bl	1238c <assertion_failed>
   135b0:	e3061b04 	movw	r1, #27396	; 0x6b04
   135b4:	e3a02f46 	mov	r2, #280	; 0x118
   135b8:	e3401001 	movt	r1, #1
   135bc:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   135c0:	ebfffb71 	bl	1238c <assertion_failed>
   135c4:	e3061b04 	movw	r1, #27396	; 0x6b04
   135c8:	e300211a 	movw	r2, #282	; 0x11a
   135cc:	e3401001 	movt	r1, #1
   135d0:	e28100a4 	add	r0, r1, #164	; 0xa4
   135d4:	ebfffb6c 	bl	1238c <assertion_failed>

000135d8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   135d8:	e5903000 	ldr	r3, [r0]
   135dc:	e92d4070 	push	{r4, r5, r6, lr}
   135e0:	e353000c 	cmp	r3, #12
   135e4:	8a000015 	bhi	13640 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   135e8:	e1a04000 	mov	r4, r0
   135ec:	e590000c 	ldr	r0, [r0, #12]
   135f0:	e3500000 	cmp	r0, #0
   135f4:	0a000016 	beq	13654 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   135f8:	e1a06002 	mov	r6, r2
   135fc:	e1a05001 	mov	r5, r1
   13600:	e5d42010 	ldrb	r2, [r4, #16]
   13604:	e3520000 	cmp	r2, #0
   13608:	0a000004 	beq	13620 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   1360c:	e5845014 	str	r5, [r4, #20]
   13610:	e3550000 	cmp	r5, #0
   13614:	0a000013 	beq	13668 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   13618:	e5846018 	str	r6, [r4, #24]
   1361c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13620:	e3032998 	movw	r2, #14744	; 0x3998
   13624:	e2831010 	add	r1, r3, #16
   13628:	e3402001 	movt	r2, #1
   1362c:	e1a03004 	mov	r3, r4
   13630:	ebfff9dc 	bl	11da8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13634:	e3a03001 	mov	r3, #1
   13638:	e5c43010 	strb	r3, [r4, #16]
   1363c:	eafffff2 	b	1360c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   13640:	e3061b04 	movw	r1, #27396	; 0x6b04
   13644:	e3002139 	movw	r2, #313	; 0x139
   13648:	e3401001 	movt	r1, #1
   1364c:	e2810e1e 	add	r0, r1, #480	; 0x1e0
   13650:	ebfffb4d 	bl	1238c <assertion_failed>
   13654:	e3061b04 	movw	r1, #27396	; 0x6b04
   13658:	e300213a 	movw	r2, #314	; 0x13a
   1365c:	e3401001 	movt	r1, #1
   13660:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   13664:	ebfffb48 	bl	1238c <assertion_failed>
   13668:	e3061b04 	movw	r1, #27396	; 0x6b04
   1366c:	e3a02f51 	mov	r2, #324	; 0x144
   13670:	e3401001 	movt	r1, #1
   13674:	e2810f85 	add	r0, r1, #532	; 0x214
   13678:	ebfffb43 	bl	1238c <assertion_failed>

0001367c <CDMAChannel::Start()>:
   1367c:	e5902000 	ldr	r2, [r0]
   13680:	e92d4010 	push	{r4, lr}
   13684:	e352000b 	cmp	r2, #11
   13688:	8a00002c 	bhi	13740 <CDMAChannel::Start()+0xc4>
   1368c:	e1a04000 	mov	r4, r0
   13690:	e5900008 	ldr	r0, [r0, #8]
   13694:	e3500000 	cmp	r0, #0
   13698:	0a00002d 	beq	13754 <CDMAChannel::Start()+0xd8>
   1369c:	e5943014 	ldr	r3, [r4, #20]
   136a0:	e3530000 	cmp	r3, #0
   136a4:	0a000008 	beq	136cc <CDMAChannel::Start()+0x50>
   136a8:	e594300c 	ldr	r3, [r4, #12]
   136ac:	e3530000 	cmp	r3, #0
   136b0:	0a000036 	beq	13790 <CDMAChannel::Start()+0x114>
   136b4:	e5d43010 	ldrb	r3, [r4, #16]
   136b8:	e3530000 	cmp	r3, #0
   136bc:	0a00001a 	beq	1372c <CDMAChannel::Start()+0xb0>
   136c0:	e5903000 	ldr	r3, [r0]
   136c4:	e3833001 	orr	r3, r3, #1
   136c8:	e5803000 	str	r3, [r0]
   136cc:	e282383f 	add	r3, r2, #4128768	; 0x3f0000
   136d0:	e2833070 	add	r3, r3, #112	; 0x70
   136d4:	e1a03403 	lsl	r3, r3, #8
   136d8:	e5931000 	ldr	r1, [r3]
   136dc:	e3110004 	tst	r1, #4
   136e0:	1a000020 	bne	13768 <CDMAChannel::Start()+0xec>
   136e4:	e3a01a07 	mov	r1, #28672	; 0x7000
   136e8:	e3a0c001 	mov	ip, #1
   136ec:	e3431f00 	movt	r1, #16128	; 0x3f00
   136f0:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   136f4:	e011221c 	ands	r2, r1, ip, lsl r2
   136f8:	1a00001f 	bne	1377c <CDMAChannel::Start()+0x100>
   136fc:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
   13700:	e3a01020 	mov	r1, #32
   13704:	e5832004 	str	r2, [r3, #4]
   13708:	ebfff719 	bl	11374 <CleanAndInvalidateDataCacheRange>
   1370c:	e5943000 	ldr	r3, [r4]
   13710:	e3a02001 	mov	r2, #1
   13714:	e34120f1 	movt	r2, #4337	; 0x10f1
   13718:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   1371c:	e2833070 	add	r3, r3, #112	; 0x70
   13720:	e1a03403 	lsl	r3, r3, #8
   13724:	e5832000 	str	r2, [r3]
   13728:	e8bd8010 	pop	{r4, pc}
   1372c:	e3061b04 	movw	r1, #27396	; 0x6b04
   13730:	e300215a 	movw	r2, #346	; 0x15a
   13734:	e3401001 	movt	r1, #1
   13738:	e2810e23 	add	r0, r1, #560	; 0x230
   1373c:	ebfffb12 	bl	1238c <assertion_failed>
   13740:	e3061b04 	movw	r1, #27396	; 0x6b04
   13744:	e3a02f55 	mov	r2, #340	; 0x154
   13748:	e3401001 	movt	r1, #1
   1374c:	e2810030 	add	r0, r1, #48	; 0x30
   13750:	ebfffb0d 	bl	1238c <assertion_failed>
   13754:	e3061b04 	movw	r1, #27396	; 0x6b04
   13758:	e3002155 	movw	r2, #341	; 0x155
   1375c:	e3401001 	movt	r1, #1
   13760:	e28100a4 	add	r0, r1, #164	; 0xa4
   13764:	ebfffb08 	bl	1238c <assertion_failed>
   13768:	e3061b04 	movw	r1, #27396	; 0x6b04
   1376c:	e3a02e16 	mov	r2, #352	; 0x160
   13770:	e3401001 	movt	r1, #1
   13774:	e2810d09 	add	r0, r1, #576	; 0x240
   13778:	ebfffb03 	bl	1238c <assertion_failed>
   1377c:	e3061b04 	movw	r1, #27396	; 0x6b04
   13780:	e3002161 	movw	r2, #353	; 0x161
   13784:	e3401001 	movt	r1, #1
   13788:	e2810f9d 	add	r0, r1, #628	; 0x274
   1378c:	ebfffafe 	bl	1238c <assertion_failed>
   13790:	e3061b04 	movw	r1, #27396	; 0x6b04
   13794:	e3002159 	movw	r2, #345	; 0x159
   13798:	e3401001 	movt	r1, #1
   1379c:	e2810f7f 	add	r0, r1, #508	; 0x1fc
   137a0:	ebfffaf9 	bl	1238c <assertion_failed>

000137a4 <CDMAChannel::Wait()>:
   137a4:	e5902000 	ldr	r2, [r0]
   137a8:	e92d4010 	push	{r4, lr}
   137ac:	e352000b 	cmp	r2, #11
   137b0:	8a000014 	bhi	13808 <CDMAChannel::Wait()+0x64>
   137b4:	e5903014 	ldr	r3, [r0, #20]
   137b8:	e1a04000 	mov	r4, r0
   137bc:	e3530000 	cmp	r3, #0
   137c0:	0282283f 	addeq	r2, r2, #4128768	; 0x3f0000
   137c4:	02822070 	addeq	r2, r2, #112	; 0x70
   137c8:	01a02402 	lsleq	r2, r2, #8
   137cc:	1a000012 	bne	1381c <CDMAChannel::Wait()+0x78>
   137d0:	e5923000 	ldr	r3, [r2]
   137d4:	e3130001 	tst	r3, #1
   137d8:	1afffffc 	bne	137d0 <CDMAChannel::Wait()+0x2c>
   137dc:	e5942020 	ldr	r2, [r4, #32]
   137e0:	e2233c01 	eor	r3, r3, #256	; 0x100
   137e4:	e7e00453 	ubfx	r0, r3, #8, #1
   137e8:	e5c4001c 	strb	r0, [r4, #28]
   137ec:	e3520000 	cmp	r2, #0
   137f0:	08bd8010 	popeq	{r4, pc}
   137f4:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   137f8:	e1a00002 	mov	r0, r2
   137fc:	ebfff6dc 	bl	11374 <CleanAndInvalidateDataCacheRange>
   13800:	e5d4001c 	ldrb	r0, [r4, #28]
   13804:	e8bd8010 	pop	{r4, pc}
   13808:	e3061b04 	movw	r1, #27396	; 0x6b04
   1380c:	e3a02f5e 	mov	r2, #376	; 0x178
   13810:	e3401001 	movt	r1, #1
   13814:	e2810030 	add	r0, r1, #48	; 0x30
   13818:	ebfffadb 	bl	1238c <assertion_failed>
   1381c:	e3061b04 	movw	r1, #27396	; 0x6b04
   13820:	e3002179 	movw	r2, #377	; 0x179
   13824:	e3401001 	movt	r1, #1
   13828:	e2810faa 	add	r0, r1, #680	; 0x2a8
   1382c:	ebfffad6 	bl	1238c <assertion_failed>

00013830 <CDMAChannel::GetStatus()>:
   13830:	e5903000 	ldr	r3, [r0]
   13834:	e92d4010 	push	{r4, lr}
   13838:	e353000b 	cmp	r3, #11
   1383c:	8a000007 	bhi	13860 <CDMAChannel::GetStatus()+0x30>
   13840:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   13844:	e2833070 	add	r3, r3, #112	; 0x70
   13848:	e1a03403 	lsl	r3, r3, #8
   1384c:	e5933000 	ldr	r3, [r3]
   13850:	e3130001 	tst	r3, #1
   13854:	1a000006 	bne	13874 <CDMAChannel::GetStatus()+0x44>
   13858:	e5d0001c 	ldrb	r0, [r0, #28]
   1385c:	e8bd8010 	pop	{r4, pc}
   13860:	e3061b04 	movw	r1, #27396	; 0x6b04
   13864:	e3a02f66 	mov	r2, #408	; 0x198
   13868:	e3401001 	movt	r1, #1
   1386c:	e2810030 	add	r0, r1, #48	; 0x30
   13870:	ebfffac5 	bl	1238c <assertion_failed>
   13874:	e3061b04 	movw	r1, #27396	; 0x6b04
   13878:	e3002199 	movw	r2, #409	; 0x199
   1387c:	e3401001 	movt	r1, #1
   13880:	e2810fb1 	add	r0, r1, #708	; 0x2c4
   13884:	ebfffac0 	bl	1238c <assertion_failed>

00013888 <CDMAChannel::InterruptHandler()>:
   13888:	e92d4010 	push	{r4, lr}
   1388c:	e1a04000 	mov	r4, r0
   13890:	e5900020 	ldr	r0, [r0, #32]
   13894:	e3500000 	cmp	r0, #0
   13898:	1a000020 	bne	13920 <CDMAChannel::InterruptHandler()+0x98>
   1389c:	e5941000 	ldr	r1, [r4]
   138a0:	e351000b 	cmp	r1, #11
   138a4:	8a000022 	bhi	13934 <CDMAChannel::InterruptHandler()+0xac>
   138a8:	e3a02a07 	mov	r2, #28672	; 0x7000
   138ac:	e3a03001 	mov	r3, #1
   138b0:	e3432f00 	movt	r2, #16128	; 0x3f00
   138b4:	e1a03113 	lsl	r3, r3, r1
   138b8:	e5921fe0 	ldr	r1, [r2, #4064]	; 0xfe0
   138bc:	e1130001 	tst	r3, r1
   138c0:	0a000020 	beq	13948 <CDMAChannel::InterruptHandler()+0xc0>
   138c4:	e5823fe0 	str	r3, [r2, #4064]	; 0xfe0
   138c8:	e5943000 	ldr	r3, [r4]
   138cc:	e283383f 	add	r3, r3, #4128768	; 0x3f0000
   138d0:	e2833070 	add	r3, r3, #112	; 0x70
   138d4:	e1a03403 	lsl	r3, r3, #8
   138d8:	e5931000 	ldr	r1, [r3]
   138dc:	e3110004 	tst	r1, #4
   138e0:	0a00001d 	beq	1395c <CDMAChannel::InterruptHandler()+0xd4>
   138e4:	e3110001 	tst	r1, #1
   138e8:	1a000020 	bne	13970 <CDMAChannel::InterruptHandler()+0xe8>
   138ec:	e594e014 	ldr	lr, [r4, #20]
   138f0:	e2211c01 	eor	r1, r1, #256	; 0x100
   138f4:	e7e01451 	ubfx	r1, r1, #8, #1
   138f8:	e3a02004 	mov	r2, #4
   138fc:	e5832000 	str	r2, [r3]
   13900:	e35e0000 	cmp	lr, #0
   13904:	e5c4101c 	strb	r1, [r4, #28]
   13908:	0a00001d 	beq	13984 <CDMAChannel::InterruptHandler()+0xfc>
   1390c:	e5942018 	ldr	r2, [r4, #24]
   13910:	e1a0300e 	mov	r3, lr
   13914:	e5940000 	ldr	r0, [r4]
   13918:	e8bd4010 	pop	{r4, lr}
   1391c:	e12fff13 	bx	r3
   13920:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   13924:	ebfff692 	bl	11374 <CleanAndInvalidateDataCacheRange>
   13928:	e5941000 	ldr	r1, [r4]
   1392c:	e351000b 	cmp	r1, #11
   13930:	9affffdc 	bls	138a8 <CDMAChannel::InterruptHandler()+0x20>
   13934:	e3061b04 	movw	r1, #27396	; 0x6b04
   13938:	e30021a7 	movw	r2, #423	; 0x1a7
   1393c:	e3401001 	movt	r1, #1
   13940:	e2810030 	add	r0, r1, #48	; 0x30
   13944:	ebfffa90 	bl	1238c <assertion_failed>
   13948:	e3061b04 	movw	r1, #27396	; 0x6b04
   1394c:	e30021ad 	movw	r2, #429	; 0x1ad
   13950:	e3401001 	movt	r1, #1
   13954:	e2810fbe 	add	r0, r1, #760	; 0x2f8
   13958:	ebfffa8b 	bl	1238c <assertion_failed>
   1395c:	e3061b04 	movw	r1, #27396	; 0x6b04
   13960:	e30021b1 	movw	r2, #433	; 0x1b1
   13964:	e3401001 	movt	r1, #1
   13968:	e2810e31 	add	r0, r1, #784	; 0x310
   1396c:	ebfffa86 	bl	1238c <assertion_failed>
   13970:	e3061b04 	movw	r1, #27396	; 0x6b04
   13974:	e30021b2 	movw	r2, #434	; 0x1b2
   13978:	e3401001 	movt	r1, #1
   1397c:	e2810e32 	add	r0, r1, #800	; 0x320
   13980:	ebfffa81 	bl	1238c <assertion_failed>
   13984:	e3061b04 	movw	r1, #27396	; 0x6b04
   13988:	e30021b9 	movw	r2, #441	; 0x1b9
   1398c:	e3401001 	movt	r1, #1
   13990:	e2810f85 	add	r0, r1, #532	; 0x214
   13994:	ebfffa7c 	bl	1238c <assertion_failed>

00013998 <CDMAChannel::InterruptStub(void*)>:
   13998:	e3500000 	cmp	r0, #0
   1399c:	0a000000 	beq	139a4 <CDMAChannel::InterruptStub(void*)+0xc>
   139a0:	eaffffb8 	b	13888 <CDMAChannel::InterruptHandler()>
   139a4:	e3061b04 	movw	r1, #27396	; 0x6b04
   139a8:	e3a02d07 	mov	r2, #448	; 0x1c0
   139ac:	e3401001 	movt	r1, #1
   139b0:	e2810fcd 	add	r0, r1, #820	; 0x334
   139b4:	e92d4010 	push	{r4, lr}
   139b8:	ebfffa73 	bl	1238c <assertion_failed>

000139bc <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   139bc:	e5801000 	str	r1, [r0]
   139c0:	e1a03000 	mov	r3, r0
   139c4:	e28010dc 	add	r1, r0, #220	; 0xdc
   139c8:	e3a02000 	mov	r2, #0
   139cc:	e5e32004 	strb	r2, [r3, #4]!
   139d0:	e5a32004 	str	r2, [r3, #4]!
   139d4:	e1530001 	cmp	r3, r1
   139d8:	1afffffc 	bne	139d0 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x14>
   139dc:	e12fff1e 	bx	lr

000139e0 <CGPIOManager::~CGPIOManager()>:
   139e0:	e92d4010 	push	{r4, lr}
   139e4:	e2803004 	add	r3, r0, #4
   139e8:	e1a04000 	mov	r4, r0
   139ec:	e28010dc 	add	r1, r0, #220	; 0xdc
   139f0:	ea000001 	b	139fc <CGPIOManager::~CGPIOManager()+0x1c>
   139f4:	e1530001 	cmp	r3, r1
   139f8:	0a000008 	beq	13a20 <CGPIOManager::~CGPIOManager()+0x40>
   139fc:	e5b32004 	ldr	r2, [r3, #4]!
   13a00:	e3520000 	cmp	r2, #0
   13a04:	0afffffa 	beq	139f4 <CGPIOManager::~CGPIOManager()+0x14>
   13a08:	e3061e44 	movw	r1, #28228	; 0x6e44
   13a0c:	e3060e54 	movw	r0, #28244	; 0x6e54
   13a10:	e3401001 	movt	r1, #1
   13a14:	e3a0202c 	mov	r2, #44	; 0x2c
   13a18:	e3400001 	movt	r0, #1
   13a1c:	ebfffa5a 	bl	1238c <assertion_failed>
   13a20:	e5d43004 	ldrb	r3, [r4, #4]
   13a24:	e3530000 	cmp	r3, #0
   13a28:	0a000004 	beq	13a40 <CGPIOManager::~CGPIOManager()+0x60>
   13a2c:	e5940000 	ldr	r0, [r4]
   13a30:	e3500000 	cmp	r0, #0
   13a34:	0a000003 	beq	13a48 <CGPIOManager::~CGPIOManager()+0x68>
   13a38:	e3a01034 	mov	r1, #52	; 0x34
   13a3c:	ebfff90c 	bl	11e74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   13a40:	e1a00004 	mov	r0, r4
   13a44:	e8bd8010 	pop	{r4, pc}
   13a48:	e3061e44 	movw	r1, #28228	; 0x6e44
   13a4c:	e3060e68 	movw	r0, #28264	; 0x6e68
   13a50:	e3401001 	movt	r1, #1
   13a54:	e3a02032 	mov	r2, #50	; 0x32
   13a58:	e3400001 	movt	r0, #1
   13a5c:	ebfffa4a 	bl	1238c <assertion_failed>

00013a60 <CGPIOManager::Initialize()>:
   13a60:	e5d03004 	ldrb	r3, [r0, #4]
   13a64:	e92d4010 	push	{r4, lr}
   13a68:	e3530000 	cmp	r3, #0
   13a6c:	1a00000b 	bne	13aa0 <CGPIOManager::Initialize()+0x40>
   13a70:	e1a04000 	mov	r4, r0
   13a74:	e5900000 	ldr	r0, [r0]
   13a78:	e3500000 	cmp	r0, #0
   13a7c:	0a00000d 	beq	13ab8 <CGPIOManager::Initialize()+0x58>
   13a80:	e3032ccc 	movw	r2, #15564	; 0x3ccc
   13a84:	e1a03004 	mov	r3, r4
   13a88:	e3402001 	movt	r2, #1
   13a8c:	e3a01034 	mov	r1, #52	; 0x34
   13a90:	ebfff8c4 	bl	11da8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13a94:	e3a00001 	mov	r0, #1
   13a98:	e5c40004 	strb	r0, [r4, #4]
   13a9c:	e8bd8010 	pop	{r4, pc}
   13aa0:	e3061e44 	movw	r1, #28228	; 0x6e44
   13aa4:	e3060e7c 	movw	r0, #28284	; 0x6e7c
   13aa8:	e3401001 	movt	r1, #1
   13aac:	e3a0203b 	mov	r2, #59	; 0x3b
   13ab0:	e3400001 	movt	r0, #1
   13ab4:	ebfffa34 	bl	1238c <assertion_failed>
   13ab8:	e3061e44 	movw	r1, #28228	; 0x6e44
   13abc:	e3060e68 	movw	r0, #28264	; 0x6e68
   13ac0:	e3401001 	movt	r1, #1
   13ac4:	e3a0203c 	mov	r2, #60	; 0x3c
   13ac8:	e3400001 	movt	r0, #1
   13acc:	ebfffa2e 	bl	1238c <assertion_failed>

00013ad0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   13ad0:	e5d03004 	ldrb	r3, [r0, #4]
   13ad4:	e92d4010 	push	{r4, lr}
   13ad8:	e3530000 	cmp	r3, #0
   13adc:	0a00000a 	beq	13b0c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   13ae0:	e3510000 	cmp	r1, #0
   13ae4:	0a00000e 	beq	13b24 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   13ae8:	e5913004 	ldr	r3, [r1, #4]
   13aec:	e3530035 	cmp	r3, #53	; 0x35
   13af0:	8a000011 	bhi	13b3c <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   13af4:	e0800103 	add	r0, r0, r3, lsl #2
   13af8:	e5903008 	ldr	r3, [r0, #8]
   13afc:	e3530000 	cmp	r3, #0
   13b00:	1a000013 	bne	13b54 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   13b04:	e5801008 	str	r1, [r0, #8]
   13b08:	e8bd8010 	pop	{r4, pc}
   13b0c:	e3061e44 	movw	r1, #28228	; 0x6e44
   13b10:	e3060e90 	movw	r0, #28304	; 0x6e90
   13b14:	e3401001 	movt	r1, #1
   13b18:	e3a02045 	mov	r2, #69	; 0x45
   13b1c:	e3400001 	movt	r0, #1
   13b20:	ebfffa19 	bl	1238c <assertion_failed>
   13b24:	e3061e44 	movw	r1, #28228	; 0x6e44
   13b28:	e3060ea0 	movw	r0, #28320	; 0x6ea0
   13b2c:	e3401001 	movt	r1, #1
   13b30:	e3a02047 	mov	r2, #71	; 0x47
   13b34:	e3400001 	movt	r0, #1
   13b38:	ebfffa13 	bl	1238c <assertion_failed>
   13b3c:	e3061e44 	movw	r1, #28228	; 0x6e44
   13b40:	e3060eac 	movw	r0, #28332	; 0x6eac
   13b44:	e3401001 	movt	r1, #1
   13b48:	e3a02049 	mov	r2, #73	; 0x49
   13b4c:	e3400001 	movt	r0, #1
   13b50:	ebfffa0d 	bl	1238c <assertion_failed>
   13b54:	e3061e44 	movw	r1, #28228	; 0x6e44
   13b58:	e3060e54 	movw	r0, #28244	; 0x6e54
   13b5c:	e3401001 	movt	r1, #1
   13b60:	e3a0204b 	mov	r2, #75	; 0x4b
   13b64:	e3400001 	movt	r0, #1
   13b68:	ebfffa07 	bl	1238c <assertion_failed>

00013b6c <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   13b6c:	e5d03004 	ldrb	r3, [r0, #4]
   13b70:	e92d4010 	push	{r4, lr}
   13b74:	e3530000 	cmp	r3, #0
   13b78:	0a00000b 	beq	13bac <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   13b7c:	e3510000 	cmp	r1, #0
   13b80:	0a00000f 	beq	13bc4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   13b84:	e5913004 	ldr	r3, [r1, #4]
   13b88:	e3530035 	cmp	r3, #53	; 0x35
   13b8c:	8a000012 	bhi	13bdc <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   13b90:	e0800103 	add	r0, r0, r3, lsl #2
   13b94:	e5903008 	ldr	r3, [r0, #8]
   13b98:	e3530000 	cmp	r3, #0
   13b9c:	0a000014 	beq	13bf4 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   13ba0:	e3a03000 	mov	r3, #0
   13ba4:	e5803008 	str	r3, [r0, #8]
   13ba8:	e8bd8010 	pop	{r4, pc}
   13bac:	e3061e44 	movw	r1, #28228	; 0x6e44
   13bb0:	e3060e90 	movw	r0, #28304	; 0x6e90
   13bb4:	e3401001 	movt	r1, #1
   13bb8:	e3a02052 	mov	r2, #82	; 0x52
   13bbc:	e3400001 	movt	r0, #1
   13bc0:	ebfff9f1 	bl	1238c <assertion_failed>
   13bc4:	e3061e44 	movw	r1, #28228	; 0x6e44
   13bc8:	e3060ea0 	movw	r0, #28320	; 0x6ea0
   13bcc:	e3401001 	movt	r1, #1
   13bd0:	e3a02054 	mov	r2, #84	; 0x54
   13bd4:	e3400001 	movt	r0, #1
   13bd8:	ebfff9eb 	bl	1238c <assertion_failed>
   13bdc:	e3061e44 	movw	r1, #28228	; 0x6e44
   13be0:	e3060eac 	movw	r0, #28332	; 0x6eac
   13be4:	e3401001 	movt	r1, #1
   13be8:	e3a02056 	mov	r2, #86	; 0x56
   13bec:	e3400001 	movt	r0, #1
   13bf0:	ebfff9e5 	bl	1238c <assertion_failed>
   13bf4:	e3061e44 	movw	r1, #28228	; 0x6e44
   13bf8:	e3060ec0 	movw	r0, #28352	; 0x6ec0
   13bfc:	e3401001 	movt	r1, #1
   13c00:	e3a02058 	mov	r2, #88	; 0x58
   13c04:	e3400001 	movt	r0, #1
   13c08:	ebfff9df 	bl	1238c <assertion_failed>

00013c0c <CGPIOManager::InterruptHandler()>:
   13c0c:	e5d03004 	ldrb	r3, [r0, #4]
   13c10:	e92d4070 	push	{r4, r5, r6, lr}
   13c14:	e3530000 	cmp	r3, #0
   13c18:	0a000025 	beq	13cb4 <CGPIOManager::InterruptHandler()+0xa8>
   13c1c:	e3a02000 	mov	r2, #0
   13c20:	e1a04002 	mov	r4, r2
   13c24:	e3432f20 	movt	r2, #16160	; 0x3f20
   13c28:	e5923040 	ldr	r3, [r2, #64]	; 0x40
   13c2c:	ea000005 	b	13c48 <CGPIOManager::InterruptHandler()+0x3c>
   13c30:	e2844001 	add	r4, r4, #1
   13c34:	e314001f 	tst	r4, #31
   13c38:	05923044 	ldreq	r3, [r2, #68]	; 0x44
   13c3c:	11a030a3 	lsrne	r3, r3, #1
   13c40:	e3540036 	cmp	r4, #54	; 0x36
   13c44:	08bd8070 	popeq	{r4, r5, r6, pc}
   13c48:	e3130001 	tst	r3, #1
   13c4c:	0afffff7 	beq	13c30 <CGPIOManager::InterruptHandler()+0x24>
   13c50:	e2843002 	add	r3, r4, #2
   13c54:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   13c58:	e3550000 	cmp	r5, #0
   13c5c:	0a000009 	beq	13c88 <CGPIOManager::InterruptHandler()+0x7c>
   13c60:	e1a00005 	mov	r0, r5
   13c64:	ebffd6c6 	bl	9784 <CGPIOPin::InterruptHandler()>
   13c68:	e5d53024 	ldrb	r3, [r5, #36]	; 0x24
   13c6c:	e3530000 	cmp	r3, #0
   13c70:	13a03040 	movne	r3, #64	; 0x40
   13c74:	1595100c 	ldrne	r1, [r5, #12]
   13c78:	15952008 	ldrne	r2, [r5, #8]
   13c7c:	13433f20 	movtne	r3, #16160	; 0x3f20
   13c80:	17821003 	strne	r1, [r2, r3]
   13c84:	e8bd8070 	pop	{r4, r5, r6, pc}
   13c88:	e1a00004 	mov	r0, r4
   13c8c:	ebffd6db 	bl	9800 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   13c90:	e3a03010 	mov	r3, #16
   13c94:	e204101f 	and	r1, r4, #31
   13c98:	e3403fc8 	movt	r3, #4040	; 0xfc8
   13c9c:	e3a02001 	mov	r2, #1
   13ca0:	e08332a4 	add	r3, r3, r4, lsr #5
   13ca4:	e1a02112 	lsl	r2, r2, r1
   13ca8:	e1a03103 	lsl	r3, r3, #2
   13cac:	e5832000 	str	r2, [r3]
   13cb0:	e8bd8070 	pop	{r4, r5, r6, pc}
   13cb4:	e3061e44 	movw	r1, #28228	; 0x6e44
   13cb8:	e3060e90 	movw	r0, #28304	; 0x6e90
   13cbc:	e3401001 	movt	r1, #1
   13cc0:	e3a0205e 	mov	r2, #94	; 0x5e
   13cc4:	e3400001 	movt	r0, #1
   13cc8:	ebfff9af 	bl	1238c <assertion_failed>

00013ccc <CGPIOManager::InterruptStub(void*)>:
   13ccc:	e3500000 	cmp	r0, #0
   13cd0:	0a000000 	beq	13cd8 <CGPIOManager::InterruptStub(void*)+0xc>
   13cd4:	eaffffcc 	b	13c0c <CGPIOManager::InterruptHandler()>
   13cd8:	e3061e44 	movw	r1, #28228	; 0x6e44
   13cdc:	e3060ed4 	movw	r0, #28372	; 0x6ed4
   13ce0:	e3401001 	movt	r1, #1
   13ce4:	e3a0208e 	mov	r2, #142	; 0x8e
   13ce8:	e3400001 	movt	r0, #1
   13cec:	e92d4010 	push	{r4, lr}
   13cf0:	ebfff9a5 	bl	1238c <assertion_failed>

00013cf4 <CPtrList::CPtrList()>:
   13cf4:	e3a02000 	mov	r2, #0
   13cf8:	e5802000 	str	r2, [r0]
   13cfc:	e12fff1e 	bx	lr

00013d00 <CPtrList::~CPtrList()>:
   13d00:	e5903000 	ldr	r3, [r0]
   13d04:	e3530000 	cmp	r3, #0
   13d08:	012fff1e 	bxeq	lr
   13d0c:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13d10:	e3060eec 	movw	r0, #28396	; 0x6eec
   13d14:	e3401001 	movt	r1, #1
   13d18:	e3a0202a 	mov	r2, #42	; 0x2a
   13d1c:	e3400001 	movt	r0, #1
   13d20:	e92d4010 	push	{r4, lr}
   13d24:	ebfff998 	bl	1238c <assertion_failed>

00013d28 <CPtrList::GetFirst()>:
   13d28:	e5900000 	ldr	r0, [r0]
   13d2c:	e12fff1e 	bx	lr

00013d30 <CPtrList::GetNext(TPtrListElement*)>:
   13d30:	e3510000 	cmp	r1, #0
   13d34:	e92d4010 	push	{r4, lr}
   13d38:	0a000006 	beq	13d58 <CPtrList::GetNext(TPtrListElement*)+0x28>
   13d3c:	e5912000 	ldr	r2, [r1]
   13d40:	e3043d43 	movw	r3, #19779	; 0x4d43
   13d44:	e345304c 	movt	r3, #20556	; 0x504c
   13d48:	e1520003 	cmp	r2, r3
   13d4c:	1a000007 	bne	13d70 <CPtrList::GetNext(TPtrListElement*)+0x40>
   13d50:	e5910008 	ldr	r0, [r1, #8]
   13d54:	e8bd8010 	pop	{r4, pc}
   13d58:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13d5c:	e3060ad0 	movw	r0, #27344	; 0x6ad0
   13d60:	e3401001 	movt	r1, #1
   13d64:	e3a02034 	mov	r2, #52	; 0x34
   13d68:	e3400001 	movt	r0, #1
   13d6c:	ebfff986 	bl	1238c <assertion_failed>
   13d70:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13d74:	e3060efc 	movw	r0, #28412	; 0x6efc
   13d78:	e3401001 	movt	r1, #1
   13d7c:	e3a02035 	mov	r2, #53	; 0x35
   13d80:	e3400001 	movt	r0, #1
   13d84:	ebfff980 	bl	1238c <assertion_failed>

00013d88 <CPtrList::GetPtr(TPtrListElement*)>:
   13d88:	e3510000 	cmp	r1, #0
   13d8c:	e92d4010 	push	{r4, lr}
   13d90:	0a000006 	beq	13db0 <CPtrList::GetPtr(TPtrListElement*)+0x28>
   13d94:	e5912000 	ldr	r2, [r1]
   13d98:	e3043d43 	movw	r3, #19779	; 0x4d43
   13d9c:	e345304c 	movt	r3, #20556	; 0x504c
   13da0:	e1520003 	cmp	r2, r3
   13da4:	1a000007 	bne	13dc8 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   13da8:	e591000c 	ldr	r0, [r1, #12]
   13dac:	e8bd8010 	pop	{r4, pc}
   13db0:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13db4:	e3060ad0 	movw	r0, #27344	; 0x6ad0
   13db8:	e3401001 	movt	r1, #1
   13dbc:	e3a0203c 	mov	r2, #60	; 0x3c
   13dc0:	e3400001 	movt	r0, #1
   13dc4:	ebfff970 	bl	1238c <assertion_failed>
   13dc8:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13dcc:	e3060efc 	movw	r0, #28412	; 0x6efc
   13dd0:	e3401001 	movt	r1, #1
   13dd4:	e3a0203d 	mov	r2, #61	; 0x3d
   13dd8:	e3400001 	movt	r0, #1
   13ddc:	ebfff96a 	bl	1238c <assertion_failed>

00013de0 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13de0:	e92d4070 	push	{r4, r5, r6, lr}
   13de4:	e1a05000 	mov	r5, r0
   13de8:	e3a00010 	mov	r0, #16
   13dec:	e1a06002 	mov	r6, r2
   13df0:	e1a04001 	mov	r4, r1
   13df4:	ebfff3ea 	bl	10da4 <operator new(unsigned int)>
   13df8:	e5952000 	ldr	r2, [r5]
   13dfc:	e3043d43 	movw	r3, #19779	; 0x4d43
   13e00:	e345304c 	movt	r3, #20556	; 0x504c
   13e04:	e5803000 	str	r3, [r0]
   13e08:	e3520000 	cmp	r2, #0
   13e0c:	e580600c 	str	r6, [r0, #12]
   13e10:	0a000016 	beq	13e70 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   13e14:	e3540000 	cmp	r4, #0
   13e18:	0a00001a 	beq	13e88 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   13e1c:	e5941000 	ldr	r1, [r4]
   13e20:	e1510003 	cmp	r1, r3
   13e24:	1a00001d 	bne	13ea0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   13e28:	e1520004 	cmp	r2, r4
   13e2c:	0a000009 	beq	13e58 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   13e30:	e5943004 	ldr	r3, [r4, #4]
   13e34:	e3530000 	cmp	r3, #0
   13e38:	e9800018 	stmib	r0, {r3, r4}
   13e3c:	0a000003 	beq	13e50 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   13e40:	e5932000 	ldr	r2, [r3]
   13e44:	e1520001 	cmp	r2, r1
   13e48:	05830008 	streq	r0, [r3, #8]
   13e4c:	1a000019 	bne	13eb8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   13e50:	e5840004 	str	r0, [r4, #4]
   13e54:	e8bd8070 	pop	{r4, r5, r6, pc}
   13e58:	e5820004 	str	r0, [r2, #4]
   13e5c:	e3a03000 	mov	r3, #0
   13e60:	e5803004 	str	r3, [r0, #4]
   13e64:	e5802008 	str	r2, [r0, #8]
   13e68:	e5850000 	str	r0, [r5]
   13e6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13e70:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13e74:	e3060f20 	movw	r0, #28448	; 0x6f20
   13e78:	e3401001 	movt	r1, #1
   13e7c:	e3a0204c 	mov	r2, #76	; 0x4c
   13e80:	e3400001 	movt	r0, #1
   13e84:	ebfff940 	bl	1238c <assertion_failed>
   13e88:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13e8c:	e3060f30 	movw	r0, #28464	; 0x6f30
   13e90:	e3401001 	movt	r1, #1
   13e94:	e3a0204d 	mov	r2, #77	; 0x4d
   13e98:	e3400001 	movt	r0, #1
   13e9c:	ebfff93a 	bl	1238c <assertion_failed>
   13ea0:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13ea4:	e3060f3c 	movw	r0, #28476	; 0x6f3c
   13ea8:	e3401001 	movt	r1, #1
   13eac:	e3a0204e 	mov	r2, #78	; 0x4e
   13eb0:	e3400001 	movt	r0, #1
   13eb4:	ebfff934 	bl	1238c <assertion_failed>
   13eb8:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13ebc:	e3060f60 	movw	r0, #28512	; 0x6f60
   13ec0:	e3401001 	movt	r1, #1
   13ec4:	e3a02060 	mov	r2, #96	; 0x60
   13ec8:	e3400001 	movt	r0, #1
   13ecc:	ebfff92e 	bl	1238c <assertion_failed>

00013ed0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   13ed0:	e92d4070 	push	{r4, r5, r6, lr}
   13ed4:	e1a04001 	mov	r4, r1
   13ed8:	e1a05000 	mov	r5, r0
   13edc:	e3a00010 	mov	r0, #16
   13ee0:	e1a06002 	mov	r6, r2
   13ee4:	ebfff3ae 	bl	10da4 <operator new(unsigned int)>
   13ee8:	e580600c 	str	r6, [r0, #12]
   13eec:	e3043d43 	movw	r3, #19779	; 0x4d43
   13ef0:	e345304c 	movt	r3, #20556	; 0x504c
   13ef4:	e3540000 	cmp	r4, #0
   13ef8:	e5803000 	str	r3, [r0]
   13efc:	0a000010 	beq	13f44 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   13f00:	e5952000 	ldr	r2, [r5]
   13f04:	e3520000 	cmp	r2, #0
   13f08:	0a000014 	beq	13f60 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   13f0c:	e5942000 	ldr	r2, [r4]
   13f10:	e1520003 	cmp	r2, r3
   13f14:	1a000017 	bne	13f78 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   13f18:	e5943008 	ldr	r3, [r4, #8]
   13f1c:	e5804004 	str	r4, [r0, #4]
   13f20:	e5803008 	str	r3, [r0, #8]
   13f24:	e3530000 	cmp	r3, #0
   13f28:	0a000003 	beq	13f3c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   13f2c:	e5931000 	ldr	r1, [r3]
   13f30:	e1510002 	cmp	r1, r2
   13f34:	05830004 	streq	r0, [r3, #4]
   13f38:	1a000014 	bne	13f90 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   13f3c:	e5840008 	str	r0, [r4, #8]
   13f40:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f44:	e5953000 	ldr	r3, [r5]
   13f48:	e3530000 	cmp	r3, #0
   13f4c:	1a000015 	bne	13fa8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   13f50:	e5803004 	str	r3, [r0, #4]
   13f54:	e5803008 	str	r3, [r0, #8]
   13f58:	e5850000 	str	r0, [r5]
   13f5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13f60:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13f64:	e3060f20 	movw	r0, #28448	; 0x6f20
   13f68:	e3401001 	movt	r1, #1
   13f6c:	e3a0207d 	mov	r2, #125	; 0x7d
   13f70:	e3400001 	movt	r0, #1
   13f74:	ebfff904 	bl	1238c <assertion_failed>
   13f78:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13f7c:	e3060f88 	movw	r0, #28552	; 0x6f88
   13f80:	e3401001 	movt	r1, #1
   13f84:	e3a0207e 	mov	r2, #126	; 0x7e
   13f88:	e3400001 	movt	r0, #1
   13f8c:	ebfff8fe 	bl	1238c <assertion_failed>
   13f90:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13f94:	e3060fac 	movw	r0, #28588	; 0x6fac
   13f98:	e3401001 	movt	r1, #1
   13f9c:	e3a02085 	mov	r2, #133	; 0x85
   13fa0:	e3400001 	movt	r0, #1
   13fa4:	ebfff8f8 	bl	1238c <assertion_failed>
   13fa8:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   13fac:	e3060eec 	movw	r0, #28396	; 0x6eec
   13fb0:	e3401001 	movt	r1, #1
   13fb4:	e3a02074 	mov	r2, #116	; 0x74
   13fb8:	e3400001 	movt	r0, #1
   13fbc:	ebfff8f2 	bl	1238c <assertion_failed>

00013fc0 <CPtrList::Remove(TPtrListElement*)>:
   13fc0:	e2513000 	subs	r3, r1, #0
   13fc4:	e92d4010 	push	{r4, lr}
   13fc8:	0a00002e 	beq	14088 <CPtrList::Remove(TPtrListElement*)+0xc8>
   13fcc:	e5931000 	ldr	r1, [r3]
   13fd0:	e3042d43 	movw	r2, #19779	; 0x4d43
   13fd4:	e345204c 	movt	r2, #20556	; 0x504c
   13fd8:	e1510002 	cmp	r1, r2
   13fdc:	1a00002f 	bne	140a0 <CPtrList::Remove(TPtrListElement*)+0xe0>
   13fe0:	e5902000 	ldr	r2, [r0]
   13fe4:	e1520003 	cmp	r2, r3
   13fe8:	0a000011 	beq	14034 <CPtrList::Remove(TPtrListElement*)+0x74>
   13fec:	e5932004 	ldr	r2, [r3, #4]
   13ff0:	e3520000 	cmp	r2, #0
   13ff4:	0a00002f 	beq	140b8 <CPtrList::Remove(TPtrListElement*)+0xf8>
   13ff8:	e5920000 	ldr	r0, [r2]
   13ffc:	e1500001 	cmp	r0, r1
   14000:	1a00001a 	bne	14070 <CPtrList::Remove(TPtrListElement*)+0xb0>
   14004:	e5931008 	ldr	r1, [r3, #8]
   14008:	e5821008 	str	r1, [r2, #8]
   1400c:	e3510000 	cmp	r1, #0
   14010:	0a000003 	beq	14024 <CPtrList::Remove(TPtrListElement*)+0x64>
   14014:	e591c000 	ldr	ip, [r1]
   14018:	e15c0000 	cmp	ip, r0
   1401c:	05812004 	streq	r2, [r1, #4]
   14020:	1a00002a 	bne	140d0 <CPtrList::Remove(TPtrListElement*)+0x110>
   14024:	e8bd4010 	pop	{r4, lr}
   14028:	e3a01010 	mov	r1, #16
   1402c:	e1a00003 	mov	r0, r3
   14030:	eafff373 	b	10e04 <operator delete(void*, unsigned int)>
   14034:	e5922008 	ldr	r2, [r2, #8]
   14038:	e5802000 	str	r2, [r0]
   1403c:	e3520000 	cmp	r2, #0
   14040:	0afffff7 	beq	14024 <CPtrList::Remove(TPtrListElement*)+0x64>
   14044:	e5920000 	ldr	r0, [r2]
   14048:	e1500001 	cmp	r0, r1
   1404c:	03a01000 	moveq	r1, #0
   14050:	05821004 	streq	r1, [r2, #4]
   14054:	0afffff2 	beq	14024 <CPtrList::Remove(TPtrListElement*)+0x64>
   14058:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   1405c:	e3060fd8 	movw	r0, #28632	; 0x6fd8
   14060:	e3401001 	movt	r1, #1
   14064:	e3a02098 	mov	r2, #152	; 0x98
   14068:	e3400001 	movt	r0, #1
   1406c:	ebfff8c6 	bl	1238c <assertion_failed>
   14070:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   14074:	e307001c 	movw	r0, #28700	; 0x701c
   14078:	e3401001 	movt	r1, #1
   1407c:	e3a0209f 	mov	r2, #159	; 0x9f
   14080:	e3400001 	movt	r0, #1
   14084:	ebfff8c0 	bl	1238c <assertion_failed>
   14088:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   1408c:	e3060ad0 	movw	r0, #27344	; 0x6ad0
   14090:	e3401001 	movt	r1, #1
   14094:	e3a0208f 	mov	r2, #143	; 0x8f
   14098:	e3400001 	movt	r0, #1
   1409c:	ebfff8ba 	bl	1238c <assertion_failed>
   140a0:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   140a4:	e3060efc 	movw	r0, #28412	; 0x6efc
   140a8:	e3401001 	movt	r1, #1
   140ac:	e3a02090 	mov	r2, #144	; 0x90
   140b0:	e3400001 	movt	r0, #1
   140b4:	ebfff8b4 	bl	1238c <assertion_failed>
   140b8:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   140bc:	e3070004 	movw	r0, #28676	; 0x7004
   140c0:	e3401001 	movt	r1, #1
   140c4:	e3a0209e 	mov	r2, #158	; 0x9e
   140c8:	e3400001 	movt	r0, #1
   140cc:	ebfff8ae 	bl	1238c <assertion_failed>
   140d0:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   140d4:	e3060fd8 	movw	r0, #28632	; 0x6fd8
   140d8:	e3401001 	movt	r1, #1
   140dc:	e3a020a4 	mov	r2, #164	; 0xa4
   140e0:	e3400001 	movt	r0, #1
   140e4:	ebfff8a8 	bl	1238c <assertion_failed>

000140e8 <CPtrList::Find(void*)>:
   140e8:	e5900000 	ldr	r0, [r0]
   140ec:	e3500000 	cmp	r0, #0
   140f0:	012fff1e 	bxeq	lr
   140f4:	e3042d43 	movw	r2, #19779	; 0x4d43
   140f8:	e345204c 	movt	r2, #20556	; 0x504c
   140fc:	ea000005 	b	14118 <CPtrList::Find(void*)+0x30>
   14100:	e590300c 	ldr	r3, [r0, #12]
   14104:	e1530001 	cmp	r3, r1
   14108:	012fff1e 	bxeq	lr
   1410c:	e5900008 	ldr	r0, [r0, #8]
   14110:	e3500000 	cmp	r0, #0
   14114:	012fff1e 	bxeq	lr
   14118:	e5903000 	ldr	r3, [r0]
   1411c:	e1530002 	cmp	r3, r2
   14120:	0afffff6 	beq	14100 <CPtrList::Find(void*)+0x18>
   14124:	e3061ee0 	movw	r1, #28384	; 0x6ee0
   14128:	e3060efc 	movw	r0, #28412	; 0x6efc
   1412c:	e3401001 	movt	r1, #1
   14130:	e3a020b3 	mov	r2, #179	; 0xb3
   14134:	e3400001 	movt	r0, #1
   14138:	e92d4010 	push	{r4, lr}
   1413c:	ebfff892 	bl	1238c <assertion_failed>

00014140 <CPageAllocator::CPageAllocator()>:
   14140:	e3a02000 	mov	r2, #0
   14144:	e3a01001 	mov	r1, #1
   14148:	e5802000 	str	r2, [r0]
   1414c:	e5802004 	str	r2, [r0, #4]
   14150:	e5802008 	str	r2, [r0, #8]
   14154:	e580100c 	str	r1, [r0, #12]
   14158:	e12fff1e 	bx	lr

0001415c <CPageAllocator::~CPageAllocator()>:
   1415c:	e12fff1e 	bx	lr

00014160 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   14160:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14164:	e28db000 	add	fp, sp, #0
   14168:	e24dd014 	sub	sp, sp, #20
   1416c:	e50b0008 	str	r0, [fp, #-8]
   14170:	e50b100c 	str	r1, [fp, #-12]
   14174:	e50b2010 	str	r2, [fp, #-16]
   14178:	e51b300c 	ldr	r3, [fp, #-12]
   1417c:	e2833eff 	add	r3, r3, #4080	; 0xff0
   14180:	e283300f 	add	r3, r3, #15
   14184:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   14188:	e3c3300f 	bic	r3, r3, #15
   1418c:	e1a02003 	mov	r2, r3
   14190:	e51b3008 	ldr	r3, [fp, #-8]
   14194:	e5832000 	str	r2, [r3]
   14198:	e51b200c 	ldr	r2, [fp, #-12]
   1419c:	e51b3010 	ldr	r3, [fp, #-16]
   141a0:	e0823003 	add	r3, r2, r3
   141a4:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   141a8:	e3c3300f 	bic	r3, r3, #15
   141ac:	e1a02003 	mov	r2, r3
   141b0:	e51b3008 	ldr	r3, [fp, #-8]
   141b4:	e5832004 	str	r2, [r3, #4]
   141b8:	e320f000 	nop	{0}
   141bc:	e28bd000 	add	sp, fp, #0
   141c0:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   141c4:	e12fff1e 	bx	lr

000141c8 <CPageAllocator::GetFreeSpace() const>:
   141c8:	e8900005 	ldm	r0, {r0, r2}
   141cc:	e0420000 	sub	r0, r2, r0
   141d0:	e12fff1e 	bx	lr

000141d4 <CPageAllocator::Allocate()>:
   141d4:	e5903000 	ldr	r3, [r0]
   141d8:	e92d4070 	push	{r4, r5, r6, lr}
   141dc:	e3530000 	cmp	r3, #0
   141e0:	0a000024 	beq	14278 <CPageAllocator::Allocate()+0xa4>
   141e4:	e1a04000 	mov	r4, r0
   141e8:	e590000c 	ldr	r0, [r0, #12]
   141ec:	e3500000 	cmp	r0, #0
   141f0:	1a000010 	bne	14238 <CPageAllocator::Allocate()+0x64>
   141f4:	e5945008 	ldr	r5, [r4, #8]
   141f8:	e3550000 	cmp	r5, #0
   141fc:	0a000011 	beq	14248 <CPageAllocator::Allocate()+0x74>
   14200:	e5952000 	ldr	r2, [r5]
   14204:	e3043d43 	movw	r3, #19779	; 0x4d43
   14208:	e3453047 	movt	r3, #20551	; 0x5047
   1420c:	e1520003 	cmp	r2, r3
   14210:	1a00001d 	bne	1428c <CPageAllocator::Allocate()+0xb8>
   14214:	e5952004 	ldr	r2, [r5, #4]
   14218:	e3a03000 	mov	r3, #0
   1421c:	e5842008 	str	r2, [r4, #8]
   14220:	e5853000 	str	r3, [r5]
   14224:	e594300c 	ldr	r3, [r4, #12]
   14228:	e3530000 	cmp	r3, #0
   1422c:	1a00000e 	bne	1426c <CPageAllocator::Allocate()+0x98>
   14230:	e1a00005 	mov	r0, r5
   14234:	e8bd8070 	pop	{r4, r5, r6, pc}
   14238:	ebfff65b 	bl	11bac <EnterCritical>
   1423c:	e5945008 	ldr	r5, [r4, #8]
   14240:	e3550000 	cmp	r5, #0
   14244:	1affffed 	bne	14200 <CPageAllocator::Allocate()+0x2c>
   14248:	e5942000 	ldr	r2, [r4]
   1424c:	e5941004 	ldr	r1, [r4, #4]
   14250:	e2823a01 	add	r3, r2, #4096	; 0x1000
   14254:	e1530001 	cmp	r3, r1
   14258:	e5843000 	str	r3, [r4]
   1425c:	91a05002 	movls	r5, r2
   14260:	e594300c 	ldr	r3, [r4, #12]
   14264:	e3530000 	cmp	r3, #0
   14268:	0afffff0 	beq	14230 <CPageAllocator::Allocate()+0x5c>
   1426c:	ebfff679 	bl	11c58 <LeaveCritical>
   14270:	e1a00005 	mov	r0, r5
   14274:	e8bd8070 	pop	{r4, r5, r6, pc}
   14278:	e3071048 	movw	r1, #28744	; 0x7048
   1427c:	e3a02036 	mov	r2, #54	; 0x36
   14280:	e3401001 	movt	r1, #1
   14284:	e2810014 	add	r0, r1, #20
   14288:	ebfff83f 	bl	1238c <assertion_failed>
   1428c:	e3071048 	movw	r1, #28744	; 0x7048
   14290:	e3a02044 	mov	r2, #68	; 0x44
   14294:	e3401001 	movt	r1, #1
   14298:	e2810024 	add	r0, r1, #36	; 0x24
   1429c:	ebfff83a 	bl	1238c <assertion_failed>

000142a0 <CPageAllocator::Free(void*)>:
   142a0:	e92d4070 	push	{r4, r5, r6, lr}
   142a4:	e2514000 	subs	r4, r1, #0
   142a8:	08bd8070 	popeq	{r4, r5, r6, pc}
   142ac:	e1a05000 	mov	r5, r0
   142b0:	e590000c 	ldr	r0, [r0, #12]
   142b4:	e3500000 	cmp	r0, #0
   142b8:	1a000006 	bne	142d8 <CPageAllocator::Free(void*)+0x38>
   142bc:	e5952008 	ldr	r2, [r5, #8]
   142c0:	e3043d43 	movw	r3, #19779	; 0x4d43
   142c4:	e3453047 	movt	r3, #20551	; 0x5047
   142c8:	e5843000 	str	r3, [r4]
   142cc:	e5842004 	str	r2, [r4, #4]
   142d0:	e5854008 	str	r4, [r5, #8]
   142d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   142d8:	ebfff633 	bl	11bac <EnterCritical>
   142dc:	e595100c 	ldr	r1, [r5, #12]
   142e0:	e3043d43 	movw	r3, #19779	; 0x4d43
   142e4:	e5952008 	ldr	r2, [r5, #8]
   142e8:	e3453047 	movt	r3, #20551	; 0x5047
   142ec:	e3510000 	cmp	r1, #0
   142f0:	e5843000 	str	r3, [r4]
   142f4:	e5842004 	str	r2, [r4, #4]
   142f8:	e5854008 	str	r4, [r5, #8]
   142fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   14300:	e8bd4070 	pop	{r4, r5, r6, lr}
   14304:	eafff653 	b	11c58 <LeaveCritical>

00014308 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   14308:	e5801000 	str	r1, [r0]
   1430c:	e5c02004 	strb	r2, [r0, #4]
   14310:	e12fff1e 	bx	lr

00014314 <CBcmMailBox::~CBcmMailBox()>:
   14314:	e12fff1e 	bx	lr

00014318 <CBcmMailBox::WriteRead(unsigned int)>:
   14318:	e5d03004 	ldrb	r3, [r0, #4]
   1431c:	e92d4070 	push	{r4, r5, r6, lr}
   14320:	e3530000 	cmp	r3, #0
   14324:	e24dd008 	sub	sp, sp, #8
   14328:	e1a05000 	mov	r5, r0
   1432c:	e1a06001 	mov	r6, r1
   14330:	1a000004 	bne	14348 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   14334:	e30731ec 	movw	r3, #29164	; 0x71ec
   14338:	e3403001 	movt	r3, #1
   1433c:	e5930000 	ldr	r0, [r3]
   14340:	e3500000 	cmp	r0, #0
   14344:	1a000029 	bne	143f0 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   14348:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1434c:	e3434f00 	movt	r4, #16128	; 0x3f00
   14350:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   14354:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14358:	1a000005 	bne	14374 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   1435c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   14360:	e3a00014 	mov	r0, #20
   14364:	ebffef06 	bl	ff84 <CTimer::SimpleMsDelay(unsigned int)>
   14368:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1436c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14370:	0afffff9 	beq	1435c <CBcmMailBox::WriteRead(unsigned int)+0x44>
   14374:	e3a00a0b 	mov	r0, #45056	; 0xb000
   14378:	e3430f00 	movt	r0, #16128	; 0x3f00
   1437c:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   14380:	e3530000 	cmp	r3, #0
   14384:	bafffffc 	blt	1437c <CBcmMailBox::WriteRead(unsigned int)+0x64>
   14388:	e316000f 	tst	r6, #15
   1438c:	1a00001e 	bne	1440c <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   14390:	e5953000 	ldr	r3, [r5]
   14394:	e3a02a0b 	mov	r2, #45056	; 0xb000
   14398:	e3432f00 	movt	r2, #16128	; 0x3f00
   1439c:	e1866003 	orr	r6, r6, r3
   143a0:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   143a4:	e5950000 	ldr	r0, [r5]
   143a8:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   143ac:	e3130101 	tst	r3, #1073741824	; 0x40000000
   143b0:	1afffffc 	bne	143a8 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   143b4:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   143b8:	e203100f 	and	r1, r3, #15
   143bc:	e1510000 	cmp	r1, r0
   143c0:	1afffff8 	bne	143a8 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   143c4:	e5d52004 	ldrb	r2, [r5, #4]
   143c8:	e3c3000f 	bic	r0, r3, #15
   143cc:	e3520000 	cmp	r2, #0
   143d0:	1a000004 	bne	143e8 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   143d4:	e30731ec 	movw	r3, #29164	; 0x71ec
   143d8:	e3403001 	movt	r3, #1
   143dc:	e5933000 	ldr	r3, [r3]
   143e0:	e3530000 	cmp	r3, #0
   143e4:	1a000003 	bne	143f8 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   143e8:	e28dd008 	add	sp, sp, #8
   143ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   143f0:	ebfff5ed 	bl	11bac <EnterCritical>
   143f4:	eaffffd3 	b	14348 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   143f8:	e58d0004 	str	r0, [sp, #4]
   143fc:	ebfff615 	bl	11c58 <LeaveCritical>
   14400:	e59d0004 	ldr	r0, [sp, #4]
   14404:	e28dd008 	add	sp, sp, #8
   14408:	e8bd8070 	pop	{r4, r5, r6, pc}
   1440c:	e3071090 	movw	r1, #28816	; 0x7090
   14410:	e30700a0 	movw	r0, #28832	; 0x70a0
   14414:	e3401001 	movt	r1, #1
   14418:	e3a02062 	mov	r2, #98	; 0x62
   1441c:	e3400001 	movt	r0, #1
   14420:	ebfff7d9 	bl	1238c <assertion_failed>

00014424 <CBcmMailBox::Flush()>:
   14424:	e92d4010 	push	{r4, lr}
   14428:	e3a04a0b 	mov	r4, #45056	; 0xb000
   1442c:	e3434f00 	movt	r4, #16128	; 0x3f00
   14430:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   14434:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14438:	18bd8010 	popne	{r4, pc}
   1443c:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   14440:	e3a00014 	mov	r0, #20
   14444:	ebffeece 	bl	ff84 <CTimer::SimpleMsDelay(unsigned int)>
   14448:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1444c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   14450:	0afffff9 	beq	1443c <CBcmMailBox::Flush()+0x18>
   14454:	e8bd8010 	pop	{r4, pc}

00014458 <CBcmMailBox::Read()>:
   14458:	e5901000 	ldr	r1, [r0]
   1445c:	e3a02a0b 	mov	r2, #45056	; 0xb000
   14460:	e3432f00 	movt	r2, #16128	; 0x3f00
   14464:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   14468:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1446c:	1afffffc 	bne	14464 <CBcmMailBox::Read()+0xc>
   14470:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   14474:	e200300f 	and	r3, r0, #15
   14478:	e1530001 	cmp	r3, r1
   1447c:	1afffff8 	bne	14464 <CBcmMailBox::Read()+0xc>
   14480:	e3c0000f 	bic	r0, r0, #15
   14484:	e12fff1e 	bx	lr

00014488 <CBcmMailBox::Write(unsigned int)>:
   14488:	e3a02a0b 	mov	r2, #45056	; 0xb000
   1448c:	e3432f00 	movt	r2, #16128	; 0x3f00
   14490:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   14494:	e3530000 	cmp	r3, #0
   14498:	bafffffc 	blt	14490 <CBcmMailBox::Write(unsigned int)+0x8>
   1449c:	e311000f 	tst	r1, #15
   144a0:	1a000003 	bne	144b4 <CBcmMailBox::Write(unsigned int)+0x2c>
   144a4:	e5903000 	ldr	r3, [r0]
   144a8:	e1811003 	orr	r1, r1, r3
   144ac:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   144b0:	e12fff1e 	bx	lr
   144b4:	e3071090 	movw	r1, #28816	; 0x7090
   144b8:	e30700a0 	movw	r0, #28832	; 0x70a0
   144bc:	e3401001 	movt	r1, #1
   144c0:	e3a02062 	mov	r2, #98	; 0x62
   144c4:	e3400001 	movt	r0, #1
   144c8:	e92d4010 	push	{r4, lr}
   144cc:	ebfff7ae 	bl	1238c <assertion_failed>

000144d0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   144d0:	e30731ec 	movw	r3, #29164	; 0x71ec
   144d4:	e3a02000 	mov	r2, #0
   144d8:	e3403001 	movt	r3, #1
   144dc:	e5832000 	str	r2, [r3]
   144e0:	e12fff1e 	bx	lr

000144e4 <__aeabi_ldivmod>:
   144e4:	b97b      	cbnz	r3, 14506 <__aeabi_ldivmod+0x22>
   144e6:	b972      	cbnz	r2, 14506 <__aeabi_ldivmod+0x22>
   144e8:	2900      	cmp	r1, #0
   144ea:	bfbe      	ittt	lt
   144ec:	2000      	movlt	r0, #0
   144ee:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   144f2:	e006      	blt.n	14502 <__aeabi_ldivmod+0x1e>
   144f4:	bf08      	it	eq
   144f6:	2800      	cmpeq	r0, #0
   144f8:	bf1c      	itt	ne
   144fa:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   144fe:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14502:	f000 ba0d 	b.w	14920 <__aeabi_idiv0>
   14506:	f1ad 0c08 	sub.w	ip, sp, #8
   1450a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1450e:	2900      	cmp	r1, #0
   14510:	db09      	blt.n	14526 <__aeabi_ldivmod+0x42>
   14512:	2b00      	cmp	r3, #0
   14514:	db1a      	blt.n	1454c <__aeabi_ldivmod+0x68>
   14516:	f000 f84d 	bl	145b4 <__udivmoddi4>
   1451a:	f8dd e004 	ldr.w	lr, [sp, #4]
   1451e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14522:	b004      	add	sp, #16
   14524:	4770      	bx	lr
   14526:	4240      	negs	r0, r0
   14528:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   1452c:	2b00      	cmp	r3, #0
   1452e:	db1b      	blt.n	14568 <__aeabi_ldivmod+0x84>
   14530:	f000 f840 	bl	145b4 <__udivmoddi4>
   14534:	f8dd e004 	ldr.w	lr, [sp, #4]
   14538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1453c:	b004      	add	sp, #16
   1453e:	4240      	negs	r0, r0
   14540:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14544:	4252      	negs	r2, r2
   14546:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1454a:	4770      	bx	lr
   1454c:	4252      	negs	r2, r2
   1454e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14552:	f000 f82f 	bl	145b4 <__udivmoddi4>
   14556:	f8dd e004 	ldr.w	lr, [sp, #4]
   1455a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1455e:	b004      	add	sp, #16
   14560:	4240      	negs	r0, r0
   14562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14566:	4770      	bx	lr
   14568:	4252      	negs	r2, r2
   1456a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1456e:	f000 f821 	bl	145b4 <__udivmoddi4>
   14572:	f8dd e004 	ldr.w	lr, [sp, #4]
   14576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1457a:	b004      	add	sp, #16
   1457c:	4252      	negs	r2, r2
   1457e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   14582:	4770      	bx	lr

00014584 <__aeabi_uldivmod>:
   14584:	b953      	cbnz	r3, 1459c <__aeabi_uldivmod+0x18>
   14586:	b94a      	cbnz	r2, 1459c <__aeabi_uldivmod+0x18>
   14588:	2900      	cmp	r1, #0
   1458a:	bf08      	it	eq
   1458c:	2800      	cmpeq	r0, #0
   1458e:	bf1c      	itt	ne
   14590:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   14594:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14598:	f000 b9c2 	b.w	14920 <__aeabi_idiv0>
   1459c:	f1ad 0c08 	sub.w	ip, sp, #8
   145a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   145a4:	f000 f806 	bl	145b4 <__udivmoddi4>
   145a8:	f8dd e004 	ldr.w	lr, [sp, #4]
   145ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   145b0:	b004      	add	sp, #16
   145b2:	4770      	bx	lr

000145b4 <__udivmoddi4>:
   145b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145b8:	460d      	mov	r5, r1
   145ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
   145bc:	4604      	mov	r4, r0
   145be:	460f      	mov	r7, r1
   145c0:	2b00      	cmp	r3, #0
   145c2:	d154      	bne.n	1466e <__udivmoddi4+0xba>
   145c4:	4694      	mov	ip, r2
   145c6:	428a      	cmp	r2, r1
   145c8:	d971      	bls.n	146ae <__udivmoddi4+0xfa>
   145ca:	fab2 f382 	clz	r3, r2
   145ce:	b143      	cbz	r3, 145e2 <__udivmoddi4+0x2e>
   145d0:	f1c3 0120 	rsb	r1, r3, #32
   145d4:	409f      	lsls	r7, r3
   145d6:	fa02 fc03 	lsl.w	ip, r2, r3
   145da:	fa20 f101 	lsr.w	r1, r0, r1
   145de:	430f      	orrs	r7, r1
   145e0:	409c      	lsls	r4, r3
   145e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   145e6:	fa1f f58c 	uxth.w	r5, ip
   145ea:	0c22      	lsrs	r2, r4, #16
   145ec:	fbb7 f1fe 	udiv	r1, r7, lr
   145f0:	fb0e 7711 	mls	r7, lr, r1, r7
   145f4:	fb01 f005 	mul.w	r0, r1, r5
   145f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   145fc:	4290      	cmp	r0, r2
   145fe:	d90f      	bls.n	14620 <__udivmoddi4+0x6c>
   14600:	eb1c 0202 	adds.w	r2, ip, r2
   14604:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   14608:	bf34      	ite	cc
   1460a:	2701      	movcc	r7, #1
   1460c:	2700      	movcs	r7, #0
   1460e:	4290      	cmp	r0, r2
   14610:	bf94      	ite	ls
   14612:	2700      	movls	r7, #0
   14614:	f007 0701 	andhi.w	r7, r7, #1
   14618:	2f00      	cmp	r7, #0
   1461a:	f040 8177 	bne.w	1490c <__udivmoddi4+0x358>
   1461e:	4641      	mov	r1, r8
   14620:	1a12      	subs	r2, r2, r0
   14622:	b2a4      	uxth	r4, r4
   14624:	fbb2 f0fe 	udiv	r0, r2, lr
   14628:	fb0e 2210 	mls	r2, lr, r0, r2
   1462c:	fb00 f505 	mul.w	r5, r0, r5
   14630:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   14634:	42a5      	cmp	r5, r4
   14636:	d90f      	bls.n	14658 <__udivmoddi4+0xa4>
   14638:	eb1c 0404 	adds.w	r4, ip, r4
   1463c:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
   14640:	bf34      	ite	cc
   14642:	2201      	movcc	r2, #1
   14644:	2200      	movcs	r2, #0
   14646:	42a5      	cmp	r5, r4
   14648:	bf94      	ite	ls
   1464a:	2200      	movls	r2, #0
   1464c:	f002 0201 	andhi.w	r2, r2, #1
   14650:	2a00      	cmp	r2, #0
   14652:	f040 8158 	bne.w	14906 <__udivmoddi4+0x352>
   14656:	4638      	mov	r0, r7
   14658:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1465c:	1b64      	subs	r4, r4, r5
   1465e:	2100      	movs	r1, #0
   14660:	b11e      	cbz	r6, 1466a <__udivmoddi4+0xb6>
   14662:	40dc      	lsrs	r4, r3
   14664:	2300      	movs	r3, #0
   14666:	e9c6 4300 	strd	r4, r3, [r6]
   1466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1466e:	428b      	cmp	r3, r1
   14670:	d908      	bls.n	14684 <__udivmoddi4+0xd0>
   14672:	2e00      	cmp	r6, #0
   14674:	f000 812e 	beq.w	148d4 <__udivmoddi4+0x320>
   14678:	2100      	movs	r1, #0
   1467a:	6030      	str	r0, [r6, #0]
   1467c:	6075      	str	r5, [r6, #4]
   1467e:	4608      	mov	r0, r1
   14680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14684:	fab3 f183 	clz	r1, r3
   14688:	2900      	cmp	r1, #0
   1468a:	d15a      	bne.n	14742 <__udivmoddi4+0x18e>
   1468c:	42ab      	cmp	r3, r5
   1468e:	bf28      	it	cs
   14690:	4282      	cmpcs	r2, r0
   14692:	bf88      	it	hi
   14694:	4608      	movhi	r0, r1
   14696:	d805      	bhi.n	146a4 <__udivmoddi4+0xf0>
   14698:	1aa5      	subs	r5, r4, r2
   1469a:	eb67 0303 	sbc.w	r3, r7, r3
   1469e:	2001      	movs	r0, #1
   146a0:	461f      	mov	r7, r3
   146a2:	462c      	mov	r4, r5
   146a4:	2e00      	cmp	r6, #0
   146a6:	d0e0      	beq.n	1466a <__udivmoddi4+0xb6>
   146a8:	e9c6 4700 	strd	r4, r7, [r6]
   146ac:	e7dd      	b.n	1466a <__udivmoddi4+0xb6>
   146ae:	b902      	cbnz	r2, 146b2 <__udivmoddi4+0xfe>
   146b0:	deff      	udf	#255	; 0xff
   146b2:	fab2 f382 	clz	r3, r2
   146b6:	2b00      	cmp	r3, #0
   146b8:	f040 80bb 	bne.w	14832 <__udivmoddi4+0x27e>
   146bc:	1a8d      	subs	r5, r1, r2
   146be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   146c2:	b297      	uxth	r7, r2
   146c4:	2101      	movs	r1, #1
   146c6:	fbb5 f2fe 	udiv	r2, r5, lr
   146ca:	fb0e 5012 	mls	r0, lr, r2, r5
   146ce:	0c25      	lsrs	r5, r4, #16
   146d0:	fb07 f802 	mul.w	r8, r7, r2
   146d4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   146d8:	45a8      	cmp	r8, r5
   146da:	d911      	bls.n	14700 <__udivmoddi4+0x14c>
   146dc:	eb1c 0505 	adds.w	r5, ip, r5
   146e0:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   146e4:	bf2c      	ite	cs
   146e6:	2001      	movcs	r0, #1
   146e8:	2000      	movcc	r0, #0
   146ea:	f080 0001 	eor.w	r0, r0, #1
   146ee:	45a8      	cmp	r8, r5
   146f0:	bf94      	ite	ls
   146f2:	2000      	movls	r0, #0
   146f4:	f000 0001 	andhi.w	r0, r0, #1
   146f8:	2800      	cmp	r0, #0
   146fa:	f040 810d 	bne.w	14918 <__udivmoddi4+0x364>
   146fe:	464a      	mov	r2, r9
   14700:	eba5 0508 	sub.w	r5, r5, r8
   14704:	b2a4      	uxth	r4, r4
   14706:	fbb5 f0fe 	udiv	r0, r5, lr
   1470a:	fb0e 5510 	mls	r5, lr, r0, r5
   1470e:	fb00 f707 	mul.w	r7, r0, r7
   14712:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   14716:	42a7      	cmp	r7, r4
   14718:	d90f      	bls.n	1473a <__udivmoddi4+0x186>
   1471a:	eb1c 0404 	adds.w	r4, ip, r4
   1471e:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   14722:	bf34      	ite	cc
   14724:	2501      	movcc	r5, #1
   14726:	2500      	movcs	r5, #0
   14728:	42a7      	cmp	r7, r4
   1472a:	bf94      	ite	ls
   1472c:	2500      	movls	r5, #0
   1472e:	f005 0501 	andhi.w	r5, r5, #1
   14732:	2d00      	cmp	r5, #0
   14734:	f040 80ed 	bne.w	14912 <__udivmoddi4+0x35e>
   14738:	4670      	mov	r0, lr
   1473a:	1be4      	subs	r4, r4, r7
   1473c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   14740:	e78e      	b.n	14660 <__udivmoddi4+0xac>
   14742:	f1c1 0c20 	rsb	ip, r1, #32
   14746:	408b      	lsls	r3, r1
   14748:	fa05 f701 	lsl.w	r7, r5, r1
   1474c:	fa22 f40c 	lsr.w	r4, r2, ip
   14750:	4323      	orrs	r3, r4
   14752:	fa20 f40c 	lsr.w	r4, r0, ip
   14756:	fa25 f90c 	lsr.w	r9, r5, ip
   1475a:	4327      	orrs	r7, r4
   1475c:	0c1c      	lsrs	r4, r3, #16
   1475e:	fa00 fe01 	lsl.w	lr, r0, r1
   14762:	fa1f f883 	uxth.w	r8, r3
   14766:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   1476a:	408a      	lsls	r2, r1
   1476c:	fbb9 f0f4 	udiv	r0, r9, r4
   14770:	fb04 9510 	mls	r5, r4, r0, r9
   14774:	fb00 f908 	mul.w	r9, r0, r8
   14778:	ea4a 4505 	orr.w	r5, sl, r5, lsl #16
   1477c:	45a9      	cmp	r9, r5
   1477e:	d914      	bls.n	147aa <__udivmoddi4+0x1f6>
   14780:	195d      	adds	r5, r3, r5
   14782:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
   14786:	bf2c      	ite	cs
   14788:	f04f 0a01 	movcs.w	sl, #1
   1478c:	f04f 0a00 	movcc.w	sl, #0
   14790:	f08a 0a01 	eor.w	sl, sl, #1
   14794:	45a9      	cmp	r9, r5
   14796:	bf94      	ite	ls
   14798:	f04f 0a00 	movls.w	sl, #0
   1479c:	f00a 0a01 	andhi.w	sl, sl, #1
   147a0:	f1ba 0f00 	cmp.w	sl, #0
   147a4:	f040 80a7 	bne.w	148f6 <__udivmoddi4+0x342>
   147a8:	4658      	mov	r0, fp
   147aa:	eba5 0509 	sub.w	r5, r5, r9
   147ae:	b2bf      	uxth	r7, r7
   147b0:	fbb5 f9f4 	udiv	r9, r5, r4
   147b4:	fb04 5519 	mls	r5, r4, r9, r5
   147b8:	fb09 f808 	mul.w	r8, r9, r8
   147bc:	ea47 4405 	orr.w	r4, r7, r5, lsl #16
   147c0:	45a0      	cmp	r8, r4
   147c2:	d90e      	bls.n	147e2 <__udivmoddi4+0x22e>
   147c4:	191c      	adds	r4, r3, r4
   147c6:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
   147ca:	bf34      	ite	cc
   147cc:	2501      	movcc	r5, #1
   147ce:	2500      	movcs	r5, #0
   147d0:	45a0      	cmp	r8, r4
   147d2:	bf94      	ite	ls
   147d4:	2500      	movls	r5, #0
   147d6:	f005 0501 	andhi.w	r5, r5, #1
   147da:	2d00      	cmp	r5, #0
   147dc:	f040 8084 	bne.w	148e8 <__udivmoddi4+0x334>
   147e0:	46b9      	mov	r9, r7
   147e2:	ea49 4000 	orr.w	r0, r9, r0, lsl #16
   147e6:	eba4 0408 	sub.w	r4, r4, r8
   147ea:	fba0 8502 	umull	r8, r5, r0, r2
   147ee:	4647      	mov	r7, r8
   147f0:	46a9      	mov	r9, r5
   147f2:	42ac      	cmp	r4, r5
   147f4:	d371      	bcc.n	148da <__udivmoddi4+0x326>
   147f6:	bf0c      	ite	eq
   147f8:	f04f 0a01 	moveq.w	sl, #1
   147fc:	f04f 0a00 	movne.w	sl, #0
   14800:	45c6      	cmp	lr, r8
   14802:	bf2c      	ite	cs
   14804:	f04f 0a00 	movcs.w	sl, #0
   14808:	f00a 0a01 	andcc.w	sl, sl, #1
   1480c:	f1ba 0f00 	cmp.w	sl, #0
   14810:	d163      	bne.n	148da <__udivmoddi4+0x326>
   14812:	2e00      	cmp	r6, #0
   14814:	d075      	beq.n	14902 <__udivmoddi4+0x34e>
   14816:	ebbe 0307 	subs.w	r3, lr, r7
   1481a:	eb64 0409 	sbc.w	r4, r4, r9
   1481e:	fa23 f201 	lsr.w	r2, r3, r1
   14822:	fa04 f30c 	lsl.w	r3, r4, ip
   14826:	4313      	orrs	r3, r2
   14828:	40cc      	lsrs	r4, r1
   1482a:	2100      	movs	r1, #0
   1482c:	e9c6 3400 	strd	r3, r4, [r6]
   14830:	e71b      	b.n	1466a <__udivmoddi4+0xb6>
   14832:	fa02 fc03 	lsl.w	ip, r2, r3
   14836:	f1c3 0220 	rsb	r2, r3, #32
   1483a:	4099      	lsls	r1, r3
   1483c:	40d5      	lsrs	r5, r2
   1483e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   14842:	fa20 f202 	lsr.w	r2, r0, r2
   14846:	fa1f f78c 	uxth.w	r7, ip
   1484a:	430a      	orrs	r2, r1
   1484c:	409c      	lsls	r4, r3
   1484e:	fbb5 f1fe 	udiv	r1, r5, lr
   14852:	0c10      	lsrs	r0, r2, #16
   14854:	fb0e 5511 	mls	r5, lr, r1, r5
   14858:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
   1485c:	fb01 f007 	mul.w	r0, r1, r7
   14860:	42a8      	cmp	r0, r5
   14862:	d914      	bls.n	1488e <__udivmoddi4+0x2da>
   14864:	eb1c 0505 	adds.w	r5, ip, r5
   14868:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
   1486c:	bf2c      	ite	cs
   1486e:	f04f 0801 	movcs.w	r8, #1
   14872:	f04f 0800 	movcc.w	r8, #0
   14876:	f088 0801 	eor.w	r8, r8, #1
   1487a:	42a8      	cmp	r0, r5
   1487c:	bf94      	ite	ls
   1487e:	f04f 0800 	movls.w	r8, #0
   14882:	f008 0801 	andhi.w	r8, r8, #1
   14886:	f1b8 0f00 	cmp.w	r8, #0
   1488a:	d137      	bne.n	148fc <__udivmoddi4+0x348>
   1488c:	4649      	mov	r1, r9
   1488e:	1a28      	subs	r0, r5, r0
   14890:	b295      	uxth	r5, r2
   14892:	fbb0 f2fe 	udiv	r2, r0, lr
   14896:	fb0e 0012 	mls	r0, lr, r2, r0
   1489a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   1489e:	fb02 f007 	mul.w	r0, r2, r7
   148a2:	42a8      	cmp	r0, r5
   148a4:	d912      	bls.n	148cc <__udivmoddi4+0x318>
   148a6:	eb1c 0505 	adds.w	r5, ip, r5
   148aa:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   148ae:	bf34      	ite	cc
   148b0:	f04f 0801 	movcc.w	r8, #1
   148b4:	f04f 0800 	movcs.w	r8, #0
   148b8:	42a8      	cmp	r0, r5
   148ba:	bf94      	ite	ls
   148bc:	f04f 0800 	movls.w	r8, #0
   148c0:	f008 0801 	andhi.w	r8, r8, #1
   148c4:	f1b8 0f00 	cmp.w	r8, #0
   148c8:	d112      	bne.n	148f0 <__udivmoddi4+0x33c>
   148ca:	464a      	mov	r2, r9
   148cc:	1a2d      	subs	r5, r5, r0
   148ce:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
   148d2:	e6f8      	b.n	146c6 <__udivmoddi4+0x112>
   148d4:	4631      	mov	r1, r6
   148d6:	4630      	mov	r0, r6
   148d8:	e6c7      	b.n	1466a <__udivmoddi4+0xb6>
   148da:	ebb8 0702 	subs.w	r7, r8, r2
   148de:	eb65 0203 	sbc.w	r2, r5, r3
   148e2:	3801      	subs	r0, #1
   148e4:	4691      	mov	r9, r2
   148e6:	e794      	b.n	14812 <__udivmoddi4+0x25e>
   148e8:	f1a9 0902 	sub.w	r9, r9, #2
   148ec:	441c      	add	r4, r3
   148ee:	e778      	b.n	147e2 <__udivmoddi4+0x22e>
   148f0:	3a02      	subs	r2, #2
   148f2:	4465      	add	r5, ip
   148f4:	e7ea      	b.n	148cc <__udivmoddi4+0x318>
   148f6:	3802      	subs	r0, #2
   148f8:	441d      	add	r5, r3
   148fa:	e756      	b.n	147aa <__udivmoddi4+0x1f6>
   148fc:	3902      	subs	r1, #2
   148fe:	4465      	add	r5, ip
   14900:	e7c5      	b.n	1488e <__udivmoddi4+0x2da>
   14902:	4631      	mov	r1, r6
   14904:	e6b1      	b.n	1466a <__udivmoddi4+0xb6>
   14906:	4464      	add	r4, ip
   14908:	3802      	subs	r0, #2
   1490a:	e6a5      	b.n	14658 <__udivmoddi4+0xa4>
   1490c:	3902      	subs	r1, #2
   1490e:	4462      	add	r2, ip
   14910:	e686      	b.n	14620 <__udivmoddi4+0x6c>
   14912:	4464      	add	r4, ip
   14914:	3802      	subs	r0, #2
   14916:	e710      	b.n	1473a <__udivmoddi4+0x186>
   14918:	3a02      	subs	r2, #2
   1491a:	4465      	add	r5, ip
   1491c:	e6f0      	b.n	14700 <__udivmoddi4+0x14c>
   1491e:	bf00      	nop

00014920 <__aeabi_idiv0>:
   14920:	4770      	bx	lr
   14922:	bf00      	nop
